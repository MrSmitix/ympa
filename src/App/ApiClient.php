<?php
declare(strict_types=1);

namespace App;

use Articus\DataTransfer as DT;
use OpenAPIGenerator\APIClient as OAGAC;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Message\ResponseInterface;

/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 * The version of the OpenAPI document: LATEST
 */
class ApiClient extends OAGAC\AbstractApiClient
{
    //region acceptOrderCancellation
    /**
     * Отмена заказа покупателем
     * @param \App\DTO\AcceptOrderCancellationParameterData $parameters
     * @param \App\DTO\AcceptOrderCancellationRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function acceptOrderCancellationRaw(
        \App\DTO\AcceptOrderCancellationParameterData $parameters,
        \App\DTO\AcceptOrderCancellationRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/cancellation/accept', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отмена заказа покупателем
     * @param \App\DTO\AcceptOrderCancellationParameterData $parameters
     * @param \App\DTO\AcceptOrderCancellationRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function acceptOrderCancellation(
        \App\DTO\AcceptOrderCancellationParameterData $parameters,
        \App\DTO\AcceptOrderCancellationRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->acceptOrderCancellationRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ на отмену заказа был успешно передан. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отмена заказа покупателем
     * @param \App\DTO\AcceptOrderCancellationParameterData $parameters
     * @param \App\DTO\AcceptOrderCancellationRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function acceptOrderCancellationResult(
        \App\DTO\AcceptOrderCancellationParameterData $parameters,
        \App\DTO\AcceptOrderCancellationRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->acceptOrderCancellation($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region acceptOrderCancellation_0
    /**
     * Отмена заказа покупателем
     * @param \App\DTO\AcceptOrderCancellationParameterData $parameters
     * @param \App\DTO\AcceptOrderCancellationRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function acceptOrderCancellation_0Raw(
        \App\DTO\AcceptOrderCancellationParameterData $parameters,
        \App\DTO\AcceptOrderCancellationRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/cancellation/accept', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отмена заказа покупателем
     * @param \App\DTO\AcceptOrderCancellationParameterData $parameters
     * @param \App\DTO\AcceptOrderCancellationRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function acceptOrderCancellation_0(
        \App\DTO\AcceptOrderCancellationParameterData $parameters,
        \App\DTO\AcceptOrderCancellationRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->acceptOrderCancellation_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ на отмену заказа был успешно передан. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отмена заказа покупателем
     * @param \App\DTO\AcceptOrderCancellationParameterData $parameters
     * @param \App\DTO\AcceptOrderCancellationRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function acceptOrderCancellation_0Result(
        \App\DTO\AcceptOrderCancellationParameterData $parameters,
        \App\DTO\AcceptOrderCancellationRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->acceptOrderCancellation_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region addHiddenOffers
    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function addHiddenOffersRaw(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/hidden-offers', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function addHiddenOffers(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->addHiddenOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки скрытия получены и скоро вступят в силу. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function addHiddenOffersResult(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->addHiddenOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region addHiddenOffers_0
    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function addHiddenOffers_0Raw(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/hidden-offers', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function addHiddenOffers_0(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->addHiddenOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки скрытия получены и скоро вступят в силу. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function addHiddenOffers_0Result(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->addHiddenOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region addHiddenOffers_1
    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function addHiddenOffers_1Raw(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/hidden-offers', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function addHiddenOffers_1(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->addHiddenOffers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки скрытия получены и скоро вступят в силу. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function addHiddenOffers_1Result(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->addHiddenOffers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region addHiddenOffers_2
    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function addHiddenOffers_2Raw(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/hidden-offers', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function addHiddenOffers_2(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->addHiddenOffers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки скрытия получены и скоро вступят в силу. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function addHiddenOffers_2Result(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->addHiddenOffers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region addHiddenOffers_3
    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function addHiddenOffers_3Raw(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/hidden-offers', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function addHiddenOffers_3(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->addHiddenOffers_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки скрытия получены и скоро вступят в силу. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Скрытие товаров и настройки скрытия
     * @param \App\DTO\AddHiddenOffersParameterData $parameters
     * @param \App\DTO\AddHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function addHiddenOffers_3Result(
        \App\DTO\AddHiddenOffersParameterData $parameters,
        \App\DTO\AddHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->addHiddenOffers_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region addOffersToArchive
    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function addOffersToArchiveRaw(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/archive', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function addOffersToArchive(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->addOffersToArchiveRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. */
                $responseContent = new \App\DTO\AddOffersToArchiveResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\AddOffersToArchiveResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function addOffersToArchiveResult(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\AddOffersToArchiveResponse
    {
        return $this->getSuccessfulContent(...$this->addOffersToArchive($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region addOffersToArchive_0
    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function addOffersToArchive_0Raw(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/archive', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function addOffersToArchive_0(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->addOffersToArchive_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. */
                $responseContent = new \App\DTO\AddOffersToArchiveResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\AddOffersToArchiveResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function addOffersToArchive_0Result(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\AddOffersToArchiveResponse
    {
        return $this->getSuccessfulContent(...$this->addOffersToArchive_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region addOffersToArchive_1
    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function addOffersToArchive_1Raw(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/archive', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function addOffersToArchive_1(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->addOffersToArchive_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. */
                $responseContent = new \App\DTO\AddOffersToArchiveResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\AddOffersToArchiveResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function addOffersToArchive_1Result(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\AddOffersToArchiveResponse
    {
        return $this->getSuccessfulContent(...$this->addOffersToArchive_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region addOffersToArchive_2
    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function addOffersToArchive_2Raw(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/archive', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function addOffersToArchive_2(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->addOffersToArchive_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. */
                $responseContent = new \App\DTO\AddOffersToArchiveResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\AddOffersToArchiveResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function addOffersToArchive_2Result(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\AddOffersToArchiveResponse
    {
        return $this->getSuccessfulContent(...$this->addOffersToArchive_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region addOffersToArchive_3
    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function addOffersToArchive_3Raw(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/archive', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function addOffersToArchive_3(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->addOffersToArchive_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. */
                $responseContent = new \App\DTO\AddOffersToArchiveResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в архив
     * @param \App\DTO\AddOffersToArchiveParameterData $parameters
     * @param \App\DTO\AddOffersToArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\AddOffersToArchiveResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function addOffersToArchive_3Result(
        \App\DTO\AddOffersToArchiveParameterData $parameters,
        \App\DTO\AddOffersToArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\AddOffersToArchiveResponse
    {
        return $this->getSuccessfulContent(...$this->addOffersToArchive_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region calculateTariffs
    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function calculateTariffsRaw(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/tariffs/calculate', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function calculateTariffs(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->calculateTariffsRaw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Стоимость услуг. */
                $responseContent = new \App\DTO\CalculateTariffsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CalculateTariffsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function calculateTariffsResult(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CalculateTariffsResponse
    {
        return $this->getSuccessfulContent(...$this->calculateTariffs($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region calculateTariffs_0
    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function calculateTariffs_0Raw(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/tariffs/calculate', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function calculateTariffs_0(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->calculateTariffs_0Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Стоимость услуг. */
                $responseContent = new \App\DTO\CalculateTariffsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CalculateTariffsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function calculateTariffs_0Result(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CalculateTariffsResponse
    {
        return $this->getSuccessfulContent(...$this->calculateTariffs_0($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region calculateTariffs_1
    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function calculateTariffs_1Raw(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/tariffs/calculate', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function calculateTariffs_1(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->calculateTariffs_1Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Стоимость услуг. */
                $responseContent = new \App\DTO\CalculateTariffsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CalculateTariffsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function calculateTariffs_1Result(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CalculateTariffsResponse
    {
        return $this->getSuccessfulContent(...$this->calculateTariffs_1($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region calculateTariffs_2
    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function calculateTariffs_2Raw(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/tariffs/calculate', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function calculateTariffs_2(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->calculateTariffs_2Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Стоимость услуг. */
                $responseContent = new \App\DTO\CalculateTariffsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CalculateTariffsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function calculateTariffs_2Result(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CalculateTariffsResponse
    {
        return $this->getSuccessfulContent(...$this->calculateTariffs_2($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region calculateTariffs_3
    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function calculateTariffs_3Raw(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/tariffs/calculate', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function calculateTariffs_3(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->calculateTariffs_3Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Стоимость услуг. */
                $responseContent = new \App\DTO\CalculateTariffsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Калькулятор стоимости услуг
     * @param \App\DTO\CalculateTariffsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CalculateTariffsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function calculateTariffs_3Result(
        \App\DTO\CalculateTariffsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CalculateTariffsResponse
    {
        return $this->getSuccessfulContent(...$this->calculateTariffs_3($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmBusinessPrices
    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmBusinessPricesRaw(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/price-quarantine/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmBusinessPrices(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmBusinessPricesRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что цены подтверждены. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmBusinessPricesResult(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmBusinessPrices($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmBusinessPrices_0
    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmBusinessPrices_0Raw(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/price-quarantine/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmBusinessPrices_0(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmBusinessPrices_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что цены подтверждены. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmBusinessPrices_0Result(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmBusinessPrices_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmBusinessPrices_1
    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmBusinessPrices_1Raw(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/price-quarantine/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmBusinessPrices_1(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmBusinessPrices_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что цены подтверждены. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmBusinessPrices_1Result(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmBusinessPrices_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmBusinessPrices_2
    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmBusinessPrices_2Raw(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/price-quarantine/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmBusinessPrices_2(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmBusinessPrices_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что цены подтверждены. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmBusinessPrices_2Result(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmBusinessPrices_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmBusinessPrices_3
    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmBusinessPrices_3Raw(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/price-quarantine/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmBusinessPrices_3(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmBusinessPrices_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что цены подтверждены. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из карантина по цене в кабинете
     * @param \App\DTO\ConfirmBusinessPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmBusinessPrices_3Result(
        \App\DTO\ConfirmBusinessPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmBusinessPrices_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmCampaignPrices
    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmCampaignPricesRaw(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/price-quarantine/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmCampaignPrices(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmCampaignPricesRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что цены подтверждены. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmCampaignPricesResult(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmCampaignPrices($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmCampaignPrices_0
    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmCampaignPrices_0Raw(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/price-quarantine/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmCampaignPrices_0(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmCampaignPrices_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что цены подтверждены. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmCampaignPrices_0Result(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmCampaignPrices_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmCampaignPrices_1
    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmCampaignPrices_1Raw(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/price-quarantine/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmCampaignPrices_1(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmCampaignPrices_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что цены подтверждены. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmCampaignPrices_1Result(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmCampaignPrices_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmCampaignPrices_2
    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmCampaignPrices_2Raw(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/price-quarantine/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmCampaignPrices_2(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmCampaignPrices_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что цены подтверждены. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmCampaignPrices_2Result(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmCampaignPrices_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmCampaignPrices_3
    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmCampaignPrices_3Raw(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/price-quarantine/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmCampaignPrices_3(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmCampaignPrices_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что цены подтверждены. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из карантина по цене в магазине
     * @param \App\DTO\ConfirmCampaignPricesParameterData $parameters
     * @param \App\DTO\ConfirmPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmCampaignPrices_3Result(
        \App\DTO\ConfirmCampaignPricesParameterData $parameters,
        \App\DTO\ConfirmPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmCampaignPrices_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmShipment
    /**
     * Подтверждение отгрузки
     * @param \App\DTO\ConfirmShipmentParameterData $parameters
     * @param \App\DTO\ConfirmShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmShipmentRaw(
        \App\DTO\ConfirmShipmentParameterData $parameters,
        \App\DTO\ConfirmShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Подтверждение отгрузки
     * @param \App\DTO\ConfirmShipmentParameterData $parameters
     * @param \App\DTO\ConfirmShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmShipment(
        \App\DTO\ConfirmShipmentParameterData $parameters,
        \App\DTO\ConfirmShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmShipmentRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Подтверждение отгрузки
     * @param \App\DTO\ConfirmShipmentParameterData $parameters
     * @param \App\DTO\ConfirmShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmShipmentResult(
        \App\DTO\ConfirmShipmentParameterData $parameters,
        \App\DTO\ConfirmShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmShipment($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region confirmShipment_0
    /**
     * Подтверждение отгрузки
     * @param \App\DTO\ConfirmShipmentParameterData $parameters
     * @param \App\DTO\ConfirmShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function confirmShipment_0Raw(
        \App\DTO\ConfirmShipmentParameterData $parameters,
        \App\DTO\ConfirmShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Подтверждение отгрузки
     * @param \App\DTO\ConfirmShipmentParameterData $parameters
     * @param \App\DTO\ConfirmShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function confirmShipment_0(
        \App\DTO\ConfirmShipmentParameterData $parameters,
        \App\DTO\ConfirmShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->confirmShipment_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Подтверждение отгрузки
     * @param \App\DTO\ConfirmShipmentParameterData $parameters
     * @param \App\DTO\ConfirmShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function confirmShipment_0Result(
        \App\DTO\ConfirmShipmentParameterData $parameters,
        \App\DTO\ConfirmShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->confirmShipment_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region createChat
    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function createChatRaw(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/new', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function createChat(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->createChatRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все получилось: чат создан. */
                $responseContent = new \App\DTO\CreateChatResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CreateChatResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function createChatResult(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CreateChatResponse
    {
        return $this->getSuccessfulContent(...$this->createChat($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region createChat_0
    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function createChat_0Raw(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/new', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function createChat_0(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->createChat_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все получилось: чат создан. */
                $responseContent = new \App\DTO\CreateChatResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CreateChatResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function createChat_0Result(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CreateChatResponse
    {
        return $this->getSuccessfulContent(...$this->createChat_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region createChat_1
    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function createChat_1Raw(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/new', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function createChat_1(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->createChat_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все получилось: чат создан. */
                $responseContent = new \App\DTO\CreateChatResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CreateChatResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function createChat_1Result(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CreateChatResponse
    {
        return $this->getSuccessfulContent(...$this->createChat_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region createChat_2
    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function createChat_2Raw(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/new', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function createChat_2(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->createChat_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все получилось: чат создан. */
                $responseContent = new \App\DTO\CreateChatResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CreateChatResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function createChat_2Result(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CreateChatResponse
    {
        return $this->getSuccessfulContent(...$this->createChat_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region createChat_3
    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function createChat_3Raw(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/new', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function createChat_3(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->createChat_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все получилось: чат создан. */
                $responseContent = new \App\DTO\CreateChatResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Создание нового чата с покупателем
     * @param \App\DTO\CreateChatParameterData $parameters
     * @param \App\DTO\CreateChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CreateChatResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function createChat_3Result(
        \App\DTO\CreateChatParameterData $parameters,
        \App\DTO\CreateChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CreateChatResponse
    {
        return $this->getSuccessfulContent(...$this->createChat_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region createOutlet
    /**
     * Создание точки продаж
     * @param \App\DTO\CreateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function createOutletRaw(
        \App\DTO\CreateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/outlets', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Создание точки продаж
     * @param \App\DTO\CreateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function createOutlet(
        \App\DTO\CreateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->createOutletRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о созданной точке продаж. */
                $responseContent = new \App\DTO\CreateOutletResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Создание точки продаж
     * @param \App\DTO\CreateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CreateOutletResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function createOutletResult(
        \App\DTO\CreateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CreateOutletResponse
    {
        return $this->getSuccessfulContent(...$this->createOutlet($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region createOutlet_0
    /**
     * Создание точки продаж
     * @param \App\DTO\CreateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function createOutlet_0Raw(
        \App\DTO\CreateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/outlets', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Создание точки продаж
     * @param \App\DTO\CreateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function createOutlet_0(
        \App\DTO\CreateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->createOutlet_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о созданной точке продаж. */
                $responseContent = new \App\DTO\CreateOutletResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Создание точки продаж
     * @param \App\DTO\CreateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\CreateOutletResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function createOutlet_0Result(
        \App\DTO\CreateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\CreateOutletResponse
    {
        return $this->getSuccessfulContent(...$this->createOutlet_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteCampaignOffers
    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteCampaignOffersRaw(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteCampaignOffers(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteCampaignOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине. */
                $responseContent = new \App\DTO\DeleteCampaignOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteCampaignOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteCampaignOffersResult(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteCampaignOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deleteCampaignOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteCampaignOffers_0
    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteCampaignOffers_0Raw(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteCampaignOffers_0(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteCampaignOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине. */
                $responseContent = new \App\DTO\DeleteCampaignOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteCampaignOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteCampaignOffers_0Result(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteCampaignOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deleteCampaignOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteCampaignOffers_1
    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteCampaignOffers_1Raw(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteCampaignOffers_1(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteCampaignOffers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине. */
                $responseContent = new \App\DTO\DeleteCampaignOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteCampaignOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteCampaignOffers_1Result(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteCampaignOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deleteCampaignOffers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteCampaignOffers_2
    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteCampaignOffers_2Raw(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteCampaignOffers_2(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteCampaignOffers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине. */
                $responseContent = new \App\DTO\DeleteCampaignOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteCampaignOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteCampaignOffers_2Result(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteCampaignOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deleteCampaignOffers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteCampaignOffers_3
    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteCampaignOffers_3Raw(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteCampaignOffers_3(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteCampaignOffers_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине. */
                $responseContent = new \App\DTO\DeleteCampaignOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из ассортимента магазина
     * @param \App\DTO\DeleteCampaignOffersParameterData $parameters
     * @param \App\DTO\DeleteCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteCampaignOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteCampaignOffers_3Result(
        \App\DTO\DeleteCampaignOffersParameterData $parameters,
        \App\DTO\DeleteCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteCampaignOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deleteCampaignOffers_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteGoodsFeedbackComment
    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteGoodsFeedbackCommentRaw(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteGoodsFeedbackComment(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteGoodsFeedbackCommentRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteGoodsFeedbackCommentResult(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteGoodsFeedbackComment($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteGoodsFeedbackComment_0
    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteGoodsFeedbackComment_0Raw(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteGoodsFeedbackComment_0(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteGoodsFeedbackComment_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteGoodsFeedbackComment_0Result(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteGoodsFeedbackComment_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteGoodsFeedbackComment_1
    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteGoodsFeedbackComment_1Raw(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteGoodsFeedbackComment_1(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteGoodsFeedbackComment_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteGoodsFeedbackComment_1Result(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteGoodsFeedbackComment_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteGoodsFeedbackComment_2
    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteGoodsFeedbackComment_2Raw(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteGoodsFeedbackComment_2(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteGoodsFeedbackComment_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteGoodsFeedbackComment_2Result(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteGoodsFeedbackComment_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteGoodsFeedbackComment_3
    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteGoodsFeedbackComment_3Raw(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteGoodsFeedbackComment_3(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteGoodsFeedbackComment_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление комментария к отзыву
     * @param \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteGoodsFeedbackComment_3Result(
        \App\DTO\DeleteGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\DeleteGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteGoodsFeedbackComment_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteHiddenOffers
    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteHiddenOffersRaw(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/hidden-offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteHiddenOffers(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteHiddenOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Показ товаров возобновлен. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteHiddenOffersResult(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteHiddenOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteHiddenOffers_0
    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteHiddenOffers_0Raw(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/hidden-offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteHiddenOffers_0(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteHiddenOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Показ товаров возобновлен. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteHiddenOffers_0Result(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteHiddenOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteHiddenOffers_1
    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteHiddenOffers_1Raw(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/hidden-offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteHiddenOffers_1(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteHiddenOffers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Показ товаров возобновлен. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteHiddenOffers_1Result(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteHiddenOffers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteHiddenOffers_2
    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteHiddenOffers_2Raw(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/hidden-offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteHiddenOffers_2(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteHiddenOffers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Показ товаров возобновлен. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteHiddenOffers_2Result(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteHiddenOffers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteHiddenOffers_3
    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteHiddenOffers_3Raw(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/hidden-offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteHiddenOffers_3(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteHiddenOffers_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Показ товаров возобновлен. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Возобновление показа товаров
     * @param \App\DTO\DeleteHiddenOffersParameterData $parameters
     * @param \App\DTO\DeleteHiddenOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteHiddenOffers_3Result(
        \App\DTO\DeleteHiddenOffersParameterData $parameters,
        \App\DTO\DeleteHiddenOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteHiddenOffers_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteOffers
    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOffersRaw(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOffers(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине. */
                $responseContent = new \App\DTO\DeleteOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOffersResult(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteOffersFromArchive
    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOffersFromArchiveRaw(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/unarchive', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOffersFromArchive(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOffersFromArchiveRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. */
                $responseContent = new \App\DTO\DeleteOffersFromArchiveResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteOffersFromArchiveResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOffersFromArchiveResult(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteOffersFromArchiveResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOffersFromArchive($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteOffersFromArchive_0
    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOffersFromArchive_0Raw(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/unarchive', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOffersFromArchive_0(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOffersFromArchive_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. */
                $responseContent = new \App\DTO\DeleteOffersFromArchiveResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteOffersFromArchiveResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOffersFromArchive_0Result(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteOffersFromArchiveResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOffersFromArchive_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteOffersFromArchive_1
    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOffersFromArchive_1Raw(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/unarchive', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOffersFromArchive_1(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOffersFromArchive_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. */
                $responseContent = new \App\DTO\DeleteOffersFromArchiveResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteOffersFromArchiveResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOffersFromArchive_1Result(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteOffersFromArchiveResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOffersFromArchive_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteOffersFromArchive_2
    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOffersFromArchive_2Raw(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/unarchive', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOffersFromArchive_2(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOffersFromArchive_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. */
                $responseContent = new \App\DTO\DeleteOffersFromArchiveResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteOffersFromArchiveResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOffersFromArchive_2Result(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteOffersFromArchiveResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOffersFromArchive_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteOffersFromArchive_3
    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOffersFromArchive_3Raw(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/unarchive', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOffersFromArchive_3(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOffersFromArchive_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. */
                $responseContent = new \App\DTO\DeleteOffersFromArchiveResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из архива
     * @param \App\DTO\DeleteOffersFromArchiveParameterData $parameters
     * @param \App\DTO\DeleteOffersFromArchiveRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteOffersFromArchiveResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOffersFromArchive_3Result(
        \App\DTO\DeleteOffersFromArchiveParameterData $parameters,
        \App\DTO\DeleteOffersFromArchiveRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteOffersFromArchiveResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOffersFromArchive_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteOffers_0
    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOffers_0Raw(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOffers_0(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине. */
                $responseContent = new \App\DTO\DeleteOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOffers_0Result(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteOffers_1
    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOffers_1Raw(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOffers_1(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOffers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине. */
                $responseContent = new \App\DTO\DeleteOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOffers_1Result(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOffers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteOffers_2
    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOffers_2Raw(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOffers_2(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOffers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине. */
                $responseContent = new \App\DTO\DeleteOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOffers_2Result(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOffers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteOffers_3
    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOffers_3Raw(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOffers_3(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOffers_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине. */
                $responseContent = new \App\DTO\DeleteOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из каталога
     * @param \App\DTO\DeleteOffersParameterData $parameters
     * @param \App\DTO\DeleteOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeleteOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOffers_3Result(
        \App\DTO\DeleteOffersParameterData $parameters,
        \App\DTO\DeleteOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeleteOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOffers_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deleteOutlet
    /**
     * Удаление точки продаж
     * @param \App\DTO\DeleteOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOutletRaw(
        \App\DTO\DeleteOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('DELETE', '/campaigns/{campaignId}/outlets/{outletId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление точки продаж
     * @param \App\DTO\DeleteOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOutlet(
        \App\DTO\DeleteOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOutletRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление точки продаж
     * @param \App\DTO\DeleteOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOutletResult(
        \App\DTO\DeleteOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOutlet($parameters, $security, $responseMediaType));
    }
    //endregion

    //region deleteOutletLicenses
    /**
     * Удаление лицензий для точек продаж
     * @param \App\DTO\DeleteOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOutletLicensesRaw(
        \App\DTO\DeleteOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('DELETE', '/campaigns/{campaignId}/outlets/licenses', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление лицензий для точек продаж
     * @param \App\DTO\DeleteOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOutletLicenses(
        \App\DTO\DeleteOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOutletLicensesRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление лицензий для точек продаж
     * @param \App\DTO\DeleteOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOutletLicensesResult(
        \App\DTO\DeleteOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOutletLicenses($parameters, $security, $responseMediaType));
    }
    //endregion

    //region deleteOutletLicenses_0
    /**
     * Удаление лицензий для точек продаж
     * @param \App\DTO\DeleteOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOutletLicenses_0Raw(
        \App\DTO\DeleteOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('DELETE', '/campaigns/{campaignId}/outlets/licenses', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление лицензий для точек продаж
     * @param \App\DTO\DeleteOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOutletLicenses_0(
        \App\DTO\DeleteOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOutletLicenses_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление лицензий для точек продаж
     * @param \App\DTO\DeleteOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOutletLicenses_0Result(
        \App\DTO\DeleteOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOutletLicenses_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region deleteOutlet_0
    /**
     * Удаление точки продаж
     * @param \App\DTO\DeleteOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deleteOutlet_0Raw(
        \App\DTO\DeleteOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('DELETE', '/campaigns/{campaignId}/outlets/{outletId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление точки продаж
     * @param \App\DTO\DeleteOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deleteOutlet_0(
        \App\DTO\DeleteOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deleteOutlet_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление точки продаж
     * @param \App\DTO\DeleteOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deleteOutlet_0Result(
        \App\DTO\DeleteOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->deleteOutlet_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region deletePromoOffers
    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deletePromoOffersRaw(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deletePromoOffers(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deletePromoOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Результат удаления товаров из акции. */
                $responseContent = new \App\DTO\DeletePromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeletePromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deletePromoOffersResult(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeletePromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deletePromoOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deletePromoOffers_0
    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deletePromoOffers_0Raw(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deletePromoOffers_0(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deletePromoOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Результат удаления товаров из акции. */
                $responseContent = new \App\DTO\DeletePromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeletePromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deletePromoOffers_0Result(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeletePromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deletePromoOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deletePromoOffers_1
    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deletePromoOffers_1Raw(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deletePromoOffers_1(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deletePromoOffers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Результат удаления товаров из акции. */
                $responseContent = new \App\DTO\DeletePromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeletePromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deletePromoOffers_1Result(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeletePromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deletePromoOffers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deletePromoOffers_2
    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deletePromoOffers_2Raw(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deletePromoOffers_2(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deletePromoOffers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Результат удаления товаров из акции. */
                $responseContent = new \App\DTO\DeletePromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeletePromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deletePromoOffers_2Result(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeletePromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deletePromoOffers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region deletePromoOffers_3
    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function deletePromoOffers_3Raw(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers/delete', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function deletePromoOffers_3(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->deletePromoOffers_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Результат удаления товаров из акции. */
                $responseContent = new \App\DTO\DeletePromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товаров из акции
     * @param \App\DTO\DeletePromoOffersParameterData $parameters
     * @param \App\DTO\DeletePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\DeletePromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function deletePromoOffers_3Result(
        \App\DTO\DeletePromoOffersParameterData $parameters,
        \App\DTO\DeletePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\DeletePromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->deletePromoOffers_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region downloadShipmentAct
    /**
     * Получение акта приема-передачи
     * @param \App\DTO\DownloadShipmentActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentActRaw(
        \App\DTO\DownloadShipmentActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение акта приема-передачи
     * @param \App\DTO\DownloadShipmentActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentAct(
        \App\DTO\DownloadShipmentActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->downloadShipmentActRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Акт приема-передачи для отгрузки в формате PDF. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение акта приема-передачи
     * @param \App\DTO\DownloadShipmentActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentActResult(
        \App\DTO\DownloadShipmentActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentAct($parameters, $security, $responseMediaType));
    }
    //endregion

    //region downloadShipmentAct_0
    /**
     * Получение акта приема-передачи
     * @param \App\DTO\DownloadShipmentActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentAct_0Raw(
        \App\DTO\DownloadShipmentActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение акта приема-передачи
     * @param \App\DTO\DownloadShipmentActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentAct_0(
        \App\DTO\DownloadShipmentActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->downloadShipmentAct_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Акт приема-передачи для отгрузки в формате PDF. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение акта приема-передачи
     * @param \App\DTO\DownloadShipmentActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentAct_0Result(
        \App\DTO\DownloadShipmentActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentAct_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region downloadShipmentDiscrepancyAct
    /**
     * Получение акта расхождений
     * @param \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentDiscrepancyActRaw(
        \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение акта расхождений
     * @param \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentDiscrepancyAct(
        \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): array
    {
        $response = $this->downloadShipmentDiscrepancyActRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Акт расхождений в формате XLSX. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение акта расхождений
     * @param \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentDiscrepancyActResult(
        \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentDiscrepancyAct($parameters, $security, $responseMediaType));
    }
    //endregion

    //region downloadShipmentDiscrepancyAct_0
    /**
     * Получение акта расхождений
     * @param \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentDiscrepancyAct_0Raw(
        \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение акта расхождений
     * @param \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentDiscrepancyAct_0(
        \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): array
    {
        $response = $this->downloadShipmentDiscrepancyAct_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Акт расхождений в формате XLSX. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение акта расхождений
     * @param \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentDiscrepancyAct_0Result(
        \App\DTO\DownloadShipmentDiscrepancyActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentDiscrepancyAct_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region downloadShipmentInboundAct
    /**
     * Получение фактического акта приема-передачи
     * @param \App\DTO\DownloadShipmentInboundActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentInboundActRaw(
        \App\DTO\DownloadShipmentInboundActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение фактического акта приема-передачи
     * @param \App\DTO\DownloadShipmentInboundActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentInboundAct(
        \App\DTO\DownloadShipmentInboundActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->downloadShipmentInboundActRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Акт в формате PDF. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение фактического акта приема-передачи
     * @param \App\DTO\DownloadShipmentInboundActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentInboundActResult(
        \App\DTO\DownloadShipmentInboundActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentInboundAct($parameters, $security, $responseMediaType));
    }
    //endregion

    //region downloadShipmentInboundAct_0
    /**
     * Получение фактического акта приема-передачи
     * @param \App\DTO\DownloadShipmentInboundActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentInboundAct_0Raw(
        \App\DTO\DownloadShipmentInboundActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение фактического акта приема-передачи
     * @param \App\DTO\DownloadShipmentInboundActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentInboundAct_0(
        \App\DTO\DownloadShipmentInboundActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->downloadShipmentInboundAct_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Акт в формате PDF. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение фактического акта приема-передачи
     * @param \App\DTO\DownloadShipmentInboundActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentInboundAct_0Result(
        \App\DTO\DownloadShipmentInboundActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentInboundAct_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region downloadShipmentPalletLabels
    /**
     * Ярлыки для доверительной приемки (FBS)
     * @param \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentPalletLabelsRaw(
        \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Ярлыки для доверительной приемки (FBS)
     * @param \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentPalletLabels(
        \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->downloadShipmentPalletLabelsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* PDF‑файл с ярлыками на все упаковки в отгрузке. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Ярлыки для доверительной приемки (FBS)
     * @param \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentPalletLabelsResult(
        \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentPalletLabels($parameters, $security, $responseMediaType));
    }
    //endregion

    //region downloadShipmentPalletLabels_0
    /**
     * Ярлыки для доверительной приемки (FBS)
     * @param \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentPalletLabels_0Raw(
        \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Ярлыки для доверительной приемки (FBS)
     * @param \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentPalletLabels_0(
        \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->downloadShipmentPalletLabels_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* PDF‑файл с ярлыками на все упаковки в отгрузке. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Ярлыки для доверительной приемки (FBS)
     * @param \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentPalletLabels_0Result(
        \App\DTO\DownloadShipmentPalletLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentPalletLabels_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region downloadShipmentReceptionTransferAct
    /**
     * Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
     * @param \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentReceptionTransferActRaw(
        \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/shipments/reception-transfer-act', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
     * @param \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentReceptionTransferAct(
        \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->downloadShipmentReceptionTransferActRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Акт приема-передачи в формате PDF. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
     * @param \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentReceptionTransferActResult(
        \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentReceptionTransferAct($parameters, $security, $responseMediaType));
    }
    //endregion

    //region downloadShipmentReceptionTransferAct_0
    /**
     * Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
     * @param \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentReceptionTransferAct_0Raw(
        \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/shipments/reception-transfer-act', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
     * @param \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentReceptionTransferAct_0(
        \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->downloadShipmentReceptionTransferAct_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Акт приема-передачи в формате PDF. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
     * @param \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentReceptionTransferAct_0Result(
        \App\DTO\DownloadShipmentReceptionTransferActParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentReceptionTransferAct_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region downloadShipmentTransportationWaybill
    /**
     * Получение транспортной накладной
     * @param \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentTransportationWaybillRaw(
        \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение транспортной накладной
     * @param \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentTransportationWaybill(
        \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): array
    {
        $response = $this->downloadShipmentTransportationWaybillRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Транспортная накладная в формате XLSX. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение транспортной накладной
     * @param \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentTransportationWaybillResult(
        \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentTransportationWaybill($parameters, $security, $responseMediaType));
    }
    //endregion

    //region downloadShipmentTransportationWaybill_0
    /**
     * Получение транспортной накладной
     * @param \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function downloadShipmentTransportationWaybill_0Raw(
        \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение транспортной накладной
     * @param \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function downloadShipmentTransportationWaybill_0(
        \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): array
    {
        $response = $this->downloadShipmentTransportationWaybill_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Транспортная накладная в формате XLSX. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение транспортной накладной
     * @param \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function downloadShipmentTransportationWaybill_0Result(
        \App\DTO\DownloadShipmentTransportationWaybillParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/vnd.ms-excel'
    ): string
    {
        return $this->getSuccessfulContent(...$this->downloadShipmentTransportationWaybill_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region generateBoostConsolidatedReport
    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateBoostConsolidatedReportRaw(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/boost-consolidated/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateBoostConsolidatedReport(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateBoostConsolidatedReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateBoostConsolidatedReportResult(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateBoostConsolidatedReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateBoostConsolidatedReport_0
    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateBoostConsolidatedReport_0Raw(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/boost-consolidated/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateBoostConsolidatedReport_0(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateBoostConsolidatedReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateBoostConsolidatedReport_0Result(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateBoostConsolidatedReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateBoostConsolidatedReport_1
    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateBoostConsolidatedReport_1Raw(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/boost-consolidated/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateBoostConsolidatedReport_1(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateBoostConsolidatedReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateBoostConsolidatedReport_1Result(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateBoostConsolidatedReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateBoostConsolidatedReport_2
    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateBoostConsolidatedReport_2Raw(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/boost-consolidated/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateBoostConsolidatedReport_2(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateBoostConsolidatedReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateBoostConsolidatedReport_2Result(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateBoostConsolidatedReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateBoostConsolidatedReport_3
    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateBoostConsolidatedReport_3Raw(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/boost-consolidated/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateBoostConsolidatedReport_3(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateBoostConsolidatedReport_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по бусту продаж
     * @param \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters
     * @param \App\DTO\GenerateBoostConsolidatedRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateBoostConsolidatedReport_3Result(
        \App\DTO\GenerateBoostConsolidatedReportParameterData $parameters,
        \App\DTO\GenerateBoostConsolidatedRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateBoostConsolidatedReport_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateCompetitorsPositionReport
    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateCompetitorsPositionReportRaw(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/competitors-position/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateCompetitorsPositionReport(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateCompetitorsPositionReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateCompetitorsPositionReportResult(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateCompetitorsPositionReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateCompetitorsPositionReport_0
    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateCompetitorsPositionReport_0Raw(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/competitors-position/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateCompetitorsPositionReport_0(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateCompetitorsPositionReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateCompetitorsPositionReport_0Result(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateCompetitorsPositionReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateCompetitorsPositionReport_1
    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateCompetitorsPositionReport_1Raw(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/competitors-position/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateCompetitorsPositionReport_1(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateCompetitorsPositionReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateCompetitorsPositionReport_1Result(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateCompetitorsPositionReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateCompetitorsPositionReport_2
    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateCompetitorsPositionReport_2Raw(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/competitors-position/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateCompetitorsPositionReport_2(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateCompetitorsPositionReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateCompetitorsPositionReport_2Result(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateCompetitorsPositionReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateCompetitorsPositionReport_3
    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateCompetitorsPositionReport_3Raw(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/competitors-position/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateCompetitorsPositionReport_3(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateCompetitorsPositionReport_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Конкурентная позиция»
     * @param \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters
     * @param \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateCompetitorsPositionReport_3Result(
        \App\DTO\GenerateCompetitorsPositionReportParameterData $parameters,
        \App\DTO\GenerateCompetitorsPositionReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateCompetitorsPositionReport_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsFeedbackReport
    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsFeedbackReportRaw(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-feedback/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsFeedbackReport(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsFeedbackReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsFeedbackReportResult(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsFeedbackReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsFeedbackReport_0
    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsFeedbackReport_0Raw(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-feedback/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsFeedbackReport_0(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsFeedbackReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsFeedbackReport_0Result(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsFeedbackReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsFeedbackReport_1
    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsFeedbackReport_1Raw(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-feedback/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsFeedbackReport_1(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsFeedbackReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsFeedbackReport_1Result(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsFeedbackReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsFeedbackReport_2
    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsFeedbackReport_2Raw(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-feedback/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsFeedbackReport_2(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsFeedbackReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsFeedbackReport_2Result(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsFeedbackReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsFeedbackReport_3
    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsFeedbackReport_3Raw(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-feedback/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsFeedbackReport_3(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsFeedbackReport_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по отзывам о товарах
     * @param \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsFeedbackReport_3Result(
        \App\DTO\GenerateGoodsFeedbackReportParameterData $parameters,
        \App\DTO\GenerateGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsFeedbackReport_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsMovementReport
    /**
     * Отчет по движению товаров
     * @param \App\DTO\GenerateGoodsMovementReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsMovementReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsMovementReportRaw(
        \App\DTO\GenerateGoodsMovementReportParameterData $parameters,
        \App\DTO\GenerateGoodsMovementReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-movement/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по движению товаров
     * @param \App\DTO\GenerateGoodsMovementReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsMovementReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsMovementReport(
        \App\DTO\GenerateGoodsMovementReportParameterData $parameters,
        \App\DTO\GenerateGoodsMovementReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsMovementReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по движению товаров
     * @param \App\DTO\GenerateGoodsMovementReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsMovementReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsMovementReportResult(
        \App\DTO\GenerateGoodsMovementReportParameterData $parameters,
        \App\DTO\GenerateGoodsMovementReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsMovementReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsMovementReport_0
    /**
     * Отчет по движению товаров
     * @param \App\DTO\GenerateGoodsMovementReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsMovementReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsMovementReport_0Raw(
        \App\DTO\GenerateGoodsMovementReportParameterData $parameters,
        \App\DTO\GenerateGoodsMovementReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-movement/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по движению товаров
     * @param \App\DTO\GenerateGoodsMovementReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsMovementReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsMovementReport_0(
        \App\DTO\GenerateGoodsMovementReportParameterData $parameters,
        \App\DTO\GenerateGoodsMovementReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsMovementReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по движению товаров
     * @param \App\DTO\GenerateGoodsMovementReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsMovementReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsMovementReport_0Result(
        \App\DTO\GenerateGoodsMovementReportParameterData $parameters,
        \App\DTO\GenerateGoodsMovementReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsMovementReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsRealizationReport
    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsRealizationReportRaw(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-realization/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsRealizationReport(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsRealizationReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsRealizationReportResult(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsRealizationReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsRealizationReport_0
    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsRealizationReport_0Raw(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-realization/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsRealizationReport_0(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsRealizationReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsRealizationReport_0Result(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsRealizationReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsRealizationReport_1
    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsRealizationReport_1Raw(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-realization/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsRealizationReport_1(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsRealizationReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsRealizationReport_1Result(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsRealizationReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsRealizationReport_2
    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsRealizationReport_2Raw(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-realization/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsRealizationReport_2(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsRealizationReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по реализации
     * @param \App\DTO\GenerateGoodsRealizationReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsRealizationReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsRealizationReport_2Result(
        \App\DTO\GenerateGoodsRealizationReportParameterData $parameters,
        \App\DTO\GenerateGoodsRealizationReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsRealizationReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsTurnoverReport
    /**
     * Отчет по оборачиваемости
     * @param \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsTurnoverRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsTurnoverReportRaw(
        \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters,
        \App\DTO\GenerateGoodsTurnoverRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-turnover/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по оборачиваемости
     * @param \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsTurnoverRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsTurnoverReport(
        \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters,
        \App\DTO\GenerateGoodsTurnoverRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsTurnoverReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по оборачиваемости
     * @param \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsTurnoverRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsTurnoverReportResult(
        \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters,
        \App\DTO\GenerateGoodsTurnoverRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsTurnoverReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateGoodsTurnoverReport_0
    /**
     * Отчет по оборачиваемости
     * @param \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsTurnoverRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateGoodsTurnoverReport_0Raw(
        \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters,
        \App\DTO\GenerateGoodsTurnoverRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/goods-turnover/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по оборачиваемости
     * @param \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsTurnoverRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateGoodsTurnoverReport_0(
        \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters,
        \App\DTO\GenerateGoodsTurnoverRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateGoodsTurnoverReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по оборачиваемости
     * @param \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters
     * @param \App\DTO\GenerateGoodsTurnoverRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateGoodsTurnoverReport_0Result(
        \App\DTO\GenerateGoodsTurnoverReportParameterData $parameters,
        \App\DTO\GenerateGoodsTurnoverRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateGoodsTurnoverReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateMassOrderLabelsReport
    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateMassOrderLabelsReportRaw(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/documents/labels/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateMassOrderLabelsReport(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateMassOrderLabelsReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.  Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус `RESOURCE_NOT_FOUND`. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateMassOrderLabelsReportResult(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateMassOrderLabelsReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateMassOrderLabelsReport_0
    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateMassOrderLabelsReport_0Raw(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/documents/labels/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateMassOrderLabelsReport_0(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateMassOrderLabelsReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.  Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус `RESOURCE_NOT_FOUND`. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateMassOrderLabelsReport_0Result(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateMassOrderLabelsReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateMassOrderLabelsReport_1
    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateMassOrderLabelsReport_1Raw(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/documents/labels/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateMassOrderLabelsReport_1(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateMassOrderLabelsReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.  Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус `RESOURCE_NOT_FOUND`. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateMassOrderLabelsReport_1Result(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateMassOrderLabelsReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateMassOrderLabelsReport_2
    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateMassOrderLabelsReport_2Raw(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/documents/labels/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateMassOrderLabelsReport_2(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateMassOrderLabelsReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.  Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус `RESOURCE_NOT_FOUND`. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * @param \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters
     * @param \App\DTO\GenerateMassOrderLabelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateMassOrderLabelsReport_2Result(
        \App\DTO\GenerateMassOrderLabelsReportParameterData $parameters,
        \App\DTO\GenerateMassOrderLabelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateMassOrderLabelsReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateOrderLabel
    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateOrderLabelRaw(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateOrderLabel(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->generateOrderLabelRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* PDF‑файл с ярлыками для коробки. Файл содержит одну страницу с ярлыком. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateOrderLabelResult(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->generateOrderLabel($parameters, $security, $responseMediaType));
    }
    //endregion

    //region generateOrderLabel_0
    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateOrderLabel_0Raw(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateOrderLabel_0(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->generateOrderLabel_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* PDF‑файл с ярлыками для коробки. Файл содержит одну страницу с ярлыком. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateOrderLabel_0Result(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->generateOrderLabel_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region generateOrderLabel_1
    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateOrderLabel_1Raw(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateOrderLabel_1(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->generateOrderLabel_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* PDF‑файл с ярлыками для коробки. Файл содержит одну страницу с ярлыком. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateOrderLabel_1Result(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->generateOrderLabel_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region generateOrderLabel_2
    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateOrderLabel_2Raw(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateOrderLabel_2(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->generateOrderLabel_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* PDF‑файл с ярлыками для коробки. Файл содержит одну страницу с ярлыком. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * @param \App\DTO\GenerateOrderLabelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateOrderLabel_2Result(
        \App\DTO\GenerateOrderLabelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->generateOrderLabel_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region generateOrderLabels
    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateOrderLabelsRaw(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/labels', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateOrderLabels(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->generateOrderLabelsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* PDF‑файл с ярлыками на все коробки. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateOrderLabelsResult(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->generateOrderLabels($parameters, $security, $responseMediaType));
    }
    //endregion

    //region generateOrderLabels_0
    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateOrderLabels_0Raw(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/labels', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateOrderLabels_0(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->generateOrderLabels_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* PDF‑файл с ярлыками на все коробки. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateOrderLabels_0Result(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->generateOrderLabels_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region generateOrderLabels_1
    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateOrderLabels_1Raw(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/labels', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateOrderLabels_1(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->generateOrderLabels_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* PDF‑файл с ярлыками на все коробки. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateOrderLabels_1Result(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->generateOrderLabels_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region generateOrderLabels_2
    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateOrderLabels_2Raw(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/labels', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateOrderLabels_2(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): array
    {
        $response = $this->generateOrderLabels_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* PDF‑файл с ярлыками на все коробки. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * @param \App\DTO\GenerateOrderLabelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateOrderLabels_2Result(
        \App\DTO\GenerateOrderLabelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/pdf'
    ): string
    {
        return $this->getSuccessfulContent(...$this->generateOrderLabels_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region generatePricesReport
    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generatePricesReportRaw(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/prices/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generatePricesReport(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generatePricesReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generatePricesReportResult(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generatePricesReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generatePricesReport_0
    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generatePricesReport_0Raw(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/prices/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generatePricesReport_0(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generatePricesReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generatePricesReport_0Result(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generatePricesReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generatePricesReport_1
    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generatePricesReport_1Raw(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/prices/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generatePricesReport_1(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generatePricesReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generatePricesReport_1Result(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generatePricesReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generatePricesReport_2
    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generatePricesReport_2Raw(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/prices/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generatePricesReport_2(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generatePricesReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generatePricesReport_2Result(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generatePricesReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generatePricesReport_3
    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generatePricesReport_3Raw(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/prices/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generatePricesReport_3(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generatePricesReport_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Цены на рынке»
     * @param \App\DTO\GeneratePricesReportParameterData $parameters
     * @param \App\DTO\GeneratePricesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generatePricesReport_3Result(
        \App\DTO\GeneratePricesReportParameterData $parameters,
        \App\DTO\GeneratePricesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generatePricesReport_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShelfsStatisticsReport
    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShelfsStatisticsReportRaw(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/shelf-statistics/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShelfsStatisticsReport(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShelfsStatisticsReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShelfsStatisticsReportResult(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShelfsStatisticsReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShelfsStatisticsReport_0
    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShelfsStatisticsReport_0Raw(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/shelf-statistics/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShelfsStatisticsReport_0(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShelfsStatisticsReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShelfsStatisticsReport_0Result(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShelfsStatisticsReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShelfsStatisticsReport_1
    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShelfsStatisticsReport_1Raw(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/shelf-statistics/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShelfsStatisticsReport_1(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShelfsStatisticsReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShelfsStatisticsReport_1Result(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShelfsStatisticsReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShelfsStatisticsReport_2
    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShelfsStatisticsReport_2Raw(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/shelf-statistics/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShelfsStatisticsReport_2(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShelfsStatisticsReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShelfsStatisticsReport_2Result(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShelfsStatisticsReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShelfsStatisticsReport_3
    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShelfsStatisticsReport_3Raw(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/shelf-statistics/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShelfsStatisticsReport_3(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShelfsStatisticsReport_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по полкам
     * @param \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters
     * @param \App\DTO\GenerateShelfsStatisticsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShelfsStatisticsReport_3Result(
        \App\DTO\GenerateShelfsStatisticsReportParameterData $parameters,
        \App\DTO\GenerateShelfsStatisticsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShelfsStatisticsReport_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShipmentListDocumentReport
    /**
     * Получение листа сборки
     * @param \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShipmentListDocumentReportRaw(
        \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/documents/shipment-list/generate', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение листа сборки
     * @param \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShipmentListDocumentReport(
        \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShipmentListDocumentReportRaw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый документ. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение листа сборки
     * @param \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShipmentListDocumentReportResult(
        \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShipmentListDocumentReport($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShipmentListDocumentReport_0
    /**
     * Получение листа сборки
     * @param \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShipmentListDocumentReport_0Raw(
        \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/documents/shipment-list/generate', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение листа сборки
     * @param \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShipmentListDocumentReport_0(
        \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShipmentListDocumentReport_0Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый документ. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение листа сборки
     * @param \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShipmentListDocumentReport_0Result(
        \App\DTO\GenerateShipmentListDocumentReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShipmentListDocumentReport_0($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShowsSalesReport
    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShowsSalesReportRaw(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/shows-sales/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShowsSalesReport(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShowsSalesReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShowsSalesReportResult(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShowsSalesReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShowsSalesReport_0
    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShowsSalesReport_0Raw(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/shows-sales/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShowsSalesReport_0(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShowsSalesReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShowsSalesReport_0Result(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShowsSalesReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShowsSalesReport_1
    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShowsSalesReport_1Raw(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/shows-sales/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShowsSalesReport_1(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShowsSalesReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShowsSalesReport_1Result(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShowsSalesReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShowsSalesReport_2
    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShowsSalesReport_2Raw(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/shows-sales/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShowsSalesReport_2(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShowsSalesReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShowsSalesReport_2Result(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShowsSalesReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateShowsSalesReport_3
    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateShowsSalesReport_3Raw(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/shows-sales/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateShowsSalesReport_3(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateShowsSalesReport_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет «Аналитика продаж»
     * @param \App\DTO\GenerateShowsSalesReportParameterData $parameters
     * @param \App\DTO\GenerateShowsSalesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateShowsSalesReport_3Result(
        \App\DTO\GenerateShowsSalesReportParameterData $parameters,
        \App\DTO\GenerateShowsSalesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateShowsSalesReport_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateStocksOnWarehousesReport
    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateStocksOnWarehousesReportRaw(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/stocks-on-warehouses/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateStocksOnWarehousesReport(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateStocksOnWarehousesReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateStocksOnWarehousesReportResult(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateStocksOnWarehousesReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateStocksOnWarehousesReport_0
    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateStocksOnWarehousesReport_0Raw(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/stocks-on-warehouses/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateStocksOnWarehousesReport_0(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateStocksOnWarehousesReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateStocksOnWarehousesReport_0Result(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateStocksOnWarehousesReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateStocksOnWarehousesReport_1
    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateStocksOnWarehousesReport_1Raw(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/stocks-on-warehouses/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateStocksOnWarehousesReport_1(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateStocksOnWarehousesReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateStocksOnWarehousesReport_1Result(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateStocksOnWarehousesReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateStocksOnWarehousesReport_2
    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateStocksOnWarehousesReport_2Raw(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/stocks-on-warehouses/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateStocksOnWarehousesReport_2(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateStocksOnWarehousesReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateStocksOnWarehousesReport_2Result(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateStocksOnWarehousesReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateStocksOnWarehousesReport_3
    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateStocksOnWarehousesReport_3Raw(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/stocks-on-warehouses/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateStocksOnWarehousesReport_3(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateStocksOnWarehousesReport_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по остаткам на складах
     * @param \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters
     * @param \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateStocksOnWarehousesReport_3Result(
        \App\DTO\GenerateStocksOnWarehousesReportParameterData $parameters,
        \App\DTO\GenerateStocksOnWarehousesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateStocksOnWarehousesReport_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedMarketplaceServicesReport
    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedMarketplaceServicesReportRaw(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-marketplace-services/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedMarketplaceServicesReport(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedMarketplaceServicesReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedMarketplaceServicesReportResult(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedMarketplaceServicesReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedMarketplaceServicesReport_0
    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedMarketplaceServicesReport_0Raw(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-marketplace-services/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedMarketplaceServicesReport_0(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedMarketplaceServicesReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedMarketplaceServicesReport_0Result(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedMarketplaceServicesReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedMarketplaceServicesReport_1
    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedMarketplaceServicesReport_1Raw(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-marketplace-services/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedMarketplaceServicesReport_1(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedMarketplaceServicesReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedMarketplaceServicesReport_1Result(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedMarketplaceServicesReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedMarketplaceServicesReport_2
    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedMarketplaceServicesReport_2Raw(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-marketplace-services/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedMarketplaceServicesReport_2(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedMarketplaceServicesReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedMarketplaceServicesReport_2Result(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedMarketplaceServicesReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedMarketplaceServicesReport_3
    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedMarketplaceServicesReport_3Raw(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-marketplace-services/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedMarketplaceServicesReport_3(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedMarketplaceServicesReport_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по стоимости услуг
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedMarketplaceServicesReport_3Result(
        \App\DTO\GenerateUnitedMarketplaceServicesReportParameterData $parameters,
        \App\DTO\GenerateUnitedMarketplaceServicesReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedMarketplaceServicesReport_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedNettingReport
    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedNettingReportRaw(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-netting/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedNettingReport(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedNettingReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedNettingReportResult(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedNettingReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedNettingReport_0
    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedNettingReport_0Raw(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-netting/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedNettingReport_0(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedNettingReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedNettingReport_0Result(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedNettingReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedNettingReport_1
    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedNettingReport_1Raw(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-netting/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedNettingReport_1(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedNettingReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedNettingReport_1Result(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedNettingReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedNettingReport_2
    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedNettingReport_2Raw(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-netting/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedNettingReport_2(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedNettingReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedNettingReport_2Result(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedNettingReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedNettingReport_3
    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedNettingReport_3Raw(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-netting/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedNettingReport_3(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedNettingReport_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по платежам
     * @param \App\DTO\GenerateUnitedNettingReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedNettingReportRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedNettingReport_3Result(
        \App\DTO\GenerateUnitedNettingReportParameterData $parameters,
        \App\DTO\GenerateUnitedNettingReportRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedNettingReport_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedOrdersReport
    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedOrdersReportRaw(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-orders/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedOrdersReport(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedOrdersReportRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedOrdersReportResult(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedOrdersReport($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedOrdersReport_0
    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedOrdersReport_0Raw(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-orders/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedOrdersReport_0(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedOrdersReport_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedOrdersReport_0Result(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedOrdersReport_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedOrdersReport_1
    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedOrdersReport_1Raw(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-orders/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedOrdersReport_1(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedOrdersReport_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedOrdersReport_1Result(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedOrdersReport_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedOrdersReport_2
    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedOrdersReport_2Raw(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-orders/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedOrdersReport_2(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedOrdersReport_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedOrdersReport_2Result(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedOrdersReport_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region generateUnitedOrdersReport_3
    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generateUnitedOrdersReport_3Raw(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/reports/united-orders/generate', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generateUnitedOrdersReport_3(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->generateUnitedOrdersReport_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет. */
                $responseContent = new \App\DTO\GenerateReportResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по заказам
     * @param \App\DTO\GenerateUnitedOrdersReportParameterData $parameters
     * @param \App\DTO\GenerateUnitedOrdersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GenerateReportResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generateUnitedOrdersReport_3Result(
        \App\DTO\GenerateUnitedOrdersReportParameterData $parameters,
        \App\DTO\GenerateUnitedOrdersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GenerateReportResponse
    {
        return $this->getSuccessfulContent(...$this->generateUnitedOrdersReport_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getAllOffers
    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getAllOffersRaw(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offers/all', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getAllOffers(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getAllOffersRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Предложения магазина. */
                $responseContent = new \App\DTO\GetAllOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetAllOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getAllOffersResult(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetAllOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getAllOffers($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getAllOffers_0
    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getAllOffers_0Raw(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offers/all', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getAllOffers_0(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getAllOffers_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Предложения магазина. */
                $responseContent = new \App\DTO\GetAllOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetAllOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getAllOffers_0Result(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetAllOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getAllOffers_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getAllOffers_1
    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getAllOffers_1Raw(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offers/all', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getAllOffers_1(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getAllOffers_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Предложения магазина. */
                $responseContent = new \App\DTO\GetAllOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetAllOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getAllOffers_1Result(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetAllOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getAllOffers_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getAllOffers_2
    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getAllOffers_2Raw(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offers/all', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getAllOffers_2(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getAllOffers_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Предложения магазина. */
                $responseContent = new \App\DTO\GetAllOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetAllOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getAllOffers_2Result(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetAllOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getAllOffers_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getAllOffers_3
    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getAllOffers_3Raw(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offers/all', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getAllOffers_3(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getAllOffers_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Предложения магазина. */
                $responseContent = new \App\DTO\GetAllOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Все предложения магазина
     * @param \App\DTO\GetAllOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetAllOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getAllOffers_3Result(
        \App\DTO\GetAllOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetAllOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getAllOffers_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getBidsInfoForBusiness
    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBidsInfoForBusinessRaw(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/bids/info', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBidsInfoForBusiness(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBidsInfoForBusinessRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки. */
                $responseContent = new \App\DTO\GetBidsInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetBidsInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBidsInfoForBusinessResult(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBidsInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getBidsInfoForBusiness($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBidsInfoForBusiness_0
    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBidsInfoForBusiness_0Raw(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/bids/info', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBidsInfoForBusiness_0(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBidsInfoForBusiness_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки. */
                $responseContent = new \App\DTO\GetBidsInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetBidsInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBidsInfoForBusiness_0Result(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBidsInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getBidsInfoForBusiness_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBidsInfoForBusiness_1
    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBidsInfoForBusiness_1Raw(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/bids/info', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBidsInfoForBusiness_1(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBidsInfoForBusiness_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки. */
                $responseContent = new \App\DTO\GetBidsInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetBidsInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBidsInfoForBusiness_1Result(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBidsInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getBidsInfoForBusiness_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBidsInfoForBusiness_2
    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBidsInfoForBusiness_2Raw(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/bids/info', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBidsInfoForBusiness_2(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBidsInfoForBusiness_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки. */
                $responseContent = new \App\DTO\GetBidsInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetBidsInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBidsInfoForBusiness_2Result(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBidsInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getBidsInfoForBusiness_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBidsInfoForBusiness_3
    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBidsInfoForBusiness_3Raw(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/bids/info', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBidsInfoForBusiness_3(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBidsInfoForBusiness_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки. */
                $responseContent = new \App\DTO\GetBidsInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об установленных ставках
     * @param \App\DTO\GetBidsInfoForBusinessParameterData $parameters
     * @param \App\DTO\GetBidsInfoRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetBidsInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBidsInfoForBusiness_3Result(
        \App\DTO\GetBidsInfoForBusinessParameterData $parameters,
        \App\DTO\GetBidsInfoRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBidsInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getBidsInfoForBusiness_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBidsRecommendations
    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBidsRecommendationsRaw(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/bids/recommendations', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBidsRecommendations(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBidsRecommendationsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Рекомендованные ставки для заданных товаров. */
                $responseContent = new \App\DTO\GetBidsRecommendationsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetBidsRecommendationsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBidsRecommendationsResult(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBidsRecommendationsResponse
    {
        return $this->getSuccessfulContent(...$this->getBidsRecommendations($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBidsRecommendations_0
    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBidsRecommendations_0Raw(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/bids/recommendations', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBidsRecommendations_0(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBidsRecommendations_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Рекомендованные ставки для заданных товаров. */
                $responseContent = new \App\DTO\GetBidsRecommendationsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetBidsRecommendationsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBidsRecommendations_0Result(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBidsRecommendationsResponse
    {
        return $this->getSuccessfulContent(...$this->getBidsRecommendations_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBidsRecommendations_1
    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBidsRecommendations_1Raw(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/bids/recommendations', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBidsRecommendations_1(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBidsRecommendations_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Рекомендованные ставки для заданных товаров. */
                $responseContent = new \App\DTO\GetBidsRecommendationsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetBidsRecommendationsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBidsRecommendations_1Result(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBidsRecommendationsResponse
    {
        return $this->getSuccessfulContent(...$this->getBidsRecommendations_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBidsRecommendations_2
    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBidsRecommendations_2Raw(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/bids/recommendations', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBidsRecommendations_2(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBidsRecommendations_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Рекомендованные ставки для заданных товаров. */
                $responseContent = new \App\DTO\GetBidsRecommendationsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetBidsRecommendationsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBidsRecommendations_2Result(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBidsRecommendationsResponse
    {
        return $this->getSuccessfulContent(...$this->getBidsRecommendations_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBidsRecommendations_3
    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBidsRecommendations_3Raw(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/bids/recommendations', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBidsRecommendations_3(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBidsRecommendations_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Рекомендованные ставки для заданных товаров. */
                $responseContent = new \App\DTO\GetBidsRecommendationsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендованные ставки для заданных товаров
     * @param \App\DTO\GetBidsRecommendationsParameterData $parameters
     * @param \App\DTO\GetBidsRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetBidsRecommendationsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBidsRecommendations_3Result(
        \App\DTO\GetBidsRecommendationsParameterData $parameters,
        \App\DTO\GetBidsRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBidsRecommendationsResponse
    {
        return $this->getSuccessfulContent(...$this->getBidsRecommendations_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBusinessQuarantineOffers
    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBusinessQuarantineOffersRaw(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/price-quarantine', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBusinessQuarantineOffers(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBusinessQuarantineOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров в карантине. */
                $responseContent = new \App\DTO\GetQuarantineOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQuarantineOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBusinessQuarantineOffersResult(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQuarantineOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getBusinessQuarantineOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBusinessQuarantineOffers_0
    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBusinessQuarantineOffers_0Raw(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/price-quarantine', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBusinessQuarantineOffers_0(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBusinessQuarantineOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров в карантине. */
                $responseContent = new \App\DTO\GetQuarantineOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQuarantineOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBusinessQuarantineOffers_0Result(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQuarantineOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getBusinessQuarantineOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBusinessQuarantineOffers_1
    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBusinessQuarantineOffers_1Raw(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/price-quarantine', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBusinessQuarantineOffers_1(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBusinessQuarantineOffers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров в карантине. */
                $responseContent = new \App\DTO\GetQuarantineOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQuarantineOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBusinessQuarantineOffers_1Result(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQuarantineOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getBusinessQuarantineOffers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBusinessQuarantineOffers_2
    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBusinessQuarantineOffers_2Raw(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/price-quarantine', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBusinessQuarantineOffers_2(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBusinessQuarantineOffers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров в карантине. */
                $responseContent = new \App\DTO\GetQuarantineOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQuarantineOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBusinessQuarantineOffers_2Result(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQuarantineOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getBusinessQuarantineOffers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBusinessQuarantineOffers_3
    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBusinessQuarantineOffers_3Raw(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/price-quarantine', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBusinessQuarantineOffers_3(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBusinessQuarantineOffers_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров в карантине. */
                $responseContent = new \App\DTO\GetQuarantineOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров, находящихся в карантине по цене в кабинете
     * @param \App\DTO\GetBusinessQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQuarantineOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBusinessQuarantineOffers_3Result(
        \App\DTO\GetBusinessQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQuarantineOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getBusinessQuarantineOffers_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getBusinessSettings
    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBusinessSettingsRaw(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/settings', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBusinessSettings(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBusinessSettingsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки кабинета. */
                $responseContent = new \App\DTO\GetBusinessSettingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessSettingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBusinessSettingsResult(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessSettingsResponse
    {
        return $this->getSuccessfulContent(...$this->getBusinessSettings($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getBusinessSettings_0
    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBusinessSettings_0Raw(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/settings', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBusinessSettings_0(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBusinessSettings_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки кабинета. */
                $responseContent = new \App\DTO\GetBusinessSettingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessSettingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBusinessSettings_0Result(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessSettingsResponse
    {
        return $this->getSuccessfulContent(...$this->getBusinessSettings_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getBusinessSettings_1
    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBusinessSettings_1Raw(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/settings', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBusinessSettings_1(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBusinessSettings_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки кабинета. */
                $responseContent = new \App\DTO\GetBusinessSettingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessSettingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBusinessSettings_1Result(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessSettingsResponse
    {
        return $this->getSuccessfulContent(...$this->getBusinessSettings_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getBusinessSettings_2
    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBusinessSettings_2Raw(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/settings', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBusinessSettings_2(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBusinessSettings_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки кабинета. */
                $responseContent = new \App\DTO\GetBusinessSettingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessSettingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBusinessSettings_2Result(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessSettingsResponse
    {
        return $this->getSuccessfulContent(...$this->getBusinessSettings_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getBusinessSettings_3
    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getBusinessSettings_3Raw(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/settings', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getBusinessSettings_3(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getBusinessSettings_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки кабинета. */
                $responseContent = new \App\DTO\GetBusinessSettingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Настройки кабинета
     * @param \App\DTO\GetBusinessSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessSettingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getBusinessSettings_3Result(
        \App\DTO\GetBusinessSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessSettingsResponse
    {
        return $this->getSuccessfulContent(...$this->getBusinessSettings_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaign
    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignRaw(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaign(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о магазине. */
                $responseContent = new \App\DTO\GetCampaignResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignResult(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaign($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignLogins
    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignLoginsRaw(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/logins', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignLogins(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignLoginsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список логинов, связанных с магазином. */
                $responseContent = new \App\DTO\GetCampaignLoginsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignLoginsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignLoginsResult(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignLoginsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignLogins($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignLogins_0
    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignLogins_0Raw(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/logins', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignLogins_0(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignLogins_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список логинов, связанных с магазином. */
                $responseContent = new \App\DTO\GetCampaignLoginsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignLoginsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignLogins_0Result(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignLoginsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignLogins_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignLogins_1
    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignLogins_1Raw(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/logins', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignLogins_1(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignLogins_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список логинов, связанных с магазином. */
                $responseContent = new \App\DTO\GetCampaignLoginsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignLoginsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignLogins_1Result(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignLoginsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignLogins_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignLogins_2
    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignLogins_2Raw(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/logins', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignLogins_2(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignLogins_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список логинов, связанных с магазином. */
                $responseContent = new \App\DTO\GetCampaignLoginsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignLoginsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignLogins_2Result(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignLoginsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignLogins_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignLogins_3
    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignLogins_3Raw(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/logins', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignLogins_3(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignLogins_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список логинов, связанных с магазином. */
                $responseContent = new \App\DTO\GetCampaignLoginsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Логины, связанные с магазином
     * @param \App\DTO\GetCampaignLoginsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignLoginsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignLogins_3Result(
        \App\DTO\GetCampaignLoginsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignLoginsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignLogins_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignOffers
    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignOffersRaw(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignOffers(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров, размещенных в заданном магазине. */
                $responseContent = new \App\DTO\GetCampaignOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignOffersResult(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCampaignOffers_0
    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignOffers_0Raw(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignOffers_0(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров, размещенных в заданном магазине. */
                $responseContent = new \App\DTO\GetCampaignOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignOffers_0Result(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCampaignOffers_1
    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignOffers_1Raw(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignOffers_1(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignOffers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров, размещенных в заданном магазине. */
                $responseContent = new \App\DTO\GetCampaignOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignOffers_1Result(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignOffers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCampaignOffers_2
    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignOffers_2Raw(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignOffers_2(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignOffers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров, размещенных в заданном магазине. */
                $responseContent = new \App\DTO\GetCampaignOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignOffers_2Result(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignOffers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCampaignOffers_3
    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignOffers_3Raw(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignOffers_3(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignOffers_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров, размещенных в заданном магазине. */
                $responseContent = new \App\DTO\GetCampaignOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о товарах, которые размещены в заданном магазине
     * @param \App\DTO\GetCampaignOffersParameterData $parameters
     * @param \App\DTO\GetCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignOffers_3Result(
        \App\DTO\GetCampaignOffersParameterData $parameters,
        \App\DTO\GetCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignOffers_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCampaignQuarantineOffers
    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignQuarantineOffersRaw(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/price-quarantine', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignQuarantineOffers(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignQuarantineOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров в карантине. */
                $responseContent = new \App\DTO\GetQuarantineOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQuarantineOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignQuarantineOffersResult(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQuarantineOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignQuarantineOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCampaignQuarantineOffers_0
    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignQuarantineOffers_0Raw(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/price-quarantine', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignQuarantineOffers_0(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignQuarantineOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров в карантине. */
                $responseContent = new \App\DTO\GetQuarantineOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQuarantineOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignQuarantineOffers_0Result(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQuarantineOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignQuarantineOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCampaignQuarantineOffers_1
    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignQuarantineOffers_1Raw(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/price-quarantine', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignQuarantineOffers_1(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignQuarantineOffers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров в карантине. */
                $responseContent = new \App\DTO\GetQuarantineOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQuarantineOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignQuarantineOffers_1Result(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQuarantineOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignQuarantineOffers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCampaignQuarantineOffers_2
    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignQuarantineOffers_2Raw(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/price-quarantine', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignQuarantineOffers_2(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignQuarantineOffers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров в карантине. */
                $responseContent = new \App\DTO\GetQuarantineOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQuarantineOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignQuarantineOffers_2Result(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQuarantineOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignQuarantineOffers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCampaignQuarantineOffers_3
    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignQuarantineOffers_3Raw(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/price-quarantine', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignQuarantineOffers_3(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignQuarantineOffers_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров в карантине. */
                $responseContent = new \App\DTO\GetQuarantineOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров, находящихся в карантине по цене в магазине
     * @param \App\DTO\GetCampaignQuarantineOffersParameterData $parameters
     * @param \App\DTO\GetQuarantineOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQuarantineOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignQuarantineOffers_3Result(
        \App\DTO\GetCampaignQuarantineOffersParameterData $parameters,
        \App\DTO\GetQuarantineOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQuarantineOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignQuarantineOffers_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCampaignRegion
    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignRegionRaw(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/region', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignRegion(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignRegionRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-| */
                $responseContent = new \App\DTO\GetCampaignRegionResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignRegionResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignRegionResult(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignRegionResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignRegion($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignRegion_0
    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignRegion_0Raw(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/region', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignRegion_0(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignRegion_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-| */
                $responseContent = new \App\DTO\GetCampaignRegionResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignRegionResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignRegion_0Result(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignRegionResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignRegion_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignRegion_1
    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignRegion_1Raw(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/region', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignRegion_1(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignRegion_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-| */
                $responseContent = new \App\DTO\GetCampaignRegionResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignRegionResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignRegion_1Result(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignRegionResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignRegion_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignRegion_2
    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignRegion_2Raw(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/region', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignRegion_2(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignRegion_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-| */
                $responseContent = new \App\DTO\GetCampaignRegionResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignRegionResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignRegion_2Result(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignRegionResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignRegion_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignRegion_3
    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignRegion_3Raw(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/region', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignRegion_3(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignRegion_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-| */
                $responseContent = new \App\DTO\GetCampaignRegionResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Регион магазина
     * @param \App\DTO\GetCampaignRegionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignRegionResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignRegion_3Result(
        \App\DTO\GetCampaignRegionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignRegionResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignRegion_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignSettings
    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignSettingsRaw(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/settings', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignSettings(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignSettingsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки магазина. */
                $responseContent = new \App\DTO\GetCampaignSettingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignSettingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignSettingsResult(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignSettingsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignSettings($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignSettings_0
    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignSettings_0Raw(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/settings', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignSettings_0(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignSettings_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки магазина. */
                $responseContent = new \App\DTO\GetCampaignSettingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignSettingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignSettings_0Result(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignSettingsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignSettings_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignSettings_1
    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignSettings_1Raw(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/settings', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignSettings_1(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignSettings_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки магазина. */
                $responseContent = new \App\DTO\GetCampaignSettingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignSettingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignSettings_1Result(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignSettingsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignSettings_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignSettings_2
    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignSettings_2Raw(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/settings', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignSettings_2(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignSettings_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки магазина. */
                $responseContent = new \App\DTO\GetCampaignSettingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignSettingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignSettings_2Result(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignSettingsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignSettings_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignSettings_3
    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignSettings_3Raw(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/settings', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignSettings_3(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignSettings_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Настройки магазина. */
                $responseContent = new \App\DTO\GetCampaignSettingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Настройки магазина
     * @param \App\DTO\GetCampaignSettingsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignSettingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignSettings_3Result(
        \App\DTO\GetCampaignSettingsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignSettingsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignSettings_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaign_0
    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaign_0Raw(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaign_0(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaign_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о магазине. */
                $responseContent = new \App\DTO\GetCampaignResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaign_0Result(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaign_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaign_1
    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaign_1Raw(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaign_1(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaign_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о магазине. */
                $responseContent = new \App\DTO\GetCampaignResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaign_1Result(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaign_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaign_2
    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaign_2Raw(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaign_2(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaign_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о магазине. */
                $responseContent = new \App\DTO\GetCampaignResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaign_2Result(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaign_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaign_3
    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaign_3Raw(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaign_3(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaign_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о магазине. */
                $responseContent = new \App\DTO\GetCampaignResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о магазине
     * @param \App\DTO\GetCampaignParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaign_3Result(
        \App\DTO\GetCampaignParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaign_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaigns
    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignsRaw(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaigns(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Магазины пользователя. */
                $responseContent = new \App\DTO\GetCampaignsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignsResult(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaigns($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignsByLogin
    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignsByLoginRaw(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/by_login/{login}', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignsByLogin(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignsByLoginRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о магазинах. */
                $responseContent = new \App\DTO\GetCampaignsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignsByLoginResult(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignsByLogin($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignsByLogin_0
    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignsByLogin_0Raw(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/by_login/{login}', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignsByLogin_0(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignsByLogin_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о магазинах. */
                $responseContent = new \App\DTO\GetCampaignsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignsByLogin_0Result(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignsByLogin_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignsByLogin_1
    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignsByLogin_1Raw(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/by_login/{login}', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignsByLogin_1(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignsByLogin_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о магазинах. */
                $responseContent = new \App\DTO\GetCampaignsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignsByLogin_1Result(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignsByLogin_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignsByLogin_2
    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignsByLogin_2Raw(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/by_login/{login}', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignsByLogin_2(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignsByLogin_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о магазинах. */
                $responseContent = new \App\DTO\GetCampaignsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignsByLogin_2Result(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignsByLogin_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaignsByLogin_3
    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaignsByLogin_3Raw(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/by_login/{login}', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaignsByLogin_3(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaignsByLogin_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о магазинах. */
                $responseContent = new \App\DTO\GetCampaignsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Магазины, доступные логину
     * @param \App\DTO\GetCampaignsByLoginParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaignsByLogin_3Result(
        \App\DTO\GetCampaignsByLoginParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaignsByLogin_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaigns_0
    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaigns_0Raw(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaigns_0(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaigns_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Магазины пользователя. */
                $responseContent = new \App\DTO\GetCampaignsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaigns_0Result(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaigns_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaigns_1
    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaigns_1Raw(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaigns_1(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaigns_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Магазины пользователя. */
                $responseContent = new \App\DTO\GetCampaignsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaigns_1Result(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaigns_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaigns_2
    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaigns_2Raw(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaigns_2(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaigns_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Магазины пользователя. */
                $responseContent = new \App\DTO\GetCampaignsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaigns_2Result(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaigns_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCampaigns_3
    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCampaigns_3Raw(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCampaigns_3(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCampaigns_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Магазины пользователя. */
                $responseContent = new \App\DTO\GetCampaignsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список магазинов пользователя
     * @param \App\DTO\GetCampaignsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCampaignsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCampaigns_3Result(
        \App\DTO\GetCampaignsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCampaignsResponse
    {
        return $this->getSuccessfulContent(...$this->getCampaigns_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCategoriesMaxSaleQuantum
    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoriesMaxSaleQuantumRaw(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/categories/max-sale-quantum', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoriesMaxSaleQuantum(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoriesMaxSaleQuantumRaw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Лимит на установку кванта и минимального количества товаров. */
                $responseContent = new \App\DTO\GetCategoriesMaxSaleQuantumResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoriesMaxSaleQuantumResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoriesMaxSaleQuantumResult(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoriesMaxSaleQuantumResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoriesMaxSaleQuantum($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCategoriesMaxSaleQuantum_0
    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoriesMaxSaleQuantum_0Raw(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/categories/max-sale-quantum', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoriesMaxSaleQuantum_0(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoriesMaxSaleQuantum_0Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Лимит на установку кванта и минимального количества товаров. */
                $responseContent = new \App\DTO\GetCategoriesMaxSaleQuantumResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoriesMaxSaleQuantumResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoriesMaxSaleQuantum_0Result(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoriesMaxSaleQuantumResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoriesMaxSaleQuantum_0($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCategoriesMaxSaleQuantum_1
    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoriesMaxSaleQuantum_1Raw(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/categories/max-sale-quantum', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoriesMaxSaleQuantum_1(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoriesMaxSaleQuantum_1Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Лимит на установку кванта и минимального количества товаров. */
                $responseContent = new \App\DTO\GetCategoriesMaxSaleQuantumResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoriesMaxSaleQuantumResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoriesMaxSaleQuantum_1Result(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoriesMaxSaleQuantumResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoriesMaxSaleQuantum_1($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCategoriesMaxSaleQuantum_2
    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoriesMaxSaleQuantum_2Raw(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/categories/max-sale-quantum', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoriesMaxSaleQuantum_2(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoriesMaxSaleQuantum_2Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Лимит на установку кванта и минимального количества товаров. */
                $responseContent = new \App\DTO\GetCategoriesMaxSaleQuantumResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoriesMaxSaleQuantumResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoriesMaxSaleQuantum_2Result(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoriesMaxSaleQuantumResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoriesMaxSaleQuantum_2($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCategoriesMaxSaleQuantum_3
    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoriesMaxSaleQuantum_3Raw(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/categories/max-sale-quantum', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoriesMaxSaleQuantum_3(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoriesMaxSaleQuantum_3Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Лимит на установку кванта и минимального количества товаров. */
                $responseContent = new \App\DTO\GetCategoriesMaxSaleQuantumResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * @param \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoriesMaxSaleQuantumResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoriesMaxSaleQuantum_3Result(
        \App\DTO\GetCategoriesMaxSaleQuantumRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoriesMaxSaleQuantumResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoriesMaxSaleQuantum_3($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCategoriesTree
    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoriesTreeRaw(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/categories/tree', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoriesTree(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoriesTreeRaw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Категории Маркета. */
                $responseContent = new \App\DTO\GetCategoriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoriesTreeResult(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoriesResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoriesTree($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCategoriesTree_0
    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoriesTree_0Raw(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/categories/tree', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoriesTree_0(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoriesTree_0Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Категории Маркета. */
                $responseContent = new \App\DTO\GetCategoriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoriesTree_0Result(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoriesResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoriesTree_0($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCategoriesTree_1
    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoriesTree_1Raw(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/categories/tree', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoriesTree_1(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoriesTree_1Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Категории Маркета. */
                $responseContent = new \App\DTO\GetCategoriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoriesTree_1Result(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoriesResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoriesTree_1($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCategoriesTree_2
    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoriesTree_2Raw(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/categories/tree', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoriesTree_2(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoriesTree_2Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Категории Маркета. */
                $responseContent = new \App\DTO\GetCategoriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoriesTree_2Result(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoriesResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoriesTree_2($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCategoriesTree_3
    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoriesTree_3Raw(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/categories/tree', [], []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoriesTree_3(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoriesTree_3Raw($requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Категории Маркета. */
                $responseContent = new \App\DTO\GetCategoriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Дерево категорий
     * @param \App\DTO\GetCategoriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoriesTree_3Result(
        \App\DTO\GetCategoriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoriesResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoriesTree_3($requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getCategoryContentParameters
    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoryContentParametersRaw(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/category/{categoryId}/parameters', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoryContentParameters(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoryContentParametersRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список характеристик товаров из заданной категории. */
                $responseContent = new \App\DTO\GetCategoryContentParametersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoryContentParametersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoryContentParametersResult(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoryContentParametersResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoryContentParameters($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCategoryContentParameters_0
    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoryContentParameters_0Raw(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/category/{categoryId}/parameters', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoryContentParameters_0(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoryContentParameters_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список характеристик товаров из заданной категории. */
                $responseContent = new \App\DTO\GetCategoryContentParametersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoryContentParametersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoryContentParameters_0Result(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoryContentParametersResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoryContentParameters_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCategoryContentParameters_1
    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoryContentParameters_1Raw(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/category/{categoryId}/parameters', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoryContentParameters_1(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoryContentParameters_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список характеристик товаров из заданной категории. */
                $responseContent = new \App\DTO\GetCategoryContentParametersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoryContentParametersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoryContentParameters_1Result(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoryContentParametersResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoryContentParameters_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCategoryContentParameters_2
    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoryContentParameters_2Raw(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/category/{categoryId}/parameters', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoryContentParameters_2(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoryContentParameters_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список характеристик товаров из заданной категории. */
                $responseContent = new \App\DTO\GetCategoryContentParametersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoryContentParametersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoryContentParameters_2Result(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoryContentParametersResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoryContentParameters_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getCategoryContentParameters_3
    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getCategoryContentParameters_3Raw(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/category/{categoryId}/parameters', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getCategoryContentParameters_3(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getCategoryContentParameters_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список характеристик товаров из заданной категории. */
                $responseContent = new \App\DTO\GetCategoryContentParametersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Списки характеристик товаров по категориям
     * @param \App\DTO\GetCategoryContentParametersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetCategoryContentParametersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getCategoryContentParameters_3Result(
        \App\DTO\GetCategoryContentParametersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetCategoryContentParametersResponse
    {
        return $this->getSuccessfulContent(...$this->getCategoryContentParameters_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getChatHistory
    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getChatHistoryRaw(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/history', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getChatHistory(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getChatHistoryRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* История сообщений успешно получена. */
                $responseContent = new \App\DTO\GetChatHistoryResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetChatHistoryResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getChatHistoryResult(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetChatHistoryResponse
    {
        return $this->getSuccessfulContent(...$this->getChatHistory($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getChatHistory_0
    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getChatHistory_0Raw(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/history', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getChatHistory_0(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getChatHistory_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* История сообщений успешно получена. */
                $responseContent = new \App\DTO\GetChatHistoryResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetChatHistoryResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getChatHistory_0Result(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetChatHistoryResponse
    {
        return $this->getSuccessfulContent(...$this->getChatHistory_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getChatHistory_1
    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getChatHistory_1Raw(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/history', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getChatHistory_1(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getChatHistory_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* История сообщений успешно получена. */
                $responseContent = new \App\DTO\GetChatHistoryResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetChatHistoryResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getChatHistory_1Result(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetChatHistoryResponse
    {
        return $this->getSuccessfulContent(...$this->getChatHistory_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getChatHistory_2
    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getChatHistory_2Raw(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/history', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getChatHistory_2(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getChatHistory_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* История сообщений успешно получена. */
                $responseContent = new \App\DTO\GetChatHistoryResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetChatHistoryResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getChatHistory_2Result(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetChatHistoryResponse
    {
        return $this->getSuccessfulContent(...$this->getChatHistory_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getChatHistory_3
    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getChatHistory_3Raw(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/history', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getChatHistory_3(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getChatHistory_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* История сообщений успешно получена. */
                $responseContent = new \App\DTO\GetChatHistoryResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение истории сообщений в чате
     * @param \App\DTO\GetChatHistoryParameterData $parameters
     * @param \App\DTO\GetChatHistoryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetChatHistoryResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getChatHistory_3Result(
        \App\DTO\GetChatHistoryParameterData $parameters,
        \App\DTO\GetChatHistoryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetChatHistoryResponse
    {
        return $this->getSuccessfulContent(...$this->getChatHistory_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getChats
    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getChatsRaw(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getChats(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getChatsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список чатов. */
                $responseContent = new \App\DTO\GetChatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetChatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getChatsResult(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetChatsResponse
    {
        return $this->getSuccessfulContent(...$this->getChats($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getChats_0
    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getChats_0Raw(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getChats_0(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getChats_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список чатов. */
                $responseContent = new \App\DTO\GetChatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetChatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getChats_0Result(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetChatsResponse
    {
        return $this->getSuccessfulContent(...$this->getChats_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getChats_1
    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getChats_1Raw(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getChats_1(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getChats_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список чатов. */
                $responseContent = new \App\DTO\GetChatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetChatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getChats_1Result(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetChatsResponse
    {
        return $this->getSuccessfulContent(...$this->getChats_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getChats_2
    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getChats_2Raw(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getChats_2(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getChats_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список чатов. */
                $responseContent = new \App\DTO\GetChatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetChatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getChats_2Result(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetChatsResponse
    {
        return $this->getSuccessfulContent(...$this->getChats_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getChats_3
    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getChats_3Raw(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getChats_3(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getChats_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список чатов. */
                $responseContent = new \App\DTO\GetChatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение доступных чатов
     * @param \App\DTO\GetChatsParameterData $parameters
     * @param \App\DTO\GetChatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetChatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getChats_3Result(
        \App\DTO\GetChatsParameterData $parameters,
        \App\DTO\GetChatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetChatsResponse
    {
        return $this->getSuccessfulContent(...$this->getChats_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getDeliveryServices
    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getDeliveryServicesRaw(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/delivery/services', [], []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getDeliveryServices(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getDeliveryServicesRaw($security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о службах доставки. */
                $responseContent = new \App\DTO\GetDeliveryServicesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetDeliveryServicesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getDeliveryServicesResult(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetDeliveryServicesResponse
    {
        return $this->getSuccessfulContent(...$this->getDeliveryServices($security, $responseMediaType));
    }
    //endregion

    //region getDeliveryServices_0
    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getDeliveryServices_0Raw(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/delivery/services', [], []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getDeliveryServices_0(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getDeliveryServices_0Raw($security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о службах доставки. */
                $responseContent = new \App\DTO\GetDeliveryServicesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetDeliveryServicesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getDeliveryServices_0Result(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetDeliveryServicesResponse
    {
        return $this->getSuccessfulContent(...$this->getDeliveryServices_0($security, $responseMediaType));
    }
    //endregion

    //region getDeliveryServices_1
    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getDeliveryServices_1Raw(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/delivery/services', [], []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getDeliveryServices_1(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getDeliveryServices_1Raw($security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о службах доставки. */
                $responseContent = new \App\DTO\GetDeliveryServicesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetDeliveryServicesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getDeliveryServices_1Result(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetDeliveryServicesResponse
    {
        return $this->getSuccessfulContent(...$this->getDeliveryServices_1($security, $responseMediaType));
    }
    //endregion

    //region getDeliveryServices_2
    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getDeliveryServices_2Raw(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/delivery/services', [], []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getDeliveryServices_2(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getDeliveryServices_2Raw($security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о службах доставки. */
                $responseContent = new \App\DTO\GetDeliveryServicesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Справочник служб доставки
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetDeliveryServicesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getDeliveryServices_2Result(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetDeliveryServicesResponse
    {
        return $this->getSuccessfulContent(...$this->getDeliveryServices_2($security, $responseMediaType));
    }
    //endregion

    //region getFeed
    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedRaw(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds/{feedId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeed(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о прайс-листе. */
                $responseContent = new \App\DTO\GetFeedResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedResult(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedResponse
    {
        return $this->getSuccessfulContent(...$this->getFeed($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeedIndexLogs
    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedIndexLogsRaw(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds/{feedId}/index-logs', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeedIndexLogs(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedIndexLogsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Отчет по индексации прайс-листа. */
                $responseContent = new \App\DTO\GetFeedIndexLogsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedIndexLogsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedIndexLogsResult(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedIndexLogsResponse
    {
        return $this->getSuccessfulContent(...$this->getFeedIndexLogs($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeedIndexLogs_0
    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedIndexLogs_0Raw(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds/{feedId}/index-logs', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeedIndexLogs_0(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedIndexLogs_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Отчет по индексации прайс-листа. */
                $responseContent = new \App\DTO\GetFeedIndexLogsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedIndexLogsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedIndexLogs_0Result(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedIndexLogsResponse
    {
        return $this->getSuccessfulContent(...$this->getFeedIndexLogs_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeedIndexLogs_1
    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedIndexLogs_1Raw(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds/{feedId}/index-logs', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeedIndexLogs_1(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedIndexLogs_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Отчет по индексации прайс-листа. */
                $responseContent = new \App\DTO\GetFeedIndexLogsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedIndexLogsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedIndexLogs_1Result(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedIndexLogsResponse
    {
        return $this->getSuccessfulContent(...$this->getFeedIndexLogs_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeedIndexLogs_2
    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedIndexLogs_2Raw(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds/{feedId}/index-logs', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeedIndexLogs_2(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedIndexLogs_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Отчет по индексации прайс-листа. */
                $responseContent = new \App\DTO\GetFeedIndexLogsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedIndexLogsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedIndexLogs_2Result(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedIndexLogsResponse
    {
        return $this->getSuccessfulContent(...$this->getFeedIndexLogs_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeedIndexLogs_3
    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedIndexLogs_3Raw(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds/{feedId}/index-logs', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeedIndexLogs_3(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedIndexLogs_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Отчет по индексации прайс-листа. */
                $responseContent = new \App\DTO\GetFeedIndexLogsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по индексации прайс-листа
     * @param \App\DTO\GetFeedIndexLogsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedIndexLogsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedIndexLogs_3Result(
        \App\DTO\GetFeedIndexLogsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedIndexLogsResponse
    {
        return $this->getSuccessfulContent(...$this->getFeedIndexLogs_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeed_0
    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeed_0Raw(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds/{feedId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeed_0(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeed_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о прайс-листе. */
                $responseContent = new \App\DTO\GetFeedResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeed_0Result(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedResponse
    {
        return $this->getSuccessfulContent(...$this->getFeed_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeed_1
    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeed_1Raw(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds/{feedId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeed_1(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeed_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о прайс-листе. */
                $responseContent = new \App\DTO\GetFeedResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeed_1Result(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedResponse
    {
        return $this->getSuccessfulContent(...$this->getFeed_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeed_2
    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeed_2Raw(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds/{feedId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeed_2(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeed_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о прайс-листе. */
                $responseContent = new \App\DTO\GetFeedResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeed_2Result(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedResponse
    {
        return $this->getSuccessfulContent(...$this->getFeed_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeed_3
    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeed_3Raw(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds/{feedId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeed_3(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeed_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о прайс-листе. */
                $responseContent = new \App\DTO\GetFeedResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о прайс-листе
     * @param \App\DTO\GetFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeed_3Result(
        \App\DTO\GetFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedResponse
    {
        return $this->getSuccessfulContent(...$this->getFeed_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeedbackAndCommentUpdates
    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedbackAndCommentUpdatesRaw(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feedback/updates', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeedbackAndCommentUpdates(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedbackAndCommentUpdatesRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список отзывов для магазина. */
                $responseContent = new \App\DTO\GetFeedbackListResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedbackListResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedbackAndCommentUpdatesResult(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedbackListResponse
    {
        return $this->getSuccessfulContent(...$this->getFeedbackAndCommentUpdates($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeedbackAndCommentUpdates_0
    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedbackAndCommentUpdates_0Raw(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feedback/updates', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeedbackAndCommentUpdates_0(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedbackAndCommentUpdates_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список отзывов для магазина. */
                $responseContent = new \App\DTO\GetFeedbackListResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedbackListResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedbackAndCommentUpdates_0Result(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedbackListResponse
    {
        return $this->getSuccessfulContent(...$this->getFeedbackAndCommentUpdates_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeedbackAndCommentUpdates_1
    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedbackAndCommentUpdates_1Raw(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feedback/updates', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeedbackAndCommentUpdates_1(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedbackAndCommentUpdates_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список отзывов для магазина. */
                $responseContent = new \App\DTO\GetFeedbackListResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedbackListResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedbackAndCommentUpdates_1Result(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedbackListResponse
    {
        return $this->getSuccessfulContent(...$this->getFeedbackAndCommentUpdates_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeedbackAndCommentUpdates_2
    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedbackAndCommentUpdates_2Raw(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feedback/updates', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeedbackAndCommentUpdates_2(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedbackAndCommentUpdates_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список отзывов для магазина. */
                $responseContent = new \App\DTO\GetFeedbackListResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedbackListResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedbackAndCommentUpdates_2Result(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedbackListResponse
    {
        return $this->getSuccessfulContent(...$this->getFeedbackAndCommentUpdates_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeedbackAndCommentUpdates_3
    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedbackAndCommentUpdates_3Raw(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feedback/updates', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeedbackAndCommentUpdates_3(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedbackAndCommentUpdates_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список отзывов для магазина. */
                $responseContent = new \App\DTO\GetFeedbackListResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Новые и обновленные отзывы о магазине
     * @param \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedbackListResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedbackAndCommentUpdates_3Result(
        \App\DTO\GetFeedbackAndCommentUpdatesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedbackListResponse
    {
        return $this->getSuccessfulContent(...$this->getFeedbackAndCommentUpdates_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeeds
    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeedsRaw(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeeds(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeedsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список прайс-листов. */
                $responseContent = new \App\DTO\GetFeedsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeedsResult(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedsResponse
    {
        return $this->getSuccessfulContent(...$this->getFeeds($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeeds_0
    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeeds_0Raw(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeeds_0(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeeds_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список прайс-листов. */
                $responseContent = new \App\DTO\GetFeedsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeeds_0Result(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedsResponse
    {
        return $this->getSuccessfulContent(...$this->getFeeds_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeeds_1
    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeeds_1Raw(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeeds_1(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeeds_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список прайс-листов. */
                $responseContent = new \App\DTO\GetFeedsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeeds_1Result(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedsResponse
    {
        return $this->getSuccessfulContent(...$this->getFeeds_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeeds_2
    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeeds_2Raw(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeeds_2(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeeds_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список прайс-листов. */
                $responseContent = new \App\DTO\GetFeedsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeeds_2Result(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedsResponse
    {
        return $this->getSuccessfulContent(...$this->getFeeds_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFeeds_3
    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFeeds_3Raw(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/feeds', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFeeds_3(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFeeds_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список прайс-листов. */
                $responseContent = new \App\DTO\GetFeedsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список прайс-листов магазина
     * @param \App\DTO\GetFeedsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFeedsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFeeds_3Result(
        \App\DTO\GetFeedsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFeedsResponse
    {
        return $this->getSuccessfulContent(...$this->getFeeds_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getFulfillmentWarehouses
    /**
     * Идентификаторы складов Маркета (FBY)
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFulfillmentWarehousesRaw(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/warehouses', [], []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Идентификаторы складов Маркета (FBY)
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFulfillmentWarehouses(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFulfillmentWarehousesRaw($security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список складов. */
                $responseContent = new \App\DTO\GetFulfillmentWarehousesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Идентификаторы складов Маркета (FBY)
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFulfillmentWarehousesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFulfillmentWarehousesResult(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFulfillmentWarehousesResponse
    {
        return $this->getSuccessfulContent(...$this->getFulfillmentWarehouses($security, $responseMediaType));
    }
    //endregion

    //region getFulfillmentWarehouses_0
    /**
     * Идентификаторы складов Маркета (FBY)
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getFulfillmentWarehouses_0Raw(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/warehouses', [], []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Идентификаторы складов Маркета (FBY)
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getFulfillmentWarehouses_0(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getFulfillmentWarehouses_0Raw($security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список складов. */
                $responseContent = new \App\DTO\GetFulfillmentWarehousesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Идентификаторы складов Маркета (FBY)
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetFulfillmentWarehousesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getFulfillmentWarehouses_0Result(
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetFulfillmentWarehousesResponse
    {
        return $this->getSuccessfulContent(...$this->getFulfillmentWarehouses_0($security, $responseMediaType));
    }
    //endregion

    //region getGoodsFeedbackComments
    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsFeedbackCommentsRaw(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsFeedbackComments(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsFeedbackCommentsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Дерево комментариев к отзыву. */
                $responseContent = new \App\DTO\GetGoodsFeedbackCommentsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsFeedbackCommentsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsFeedbackCommentsResult(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsFeedbackCommentsResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsFeedbackComments($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsFeedbackComments_0
    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsFeedbackComments_0Raw(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsFeedbackComments_0(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsFeedbackComments_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Дерево комментариев к отзыву. */
                $responseContent = new \App\DTO\GetGoodsFeedbackCommentsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsFeedbackCommentsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsFeedbackComments_0Result(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsFeedbackCommentsResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsFeedbackComments_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsFeedbackComments_1
    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsFeedbackComments_1Raw(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsFeedbackComments_1(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsFeedbackComments_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Дерево комментариев к отзыву. */
                $responseContent = new \App\DTO\GetGoodsFeedbackCommentsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsFeedbackCommentsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsFeedbackComments_1Result(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsFeedbackCommentsResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsFeedbackComments_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsFeedbackComments_2
    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsFeedbackComments_2Raw(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsFeedbackComments_2(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsFeedbackComments_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Дерево комментариев к отзыву. */
                $responseContent = new \App\DTO\GetGoodsFeedbackCommentsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsFeedbackCommentsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsFeedbackComments_2Result(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsFeedbackCommentsResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsFeedbackComments_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsFeedbackComments_3
    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsFeedbackComments_3Raw(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsFeedbackComments_3(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsFeedbackComments_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Дерево комментариев к отзыву. */
                $responseContent = new \App\DTO\GetGoodsFeedbackCommentsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение комментариев к отзыву
     * @param \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsFeedbackCommentsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsFeedbackComments_3Result(
        \App\DTO\GetGoodsFeedbackCommentsParameterData $parameters,
        \App\DTO\GetGoodsFeedbackCommentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsFeedbackCommentsResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsFeedbackComments_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsFeedbacks
    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsFeedbacksRaw(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsFeedbacks(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsFeedbacksRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список отзывов. */
                $responseContent = new \App\DTO\GetGoodsFeedbackResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsFeedbackResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsFeedbacksResult(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsFeedbackResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsFeedbacks($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsFeedbacks_0
    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsFeedbacks_0Raw(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsFeedbacks_0(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsFeedbacks_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список отзывов. */
                $responseContent = new \App\DTO\GetGoodsFeedbackResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsFeedbackResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsFeedbacks_0Result(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsFeedbackResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsFeedbacks_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsFeedbacks_1
    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsFeedbacks_1Raw(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsFeedbacks_1(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsFeedbacks_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список отзывов. */
                $responseContent = new \App\DTO\GetGoodsFeedbackResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsFeedbackResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsFeedbacks_1Result(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsFeedbackResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsFeedbacks_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsFeedbacks_2
    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsFeedbacks_2Raw(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsFeedbacks_2(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsFeedbacks_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список отзывов. */
                $responseContent = new \App\DTO\GetGoodsFeedbackResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsFeedbackResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsFeedbacks_2Result(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsFeedbackResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsFeedbacks_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsFeedbacks_3
    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsFeedbacks_3Raw(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsFeedbacks_3(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsFeedbacks_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список отзывов. */
                $responseContent = new \App\DTO\GetGoodsFeedbackResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение отзывов о товарах продавца
     * @param \App\DTO\GetGoodsFeedbacksParameterData $parameters
     * @param \App\DTO\GetGoodsFeedbackRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsFeedbackResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsFeedbacks_3Result(
        \App\DTO\GetGoodsFeedbacksParameterData $parameters,
        \App\DTO\GetGoodsFeedbackRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsFeedbackResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsFeedbacks_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsStats
    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsStatsRaw(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/stats/skus', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsStats(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsStatsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Отчет по товарам. */
                $responseContent = new \App\DTO\GetGoodsStatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsStatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsStatsResult(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsStatsResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsStats($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsStats_0
    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsStats_0Raw(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/stats/skus', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsStats_0(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsStats_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Отчет по товарам. */
                $responseContent = new \App\DTO\GetGoodsStatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsStatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsStats_0Result(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsStatsResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsStats_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsStats_1
    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsStats_1Raw(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/stats/skus', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsStats_1(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsStats_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Отчет по товарам. */
                $responseContent = new \App\DTO\GetGoodsStatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsStatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsStats_1Result(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsStatsResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsStats_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsStats_2
    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsStats_2Raw(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/stats/skus', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsStats_2(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsStats_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Отчет по товарам. */
                $responseContent = new \App\DTO\GetGoodsStatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsStatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsStats_2Result(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsStatsResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsStats_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getGoodsStats_3
    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getGoodsStats_3Raw(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/stats/skus', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getGoodsStats_3(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getGoodsStats_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Отчет по товарам. */
                $responseContent = new \App\DTO\GetGoodsStatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отчет по товарам
     * @param \App\DTO\GetGoodsStatsParameterData $parameters
     * @param \App\DTO\GetGoodsStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetGoodsStatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getGoodsStats_3Result(
        \App\DTO\GetGoodsStatsParameterData $parameters,
        \App\DTO\GetGoodsStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetGoodsStatsResponse
    {
        return $this->getSuccessfulContent(...$this->getGoodsStats_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getHiddenOffers
    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getHiddenOffersRaw(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/hidden-offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getHiddenOffers(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getHiddenOffersRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о скрытых вами товарах. */
                $responseContent = new \App\DTO\GetHiddenOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetHiddenOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getHiddenOffersResult(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetHiddenOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getHiddenOffers($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getHiddenOffers_0
    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getHiddenOffers_0Raw(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/hidden-offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getHiddenOffers_0(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getHiddenOffers_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о скрытых вами товарах. */
                $responseContent = new \App\DTO\GetHiddenOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetHiddenOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getHiddenOffers_0Result(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetHiddenOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getHiddenOffers_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getHiddenOffers_1
    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getHiddenOffers_1Raw(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/hidden-offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getHiddenOffers_1(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getHiddenOffers_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о скрытых вами товарах. */
                $responseContent = new \App\DTO\GetHiddenOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetHiddenOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getHiddenOffers_1Result(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetHiddenOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getHiddenOffers_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getHiddenOffers_2
    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getHiddenOffers_2Raw(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/hidden-offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getHiddenOffers_2(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getHiddenOffers_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о скрытых вами товарах. */
                $responseContent = new \App\DTO\GetHiddenOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetHiddenOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getHiddenOffers_2Result(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetHiddenOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getHiddenOffers_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getHiddenOffers_3
    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getHiddenOffers_3Raw(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/hidden-offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getHiddenOffers_3(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getHiddenOffers_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о скрытых вами товарах. */
                $responseContent = new \App\DTO\GetHiddenOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о скрытых вами товарах
     * @param \App\DTO\GetHiddenOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetHiddenOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getHiddenOffers_3Result(
        \App\DTO\GetHiddenOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetHiddenOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getHiddenOffers_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getModel
    /**
     * Информация об одной модели
     * @param \App\DTO\GetModelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getModelRaw(
        \App\DTO\GetModelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/models/{modelId}', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об одной модели
     * @param \App\DTO\GetModelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getModel(
        \App\DTO\GetModelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getModelRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о модели. */
                $responseContent = new \App\DTO\GetModelsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об одной модели
     * @param \App\DTO\GetModelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetModelsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getModelResult(
        \App\DTO\GetModelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetModelsResponse
    {
        return $this->getSuccessfulContent(...$this->getModel($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getModelOffers
    /**
     * Список предложений для одной модели
     * @param \App\DTO\GetModelOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getModelOffersRaw(
        \App\DTO\GetModelOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/models/{modelId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список предложений для одной модели
     * @param \App\DTO\GetModelOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getModelOffers(
        \App\DTO\GetModelOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getModelOffersRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список предложений для модели. */
                $responseContent = new \App\DTO\GetModelsOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список предложений для одной модели
     * @param \App\DTO\GetModelOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetModelsOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getModelOffersResult(
        \App\DTO\GetModelOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetModelsOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getModelOffers($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getModelOffers_0
    /**
     * Список предложений для одной модели
     * @param \App\DTO\GetModelOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getModelOffers_0Raw(
        \App\DTO\GetModelOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/models/{modelId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список предложений для одной модели
     * @param \App\DTO\GetModelOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getModelOffers_0(
        \App\DTO\GetModelOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getModelOffers_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список предложений для модели. */
                $responseContent = new \App\DTO\GetModelsOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список предложений для одной модели
     * @param \App\DTO\GetModelOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetModelsOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getModelOffers_0Result(
        \App\DTO\GetModelOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetModelsOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getModelOffers_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getModel_0
    /**
     * Информация об одной модели
     * @param \App\DTO\GetModelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getModel_0Raw(
        \App\DTO\GetModelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/models/{modelId}', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об одной модели
     * @param \App\DTO\GetModelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getModel_0(
        \App\DTO\GetModelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getModel_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о модели. */
                $responseContent = new \App\DTO\GetModelsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об одной модели
     * @param \App\DTO\GetModelParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetModelsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getModel_0Result(
        \App\DTO\GetModelParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetModelsResponse
    {
        return $this->getSuccessfulContent(...$this->getModel_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getModels
    /**
     * Информация о нескольких моделях
     * @param \App\DTO\GetModelsParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getModelsRaw(
        \App\DTO\GetModelsParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/models', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о нескольких моделях
     * @param \App\DTO\GetModelsParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getModels(
        \App\DTO\GetModelsParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getModelsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о моделях. */
                $responseContent = new \App\DTO\GetModelsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о нескольких моделях
     * @param \App\DTO\GetModelsParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetModelsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getModelsResult(
        \App\DTO\GetModelsParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetModelsResponse
    {
        return $this->getSuccessfulContent(...$this->getModels($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getModelsOffers
    /**
     * Список предложений для нескольких моделей
     * @param \App\DTO\GetModelsOffersParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getModelsOffersRaw(
        \App\DTO\GetModelsOffersParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/models/offers', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список предложений для нескольких моделей
     * @param \App\DTO\GetModelsOffersParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getModelsOffers(
        \App\DTO\GetModelsOffersParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getModelsOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список предложений для моделей. */
                $responseContent = new \App\DTO\GetModelsOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список предложений для нескольких моделей
     * @param \App\DTO\GetModelsOffersParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetModelsOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getModelsOffersResult(
        \App\DTO\GetModelsOffersParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetModelsOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getModelsOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getModelsOffers_0
    /**
     * Список предложений для нескольких моделей
     * @param \App\DTO\GetModelsOffersParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getModelsOffers_0Raw(
        \App\DTO\GetModelsOffersParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/models/offers', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список предложений для нескольких моделей
     * @param \App\DTO\GetModelsOffersParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getModelsOffers_0(
        \App\DTO\GetModelsOffersParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getModelsOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список предложений для моделей. */
                $responseContent = new \App\DTO\GetModelsOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список предложений для нескольких моделей
     * @param \App\DTO\GetModelsOffersParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetModelsOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getModelsOffers_0Result(
        \App\DTO\GetModelsOffersParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetModelsOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getModelsOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getModels_0
    /**
     * Информация о нескольких моделях
     * @param \App\DTO\GetModelsParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getModels_0Raw(
        \App\DTO\GetModelsParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/models', [], $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о нескольких моделях
     * @param \App\DTO\GetModelsParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getModels_0(
        \App\DTO\GetModelsParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getModels_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о моделях. */
                $responseContent = new \App\DTO\GetModelsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о нескольких моделях
     * @param \App\DTO\GetModelsParameterData $parameters
     * @param \App\DTO\GetModelsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetModelsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getModels_0Result(
        \App\DTO\GetModelsParameterData $parameters,
        \App\DTO\GetModelsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetModelsResponse
    {
        return $this->getSuccessfulContent(...$this->getModels_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferCardsContentStatus
    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferCardsContentStatusRaw(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-cards', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferCardsContentStatus(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferCardsContentStatusRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о карточках указанных товаров. */
                $responseContent = new \App\DTO\GetOfferCardsContentStatusResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferCardsContentStatusResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferCardsContentStatusResult(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferCardsContentStatusResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferCardsContentStatus($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferCardsContentStatus_0
    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferCardsContentStatus_0Raw(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-cards', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferCardsContentStatus_0(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferCardsContentStatus_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о карточках указанных товаров. */
                $responseContent = new \App\DTO\GetOfferCardsContentStatusResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferCardsContentStatusResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferCardsContentStatus_0Result(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferCardsContentStatusResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferCardsContentStatus_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferCardsContentStatus_1
    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferCardsContentStatus_1Raw(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-cards', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferCardsContentStatus_1(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferCardsContentStatus_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о карточках указанных товаров. */
                $responseContent = new \App\DTO\GetOfferCardsContentStatusResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferCardsContentStatusResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferCardsContentStatus_1Result(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferCardsContentStatusResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferCardsContentStatus_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferCardsContentStatus_2
    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferCardsContentStatus_2Raw(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-cards', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferCardsContentStatus_2(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferCardsContentStatus_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о карточках указанных товаров. */
                $responseContent = new \App\DTO\GetOfferCardsContentStatusResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferCardsContentStatusResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferCardsContentStatus_2Result(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferCardsContentStatusResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferCardsContentStatus_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferCardsContentStatus_3
    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferCardsContentStatus_3Raw(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-cards', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferCardsContentStatus_3(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferCardsContentStatus_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о карточках указанных товаров. */
                $responseContent = new \App\DTO\GetOfferCardsContentStatusResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение информации о заполненности карточек магазина
     * @param \App\DTO\GetOfferCardsContentStatusParameterData $parameters
     * @param \App\DTO\GetOfferCardsContentStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferCardsContentStatusResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferCardsContentStatus_3Result(
        \App\DTO\GetOfferCardsContentStatusParameterData $parameters,
        \App\DTO\GetOfferCardsContentStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferCardsContentStatusResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferCardsContentStatus_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferMappingEntries
    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferMappingEntriesRaw(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offer-mapping-entries', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferMappingEntries(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferMappingEntriesRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetOfferMappingEntriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferMappingEntriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferMappingEntriesResult(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferMappingEntriesResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferMappingEntries($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOfferMappingEntries_0
    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferMappingEntries_0Raw(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offer-mapping-entries', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferMappingEntries_0(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferMappingEntries_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetOfferMappingEntriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferMappingEntriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferMappingEntries_0Result(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferMappingEntriesResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferMappingEntries_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOfferMappingEntries_1
    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferMappingEntries_1Raw(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offer-mapping-entries', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferMappingEntries_1(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferMappingEntries_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetOfferMappingEntriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferMappingEntriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferMappingEntries_1Result(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferMappingEntriesResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferMappingEntries_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOfferMappingEntries_2
    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferMappingEntries_2Raw(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offer-mapping-entries', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferMappingEntries_2(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferMappingEntries_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetOfferMappingEntriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferMappingEntriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferMappingEntries_2Result(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferMappingEntriesResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferMappingEntries_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOfferMappingEntries_3
    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferMappingEntries_3Raw(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offer-mapping-entries', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferMappingEntries_3(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferMappingEntries_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetOfferMappingEntriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список товаров в каталоге
     * @param \App\DTO\GetOfferMappingEntriesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferMappingEntriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferMappingEntries_3Result(
        \App\DTO\GetOfferMappingEntriesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferMappingEntriesResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferMappingEntries_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOfferMappings
    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferMappingsRaw(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferMappings(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferMappingsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferMappingsResult(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferMappings($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferMappings_0
    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferMappings_0Raw(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferMappings_0(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferMappings_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferMappings_0Result(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferMappings_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferMappings_1
    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferMappings_1Raw(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferMappings_1(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferMappings_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferMappings_1Result(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferMappings_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferMappings_2
    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferMappings_2Raw(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferMappings_2(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferMappings_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferMappings_2Result(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferMappings_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferMappings_3
    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferMappings_3Raw(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferMappings_3(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferMappings_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о товарах в каталоге
     * @param \App\DTO\GetOfferMappingsParameterData $parameters
     * @param \App\DTO\GetOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferMappings_3Result(
        \App\DTO\GetOfferMappingsParameterData $parameters,
        \App\DTO\GetOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferMappings_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferRecommendations
    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferRecommendationsRaw(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offers/recommendations', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferRecommendations(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferRecommendationsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров с рекомендациями. */
                $responseContent = new \App\DTO\GetOfferRecommendationsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferRecommendationsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferRecommendationsResult(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferRecommendationsResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferRecommendations($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferRecommendations_0
    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferRecommendations_0Raw(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offers/recommendations', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferRecommendations_0(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferRecommendations_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров с рекомендациями. */
                $responseContent = new \App\DTO\GetOfferRecommendationsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferRecommendationsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferRecommendations_0Result(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferRecommendationsResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferRecommendations_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferRecommendations_1
    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferRecommendations_1Raw(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offers/recommendations', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferRecommendations_1(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferRecommendations_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров с рекомендациями. */
                $responseContent = new \App\DTO\GetOfferRecommendationsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferRecommendationsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferRecommendations_1Result(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferRecommendationsResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferRecommendations_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferRecommendations_2
    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferRecommendations_2Raw(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offers/recommendations', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferRecommendations_2(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferRecommendations_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров с рекомендациями. */
                $responseContent = new \App\DTO\GetOfferRecommendationsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferRecommendationsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferRecommendations_2Result(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferRecommendationsResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferRecommendations_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOfferRecommendations_3
    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOfferRecommendations_3Raw(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offers/recommendations', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOfferRecommendations_3(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOfferRecommendations_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров с рекомендациями. */
                $responseContent = new \App\DTO\GetOfferRecommendationsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендации Маркета, касающиеся цен
     * @param \App\DTO\GetOfferRecommendationsParameterData $parameters
     * @param \App\DTO\GetOfferRecommendationsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOfferRecommendationsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOfferRecommendations_3Result(
        \App\DTO\GetOfferRecommendationsParameterData $parameters,
        \App\DTO\GetOfferRecommendationsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOfferRecommendationsResponse
    {
        return $this->getSuccessfulContent(...$this->getOfferRecommendations_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOffers
    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOffersRaw(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOffers(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOffersRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Предложения магазина. */
                $responseContent = new \App\DTO\GetOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOffersResult(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getOffers($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOffers_0
    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOffers_0Raw(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOffers_0(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOffers_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Предложения магазина. */
                $responseContent = new \App\DTO\GetOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOffers_0Result(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getOffers_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOffers_1
    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOffers_1Raw(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOffers_1(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOffers_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Предложения магазина. */
                $responseContent = new \App\DTO\GetOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOffers_1Result(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getOffers_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOffers_2
    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOffers_2Raw(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOffers_2(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOffers_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Предложения магазина. */
                $responseContent = new \App\DTO\GetOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOffers_2Result(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getOffers_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOffers_3
    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOffers_3Raw(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOffers_3(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOffers_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Предложения магазина. */
                $responseContent = new \App\DTO\GetOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Предложения магазина
     * @param \App\DTO\GetOffersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOffers_3Result(
        \App\DTO\GetOffersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getOffers_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrder
    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderRaw(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrder(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказе. */
                $responseContent = new \App\DTO\GetOrderResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrderResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderResult(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrderResponse
    {
        return $this->getSuccessfulContent(...$this->getOrder($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBusinessBuyerInfo
    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBusinessBuyerInfoRaw(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/business-buyer', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBusinessBuyerInfo(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBusinessBuyerInfoRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о покупателе. */
                $responseContent = new \App\DTO\GetBusinessBuyerInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessBuyerInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBusinessBuyerInfoResult(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessBuyerInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBusinessBuyerInfo($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBusinessBuyerInfo_0
    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBusinessBuyerInfo_0Raw(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/business-buyer', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBusinessBuyerInfo_0(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBusinessBuyerInfo_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о покупателе. */
                $responseContent = new \App\DTO\GetBusinessBuyerInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessBuyerInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBusinessBuyerInfo_0Result(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessBuyerInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBusinessBuyerInfo_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBusinessBuyerInfo_1
    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBusinessBuyerInfo_1Raw(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/business-buyer', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBusinessBuyerInfo_1(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBusinessBuyerInfo_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о покупателе. */
                $responseContent = new \App\DTO\GetBusinessBuyerInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessBuyerInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBusinessBuyerInfo_1Result(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessBuyerInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBusinessBuyerInfo_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBusinessBuyerInfo_2
    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBusinessBuyerInfo_2Raw(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/business-buyer', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBusinessBuyerInfo_2(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBusinessBuyerInfo_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о покупателе. */
                $responseContent = new \App\DTO\GetBusinessBuyerInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessBuyerInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBusinessBuyerInfo_2Result(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessBuyerInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBusinessBuyerInfo_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBusinessBuyerInfo_3
    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBusinessBuyerInfo_3Raw(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/business-buyer', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBusinessBuyerInfo_3(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBusinessBuyerInfo_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о покупателе. */
                $responseContent = new \App\DTO\GetBusinessBuyerInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о покупателе — юридическом лице
     * @param \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessBuyerInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBusinessBuyerInfo_3Result(
        \App\DTO\GetOrderBusinessBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessBuyerInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBusinessBuyerInfo_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBusinessDocumentsInfo
    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBusinessDocumentsInfoRaw(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/documents', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBusinessDocumentsInfo(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBusinessDocumentsInfoRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о документах. */
                $responseContent = new \App\DTO\GetBusinessDocumentsInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessDocumentsInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBusinessDocumentsInfoResult(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessDocumentsInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBusinessDocumentsInfo($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBusinessDocumentsInfo_0
    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBusinessDocumentsInfo_0Raw(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/documents', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBusinessDocumentsInfo_0(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBusinessDocumentsInfo_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о документах. */
                $responseContent = new \App\DTO\GetBusinessDocumentsInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessDocumentsInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBusinessDocumentsInfo_0Result(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessDocumentsInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBusinessDocumentsInfo_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBusinessDocumentsInfo_1
    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBusinessDocumentsInfo_1Raw(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/documents', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBusinessDocumentsInfo_1(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBusinessDocumentsInfo_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о документах. */
                $responseContent = new \App\DTO\GetBusinessDocumentsInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessDocumentsInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBusinessDocumentsInfo_1Result(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessDocumentsInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBusinessDocumentsInfo_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBusinessDocumentsInfo_2
    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBusinessDocumentsInfo_2Raw(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/documents', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBusinessDocumentsInfo_2(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBusinessDocumentsInfo_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о документах. */
                $responseContent = new \App\DTO\GetBusinessDocumentsInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessDocumentsInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBusinessDocumentsInfo_2Result(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessDocumentsInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBusinessDocumentsInfo_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBusinessDocumentsInfo_3
    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBusinessDocumentsInfo_3Raw(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/documents', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBusinessDocumentsInfo_3(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBusinessDocumentsInfo_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о документах. */
                $responseContent = new \App\DTO\GetBusinessDocumentsInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о документах
     * @param \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetBusinessDocumentsInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBusinessDocumentsInfo_3Result(
        \App\DTO\GetOrderBusinessDocumentsInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetBusinessDocumentsInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBusinessDocumentsInfo_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBuyerInfo
    /**
     * Информация о покупателе — физическом лице
     * @param \App\DTO\GetOrderBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBuyerInfoRaw(
        \App\DTO\GetOrderBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/buyer', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о покупателе — физическом лице
     * @param \App\DTO\GetOrderBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBuyerInfo(
        \App\DTO\GetOrderBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBuyerInfoRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о покупателе. */
                $responseContent = new \App\DTO\GetOrderBuyerInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о покупателе — физическом лице
     * @param \App\DTO\GetOrderBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrderBuyerInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBuyerInfoResult(
        \App\DTO\GetOrderBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrderBuyerInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBuyerInfo($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderBuyerInfo_0
    /**
     * Информация о покупателе — физическом лице
     * @param \App\DTO\GetOrderBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderBuyerInfo_0Raw(
        \App\DTO\GetOrderBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/buyer', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о покупателе — физическом лице
     * @param \App\DTO\GetOrderBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderBuyerInfo_0(
        \App\DTO\GetOrderBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderBuyerInfo_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о покупателе. */
                $responseContent = new \App\DTO\GetOrderBuyerInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о покупателе — физическом лице
     * @param \App\DTO\GetOrderBuyerInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrderBuyerInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderBuyerInfo_0Result(
        \App\DTO\GetOrderBuyerInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrderBuyerInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderBuyerInfo_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderLabelsData
    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderLabelsDataRaw(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderLabelsData(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderLabelsDataRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация для печати ярлыков. */
                $responseContent = new \App\DTO\GetOrderLabelsDataResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrderLabelsDataResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderLabelsDataResult(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrderLabelsDataResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderLabelsData($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderLabelsData_0
    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderLabelsData_0Raw(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderLabelsData_0(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderLabelsData_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация для печати ярлыков. */
                $responseContent = new \App\DTO\GetOrderLabelsDataResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrderLabelsDataResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderLabelsData_0Result(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrderLabelsDataResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderLabelsData_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderLabelsData_1
    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderLabelsData_1Raw(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderLabelsData_1(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderLabelsData_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация для печати ярлыков. */
                $responseContent = new \App\DTO\GetOrderLabelsDataResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrderLabelsDataResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderLabelsData_1Result(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrderLabelsDataResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderLabelsData_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrderLabelsData_2
    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrderLabelsData_2Raw(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrderLabelsData_2(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrderLabelsData_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация для печати ярлыков. */
                $responseContent = new \App\DTO\GetOrderLabelsDataResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Данные для самостоятельного изготовления ярлыков
     * @param \App\DTO\GetOrderLabelsDataParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrderLabelsDataResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrderLabelsData_2Result(
        \App\DTO\GetOrderLabelsDataParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrderLabelsDataResponse
    {
        return $this->getSuccessfulContent(...$this->getOrderLabelsData_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrder_0
    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrder_0Raw(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrder_0(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrder_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказе. */
                $responseContent = new \App\DTO\GetOrderResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrderResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrder_0Result(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrderResponse
    {
        return $this->getSuccessfulContent(...$this->getOrder_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrder_1
    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrder_1Raw(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrder_1(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrder_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказе. */
                $responseContent = new \App\DTO\GetOrderResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrderResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrder_1Result(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrderResponse
    {
        return $this->getSuccessfulContent(...$this->getOrder_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrder_2
    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrder_2Raw(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrder_2(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrder_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказе. */
                $responseContent = new \App\DTO\GetOrderResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrderResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrder_2Result(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrderResponse
    {
        return $this->getSuccessfulContent(...$this->getOrder_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrder_3
    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrder_3Raw(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrder_3(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrder_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказе. */
                $responseContent = new \App\DTO\GetOrderResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об одном заказе
     * @param \App\DTO\GetOrderParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrderResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrder_3Result(
        \App\DTO\GetOrderParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrderResponse
    {
        return $this->getSuccessfulContent(...$this->getOrder_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrders
    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrdersRaw(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrders(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrdersRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказах. */
                $responseContent = new \App\DTO\GetOrdersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrdersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrdersResult(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrdersResponse
    {
        return $this->getSuccessfulContent(...$this->getOrders($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrdersStats
    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrdersStatsRaw(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/stats/orders', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrdersStats(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrdersStatsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация по заказам. */
                $responseContent = new \App\DTO\GetOrdersStatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOrdersStatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrdersStatsResult(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrdersStatsResponse
    {
        return $this->getSuccessfulContent(...$this->getOrdersStats($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOrdersStats_0
    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrdersStats_0Raw(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/stats/orders', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrdersStats_0(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrdersStats_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация по заказам. */
                $responseContent = new \App\DTO\GetOrdersStatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOrdersStatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrdersStats_0Result(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrdersStatsResponse
    {
        return $this->getSuccessfulContent(...$this->getOrdersStats_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOrdersStats_1
    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrdersStats_1Raw(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/stats/orders', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrdersStats_1(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrdersStats_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация по заказам. */
                $responseContent = new \App\DTO\GetOrdersStatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOrdersStatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrdersStats_1Result(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrdersStatsResponse
    {
        return $this->getSuccessfulContent(...$this->getOrdersStats_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOrdersStats_2
    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrdersStats_2Raw(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/stats/orders', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrdersStats_2(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrdersStats_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация по заказам. */
                $responseContent = new \App\DTO\GetOrdersStatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOrdersStatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrdersStats_2Result(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrdersStatsResponse
    {
        return $this->getSuccessfulContent(...$this->getOrdersStats_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOrdersStats_3
    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrdersStats_3Raw(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/stats/orders', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrdersStats_3(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrdersStats_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация по заказам. */
                $responseContent = new \App\DTO\GetOrdersStatsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Детальная информация по заказам
     * @param \App\DTO\GetOrdersStatsParameterData $parameters
     * @param \App\DTO\GetOrdersStatsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetOrdersStatsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrdersStats_3Result(
        \App\DTO\GetOrdersStatsParameterData $parameters,
        \App\DTO\GetOrdersStatsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrdersStatsResponse
    {
        return $this->getSuccessfulContent(...$this->getOrdersStats_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getOrders_0
    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrders_0Raw(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrders_0(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrders_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказах. */
                $responseContent = new \App\DTO\GetOrdersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrdersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrders_0Result(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrdersResponse
    {
        return $this->getSuccessfulContent(...$this->getOrders_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrders_1
    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrders_1Raw(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrders_1(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrders_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказах. */
                $responseContent = new \App\DTO\GetOrdersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrdersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrders_1Result(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrdersResponse
    {
        return $this->getSuccessfulContent(...$this->getOrders_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrders_2
    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrders_2Raw(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrders_2(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrders_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказах. */
                $responseContent = new \App\DTO\GetOrdersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrdersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrders_2Result(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrdersResponse
    {
        return $this->getSuccessfulContent(...$this->getOrders_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOrders_3
    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOrders_3Raw(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOrders_3(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOrders_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказах. */
                $responseContent = new \App\DTO\GetOrdersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о нескольких заказах
     * @param \App\DTO\GetOrdersParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOrdersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOrders_3Result(
        \App\DTO\GetOrdersParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOrdersResponse
    {
        return $this->getSuccessfulContent(...$this->getOrders_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOutlet
    /**
     * Информация об одной точке продаж
     * @param \App\DTO\GetOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOutletRaw(
        \App\DTO\GetOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/outlets/{outletId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об одной точке продаж
     * @param \App\DTO\GetOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOutlet(
        \App\DTO\GetOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOutletRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о точке продаж. */
                $responseContent = new \App\DTO\GetOutletResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об одной точке продаж
     * @param \App\DTO\GetOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOutletResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOutletResult(
        \App\DTO\GetOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOutletResponse
    {
        return $this->getSuccessfulContent(...$this->getOutlet($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOutletLicenses
    /**
     * Информация о лицензиях для точек продаж
     * @param \App\DTO\GetOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOutletLicensesRaw(
        \App\DTO\GetOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/outlets/licenses', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о лицензиях для точек продаж
     * @param \App\DTO\GetOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOutletLicenses(
        \App\DTO\GetOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOutletLicensesRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Найденные лицензии собственных точек продаж. */
                $responseContent = new \App\DTO\GetOutletLicensesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о лицензиях для точек продаж
     * @param \App\DTO\GetOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOutletLicensesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOutletLicensesResult(
        \App\DTO\GetOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOutletLicensesResponse
    {
        return $this->getSuccessfulContent(...$this->getOutletLicenses($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOutletLicenses_0
    /**
     * Информация о лицензиях для точек продаж
     * @param \App\DTO\GetOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOutletLicenses_0Raw(
        \App\DTO\GetOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/outlets/licenses', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о лицензиях для точек продаж
     * @param \App\DTO\GetOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOutletLicenses_0(
        \App\DTO\GetOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOutletLicenses_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Найденные лицензии собственных точек продаж. */
                $responseContent = new \App\DTO\GetOutletLicensesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о лицензиях для точек продаж
     * @param \App\DTO\GetOutletLicensesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOutletLicensesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOutletLicenses_0Result(
        \App\DTO\GetOutletLicensesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOutletLicensesResponse
    {
        return $this->getSuccessfulContent(...$this->getOutletLicenses_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOutlet_0
    /**
     * Информация об одной точке продаж
     * @param \App\DTO\GetOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOutlet_0Raw(
        \App\DTO\GetOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/outlets/{outletId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об одной точке продаж
     * @param \App\DTO\GetOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOutlet_0(
        \App\DTO\GetOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOutlet_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о точке продаж. */
                $responseContent = new \App\DTO\GetOutletResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об одной точке продаж
     * @param \App\DTO\GetOutletParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOutletResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOutlet_0Result(
        \App\DTO\GetOutletParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOutletResponse
    {
        return $this->getSuccessfulContent(...$this->getOutlet_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOutlets
    /**
     * Информация о нескольких точках продаж
     * @param \App\DTO\GetOutletsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOutletsRaw(
        \App\DTO\GetOutletsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/outlets', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о нескольких точках продаж
     * @param \App\DTO\GetOutletsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOutlets(
        \App\DTO\GetOutletsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOutletsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о точках продаж. */
                $responseContent = new \App\DTO\GetOutletsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о нескольких точках продаж
     * @param \App\DTO\GetOutletsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOutletsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOutletsResult(
        \App\DTO\GetOutletsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOutletsResponse
    {
        return $this->getSuccessfulContent(...$this->getOutlets($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getOutlets_0
    /**
     * Информация о нескольких точках продаж
     * @param \App\DTO\GetOutletsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getOutlets_0Raw(
        \App\DTO\GetOutletsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/outlets', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о нескольких точках продаж
     * @param \App\DTO\GetOutletsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getOutlets_0(
        \App\DTO\GetOutletsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getOutlets_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о точках продаж. */
                $responseContent = new \App\DTO\GetOutletsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о нескольких точках продаж
     * @param \App\DTO\GetOutletsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetOutletsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getOutlets_0Result(
        \App\DTO\GetOutletsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetOutletsResponse
    {
        return $this->getSuccessfulContent(...$this->getOutlets_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getPrices
    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPricesRaw(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offer-prices', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPrices(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPricesRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список всех товаров с установленными ценами. */
                $responseContent = new \App\DTO\GetPricesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetPricesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPricesResult(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPricesResponse
    {
        return $this->getSuccessfulContent(...$this->getPrices($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getPricesByOfferIds
    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPricesByOfferIdsRaw(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPricesByOfferIds(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPricesByOfferIdsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров с установленными для заданного магазина ценами. */
                $responseContent = new \App\DTO\GetPricesByOfferIdsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPricesByOfferIdsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPricesByOfferIdsResult(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPricesByOfferIdsResponse
    {
        return $this->getSuccessfulContent(...$this->getPricesByOfferIds($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPricesByOfferIds_0
    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPricesByOfferIds_0Raw(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPricesByOfferIds_0(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPricesByOfferIds_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров с установленными для заданного магазина ценами. */
                $responseContent = new \App\DTO\GetPricesByOfferIdsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPricesByOfferIdsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPricesByOfferIds_0Result(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPricesByOfferIdsResponse
    {
        return $this->getSuccessfulContent(...$this->getPricesByOfferIds_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPricesByOfferIds_1
    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPricesByOfferIds_1Raw(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPricesByOfferIds_1(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPricesByOfferIds_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров с установленными для заданного магазина ценами. */
                $responseContent = new \App\DTO\GetPricesByOfferIdsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPricesByOfferIdsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPricesByOfferIds_1Result(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPricesByOfferIdsResponse
    {
        return $this->getSuccessfulContent(...$this->getPricesByOfferIds_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPricesByOfferIds_2
    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPricesByOfferIds_2Raw(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPricesByOfferIds_2(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPricesByOfferIds_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров с установленными для заданного магазина ценами. */
                $responseContent = new \App\DTO\GetPricesByOfferIdsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPricesByOfferIdsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPricesByOfferIds_2Result(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPricesByOfferIdsResponse
    {
        return $this->getSuccessfulContent(...$this->getPricesByOfferIds_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPricesByOfferIds_3
    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPricesByOfferIds_3Raw(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPricesByOfferIds_3(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPricesByOfferIds_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров с установленными для заданного магазина ценами. */
                $responseContent = new \App\DTO\GetPricesByOfferIdsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Просмотр цен на указанные товары в магазине
     * @param \App\DTO\GetPricesByOfferIdsParameterData $parameters
     * @param \App\DTO\GetPricesByOfferIdsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPricesByOfferIdsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPricesByOfferIds_3Result(
        \App\DTO\GetPricesByOfferIdsParameterData $parameters,
        \App\DTO\GetPricesByOfferIdsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPricesByOfferIdsResponse
    {
        return $this->getSuccessfulContent(...$this->getPricesByOfferIds_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPrices_0
    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPrices_0Raw(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offer-prices', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPrices_0(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPrices_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список всех товаров с установленными ценами. */
                $responseContent = new \App\DTO\GetPricesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetPricesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPrices_0Result(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPricesResponse
    {
        return $this->getSuccessfulContent(...$this->getPrices_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getPrices_1
    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPrices_1Raw(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offer-prices', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPrices_1(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPrices_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список всех товаров с установленными ценами. */
                $responseContent = new \App\DTO\GetPricesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetPricesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPrices_1Result(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPricesResponse
    {
        return $this->getSuccessfulContent(...$this->getPrices_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getPrices_2
    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPrices_2Raw(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offer-prices', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPrices_2(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPrices_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список всех товаров с установленными ценами. */
                $responseContent = new \App\DTO\GetPricesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetPricesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPrices_2Result(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPricesResponse
    {
        return $this->getSuccessfulContent(...$this->getPrices_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getPrices_3
    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPrices_3Raw(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/offer-prices', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPrices_3(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPrices_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список всех товаров с установленными ценами. */
                $responseContent = new \App\DTO\GetPricesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список цен
     * @param \App\DTO\GetPricesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetPricesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPrices_3Result(
        \App\DTO\GetPricesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPricesResponse
    {
        return $this->getSuccessfulContent(...$this->getPrices_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getPromoOffers
    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPromoOffersRaw(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPromoOffers(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPromoOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров, которые участвуют или могут участвовать в акции. */
                $responseContent = new \App\DTO\GetPromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPromoOffersResult(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getPromoOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPromoOffers_0
    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPromoOffers_0Raw(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPromoOffers_0(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPromoOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров, которые участвуют или могут участвовать в акции. */
                $responseContent = new \App\DTO\GetPromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPromoOffers_0Result(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getPromoOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPromoOffers_1
    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPromoOffers_1Raw(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPromoOffers_1(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPromoOffers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров, которые участвуют или могут участвовать в акции. */
                $responseContent = new \App\DTO\GetPromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPromoOffers_1Result(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getPromoOffers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPromoOffers_2
    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPromoOffers_2Raw(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPromoOffers_2(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPromoOffers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров, которые участвуют или могут участвовать в акции. */
                $responseContent = new \App\DTO\GetPromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPromoOffers_2Result(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getPromoOffers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPromoOffers_3
    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPromoOffers_3Raw(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPromoOffers_3(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPromoOffers_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список товаров, которые участвуют или могут участвовать в акции. */
                $responseContent = new \App\DTO\GetPromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * @param \App\DTO\GetPromoOffersParameterData $parameters
     * @param \App\DTO\GetPromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPromoOffers_3Result(
        \App\DTO\GetPromoOffersParameterData $parameters,
        \App\DTO\GetPromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->getPromoOffers_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPromos
    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPromosRaw(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPromos(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPromosRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список акций Маркета. */
                $responseContent = new \App\DTO\GetPromosResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPromosResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPromosResult(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPromosResponse
    {
        return $this->getSuccessfulContent(...$this->getPromos($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPromos_0
    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPromos_0Raw(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPromos_0(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPromos_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список акций Маркета. */
                $responseContent = new \App\DTO\GetPromosResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPromosResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPromos_0Result(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPromosResponse
    {
        return $this->getSuccessfulContent(...$this->getPromos_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPromos_1
    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPromos_1Raw(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPromos_1(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPromos_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список акций Маркета. */
                $responseContent = new \App\DTO\GetPromosResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPromosResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPromos_1Result(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPromosResponse
    {
        return $this->getSuccessfulContent(...$this->getPromos_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPromos_2
    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPromos_2Raw(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPromos_2(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPromos_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список акций Маркета. */
                $responseContent = new \App\DTO\GetPromosResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPromosResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPromos_2Result(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPromosResponse
    {
        return $this->getSuccessfulContent(...$this->getPromos_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getPromos_3
    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getPromos_3Raw(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getPromos_3(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getPromos_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список акций Маркета. */
                $responseContent = new \App\DTO\GetPromosResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение списка акций
     * @param \App\DTO\GetPromosParameterData $parameters
     * @param \App\DTO\GetPromosRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetPromosResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getPromos_3Result(
        \App\DTO\GetPromosParameterData $parameters,
        \App\DTO\GetPromosRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetPromosResponse
    {
        return $this->getSuccessfulContent(...$this->getPromos_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getQualityRatingDetails
    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getQualityRatingDetailsRaw(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/ratings/quality/details', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getQualityRatingDetails(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getQualityRatingDetailsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказах, которые повлияли на индекс качества. */
                $responseContent = new \App\DTO\GetQualityRatingDetailsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetQualityRatingDetailsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getQualityRatingDetailsResult(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQualityRatingDetailsResponse
    {
        return $this->getSuccessfulContent(...$this->getQualityRatingDetails($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getQualityRatingDetails_0
    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getQualityRatingDetails_0Raw(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/ratings/quality/details', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getQualityRatingDetails_0(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getQualityRatingDetails_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказах, которые повлияли на индекс качества. */
                $responseContent = new \App\DTO\GetQualityRatingDetailsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetQualityRatingDetailsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getQualityRatingDetails_0Result(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQualityRatingDetailsResponse
    {
        return $this->getSuccessfulContent(...$this->getQualityRatingDetails_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getQualityRatingDetails_1
    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getQualityRatingDetails_1Raw(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/ratings/quality/details', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getQualityRatingDetails_1(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getQualityRatingDetails_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказах, которые повлияли на индекс качества. */
                $responseContent = new \App\DTO\GetQualityRatingDetailsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetQualityRatingDetailsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getQualityRatingDetails_1Result(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQualityRatingDetailsResponse
    {
        return $this->getSuccessfulContent(...$this->getQualityRatingDetails_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getQualityRatingDetails_2
    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getQualityRatingDetails_2Raw(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/ratings/quality/details', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getQualityRatingDetails_2(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getQualityRatingDetails_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о заказах, которые повлияли на индекс качества. */
                $responseContent = new \App\DTO\GetQualityRatingDetailsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Заказы, которые повлияли на индекс качества
     * @param \App\DTO\GetQualityRatingDetailsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetQualityRatingDetailsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getQualityRatingDetails_2Result(
        \App\DTO\GetQualityRatingDetailsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQualityRatingDetailsResponse
    {
        return $this->getSuccessfulContent(...$this->getQualityRatingDetails_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getQualityRatings
    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getQualityRatingsRaw(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/ratings/quality', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getQualityRatings(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getQualityRatingsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Значение индекса качества магазинов и его составляющие. */
                $responseContent = new \App\DTO\GetQualityRatingResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQualityRatingResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getQualityRatingsResult(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQualityRatingResponse
    {
        return $this->getSuccessfulContent(...$this->getQualityRatings($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getQualityRatings_0
    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getQualityRatings_0Raw(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/ratings/quality', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getQualityRatings_0(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getQualityRatings_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Значение индекса качества магазинов и его составляющие. */
                $responseContent = new \App\DTO\GetQualityRatingResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQualityRatingResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getQualityRatings_0Result(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQualityRatingResponse
    {
        return $this->getSuccessfulContent(...$this->getQualityRatings_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getQualityRatings_1
    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getQualityRatings_1Raw(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/ratings/quality', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getQualityRatings_1(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getQualityRatings_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Значение индекса качества магазинов и его составляющие. */
                $responseContent = new \App\DTO\GetQualityRatingResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQualityRatingResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getQualityRatings_1Result(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQualityRatingResponse
    {
        return $this->getSuccessfulContent(...$this->getQualityRatings_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getQualityRatings_2
    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getQualityRatings_2Raw(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/ratings/quality', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getQualityRatings_2(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getQualityRatings_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Значение индекса качества магазинов и его составляющие. */
                $responseContent = new \App\DTO\GetQualityRatingResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQualityRatingResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getQualityRatings_2Result(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQualityRatingResponse
    {
        return $this->getSuccessfulContent(...$this->getQualityRatings_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getQualityRatings_3
    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getQualityRatings_3Raw(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/ratings/quality', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getQualityRatings_3(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getQualityRatings_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Значение индекса качества магазинов и его составляющие. */
                $responseContent = new \App\DTO\GetQualityRatingResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Индекс качества магазинов
     * @param \App\DTO\GetQualityRatingsParameterData $parameters
     * @param \App\DTO\GetQualityRatingRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetQualityRatingResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getQualityRatings_3Result(
        \App\DTO\GetQualityRatingsParameterData $parameters,
        \App\DTO\GetQualityRatingRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetQualityRatingResponse
    {
        return $this->getSuccessfulContent(...$this->getQualityRatings_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getReportInfo
    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReportInfoRaw(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/reports/info/{reportId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReportInfo(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReportInfoRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — `FAILED` или `NO_DATA`, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    */
                $responseContent = new \App\DTO\GetReportInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReportInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReportInfoResult(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReportInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getReportInfo($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReportInfo_0
    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReportInfo_0Raw(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/reports/info/{reportId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReportInfo_0(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReportInfo_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — `FAILED` или `NO_DATA`, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    */
                $responseContent = new \App\DTO\GetReportInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReportInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReportInfo_0Result(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReportInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getReportInfo_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReportInfo_1
    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReportInfo_1Raw(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/reports/info/{reportId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReportInfo_1(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReportInfo_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — `FAILED` или `NO_DATA`, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    */
                $responseContent = new \App\DTO\GetReportInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReportInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReportInfo_1Result(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReportInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getReportInfo_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReportInfo_2
    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReportInfo_2Raw(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/reports/info/{reportId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReportInfo_2(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReportInfo_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — `FAILED` или `NO_DATA`, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    */
                $responseContent = new \App\DTO\GetReportInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReportInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReportInfo_2Result(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReportInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getReportInfo_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReportInfo_3
    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReportInfo_3Raw(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/reports/info/{reportId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReportInfo_3(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReportInfo_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — `FAILED` или `NO_DATA`, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    */
                $responseContent = new \App\DTO\GetReportInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение заданного отчета
     * @param \App\DTO\GetReportInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReportInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReportInfo_3Result(
        \App\DTO\GetReportInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReportInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getReportInfo_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturn
    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturnRaw(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturn(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReturnRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Детали возврата. */
                $responseContent = new \App\DTO\GetReturnResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReturnResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturnResult(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReturnResponse
    {
        return $this->getSuccessfulContent(...$this->getReturn($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturnApplication
    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturnApplicationRaw(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturnApplication(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): array
    {
        $response = $this->getReturnApplicationRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Заявление на возврат. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturnApplicationResult(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): string
    {
        return $this->getSuccessfulContent(...$this->getReturnApplication($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturnApplication_0
    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturnApplication_0Raw(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturnApplication_0(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): array
    {
        $response = $this->getReturnApplication_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Заявление на возврат. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturnApplication_0Result(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): string
    {
        return $this->getSuccessfulContent(...$this->getReturnApplication_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturnApplication_1
    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturnApplication_1Raw(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturnApplication_1(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): array
    {
        $response = $this->getReturnApplication_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Заявление на возврат. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturnApplication_1Result(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): string
    {
        return $this->getSuccessfulContent(...$this->getReturnApplication_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturnApplication_2
    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturnApplication_2Raw(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturnApplication_2(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): array
    {
        $response = $this->getReturnApplication_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Заявление на возврат. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение заявления на возврат
     * @param \App\DTO\GetReturnApplicationParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturnApplication_2Result(
        \App\DTO\GetReturnApplicationParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): string
    {
        return $this->getSuccessfulContent(...$this->getReturnApplication_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturnPhoto
    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturnPhotoRaw(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturnPhoto(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): array
    {
        $response = $this->getReturnPhotoRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Фотография возврата. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturnPhotoResult(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): string
    {
        return $this->getSuccessfulContent(...$this->getReturnPhoto($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturnPhoto_0
    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturnPhoto_0Raw(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturnPhoto_0(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): array
    {
        $response = $this->getReturnPhoto_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Фотография возврата. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturnPhoto_0Result(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): string
    {
        return $this->getSuccessfulContent(...$this->getReturnPhoto_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturnPhoto_1
    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturnPhoto_1Raw(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturnPhoto_1(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): array
    {
        $response = $this->getReturnPhoto_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Фотография возврата. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturnPhoto_1Result(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): string
    {
        return $this->getSuccessfulContent(...$this->getReturnPhoto_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturnPhoto_2
    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturnPhoto_2Raw(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturnPhoto_2(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): array
    {
        $response = $this->getReturnPhoto_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Фотография возврата. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturnPhoto_2Result(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): string
    {
        return $this->getSuccessfulContent(...$this->getReturnPhoto_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturnPhoto_3
    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturnPhoto_3Raw(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturnPhoto_3(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): array
    {
        $response = $this->getReturnPhoto_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Фотография возврата. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение фотографии возврата
     * @param \App\DTO\GetReturnPhotoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturnPhoto_3Result(
        \App\DTO\GetReturnPhotoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/octet-stream'
    ): string
    {
        return $this->getSuccessfulContent(...$this->getReturnPhoto_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturn_0
    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturn_0Raw(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturn_0(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReturn_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Детали возврата. */
                $responseContent = new \App\DTO\GetReturnResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReturnResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturn_0Result(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReturnResponse
    {
        return $this->getSuccessfulContent(...$this->getReturn_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturn_1
    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturn_1Raw(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturn_1(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReturn_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Детали возврата. */
                $responseContent = new \App\DTO\GetReturnResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReturnResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturn_1Result(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReturnResponse
    {
        return $this->getSuccessfulContent(...$this->getReturn_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturn_2
    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturn_2Raw(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturn_2(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReturn_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Детали возврата. */
                $responseContent = new \App\DTO\GetReturnResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReturnResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturn_2Result(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReturnResponse
    {
        return $this->getSuccessfulContent(...$this->getReturn_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturn_3
    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturn_3Raw(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturn_3(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReturn_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Детали возврата. */
                $responseContent = new \App\DTO\GetReturnResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о невыкупе или возврате
     * @param \App\DTO\GetReturnParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReturnResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturn_3Result(
        \App\DTO\GetReturnParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReturnResponse
    {
        return $this->getSuccessfulContent(...$this->getReturn_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturns
    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturnsRaw(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/returns', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturns(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReturnsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Постраничные возвраты партнера. */
                $responseContent = new \App\DTO\GetReturnsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReturnsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturnsResult(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReturnsResponse
    {
        return $this->getSuccessfulContent(...$this->getReturns($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturns_0
    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturns_0Raw(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/returns', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturns_0(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReturns_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Постраничные возвраты партнера. */
                $responseContent = new \App\DTO\GetReturnsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReturnsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturns_0Result(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReturnsResponse
    {
        return $this->getSuccessfulContent(...$this->getReturns_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturns_1
    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturns_1Raw(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/returns', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturns_1(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReturns_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Постраничные возвраты партнера. */
                $responseContent = new \App\DTO\GetReturnsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReturnsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturns_1Result(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReturnsResponse
    {
        return $this->getSuccessfulContent(...$this->getReturns_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturns_2
    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturns_2Raw(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/returns', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturns_2(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReturns_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Постраничные возвраты партнера. */
                $responseContent = new \App\DTO\GetReturnsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReturnsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturns_2Result(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReturnsResponse
    {
        return $this->getSuccessfulContent(...$this->getReturns_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getReturns_3
    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getReturns_3Raw(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/returns', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getReturns_3(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getReturns_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Постраничные возвраты партнера. */
                $responseContent = new \App\DTO\GetReturnsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список невыкупов и возвратов
     * @param \App\DTO\GetReturnsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetReturnsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getReturns_3Result(
        \App\DTO\GetReturnsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetReturnsResponse
    {
        return $this->getSuccessfulContent(...$this->getReturns_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getShipment
    /**
     * Получение информации об одной отгрузке
     * @param \App\DTO\GetShipmentParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getShipmentRaw(
        \App\DTO\GetShipmentParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение информации об одной отгрузке
     * @param \App\DTO\GetShipmentParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getShipment(
        \App\DTO\GetShipmentParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getShipmentRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Найденная отгрузка. */
                $responseContent = new \App\DTO\GetShipmentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение информации об одной отгрузке
     * @param \App\DTO\GetShipmentParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetShipmentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getShipmentResult(
        \App\DTO\GetShipmentParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetShipmentResponse
    {
        return $this->getSuccessfulContent(...$this->getShipment($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getShipmentOrdersInfo
    /**
     * Получение информации о возможности печати ярлыков (FBS)
     * @param \App\DTO\GetShipmentOrdersInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getShipmentOrdersInfoRaw(
        \App\DTO\GetShipmentOrdersInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение информации о возможности печати ярлыков (FBS)
     * @param \App\DTO\GetShipmentOrdersInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getShipmentOrdersInfo(
        \App\DTO\GetShipmentOrdersInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getShipmentOrdersInfoRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация по годным/негодным для печати ярлыков заказам в отгрузке. */
                $responseContent = new \App\DTO\GetShipmentOrdersInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение информации о возможности печати ярлыков (FBS)
     * @param \App\DTO\GetShipmentOrdersInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetShipmentOrdersInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getShipmentOrdersInfoResult(
        \App\DTO\GetShipmentOrdersInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetShipmentOrdersInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getShipmentOrdersInfo($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getShipmentOrdersInfo_0
    /**
     * Получение информации о возможности печати ярлыков (FBS)
     * @param \App\DTO\GetShipmentOrdersInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getShipmentOrdersInfo_0Raw(
        \App\DTO\GetShipmentOrdersInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение информации о возможности печати ярлыков (FBS)
     * @param \App\DTO\GetShipmentOrdersInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getShipmentOrdersInfo_0(
        \App\DTO\GetShipmentOrdersInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getShipmentOrdersInfo_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация по годным/негодным для печати ярлыков заказам в отгрузке. */
                $responseContent = new \App\DTO\GetShipmentOrdersInfoResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение информации о возможности печати ярлыков (FBS)
     * @param \App\DTO\GetShipmentOrdersInfoParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetShipmentOrdersInfoResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getShipmentOrdersInfo_0Result(
        \App\DTO\GetShipmentOrdersInfoParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetShipmentOrdersInfoResponse
    {
        return $this->getSuccessfulContent(...$this->getShipmentOrdersInfo_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getShipment_0
    /**
     * Получение информации об одной отгрузке
     * @param \App\DTO\GetShipmentParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getShipment_0Raw(
        \App\DTO\GetShipmentParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение информации об одной отгрузке
     * @param \App\DTO\GetShipmentParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getShipment_0(
        \App\DTO\GetShipmentParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getShipment_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Найденная отгрузка. */
                $responseContent = new \App\DTO\GetShipmentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение информации об одной отгрузке
     * @param \App\DTO\GetShipmentParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetShipmentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getShipment_0Result(
        \App\DTO\GetShipmentParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetShipmentResponse
    {
        return $this->getSuccessfulContent(...$this->getShipment_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getStocks
    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getStocksRaw(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/stocks', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getStocks(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getStocksRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Остатки товаров на складах. */
                $responseContent = new \App\DTO\GetWarehouseStocksResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetWarehouseStocksResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getStocksResult(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetWarehouseStocksResponse
    {
        return $this->getSuccessfulContent(...$this->getStocks($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getStocks_0
    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getStocks_0Raw(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/stocks', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getStocks_0(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getStocks_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Остатки товаров на складах. */
                $responseContent = new \App\DTO\GetWarehouseStocksResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetWarehouseStocksResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getStocks_0Result(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetWarehouseStocksResponse
    {
        return $this->getSuccessfulContent(...$this->getStocks_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getStocks_1
    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getStocks_1Raw(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/stocks', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getStocks_1(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getStocks_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Остатки товаров на складах. */
                $responseContent = new \App\DTO\GetWarehouseStocksResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetWarehouseStocksResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getStocks_1Result(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetWarehouseStocksResponse
    {
        return $this->getSuccessfulContent(...$this->getStocks_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getStocks_2
    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getStocks_2Raw(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/stocks', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getStocks_2(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getStocks_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Остатки товаров на складах. */
                $responseContent = new \App\DTO\GetWarehouseStocksResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetWarehouseStocksResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getStocks_2Result(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetWarehouseStocksResponse
    {
        return $this->getSuccessfulContent(...$this->getStocks_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getStocks_3
    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getStocks_3Raw(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/stocks', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getStocks_3(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getStocks_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Остатки товаров на складах. */
                $responseContent = new \App\DTO\GetWarehouseStocksResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация об остатках и оборачиваемости
     * @param \App\DTO\GetStocksParameterData $parameters
     * @param \App\DTO\GetWarehouseStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetWarehouseStocksResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getStocks_3Result(
        \App\DTO\GetStocksParameterData $parameters,
        \App\DTO\GetWarehouseStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetWarehouseStocksResponse
    {
        return $this->getSuccessfulContent(...$this->getStocks_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedOfferMappingEntries
    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedOfferMappingEntriesRaw(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-mapping-entries/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedOfferMappingEntries(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedOfferMappingEntriesRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetSuggestedOfferMappingEntriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetSuggestedOfferMappingEntriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedOfferMappingEntriesResult(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetSuggestedOfferMappingEntriesResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedOfferMappingEntries($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedOfferMappingEntries_0
    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedOfferMappingEntries_0Raw(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-mapping-entries/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedOfferMappingEntries_0(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedOfferMappingEntries_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetSuggestedOfferMappingEntriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetSuggestedOfferMappingEntriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedOfferMappingEntries_0Result(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetSuggestedOfferMappingEntriesResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedOfferMappingEntries_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedOfferMappingEntries_1
    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedOfferMappingEntries_1Raw(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-mapping-entries/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedOfferMappingEntries_1(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedOfferMappingEntries_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetSuggestedOfferMappingEntriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetSuggestedOfferMappingEntriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedOfferMappingEntries_1Result(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetSuggestedOfferMappingEntriesResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedOfferMappingEntries_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedOfferMappingEntries_2
    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedOfferMappingEntries_2Raw(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-mapping-entries/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedOfferMappingEntries_2(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedOfferMappingEntries_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetSuggestedOfferMappingEntriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetSuggestedOfferMappingEntriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedOfferMappingEntries_2Result(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetSuggestedOfferMappingEntriesResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedOfferMappingEntries_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedOfferMappingEntries_3
    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedOfferMappingEntries_3Raw(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-mapping-entries/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedOfferMappingEntries_3(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedOfferMappingEntries_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о товарах в каталоге. */
                $responseContent = new \App\DTO\GetSuggestedOfferMappingEntriesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Рекомендованные карточки для товаров
     * @param \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetSuggestedOfferMappingEntriesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedOfferMappingEntries_3Result(
        \App\DTO\GetSuggestedOfferMappingEntriesParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingEntriesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetSuggestedOfferMappingEntriesResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedOfferMappingEntries_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedOfferMappings
    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedOfferMappingsRaw(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedOfferMappings(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedOfferMappingsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. */
                $responseContent = new \App\DTO\GetSuggestedOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetSuggestedOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedOfferMappingsResult(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetSuggestedOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedOfferMappings($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedOfferMappings_0
    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedOfferMappings_0Raw(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedOfferMappings_0(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedOfferMappings_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. */
                $responseContent = new \App\DTO\GetSuggestedOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetSuggestedOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedOfferMappings_0Result(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetSuggestedOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedOfferMappings_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedOfferMappings_1
    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedOfferMappings_1Raw(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedOfferMappings_1(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedOfferMappings_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. */
                $responseContent = new \App\DTO\GetSuggestedOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetSuggestedOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedOfferMappings_1Result(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetSuggestedOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedOfferMappings_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedOfferMappings_2
    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedOfferMappings_2Raw(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedOfferMappings_2(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedOfferMappings_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. */
                $responseContent = new \App\DTO\GetSuggestedOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetSuggestedOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedOfferMappings_2Result(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetSuggestedOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedOfferMappings_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedOfferMappings_3
    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedOfferMappings_3Raw(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedOfferMappings_3(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedOfferMappings_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. */
                $responseContent = new \App\DTO\GetSuggestedOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * @param \App\DTO\GetSuggestedOfferMappingsParameterData $parameters
     * @param \App\DTO\GetSuggestedOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\GetSuggestedOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedOfferMappings_3Result(
        \App\DTO\GetSuggestedOfferMappingsParameterData $parameters,
        \App\DTO\GetSuggestedOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetSuggestedOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedOfferMappings_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedPrices
    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedPricesRaw(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedPrices(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedPricesRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список цен для продвижения на Маркете. */
                $responseContent = new \App\DTO\SuggestPricesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SuggestPricesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedPricesResult(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SuggestPricesResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedPrices($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedPrices_0
    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedPrices_0Raw(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedPrices_0(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedPrices_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список цен для продвижения на Маркете. */
                $responseContent = new \App\DTO\SuggestPricesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SuggestPricesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedPrices_0Result(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SuggestPricesResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedPrices_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedPrices_1
    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedPrices_1Raw(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedPrices_1(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedPrices_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список цен для продвижения на Маркете. */
                $responseContent = new \App\DTO\SuggestPricesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SuggestPricesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedPrices_1Result(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SuggestPricesResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedPrices_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedPrices_2
    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedPrices_2Raw(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedPrices_2(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedPrices_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список цен для продвижения на Маркете. */
                $responseContent = new \App\DTO\SuggestPricesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SuggestPricesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedPrices_2Result(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SuggestPricesResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedPrices_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getSuggestedPrices_3
    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getSuggestedPrices_3Raw(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices/suggestions', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getSuggestedPrices_3(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getSuggestedPrices_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список цен для продвижения на Маркете. */
                $responseContent = new \App\DTO\SuggestPricesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Цены для продвижения товаров
     * @param \App\DTO\GetSuggestedPricesParameterData $parameters
     * @param \App\DTO\SuggestPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SuggestPricesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getSuggestedPrices_3Result(
        \App\DTO\GetSuggestedPricesParameterData $parameters,
        \App\DTO\SuggestPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SuggestPricesResponse
    {
        return $this->getSuccessfulContent(...$this->getSuggestedPrices_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region getWarehouses
    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getWarehousesRaw(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/businesses/{businessId}/warehouses', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getWarehouses(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getWarehousesRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список складов и групп складов. */
                $responseContent = new \App\DTO\GetWarehousesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetWarehousesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getWarehousesResult(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetWarehousesResponse
    {
        return $this->getSuccessfulContent(...$this->getWarehouses($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getWarehouses_0
    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getWarehouses_0Raw(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/businesses/{businessId}/warehouses', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getWarehouses_0(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getWarehouses_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список складов и групп складов. */
                $responseContent = new \App\DTO\GetWarehousesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetWarehousesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getWarehouses_0Result(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetWarehousesResponse
    {
        return $this->getSuccessfulContent(...$this->getWarehouses_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getWarehouses_1
    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getWarehouses_1Raw(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/businesses/{businessId}/warehouses', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getWarehouses_1(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getWarehouses_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список складов и групп складов. */
                $responseContent = new \App\DTO\GetWarehousesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetWarehousesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getWarehouses_1Result(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetWarehousesResponse
    {
        return $this->getSuccessfulContent(...$this->getWarehouses_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region getWarehouses_2
    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function getWarehouses_2Raw(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/businesses/{businessId}/warehouses', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function getWarehouses_2(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->getWarehouses_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список складов и групп складов. */
                $responseContent = new \App\DTO\GetWarehousesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Список складов и групп складов
     * @param \App\DTO\GetWarehousesParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetWarehousesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function getWarehouses_2Result(
        \App\DTO\GetWarehousesParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetWarehousesResponse
    {
        return $this->getSuccessfulContent(...$this->getWarehouses_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region provideOrderDigitalCodes
    /**
     * Передача ключей цифровых товаров
     * @param \App\DTO\ProvideOrderDigitalCodesParameterData $parameters
     * @param \App\DTO\ProvideOrderDigitalCodesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function provideOrderDigitalCodesRaw(
        \App\DTO\ProvideOrderDigitalCodesParameterData $parameters,
        \App\DTO\ProvideOrderDigitalCodesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача ключей цифровых товаров
     * @param \App\DTO\ProvideOrderDigitalCodesParameterData $parameters
     * @param \App\DTO\ProvideOrderDigitalCodesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function provideOrderDigitalCodes(
        \App\DTO\ProvideOrderDigitalCodesParameterData $parameters,
        \App\DTO\ProvideOrderDigitalCodesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->provideOrderDigitalCodesRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача ключей цифровых товаров
     * @param \App\DTO\ProvideOrderDigitalCodesParameterData $parameters
     * @param \App\DTO\ProvideOrderDigitalCodesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function provideOrderDigitalCodesResult(
        \App\DTO\ProvideOrderDigitalCodesParameterData $parameters,
        \App\DTO\ProvideOrderDigitalCodesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->provideOrderDigitalCodes($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region provideOrderDigitalCodes_0
    /**
     * Передача ключей цифровых товаров
     * @param \App\DTO\ProvideOrderDigitalCodesParameterData $parameters
     * @param \App\DTO\ProvideOrderDigitalCodesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function provideOrderDigitalCodes_0Raw(
        \App\DTO\ProvideOrderDigitalCodesParameterData $parameters,
        \App\DTO\ProvideOrderDigitalCodesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача ключей цифровых товаров
     * @param \App\DTO\ProvideOrderDigitalCodesParameterData $parameters
     * @param \App\DTO\ProvideOrderDigitalCodesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function provideOrderDigitalCodes_0(
        \App\DTO\ProvideOrderDigitalCodesParameterData $parameters,
        \App\DTO\ProvideOrderDigitalCodesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->provideOrderDigitalCodes_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача ключей цифровых товаров
     * @param \App\DTO\ProvideOrderDigitalCodesParameterData $parameters
     * @param \App\DTO\ProvideOrderDigitalCodesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function provideOrderDigitalCodes_0Result(
        \App\DTO\ProvideOrderDigitalCodesParameterData $parameters,
        \App\DTO\ProvideOrderDigitalCodesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->provideOrderDigitalCodes_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region provideOrderItemIdentifiers
    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function provideOrderItemIdentifiersRaw(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/identifiers', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function provideOrderItemIdentifiers(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->provideOrderItemIdentifiersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах. */
                $responseContent = new \App\DTO\ProvideOrderItemIdentifiersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\ProvideOrderItemIdentifiersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function provideOrderItemIdentifiersResult(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\ProvideOrderItemIdentifiersResponse
    {
        return $this->getSuccessfulContent(...$this->provideOrderItemIdentifiers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region provideOrderItemIdentifiers_0
    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function provideOrderItemIdentifiers_0Raw(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/identifiers', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function provideOrderItemIdentifiers_0(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->provideOrderItemIdentifiers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах. */
                $responseContent = new \App\DTO\ProvideOrderItemIdentifiersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\ProvideOrderItemIdentifiersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function provideOrderItemIdentifiers_0Result(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\ProvideOrderItemIdentifiersResponse
    {
        return $this->getSuccessfulContent(...$this->provideOrderItemIdentifiers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region provideOrderItemIdentifiers_1
    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function provideOrderItemIdentifiers_1Raw(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/identifiers', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function provideOrderItemIdentifiers_1(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->provideOrderItemIdentifiers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах. */
                $responseContent = new \App\DTO\ProvideOrderItemIdentifiersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\ProvideOrderItemIdentifiersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function provideOrderItemIdentifiers_1Result(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\ProvideOrderItemIdentifiersResponse
    {
        return $this->getSuccessfulContent(...$this->provideOrderItemIdentifiers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region provideOrderItemIdentifiers_2
    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function provideOrderItemIdentifiers_2Raw(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/identifiers', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function provideOrderItemIdentifiers_2(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->provideOrderItemIdentifiers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах. */
                $responseContent = new \App\DTO\ProvideOrderItemIdentifiersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача кодов маркировки единиц товара
     * @param \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters
     * @param \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\ProvideOrderItemIdentifiersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function provideOrderItemIdentifiers_2Result(
        \App\DTO\ProvideOrderItemIdentifiersParameterData $parameters,
        \App\DTO\ProvideOrderItemIdentifiersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\ProvideOrderItemIdentifiersResponse
    {
        return $this->getSuccessfulContent(...$this->provideOrderItemIdentifiers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region putBidsForBusiness
    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function putBidsForBusinessRaw(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/businesses/{businessId}/bids', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function putBidsForBusiness(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->putBidsForBusinessRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function putBidsForBusinessResult(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->putBidsForBusiness($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region putBidsForBusiness_0
    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function putBidsForBusiness_0Raw(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/businesses/{businessId}/bids', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function putBidsForBusiness_0(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->putBidsForBusiness_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function putBidsForBusiness_0Result(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->putBidsForBusiness_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region putBidsForBusiness_1
    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function putBidsForBusiness_1Raw(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/businesses/{businessId}/bids', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function putBidsForBusiness_1(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->putBidsForBusiness_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function putBidsForBusiness_1Result(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->putBidsForBusiness_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region putBidsForBusiness_2
    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function putBidsForBusiness_2Raw(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/businesses/{businessId}/bids', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function putBidsForBusiness_2(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->putBidsForBusiness_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function putBidsForBusiness_2Result(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->putBidsForBusiness_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region putBidsForBusiness_3
    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function putBidsForBusiness_3Raw(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/businesses/{businessId}/bids', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function putBidsForBusiness_3(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->putBidsForBusiness_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Включение буста продаж и установка ставок
     * @param \App\DTO\PutBidsForBusinessParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function putBidsForBusiness_3Result(
        \App\DTO\PutBidsForBusinessParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->putBidsForBusiness_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region putBidsForCampaign
    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function putBidsForCampaignRaw(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/bids', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function putBidsForCampaign(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->putBidsForCampaignRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function putBidsForCampaignResult(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->putBidsForCampaign($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region putBidsForCampaign_0
    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function putBidsForCampaign_0Raw(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/bids', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function putBidsForCampaign_0(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->putBidsForCampaign_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function putBidsForCampaign_0Result(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->putBidsForCampaign_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region putBidsForCampaign_1
    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function putBidsForCampaign_1Raw(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/bids', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function putBidsForCampaign_1(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->putBidsForCampaign_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function putBidsForCampaign_1Result(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->putBidsForCampaign_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region putBidsForCampaign_2
    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function putBidsForCampaign_2Raw(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/bids', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function putBidsForCampaign_2(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->putBidsForCampaign_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function putBidsForCampaign_2Result(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->putBidsForCampaign_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region putBidsForCampaign_3
    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function putBidsForCampaign_3Raw(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/bids', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function putBidsForCampaign_3(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->putBidsForCampaign_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Включение буста продаж и установка ставок для магазина
     * @param \App\DTO\PutBidsForCampaignParameterData $parameters
     * @param \App\DTO\PutSkuBidsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function putBidsForCampaign_3Result(
        \App\DTO\PutBidsForCampaignParameterData $parameters,
        \App\DTO\PutSkuBidsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->putBidsForCampaign_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region refreshFeed
    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function refreshFeedRaw(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/feeds/{feedId}/refresh', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function refreshFeed(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->refreshFeedRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function refreshFeedResult(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->refreshFeed($parameters, $security, $responseMediaType));
    }
    //endregion

    //region refreshFeed_0
    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function refreshFeed_0Raw(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/feeds/{feedId}/refresh', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function refreshFeed_0(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->refreshFeed_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function refreshFeed_0Result(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->refreshFeed_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region refreshFeed_1
    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function refreshFeed_1Raw(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/feeds/{feedId}/refresh', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function refreshFeed_1(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->refreshFeed_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function refreshFeed_1Result(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->refreshFeed_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region refreshFeed_2
    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function refreshFeed_2Raw(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/feeds/{feedId}/refresh', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function refreshFeed_2(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->refreshFeed_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function refreshFeed_2Result(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->refreshFeed_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region refreshFeed_3
    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function refreshFeed_3Raw(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/feeds/{feedId}/refresh', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function refreshFeed_3(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->refreshFeed_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Сообщить, что прайс-лист обновился
     * @param \App\DTO\RefreshFeedParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function refreshFeed_3Result(
        \App\DTO\RefreshFeedParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->refreshFeed_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchModels
    /**
     * Поиск модели товара
     * @param \App\DTO\SearchModelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchModelsRaw(
        \App\DTO\SearchModelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/models', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Поиск модели товара
     * @param \App\DTO\SearchModelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchModels(
        \App\DTO\SearchModelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchModelsRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о моделях. */
                $responseContent = new \App\DTO\SearchModelsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Поиск модели товара
     * @param \App\DTO\SearchModelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\SearchModelsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchModelsResult(
        \App\DTO\SearchModelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\SearchModelsResponse
    {
        return $this->getSuccessfulContent(...$this->searchModels($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchModels_0
    /**
     * Поиск модели товара
     * @param \App\DTO\SearchModelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchModels_0Raw(
        \App\DTO\SearchModelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/models', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Поиск модели товара
     * @param \App\DTO\SearchModelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchModels_0(
        \App\DTO\SearchModelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchModels_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о моделях. */
                $responseContent = new \App\DTO\SearchModelsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Поиск модели товара
     * @param \App\DTO\SearchModelsParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\SearchModelsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchModels_0Result(
        \App\DTO\SearchModelsParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\SearchModelsResponse
    {
        return $this->getSuccessfulContent(...$this->searchModels_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionChildren
    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionChildrenRaw(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions/{regionId}/children', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionChildren(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionChildrenRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Регионы, являющиеся дочерними к указанному в запросе. */
                $responseContent = new \App\DTO\GetRegionWithChildrenResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionWithChildrenResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionChildrenResult(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionWithChildrenResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionChildren($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionChildren_0
    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionChildren_0Raw(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions/{regionId}/children', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionChildren_0(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionChildren_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Регионы, являющиеся дочерними к указанному в запросе. */
                $responseContent = new \App\DTO\GetRegionWithChildrenResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionWithChildrenResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionChildren_0Result(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionWithChildrenResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionChildren_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionChildren_1
    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionChildren_1Raw(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions/{regionId}/children', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionChildren_1(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionChildren_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Регионы, являющиеся дочерними к указанному в запросе. */
                $responseContent = new \App\DTO\GetRegionWithChildrenResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionWithChildrenResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionChildren_1Result(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionWithChildrenResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionChildren_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionChildren_2
    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionChildren_2Raw(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions/{regionId}/children', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionChildren_2(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionChildren_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Регионы, являющиеся дочерними к указанному в запросе. */
                $responseContent = new \App\DTO\GetRegionWithChildrenResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionWithChildrenResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionChildren_2Result(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionWithChildrenResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionChildren_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionChildren_3
    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionChildren_3Raw(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions/{regionId}/children', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionChildren_3(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionChildren_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Регионы, являющиеся дочерними к указанному в запросе. */
                $responseContent = new \App\DTO\GetRegionWithChildrenResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о дочерних регионах
     * @param \App\DTO\SearchRegionChildrenParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionWithChildrenResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionChildren_3Result(
        \App\DTO\SearchRegionChildrenParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionWithChildrenResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionChildren_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionsById
    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionsByIdRaw(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions/{regionId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionsById(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionsByIdRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Найденный регион. */
                $responseContent = new \App\DTO\GetRegionsResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionsByIdResult(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionsResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionsById($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionsById_0
    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionsById_0Raw(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions/{regionId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionsById_0(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionsById_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Найденный регион. */
                $responseContent = new \App\DTO\GetRegionsResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionsById_0Result(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionsResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionsById_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionsById_1
    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionsById_1Raw(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions/{regionId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionsById_1(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionsById_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Найденный регион. */
                $responseContent = new \App\DTO\GetRegionsResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionsById_1Result(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionsResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionsById_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionsById_2
    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionsById_2Raw(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions/{regionId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionsById_2(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionsById_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Найденный регион. */
                $responseContent = new \App\DTO\GetRegionsResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionsById_2Result(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionsResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionsById_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionsById_3
    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionsById_3Raw(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions/{regionId}', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionsById_3(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionsById_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Найденный регион. */
                $responseContent = new \App\DTO\GetRegionsResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Информация о регионе
     * @param \App\DTO\SearchRegionsByIdParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionsById_3Result(
        \App\DTO\SearchRegionsByIdParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionsResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionsById_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionsByName
    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionsByNameRaw(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionsByName(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionsByNameRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список найденных регионов. */
                $responseContent = new \App\DTO\GetRegionsResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionsByNameResult(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionsResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionsByName($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionsByName_0
    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionsByName_0Raw(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionsByName_0(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionsByName_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список найденных регионов. */
                $responseContent = new \App\DTO\GetRegionsResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionsByName_0Result(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionsResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionsByName_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionsByName_1
    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionsByName_1Raw(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionsByName_1(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionsByName_1Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список найденных регионов. */
                $responseContent = new \App\DTO\GetRegionsResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionsByName_1Result(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionsResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionsByName_1($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionsByName_2
    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionsByName_2Raw(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionsByName_2(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionsByName_2Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список найденных регионов. */
                $responseContent = new \App\DTO\GetRegionsResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionsByName_2Result(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionsResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionsByName_2($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchRegionsByName_3
    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchRegionsByName_3Raw(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/regions', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchRegionsByName_3(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchRegionsByName_3Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Список найденных регионов. */
                $responseContent = new \App\DTO\GetRegionsResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Поиск регионов по их имени
     * @param \App\DTO\SearchRegionsByNameParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\GetRegionsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchRegionsByName_3Result(
        \App\DTO\SearchRegionsByNameParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\GetRegionsResponse
    {
        return $this->getSuccessfulContent(...$this->searchRegionsByName_3($parameters, $security, $responseMediaType));
    }
    //endregion

    //region searchShipments
    /**
     * Получение информации о нескольких отгрузках
     * @param \App\DTO\SearchShipmentsParameterData $parameters
     * @param \App\DTO\SearchShipmentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchShipmentsRaw(
        \App\DTO\SearchShipmentsParameterData $parameters,
        \App\DTO\SearchShipmentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/first-mile/shipments', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение информации о нескольких отгрузках
     * @param \App\DTO\SearchShipmentsParameterData $parameters
     * @param \App\DTO\SearchShipmentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchShipments(
        \App\DTO\SearchShipmentsParameterData $parameters,
        \App\DTO\SearchShipmentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchShipmentsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Найденные отгрузки. */
                $responseContent = new \App\DTO\SearchShipmentsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение информации о нескольких отгрузках
     * @param \App\DTO\SearchShipmentsParameterData $parameters
     * @param \App\DTO\SearchShipmentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SearchShipmentsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchShipmentsResult(
        \App\DTO\SearchShipmentsParameterData $parameters,
        \App\DTO\SearchShipmentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SearchShipmentsResponse
    {
        return $this->getSuccessfulContent(...$this->searchShipments($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region searchShipments_0
    /**
     * Получение информации о нескольких отгрузках
     * @param \App\DTO\SearchShipmentsParameterData $parameters
     * @param \App\DTO\SearchShipmentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function searchShipments_0Raw(
        \App\DTO\SearchShipmentsParameterData $parameters,
        \App\DTO\SearchShipmentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/first-mile/shipments', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Получение информации о нескольких отгрузках
     * @param \App\DTO\SearchShipmentsParameterData $parameters
     * @param \App\DTO\SearchShipmentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function searchShipments_0(
        \App\DTO\SearchShipmentsParameterData $parameters,
        \App\DTO\SearchShipmentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->searchShipments_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Найденные отгрузки. */
                $responseContent = new \App\DTO\SearchShipmentsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Получение информации о нескольких отгрузках
     * @param \App\DTO\SearchShipmentsParameterData $parameters
     * @param \App\DTO\SearchShipmentsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SearchShipmentsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function searchShipments_0Result(
        \App\DTO\SearchShipmentsParameterData $parameters,
        \App\DTO\SearchShipmentsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SearchShipmentsResponse
    {
        return $this->getSuccessfulContent(...$this->searchShipments_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region sendFileToChat
    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function sendFileToChatRaw(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/file/send', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function sendFileToChat(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->sendFileToChatRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. Означает, что файл отправлен. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function sendFileToChatResult(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->sendFileToChat($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region sendFileToChat_0
    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function sendFileToChat_0Raw(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/file/send', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function sendFileToChat_0(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->sendFileToChat_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. Означает, что файл отправлен. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function sendFileToChat_0Result(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->sendFileToChat_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region sendFileToChat_1
    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function sendFileToChat_1Raw(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/file/send', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function sendFileToChat_1(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->sendFileToChat_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. Означает, что файл отправлен. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function sendFileToChat_1Result(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->sendFileToChat_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region sendFileToChat_2
    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function sendFileToChat_2Raw(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/file/send', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function sendFileToChat_2(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->sendFileToChat_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. Означает, что файл отправлен. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function sendFileToChat_2Result(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->sendFileToChat_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region sendFileToChat_3
    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function sendFileToChat_3Raw(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/file/send', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function sendFileToChat_3(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->sendFileToChat_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. Означает, что файл отправлен. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отправка файла в чат
     * @param \App\DTO\SendFileToChatParameterData $parameters
     * @param \App\DTO\SendFileToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function sendFileToChat_3Result(
        \App\DTO\SendFileToChatParameterData $parameters,
        \App\DTO\SendFileToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'multipart/form-data',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->sendFileToChat_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region sendMessageToChat
    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function sendMessageToChatRaw(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/message', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function sendMessageToChat(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->sendMessageToChatRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. Означает, что сообщение отправлено. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function sendMessageToChatResult(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->sendMessageToChat($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region sendMessageToChat_0
    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function sendMessageToChat_0Raw(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/message', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function sendMessageToChat_0(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->sendMessageToChat_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. Означает, что сообщение отправлено. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function sendMessageToChat_0Result(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->sendMessageToChat_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region sendMessageToChat_1
    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function sendMessageToChat_1Raw(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/message', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function sendMessageToChat_1(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->sendMessageToChat_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. Означает, что сообщение отправлено. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function sendMessageToChat_1Result(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->sendMessageToChat_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region sendMessageToChat_2
    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function sendMessageToChat_2Raw(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/message', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function sendMessageToChat_2(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->sendMessageToChat_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. Означает, что сообщение отправлено. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function sendMessageToChat_2Result(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->sendMessageToChat_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region sendMessageToChat_3
    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function sendMessageToChat_3Raw(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/chats/message', $this->getPathParameters($parameters), $this->getQueryParameters($parameters));
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function sendMessageToChat_3(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->sendMessageToChat_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. Означает, что сообщение отправлено. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отправка сообщения в чат
     * @param \App\DTO\SendMessageToChatParameterData $parameters
     * @param \App\DTO\SendMessageToChatRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function sendMessageToChat_3Result(
        \App\DTO\SendMessageToChatParameterData $parameters,
        \App\DTO\SendMessageToChatRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->sendMessageToChat_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setFeedParams
    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setFeedParamsRaw(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/feeds/{feedId}/params', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setFeedParams(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setFeedParamsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setFeedParamsResult(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setFeedParams($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setFeedParams_0
    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setFeedParams_0Raw(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/feeds/{feedId}/params', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setFeedParams_0(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setFeedParams_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setFeedParams_0Result(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setFeedParams_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setFeedParams_1
    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setFeedParams_1Raw(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/feeds/{feedId}/params', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setFeedParams_1(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setFeedParams_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setFeedParams_1Result(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setFeedParams_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setFeedParams_2
    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setFeedParams_2Raw(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/feeds/{feedId}/params', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setFeedParams_2(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setFeedParams_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setFeedParams_2Result(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setFeedParams_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setFeedParams_3
    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setFeedParams_3Raw(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/feeds/{feedId}/params', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setFeedParams_3(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setFeedParams_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение параметров прайс-листа
     * @param \App\DTO\SetFeedParamsParameterData $parameters
     * @param \App\DTO\SetFeedParamsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setFeedParams_3Result(
        \App\DTO\SetFeedParamsParameterData $parameters,
        \App\DTO\SetFeedParamsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setFeedParams_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderBoxLayout
    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderBoxLayoutRaw(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/boxes', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderBoxLayout(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderBoxLayoutRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков. */
                $responseContent = new \App\DTO\SetOrderBoxLayoutResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SetOrderBoxLayoutResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderBoxLayoutResult(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SetOrderBoxLayoutResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderBoxLayout($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderBoxLayout_0
    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderBoxLayout_0Raw(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/boxes', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderBoxLayout_0(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderBoxLayout_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков. */
                $responseContent = new \App\DTO\SetOrderBoxLayoutResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SetOrderBoxLayoutResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderBoxLayout_0Result(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SetOrderBoxLayoutResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderBoxLayout_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderBoxLayout_1
    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderBoxLayout_1Raw(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/boxes', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderBoxLayout_1(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderBoxLayout_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков. */
                $responseContent = new \App\DTO\SetOrderBoxLayoutResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SetOrderBoxLayoutResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderBoxLayout_1Result(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SetOrderBoxLayoutResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderBoxLayout_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderBoxLayout_2
    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderBoxLayout_2Raw(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/boxes', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderBoxLayout_2(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderBoxLayout_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков. */
                $responseContent = new \App\DTO\SetOrderBoxLayoutResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Подготовка заказа
     * @param \App\DTO\SetOrderBoxLayoutParameterData $parameters
     * @param \App\DTO\SetOrderBoxLayoutRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SetOrderBoxLayoutResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderBoxLayout_2Result(
        \App\DTO\SetOrderBoxLayoutParameterData $parameters,
        \App\DTO\SetOrderBoxLayoutRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SetOrderBoxLayoutResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderBoxLayout_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderDeliveryDate
    /**
     * Изменение даты доставки заказа
     * @param \App\DTO\SetOrderDeliveryDateParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryDateRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderDeliveryDateRaw(
        \App\DTO\SetOrderDeliveryDateParameterData $parameters,
        \App\DTO\SetOrderDeliveryDateRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/delivery/date', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение даты доставки заказа
     * @param \App\DTO\SetOrderDeliveryDateParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryDateRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderDeliveryDate(
        \App\DTO\SetOrderDeliveryDateParameterData $parameters,
        \App\DTO\SetOrderDeliveryDateRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderDeliveryDateRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Успешное изменение даты доставки. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение даты доставки заказа
     * @param \App\DTO\SetOrderDeliveryDateParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryDateRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderDeliveryDateResult(
        \App\DTO\SetOrderDeliveryDateParameterData $parameters,
        \App\DTO\SetOrderDeliveryDateRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderDeliveryDate($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderDeliveryDate_0
    /**
     * Изменение даты доставки заказа
     * @param \App\DTO\SetOrderDeliveryDateParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryDateRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderDeliveryDate_0Raw(
        \App\DTO\SetOrderDeliveryDateParameterData $parameters,
        \App\DTO\SetOrderDeliveryDateRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/delivery/date', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение даты доставки заказа
     * @param \App\DTO\SetOrderDeliveryDateParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryDateRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderDeliveryDate_0(
        \App\DTO\SetOrderDeliveryDateParameterData $parameters,
        \App\DTO\SetOrderDeliveryDateRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderDeliveryDate_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Успешное изменение даты доставки. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение даты доставки заказа
     * @param \App\DTO\SetOrderDeliveryDateParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryDateRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderDeliveryDate_0Result(
        \App\DTO\SetOrderDeliveryDateParameterData $parameters,
        \App\DTO\SetOrderDeliveryDateRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderDeliveryDate_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderDeliveryTrackCode
    /**
     * Передача трек‑номера посылки
     * @param \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderDeliveryTrackCodeRaw(
        \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters,
        \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/delivery/track', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача трек‑номера посылки
     * @param \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderDeliveryTrackCode(
        \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters,
        \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderDeliveryTrackCodeRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Трек‑номер посылки и идентификатор службы доставки были успешно переданы. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача трек‑номера посылки
     * @param \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderDeliveryTrackCodeResult(
        \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters,
        \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderDeliveryTrackCode($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderDeliveryTrackCode_0
    /**
     * Передача трек‑номера посылки
     * @param \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderDeliveryTrackCode_0Raw(
        \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters,
        \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/delivery/track', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача трек‑номера посылки
     * @param \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderDeliveryTrackCode_0(
        \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters,
        \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderDeliveryTrackCode_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Трек‑номер посылки и идентификатор службы доставки были успешно переданы. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача трек‑номера посылки
     * @param \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters
     * @param \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderDeliveryTrackCode_0Result(
        \App\DTO\SetOrderDeliveryTrackCodeParameterData $parameters,
        \App\DTO\SetOrderDeliveryTrackCodeRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderDeliveryTrackCode_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderShipmentBoxes
    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderShipmentBoxesRaw(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderShipmentBoxes(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderShipmentBoxesRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Имеет значение только тип ответа. Если ответ `ОК`, количество грузомест записано. */
                $responseContent = new \App\DTO\SetOrderShipmentBoxesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SetOrderShipmentBoxesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderShipmentBoxesResult(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SetOrderShipmentBoxesResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderShipmentBoxes($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderShipmentBoxes_0
    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderShipmentBoxes_0Raw(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderShipmentBoxes_0(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderShipmentBoxes_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Имеет значение только тип ответа. Если ответ `ОК`, количество грузомест записано. */
                $responseContent = new \App\DTO\SetOrderShipmentBoxesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SetOrderShipmentBoxesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderShipmentBoxes_0Result(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SetOrderShipmentBoxesResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderShipmentBoxes_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderShipmentBoxes_1
    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderShipmentBoxes_1Raw(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderShipmentBoxes_1(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderShipmentBoxes_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Имеет значение только тип ответа. Если ответ `ОК`, количество грузомест записано. */
                $responseContent = new \App\DTO\SetOrderShipmentBoxesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SetOrderShipmentBoxesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderShipmentBoxes_1Result(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SetOrderShipmentBoxesResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderShipmentBoxes_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setOrderShipmentBoxes_2
    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setOrderShipmentBoxes_2Raw(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setOrderShipmentBoxes_2(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setOrderShipmentBoxes_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Имеет значение только тип ответа. Если ответ `ОК`, количество грузомест записано. */
                $responseContent = new \App\DTO\SetOrderShipmentBoxesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача количества грузовых мест в заказе
     * @param \App\DTO\SetOrderShipmentBoxesParameterData $parameters
     * @param \App\DTO\SetOrderShipmentBoxesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\SetOrderShipmentBoxesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setOrderShipmentBoxes_2Result(
        \App\DTO\SetOrderShipmentBoxesParameterData $parameters,
        \App\DTO\SetOrderShipmentBoxesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\SetOrderShipmentBoxesResponse
    {
        return $this->getSuccessfulContent(...$this->setOrderShipmentBoxes_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setReturnDecision
    /**
     * Принятие или изменение решения по возврату
     * @param \App\DTO\SetReturnDecisionParameterData $parameters
     * @param \App\DTO\SetReturnDecisionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setReturnDecisionRaw(
        \App\DTO\SetReturnDecisionParameterData $parameters,
        \App\DTO\SetReturnDecisionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Принятие или изменение решения по возврату
     * @param \App\DTO\SetReturnDecisionParameterData $parameters
     * @param \App\DTO\SetReturnDecisionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setReturnDecision(
        \App\DTO\SetReturnDecisionParameterData $parameters,
        \App\DTO\SetReturnDecisionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setReturnDecisionRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Детали возврата. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Принятие или изменение решения по возврату
     * @param \App\DTO\SetReturnDecisionParameterData $parameters
     * @param \App\DTO\SetReturnDecisionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setReturnDecisionResult(
        \App\DTO\SetReturnDecisionParameterData $parameters,
        \App\DTO\SetReturnDecisionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setReturnDecision($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setReturnDecision_0
    /**
     * Принятие или изменение решения по возврату
     * @param \App\DTO\SetReturnDecisionParameterData $parameters
     * @param \App\DTO\SetReturnDecisionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setReturnDecision_0Raw(
        \App\DTO\SetReturnDecisionParameterData $parameters,
        \App\DTO\SetReturnDecisionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Принятие или изменение решения по возврату
     * @param \App\DTO\SetReturnDecisionParameterData $parameters
     * @param \App\DTO\SetReturnDecisionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setReturnDecision_0(
        \App\DTO\SetReturnDecisionParameterData $parameters,
        \App\DTO\SetReturnDecisionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setReturnDecision_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Детали возврата. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Принятие или изменение решения по возврату
     * @param \App\DTO\SetReturnDecisionParameterData $parameters
     * @param \App\DTO\SetReturnDecisionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setReturnDecision_0Result(
        \App\DTO\SetReturnDecisionParameterData $parameters,
        \App\DTO\SetReturnDecisionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setReturnDecision_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setShipmentPalletsCount
    /**
     * Передача количества упаковок в отгрузке
     * @param \App\DTO\SetShipmentPalletsCountParameterData $parameters
     * @param \App\DTO\SetShipmentPalletsCountRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setShipmentPalletsCountRaw(
        \App\DTO\SetShipmentPalletsCountParameterData $parameters,
        \App\DTO\SetShipmentPalletsCountRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача количества упаковок в отгрузке
     * @param \App\DTO\SetShipmentPalletsCountParameterData $parameters
     * @param \App\DTO\SetShipmentPalletsCountRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setShipmentPalletsCount(
        \App\DTO\SetShipmentPalletsCountParameterData $parameters,
        \App\DTO\SetShipmentPalletsCountRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setShipmentPalletsCountRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Имеет значение только тип ответа. Если ответ `ОК`, количество упаковок записано. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача количества упаковок в отгрузке
     * @param \App\DTO\SetShipmentPalletsCountParameterData $parameters
     * @param \App\DTO\SetShipmentPalletsCountRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setShipmentPalletsCountResult(
        \App\DTO\SetShipmentPalletsCountParameterData $parameters,
        \App\DTO\SetShipmentPalletsCountRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setShipmentPalletsCount($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region setShipmentPalletsCount_0
    /**
     * Передача количества упаковок в отгрузке
     * @param \App\DTO\SetShipmentPalletsCountParameterData $parameters
     * @param \App\DTO\SetShipmentPalletsCountRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function setShipmentPalletsCount_0Raw(
        \App\DTO\SetShipmentPalletsCountParameterData $parameters,
        \App\DTO\SetShipmentPalletsCountRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача количества упаковок в отгрузке
     * @param \App\DTO\SetShipmentPalletsCountParameterData $parameters
     * @param \App\DTO\SetShipmentPalletsCountRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function setShipmentPalletsCount_0(
        \App\DTO\SetShipmentPalletsCountParameterData $parameters,
        \App\DTO\SetShipmentPalletsCountRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->setShipmentPalletsCount_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Имеет значение только тип ответа. Если ответ `ОК`, количество упаковок записано. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача количества упаковок в отгрузке
     * @param \App\DTO\SetShipmentPalletsCountParameterData $parameters
     * @param \App\DTO\SetShipmentPalletsCountRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function setShipmentPalletsCount_0Result(
        \App\DTO\SetShipmentPalletsCountParameterData $parameters,
        \App\DTO\SetShipmentPalletsCountRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->setShipmentPalletsCount_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region skipGoodsFeedbacksReaction
    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function skipGoodsFeedbacksReactionRaw(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/skip-reaction', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function skipGoodsFeedbacksReaction(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->skipGoodsFeedbacksReactionRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function skipGoodsFeedbacksReactionResult(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->skipGoodsFeedbacksReaction($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region skipGoodsFeedbacksReaction_0
    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function skipGoodsFeedbacksReaction_0Raw(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/skip-reaction', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function skipGoodsFeedbacksReaction_0(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->skipGoodsFeedbacksReaction_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function skipGoodsFeedbacksReaction_0Result(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->skipGoodsFeedbacksReaction_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region skipGoodsFeedbacksReaction_1
    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function skipGoodsFeedbacksReaction_1Raw(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/skip-reaction', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function skipGoodsFeedbacksReaction_1(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->skipGoodsFeedbacksReaction_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function skipGoodsFeedbacksReaction_1Result(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->skipGoodsFeedbacksReaction_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region skipGoodsFeedbacksReaction_2
    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function skipGoodsFeedbacksReaction_2Raw(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/skip-reaction', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function skipGoodsFeedbacksReaction_2(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->skipGoodsFeedbacksReaction_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function skipGoodsFeedbacksReaction_2Result(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->skipGoodsFeedbacksReaction_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region skipGoodsFeedbacksReaction_3
    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function skipGoodsFeedbacksReaction_3Raw(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/skip-reaction', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function skipGoodsFeedbacksReaction_3(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->skipGoodsFeedbacksReaction_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Отказ от ответа на отзывы
     * @param \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters
     * @param \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function skipGoodsFeedbacksReaction_3Result(
        \App\DTO\SkipGoodsFeedbacksReactionParameterData $parameters,
        \App\DTO\SkipGoodsFeedbackReactionRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->skipGoodsFeedbacksReaction_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region submitReturnDecision
    /**
     * Подтверждение решения по возврату
     * @param \App\DTO\SubmitReturnDecisionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function submitReturnDecisionRaw(
        \App\DTO\SubmitReturnDecisionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Подтверждение решения по возврату
     * @param \App\DTO\SubmitReturnDecisionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function submitReturnDecision(
        \App\DTO\SubmitReturnDecisionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->submitReturnDecisionRaw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Подтверждение решения по возврату
     * @param \App\DTO\SubmitReturnDecisionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function submitReturnDecisionResult(
        \App\DTO\SubmitReturnDecisionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->submitReturnDecision($parameters, $security, $responseMediaType));
    }
    //endregion

    //region submitReturnDecision_0
    /**
     * Подтверждение решения по возврату
     * @param \App\DTO\SubmitReturnDecisionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function submitReturnDecision_0Raw(
        \App\DTO\SubmitReturnDecisionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Подтверждение решения по возврату
     * @param \App\DTO\SubmitReturnDecisionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function submitReturnDecision_0(
        \App\DTO\SubmitReturnDecisionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->submitReturnDecision_0Raw($parameters, $security, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Подтверждение решения по возврату
     * @param \App\DTO\SubmitReturnDecisionParameterData $parameters
     * @param iterable<string, string[]> $security
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function submitReturnDecision_0Result(
        \App\DTO\SubmitReturnDecisionParameterData $parameters,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->submitReturnDecision_0($parameters, $security, $responseMediaType));
    }
    //endregion

    //region transferOrdersFromShipment
    /**
     * Перенос заказов в следующую отгрузку
     * @param \App\DTO\TransferOrdersFromShipmentParameterData $parameters
     * @param \App\DTO\TransferOrdersFromShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function transferOrdersFromShipmentRaw(
        \App\DTO\TransferOrdersFromShipmentParameterData $parameters,
        \App\DTO\TransferOrdersFromShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Перенос заказов в следующую отгрузку
     * @param \App\DTO\TransferOrdersFromShipmentParameterData $parameters
     * @param \App\DTO\TransferOrdersFromShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function transferOrdersFromShipment(
        \App\DTO\TransferOrdersFromShipmentParameterData $parameters,
        \App\DTO\TransferOrdersFromShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->transferOrdersFromShipmentRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Запрос на перенос заказов проверен и принят, и они будут перенесены спустя несколько минут. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Перенос заказов в следующую отгрузку
     * @param \App\DTO\TransferOrdersFromShipmentParameterData $parameters
     * @param \App\DTO\TransferOrdersFromShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function transferOrdersFromShipmentResult(
        \App\DTO\TransferOrdersFromShipmentParameterData $parameters,
        \App\DTO\TransferOrdersFromShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->transferOrdersFromShipment($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region transferOrdersFromShipment_0
    /**
     * Перенос заказов в следующую отгрузку
     * @param \App\DTO\TransferOrdersFromShipmentParameterData $parameters
     * @param \App\DTO\TransferOrdersFromShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function transferOrdersFromShipment_0Raw(
        \App\DTO\TransferOrdersFromShipmentParameterData $parameters,
        \App\DTO\TransferOrdersFromShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Перенос заказов в следующую отгрузку
     * @param \App\DTO\TransferOrdersFromShipmentParameterData $parameters
     * @param \App\DTO\TransferOrdersFromShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function transferOrdersFromShipment_0(
        \App\DTO\TransferOrdersFromShipmentParameterData $parameters,
        \App\DTO\TransferOrdersFromShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->transferOrdersFromShipment_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Запрос на перенос заказов проверен и принят, и они будут перенесены спустя несколько минут. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Перенос заказов в следующую отгрузку
     * @param \App\DTO\TransferOrdersFromShipmentParameterData $parameters
     * @param \App\DTO\TransferOrdersFromShipmentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function transferOrdersFromShipment_0Result(
        \App\DTO\TransferOrdersFromShipmentParameterData $parameters,
        \App\DTO\TransferOrdersFromShipmentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->transferOrdersFromShipment_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateBusinessPrices
    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateBusinessPricesRaw(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-prices/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateBusinessPrices(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateBusinessPricesRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет принял информацию о новых ценах. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateBusinessPricesResult(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateBusinessPrices($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateBusinessPrices_0
    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateBusinessPrices_0Raw(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-prices/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateBusinessPrices_0(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateBusinessPrices_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет принял информацию о новых ценах. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateBusinessPrices_0Result(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateBusinessPrices_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateBusinessPrices_1
    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateBusinessPrices_1Raw(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-prices/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateBusinessPrices_1(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateBusinessPrices_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет принял информацию о новых ценах. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateBusinessPrices_1Result(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateBusinessPrices_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateBusinessPrices_2
    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateBusinessPrices_2Raw(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-prices/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateBusinessPrices_2(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateBusinessPrices_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет принял информацию о новых ценах. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateBusinessPrices_2Result(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateBusinessPrices_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateBusinessPrices_3
    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateBusinessPrices_3Raw(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-prices/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateBusinessPrices_3(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateBusinessPrices_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет принял информацию о новых ценах. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Установка цен на товары во всех магазинах
     * @param \App\DTO\UpdateBusinessPricesParameterData $parameters
     * @param \App\DTO\UpdateBusinessPricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateBusinessPrices_3Result(
        \App\DTO\UpdateBusinessPricesParameterData $parameters,
        \App\DTO\UpdateBusinessPricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateBusinessPrices_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateCampaignOffers
    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateCampaignOffersRaw(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateCampaignOffers(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateCampaignOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что новые параметры получены Маркетом и скоро вступят в силу. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateCampaignOffersResult(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateCampaignOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateCampaignOffers_0
    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateCampaignOffers_0Raw(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateCampaignOffers_0(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateCampaignOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что новые параметры получены Маркетом и скоро вступят в силу. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateCampaignOffers_0Result(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateCampaignOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateCampaignOffers_1
    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateCampaignOffers_1Raw(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateCampaignOffers_1(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateCampaignOffers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что новые параметры получены Маркетом и скоро вступят в силу. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateCampaignOffers_1Result(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateCampaignOffers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateCampaignOffers_2
    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateCampaignOffers_2Raw(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateCampaignOffers_2(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateCampaignOffers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что новые параметры получены Маркетом и скоро вступят в силу. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateCampaignOffers_2Result(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateCampaignOffers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateCampaignOffers_3
    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateCampaignOffers_3Raw(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offers/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateCampaignOffers_3(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateCampaignOffers_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Ответ 200 обозначает, что новые параметры получены Маркетом и скоро вступят в силу. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение условий продажи товаров в магазине
     * @param \App\DTO\UpdateCampaignOffersParameterData $parameters
     * @param \App\DTO\UpdateCampaignOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateCampaignOffers_3Result(
        \App\DTO\UpdateCampaignOffersParameterData $parameters,
        \App\DTO\UpdateCampaignOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateCampaignOffers_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateGoodsFeedbackComment
    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateGoodsFeedbackCommentRaw(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateGoodsFeedbackComment(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateGoodsFeedbackCommentRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о добавленном или измененном комментарии. */
                $responseContent = new \App\DTO\UpdateGoodsFeedbackCommentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateGoodsFeedbackCommentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateGoodsFeedbackCommentResult(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateGoodsFeedbackCommentResponse
    {
        return $this->getSuccessfulContent(...$this->updateGoodsFeedbackComment($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateGoodsFeedbackComment_0
    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateGoodsFeedbackComment_0Raw(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateGoodsFeedbackComment_0(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateGoodsFeedbackComment_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о добавленном или измененном комментарии. */
                $responseContent = new \App\DTO\UpdateGoodsFeedbackCommentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateGoodsFeedbackCommentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateGoodsFeedbackComment_0Result(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateGoodsFeedbackCommentResponse
    {
        return $this->getSuccessfulContent(...$this->updateGoodsFeedbackComment_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateGoodsFeedbackComment_1
    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateGoodsFeedbackComment_1Raw(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateGoodsFeedbackComment_1(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateGoodsFeedbackComment_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о добавленном или измененном комментарии. */
                $responseContent = new \App\DTO\UpdateGoodsFeedbackCommentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateGoodsFeedbackCommentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateGoodsFeedbackComment_1Result(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateGoodsFeedbackCommentResponse
    {
        return $this->getSuccessfulContent(...$this->updateGoodsFeedbackComment_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateGoodsFeedbackComment_2
    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateGoodsFeedbackComment_2Raw(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateGoodsFeedbackComment_2(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateGoodsFeedbackComment_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о добавленном или измененном комментарии. */
                $responseContent = new \App\DTO\UpdateGoodsFeedbackCommentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateGoodsFeedbackCommentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateGoodsFeedbackComment_2Result(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateGoodsFeedbackCommentResponse
    {
        return $this->getSuccessfulContent(...$this->updateGoodsFeedbackComment_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateGoodsFeedbackComment_3
    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateGoodsFeedbackComment_3Raw(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/goods-feedback/comments/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateGoodsFeedbackComment_3(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateGoodsFeedbackComment_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Информация о добавленном или измененном комментарии. */
                $responseContent = new \App\DTO\UpdateGoodsFeedbackCommentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление нового или изменение созданного комментария
     * @param \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters
     * @param \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateGoodsFeedbackCommentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateGoodsFeedbackComment_3Result(
        \App\DTO\UpdateGoodsFeedbackCommentParameterData $parameters,
        \App\DTO\UpdateGoodsFeedbackCommentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateGoodsFeedbackCommentResponse
    {
        return $this->getSuccessfulContent(...$this->updateGoodsFeedbackComment_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferContent
    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferContentRaw(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-cards/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferContent(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferContentRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Запрос выполнен корректно, данные обработаны.  {% note warning \"Ответ 200 сам по себе не значит, что переданные значения корректны\" %}  Обязательно посмотрите детали ответа: `status` и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в `status` вернулось `ERROR`, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля `errors` и `warnings`. */
                $responseContent = new \App\DTO\UpdateOfferContentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOfferContentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferContentResult(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOfferContentResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferContent($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferContent_0
    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferContent_0Raw(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-cards/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferContent_0(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferContent_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Запрос выполнен корректно, данные обработаны.  {% note warning \"Ответ 200 сам по себе не значит, что переданные значения корректны\" %}  Обязательно посмотрите детали ответа: `status` и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в `status` вернулось `ERROR`, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля `errors` и `warnings`. */
                $responseContent = new \App\DTO\UpdateOfferContentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOfferContentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferContent_0Result(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOfferContentResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferContent_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferContent_1
    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferContent_1Raw(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-cards/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferContent_1(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferContent_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Запрос выполнен корректно, данные обработаны.  {% note warning \"Ответ 200 сам по себе не значит, что переданные значения корректны\" %}  Обязательно посмотрите детали ответа: `status` и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в `status` вернулось `ERROR`, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля `errors` и `warnings`. */
                $responseContent = new \App\DTO\UpdateOfferContentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOfferContentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferContent_1Result(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOfferContentResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferContent_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferContent_2
    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferContent_2Raw(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-cards/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferContent_2(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferContent_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Запрос выполнен корректно, данные обработаны.  {% note warning \"Ответ 200 сам по себе не значит, что переданные значения корректны\" %}  Обязательно посмотрите детали ответа: `status` и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в `status` вернулось `ERROR`, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля `errors` и `warnings`. */
                $responseContent = new \App\DTO\UpdateOfferContentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOfferContentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferContent_2Result(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOfferContentResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferContent_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferContent_3
    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferContent_3Raw(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-cards/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferContent_3(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferContent_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Запрос выполнен корректно, данные обработаны.  {% note warning \"Ответ 200 сам по себе не значит, что переданные значения корректны\" %}  Обязательно посмотрите детали ответа: `status` и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в `status` вернулось `ERROR`, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля `errors` и `warnings`. */
                $responseContent = new \App\DTO\UpdateOfferContentResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Редактирование категорийных характеристик товара
     * @param \App\DTO\UpdateOfferContentParameterData $parameters
     * @param \App\DTO\UpdateOfferContentRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOfferContentResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferContent_3Result(
        \App\DTO\UpdateOfferContentParameterData $parameters,
        \App\DTO\UpdateOfferContentRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOfferContentResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferContent_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferMappingEntries
    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferMappingEntriesRaw(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-mapping-entries/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferMappingEntries(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferMappingEntriesRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferMappingEntriesResult(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferMappingEntries($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferMappingEntries_0
    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferMappingEntries_0Raw(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-mapping-entries/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferMappingEntries_0(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferMappingEntries_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferMappingEntries_0Result(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferMappingEntries_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferMappingEntries_1
    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferMappingEntries_1Raw(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-mapping-entries/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferMappingEntries_1(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferMappingEntries_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferMappingEntries_1Result(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferMappingEntries_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferMappingEntries_2
    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferMappingEntries_2Raw(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-mapping-entries/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferMappingEntries_2(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferMappingEntries_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferMappingEntries_2Result(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferMappingEntries_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferMappingEntries_3
    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferMappingEntries_3Raw(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-mapping-entries/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferMappingEntries_3(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferMappingEntries_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Статус выполнения операции. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление и редактирование товаров в каталоге
     * @param \App\DTO\UpdateOfferMappingEntriesParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingEntryRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferMappingEntries_3Result(
        \App\DTO\UpdateOfferMappingEntriesParameterData $parameters,
        \App\DTO\UpdateOfferMappingEntryRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferMappingEntries_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferMappings
    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferMappingsRaw(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferMappings(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferMappingsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. */
                $responseContent = new \App\DTO\UpdateOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferMappingsResult(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferMappings($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferMappings_0
    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferMappings_0Raw(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferMappings_0(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferMappings_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. */
                $responseContent = new \App\DTO\UpdateOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferMappings_0Result(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferMappings_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferMappings_1
    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferMappings_1Raw(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferMappings_1(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferMappings_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. */
                $responseContent = new \App\DTO\UpdateOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferMappings_1Result(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferMappings_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferMappings_2
    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferMappings_2Raw(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferMappings_2(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferMappings_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. */
                $responseContent = new \App\DTO\UpdateOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferMappings_2Result(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferMappings_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOfferMappings_3
    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOfferMappings_3Raw(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/offer-mappings/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOfferMappings_3(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOfferMappings_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. */
                $responseContent = new \App\DTO\UpdateOfferMappingsResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в каталог и изменение информации о них
     * @param \App\DTO\UpdateOfferMappingsParameterData $parameters
     * @param \App\DTO\UpdateOfferMappingsRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOfferMappingsResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOfferMappings_3Result(
        \App\DTO\UpdateOfferMappingsParameterData $parameters,
        \App\DTO\UpdateOfferMappingsRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOfferMappingsResponse
    {
        return $this->getSuccessfulContent(...$this->updateOfferMappings_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderItems
    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderItemsRaw(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/items', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderItems(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderItemsRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет успешно обработал ваш запрос. Выходные данные не ожидаются. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return mixed
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderItemsResult(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    )
    {
        return $this->getSuccessfulContent(...$this->updateOrderItems($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderItems_0
    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderItems_0Raw(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/items', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderItems_0(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderItems_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет успешно обработал ваш запрос. Выходные данные не ожидаются. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return mixed
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderItems_0Result(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    )
    {
        return $this->getSuccessfulContent(...$this->updateOrderItems_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderItems_1
    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderItems_1Raw(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/items', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderItems_1(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderItems_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет успешно обработал ваш запрос. Выходные данные не ожидаются. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return mixed
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderItems_1Result(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    )
    {
        return $this->getSuccessfulContent(...$this->updateOrderItems_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderItems_2
    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderItems_2Raw(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/items', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderItems_2(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderItems_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет успешно обработал ваш запрос. Выходные данные не ожидаются. */
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * @param \App\DTO\UpdateOrderItemsParameterData $parameters
     * @param \App\DTO\UpdateOrderItemRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return mixed
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderItems_2Result(
        \App\DTO\UpdateOrderItemsParameterData $parameters,
        \App\DTO\UpdateOrderItemRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    )
    {
        return $this->getSuccessfulContent(...$this->updateOrderItems_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderStatus
    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderStatusRaw(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/status', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderStatus(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderStatusRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В случае успешного изменения статуса заказа возвращается обновленная информация о заказе. */
                $responseContent = new \App\DTO\UpdateOrderStatusResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOrderStatusResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderStatusResult(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOrderStatusResponse
    {
        return $this->getSuccessfulContent(...$this->updateOrderStatus($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderStatus_0
    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderStatus_0Raw(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/status', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderStatus_0(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderStatus_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В случае успешного изменения статуса заказа возвращается обновленная информация о заказе. */
                $responseContent = new \App\DTO\UpdateOrderStatusResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOrderStatusResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderStatus_0Result(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOrderStatusResponse
    {
        return $this->getSuccessfulContent(...$this->updateOrderStatus_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderStatus_1
    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderStatus_1Raw(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/status', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderStatus_1(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderStatus_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В случае успешного изменения статуса заказа возвращается обновленная информация о заказе. */
                $responseContent = new \App\DTO\UpdateOrderStatusResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOrderStatusResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderStatus_1Result(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOrderStatusResponse
    {
        return $this->getSuccessfulContent(...$this->updateOrderStatus_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderStatus_2
    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderStatus_2Raw(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/status', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderStatus_2(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderStatus_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* В случае успешного изменения статуса заказа возвращается обновленная информация о заказе. */
                $responseContent = new \App\DTO\UpdateOrderStatusResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение статуса одного заказа
     * @param \App\DTO\UpdateOrderStatusParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOrderStatusResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderStatus_2Result(
        \App\DTO\UpdateOrderStatusParameterData $parameters,
        \App\DTO\UpdateOrderStatusRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOrderStatusResponse
    {
        return $this->getSuccessfulContent(...$this->updateOrderStatus_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderStatuses
    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderStatusesRaw(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/status-update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderStatuses(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderStatusesRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Возвращается информация об обновленных статусах заказов. */
                $responseContent = new \App\DTO\UpdateOrderStatusesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOrderStatusesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderStatusesResult(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOrderStatusesResponse
    {
        return $this->getSuccessfulContent(...$this->updateOrderStatuses($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderStatuses_0
    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderStatuses_0Raw(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/status-update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderStatuses_0(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderStatuses_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Возвращается информация об обновленных статусах заказов. */
                $responseContent = new \App\DTO\UpdateOrderStatusesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOrderStatusesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderStatuses_0Result(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOrderStatusesResponse
    {
        return $this->getSuccessfulContent(...$this->updateOrderStatuses_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderStatuses_1
    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderStatuses_1Raw(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/status-update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderStatuses_1(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderStatuses_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Возвращается информация об обновленных статусах заказов. */
                $responseContent = new \App\DTO\UpdateOrderStatusesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOrderStatusesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderStatuses_1Result(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOrderStatusesResponse
    {
        return $this->getSuccessfulContent(...$this->updateOrderStatuses_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderStatuses_2
    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderStatuses_2Raw(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/orders/status-update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderStatuses_2(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderStatuses_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Возвращается информация об обновленных статусах заказов. */
                $responseContent = new \App\DTO\UpdateOrderStatusesResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение статусов нескольких заказов
     * @param \App\DTO\UpdateOrderStatusesParameterData $parameters
     * @param \App\DTO\UpdateOrderStatusesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdateOrderStatusesResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderStatuses_2Result(
        \App\DTO\UpdateOrderStatusesParameterData $parameters,
        \App\DTO\UpdateOrderStatusesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdateOrderStatusesResponse
    {
        return $this->getSuccessfulContent(...$this->updateOrderStatuses_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderStorageLimit
    /**
     * Продление срока хранения заказа
     * @param \App\DTO\UpdateOrderStorageLimitParameterData $parameters
     * @param \App\DTO\UpdateOrderStorageLimitRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderStorageLimitRaw(
        \App\DTO\UpdateOrderStorageLimitParameterData $parameters,
        \App\DTO\UpdateOrderStorageLimitRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Продление срока хранения заказа
     * @param \App\DTO\UpdateOrderStorageLimitParameterData $parameters
     * @param \App\DTO\UpdateOrderStorageLimitRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderStorageLimit(
        \App\DTO\UpdateOrderStorageLimitParameterData $parameters,
        \App\DTO\UpdateOrderStorageLimitRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderStorageLimitRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Продление срока хранения заказа
     * @param \App\DTO\UpdateOrderStorageLimitParameterData $parameters
     * @param \App\DTO\UpdateOrderStorageLimitRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderStorageLimitResult(
        \App\DTO\UpdateOrderStorageLimitParameterData $parameters,
        \App\DTO\UpdateOrderStorageLimitRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateOrderStorageLimit($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOrderStorageLimit_0
    /**
     * Продление срока хранения заказа
     * @param \App\DTO\UpdateOrderStorageLimitParameterData $parameters
     * @param \App\DTO\UpdateOrderStorageLimitRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOrderStorageLimit_0Raw(
        \App\DTO\UpdateOrderStorageLimitParameterData $parameters,
        \App\DTO\UpdateOrderStorageLimitRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Продление срока хранения заказа
     * @param \App\DTO\UpdateOrderStorageLimitParameterData $parameters
     * @param \App\DTO\UpdateOrderStorageLimitRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOrderStorageLimit_0(
        \App\DTO\UpdateOrderStorageLimitParameterData $parameters,
        \App\DTO\UpdateOrderStorageLimitRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOrderStorageLimit_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Продление срока хранения заказа
     * @param \App\DTO\UpdateOrderStorageLimitParameterData $parameters
     * @param \App\DTO\UpdateOrderStorageLimitRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOrderStorageLimit_0Result(
        \App\DTO\UpdateOrderStorageLimitParameterData $parameters,
        \App\DTO\UpdateOrderStorageLimitRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateOrderStorageLimit_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOutlet
    /**
     * Изменение информации о точке продаж
     * @param \App\DTO\UpdateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOutletRaw(
        \App\DTO\UpdateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/outlets/{outletId}', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение информации о точке продаж
     * @param \App\DTO\UpdateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOutlet(
        \App\DTO\UpdateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOutletRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение информации о точке продаж
     * @param \App\DTO\UpdateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOutletResult(
        \App\DTO\UpdateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateOutlet($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOutletLicenses
    /**
     * Создание и изменение лицензий для точек продаж
     * @param \App\DTO\UpdateOutletLicensesParameterData $parameters
     * @param \App\DTO\UpdateOutletLicenseRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOutletLicensesRaw(
        \App\DTO\UpdateOutletLicensesParameterData $parameters,
        \App\DTO\UpdateOutletLicenseRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/outlets/licenses', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Создание и изменение лицензий для точек продаж
     * @param \App\DTO\UpdateOutletLicensesParameterData $parameters
     * @param \App\DTO\UpdateOutletLicenseRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOutletLicenses(
        \App\DTO\UpdateOutletLicensesParameterData $parameters,
        \App\DTO\UpdateOutletLicenseRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOutletLicensesRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Создание и изменение лицензий для точек продаж
     * @param \App\DTO\UpdateOutletLicensesParameterData $parameters
     * @param \App\DTO\UpdateOutletLicenseRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOutletLicensesResult(
        \App\DTO\UpdateOutletLicensesParameterData $parameters,
        \App\DTO\UpdateOutletLicenseRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateOutletLicenses($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOutletLicenses_0
    /**
     * Создание и изменение лицензий для точек продаж
     * @param \App\DTO\UpdateOutletLicensesParameterData $parameters
     * @param \App\DTO\UpdateOutletLicenseRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOutletLicenses_0Raw(
        \App\DTO\UpdateOutletLicensesParameterData $parameters,
        \App\DTO\UpdateOutletLicenseRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/outlets/licenses', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Создание и изменение лицензий для точек продаж
     * @param \App\DTO\UpdateOutletLicensesParameterData $parameters
     * @param \App\DTO\UpdateOutletLicenseRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOutletLicenses_0(
        \App\DTO\UpdateOutletLicensesParameterData $parameters,
        \App\DTO\UpdateOutletLicenseRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOutletLicenses_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Создание и изменение лицензий для точек продаж
     * @param \App\DTO\UpdateOutletLicensesParameterData $parameters
     * @param \App\DTO\UpdateOutletLicenseRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOutletLicenses_0Result(
        \App\DTO\UpdateOutletLicensesParameterData $parameters,
        \App\DTO\UpdateOutletLicenseRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateOutletLicenses_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateOutlet_0
    /**
     * Изменение информации о точке продаж
     * @param \App\DTO\UpdateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateOutlet_0Raw(
        \App\DTO\UpdateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/outlets/{outletId}', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Изменение информации о точке продаж
     * @param \App\DTO\UpdateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateOutlet_0(
        \App\DTO\UpdateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateOutlet_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Изменение информации о точке продаж
     * @param \App\DTO\UpdateOutletParameterData $parameters
     * @param \App\DTO\ChangeOutletRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateOutlet_0Result(
        \App\DTO\UpdateOutletParameterData $parameters,
        \App\DTO\ChangeOutletRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateOutlet_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updatePrices
    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updatePricesRaw(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updatePrices(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updatePricesRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет принял информацию о новых ценах. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updatePricesResult(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updatePrices($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updatePrices_0
    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updatePrices_0Raw(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updatePrices_0(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updatePrices_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет принял информацию о новых ценах. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updatePrices_0Result(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updatePrices_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updatePrices_1
    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updatePrices_1Raw(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updatePrices_1(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updatePrices_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет принял информацию о новых ценах. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updatePrices_1Result(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updatePrices_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updatePrices_2
    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updatePrices_2Raw(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updatePrices_2(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updatePrices_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет принял информацию о новых ценах. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updatePrices_2Result(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updatePrices_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updatePrices_3
    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updatePrices_3Raw(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/campaigns/{campaignId}/offer-prices/updates', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updatePrices_3(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updatePrices_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Маркет принял информацию о новых ценах. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 423:
                /* К ресурсу нельзя применить указанный метод. */
                $responseContent = new \App\DTO\ApiLockedErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Установка цен на товары в конкретном магазине
     * @param \App\DTO\UpdatePricesParameterData $parameters
     * @param \App\DTO\UpdatePricesRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updatePrices_3Result(
        \App\DTO\UpdatePricesParameterData $parameters,
        \App\DTO\UpdatePricesRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updatePrices_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updatePromoOffers
    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updatePromoOffersRaw(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updatePromoOffers(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updatePromoOffersRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Результат добавления товаров в акцию или обновления их цен. */
                $responseContent = new \App\DTO\UpdatePromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdatePromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updatePromoOffersResult(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdatePromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->updatePromoOffers($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updatePromoOffers_0
    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updatePromoOffers_0Raw(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updatePromoOffers_0(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updatePromoOffers_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Результат добавления товаров в акцию или обновления их цен. */
                $responseContent = new \App\DTO\UpdatePromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdatePromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updatePromoOffers_0Result(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdatePromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->updatePromoOffers_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updatePromoOffers_1
    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updatePromoOffers_1Raw(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updatePromoOffers_1(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updatePromoOffers_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Результат добавления товаров в акцию или обновления их цен. */
                $responseContent = new \App\DTO\UpdatePromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdatePromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updatePromoOffers_1Result(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdatePromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->updatePromoOffers_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updatePromoOffers_2
    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updatePromoOffers_2Raw(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updatePromoOffers_2(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updatePromoOffers_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Результат добавления товаров в акцию или обновления их цен. */
                $responseContent = new \App\DTO\UpdatePromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdatePromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updatePromoOffers_2Result(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdatePromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->updatePromoOffers_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updatePromoOffers_3
    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updatePromoOffers_3Raw(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('POST', '/businesses/{businessId}/promos/offers/update', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updatePromoOffers_3(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updatePromoOffers_3Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Результат добавления товаров в акцию или обновления их цен. */
                $responseContent = new \App\DTO\UpdatePromoOffersResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Добавление товаров в акцию или изменение их цен
     * @param \App\DTO\UpdatePromoOffersParameterData $parameters
     * @param \App\DTO\UpdatePromoOffersRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\UpdatePromoOffersResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updatePromoOffers_3Result(
        \App\DTO\UpdatePromoOffersParameterData $parameters,
        \App\DTO\UpdatePromoOffersRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\UpdatePromoOffersResponse
    {
        return $this->getSuccessfulContent(...$this->updatePromoOffers_3($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateStocks
    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateStocksRaw(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/offers/stocks', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateStocks(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateStocksRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateStocksResult(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateStocks($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateStocks_0
    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateStocks_0Raw(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/offers/stocks', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateStocks_0(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateStocks_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateStocks_0Result(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateStocks_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateStocks_1
    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateStocks_1Raw(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/offers/stocks', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateStocks_1(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateStocks_1Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateStocks_1Result(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateStocks_1($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region updateStocks_2
    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function updateStocks_2Raw(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/offers/stocks', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function updateStocks_2(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->updateStocks_2Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Пустой ответ. */
                $responseContent = new \App\DTO\EmptyApiResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача информации об остатках
     * @param \App\DTO\UpdateStocksParameterData $parameters
     * @param \App\DTO\UpdateStocksRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\EmptyApiResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function updateStocks_2Result(
        \App\DTO\UpdateStocksParameterData $parameters,
        \App\DTO\UpdateStocksRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\EmptyApiResponse
    {
        return $this->getSuccessfulContent(...$this->updateStocks_2($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region verifyOrderEac
    /**
     * Передача кода подтверждения
     * @param \App\DTO\VerifyOrderEacParameterData $parameters
     * @param \App\DTO\VerifyOrderEacRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function verifyOrderEacRaw(
        \App\DTO\VerifyOrderEacParameterData $parameters,
        \App\DTO\VerifyOrderEacRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/verifyEac', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача кода подтверждения
     * @param \App\DTO\VerifyOrderEacParameterData $parameters
     * @param \App\DTO\VerifyOrderEacRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function verifyOrderEac(
        \App\DTO\VerifyOrderEacParameterData $parameters,
        \App\DTO\VerifyOrderEacRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->verifyOrderEacRaw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Проверка кода выполнена успешно. */
                $responseContent = new \App\DTO\VerifyOrderEacResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача кода подтверждения
     * @param \App\DTO\VerifyOrderEacParameterData $parameters
     * @param \App\DTO\VerifyOrderEacRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\VerifyOrderEacResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function verifyOrderEacResult(
        \App\DTO\VerifyOrderEacParameterData $parameters,
        \App\DTO\VerifyOrderEacRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\VerifyOrderEacResponse
    {
        return $this->getSuccessfulContent(...$this->verifyOrderEac($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion

    //region verifyOrderEac_0
    /**
     * Передача кода подтверждения
     * @param \App\DTO\VerifyOrderEacParameterData $parameters
     * @param \App\DTO\VerifyOrderEacRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function verifyOrderEac_0Raw(
        \App\DTO\VerifyOrderEacParameterData $parameters,
        \App\DTO\VerifyOrderEacRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): ResponseInterface
    {
        $request = $this->createRequest('PUT', '/campaigns/{campaignId}/orders/{orderId}/verifyEac', $this->getPathParameters($parameters), []);
        $request = $this->addBody($request, $requestMediaType, $requestContent);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        $request = $this->addSecurity($request, $security);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * Передача кода подтверждения
     * @param \App\DTO\VerifyOrderEacParameterData $parameters
     * @param \App\DTO\VerifyOrderEacRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function verifyOrderEac_0(
        \App\DTO\VerifyOrderEacParameterData $parameters,
        \App\DTO\VerifyOrderEacRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): array
    {
        $response = $this->verifyOrderEac_0Raw($parameters, $requestContent, $security, $requestMediaType, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            case 200:
                /* Проверка кода выполнена успешно. */
                $responseContent = new \App\DTO\VerifyOrderEacResponse();
                break;
            case 400:
                /* Запрос содержит неправильные данные. */
                $responseContent = new \App\DTO\ApiClientDataErrorResponse();
                break;
            case 401:
                /* В запросе не указаны данные для авторизации. */
                $responseContent = new \App\DTO\ApiUnauthorizedErrorResponse();
                break;
            case 403:
                /* Данные для авторизации неверны или доступ к ресурсу запрещен. */
                $responseContent = new \App\DTO\ApiForbiddenErrorResponse();
                break;
            case 404:
                /* Запрашиваемый ресурс не найден. */
                $responseContent = new \App\DTO\ApiNotFoundErrorResponse();
                break;
            case 420:
                /* Превышено ограничение на доступ к ресурсу. */
                $responseContent = new \App\DTO\ApiLimitErrorResponse();
                break;
            case 500:
                /* Внутренняя ошибка сервера. */
                $responseContent = new \App\DTO\ApiServerErrorResponse();
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * Передача кода подтверждения
     * @param \App\DTO\VerifyOrderEacParameterData $parameters
     * @param \App\DTO\VerifyOrderEacRequest $requestContent
     * @param iterable<string, string[]> $security
     * @param string $requestMediaType
     * @param string $responseMediaType
     * @return \App\DTO\VerifyOrderEacResponse
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function verifyOrderEac_0Result(
        \App\DTO\VerifyOrderEacParameterData $parameters,
        \App\DTO\VerifyOrderEacRequest $requestContent,
        iterable $security = ['OAuth' => ['market:partner-api', ]],
        string $requestMediaType = 'application/json',
        string $responseMediaType = 'application/json'
    ): \App\DTO\VerifyOrderEacResponse
    {
        return $this->getSuccessfulContent(...$this->verifyOrderEac_0($parameters, $requestContent, $security, $requestMediaType, $responseMediaType));
    }
    //endregion
}

