-module(ympa_erlang_server_api).

-export([request_params/1]).
-export([request_param_info/2]).
-export([populate_request/3]).
-export([validate_response/4]).
%% exported to silence openapi complains
-export([get_value/3, validate_response_body/4]).

-type operation_id() :: atom().
-type request_param() :: atom().

-export_type([operation_id/0]).

-spec request_params(OperationID :: operation_id()) -> [Param :: request_param()].


request_params('GetBidsInfoForBusiness') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetBidsInfoRequest'
    ];

request_params('GetBidsRecommendations') ->
    [
        'businessId',
        'GetBidsRecommendationsRequest'
    ];

request_params('PutBidsForBusiness') ->
    [
        'businessId',
        'PutSkuBidsRequest'
    ];

request_params('PutBidsForCampaign') ->
    [
        'campaignId',
        'PutSkuBidsRequest'
    ];


request_params('AddOffersToArchive') ->
    [
        'businessId',
        'AddOffersToArchiveRequest'
    ];

request_params('DeleteOffers') ->
    [
        'businessId',
        'DeleteOffersRequest'
    ];

request_params('DeleteOffersFromArchive') ->
    [
        'businessId',
        'DeleteOffersFromArchiveRequest'
    ];

request_params('GetOfferMappings') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetOfferMappingsRequest'
    ];

request_params('GetSuggestedOfferMappings') ->
    [
        'businessId',
        'GetSuggestedOfferMappingsRequest'
    ];

request_params('UpdateOfferMappings') ->
    [
        'businessId',
        'UpdateOfferMappingsRequest'
    ];


request_params('GetBusinessSettings') ->
    [
        'businessId'
    ];


request_params('GetCampaign') ->
    [
        'campaignId'
    ];

request_params('GetCampaignLogins') ->
    [
        'campaignId'
    ];

request_params('GetCampaignRegion') ->
    [
        'campaignId'
    ];

request_params('GetCampaignSettings') ->
    [
        'campaignId'
    ];

request_params('GetCampaigns') ->
    [
        'page',
        'pageSize'
    ];

request_params('GetCampaignsByLogin') ->
    [
        'login',
        'page',
        'pageSize'
    ];


request_params('GetCategoriesMaxSaleQuantum') ->
    [
        'GetCategoriesMaxSaleQuantumRequest'
    ];

request_params('GetCategoriesTree') ->
    [
        'GetCategoriesRequest'
    ];


request_params('CreateChat') ->
    [
        'businessId',
        'CreateChatRequest'
    ];

request_params('GetChatHistory') ->
    [
        'businessId',
        'chatId',
        'GetChatHistoryRequest',
        'page_token',
        'limit'
    ];

request_params('GetChats') ->
    [
        'businessId',
        'GetChatsRequest',
        'page_token',
        'limit'
    ];

request_params('SendFileToChat') ->
    [
        'businessId',
        'chatId',
        'file'
    ];

request_params('SendMessageToChat') ->
    [
        'businessId',
        'chatId',
        'SendMessageToChatRequest'
    ];


request_params('GetCategoryContentParameters') ->
    [
        'categoryId'
    ];

request_params('GetOfferCardsContentStatus') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetOfferCardsContentStatusRequest'
    ];

request_params('UpdateOfferContent') ->
    [
        'businessId',
        'UpdateOfferContentRequest'
    ];


request_params('AcceptOrderCancellation') ->
    [
        'campaignId',
        'orderId',
        'AcceptOrderCancellationRequest'
    ];

request_params('AddHiddenOffers') ->
    [
        'campaignId',
        'AddHiddenOffersRequest'
    ];

request_params('AddOffersToArchive') ->
    [
        'businessId',
        'AddOffersToArchiveRequest'
    ];

request_params('CalculateTariffs') ->
    [
        'CalculateTariffsRequest'
    ];

request_params('ConfirmBusinessPrices') ->
    [
        'businessId',
        'ConfirmPricesRequest'
    ];

request_params('ConfirmCampaignPrices') ->
    [
        'campaignId',
        'ConfirmPricesRequest'
    ];

request_params('CreateChat') ->
    [
        'businessId',
        'CreateChatRequest'
    ];

request_params('CreateOutlet') ->
    [
        'campaignId',
        'ChangeOutletRequest'
    ];

request_params('DeleteCampaignOffers') ->
    [
        'campaignId',
        'DeleteCampaignOffersRequest'
    ];

request_params('DeleteGoodsFeedbackComment') ->
    [
        'businessId',
        'DeleteGoodsFeedbackCommentRequest'
    ];

request_params('DeleteHiddenOffers') ->
    [
        'campaignId',
        'DeleteHiddenOffersRequest'
    ];

request_params('DeleteOffers') ->
    [
        'businessId',
        'DeleteOffersRequest'
    ];

request_params('DeleteOffersFromArchive') ->
    [
        'businessId',
        'DeleteOffersFromArchiveRequest'
    ];

request_params('DeleteOutlet') ->
    [
        'campaignId',
        'outletId'
    ];

request_params('DeleteOutletLicenses') ->
    [
        'campaignId',
        'ids'
    ];

request_params('DeletePromoOffers') ->
    [
        'businessId',
        'DeletePromoOffersRequest'
    ];

request_params('GenerateBoostConsolidatedReport') ->
    [
        'GenerateBoostConsolidatedRequest',
        'format'
    ];

request_params('GenerateCompetitorsPositionReport') ->
    [
        'GenerateCompetitorsPositionReportRequest',
        'format'
    ];

request_params('GenerateGoodsFeedbackReport') ->
    [
        'GenerateGoodsFeedbackRequest',
        'format'
    ];

request_params('GenerateMassOrderLabelsReport') ->
    [
        'GenerateMassOrderLabelsRequest',
        'format'
    ];

request_params('GenerateOrderLabel') ->
    [
        'campaignId',
        'orderId',
        'shipmentId',
        'boxId',
        'format'
    ];

request_params('GenerateOrderLabels') ->
    [
        'campaignId',
        'orderId',
        'format'
    ];

request_params('GeneratePricesReport') ->
    [
        'GeneratePricesReportRequest',
        'format'
    ];

request_params('GenerateShelfsStatisticsReport') ->
    [
        'GenerateShelfsStatisticsRequest',
        'format'
    ];

request_params('GenerateShowsSalesReport') ->
    [
        'GenerateShowsSalesReportRequest',
        'format'
    ];

request_params('GenerateStocksOnWarehousesReport') ->
    [
        'GenerateStocksOnWarehousesReportRequest',
        'format'
    ];

request_params('GenerateUnitedMarketplaceServicesReport') ->
    [
        'GenerateUnitedMarketplaceServicesReportRequest',
        'format'
    ];

request_params('GenerateUnitedNettingReport') ->
    [
        'GenerateUnitedNettingReportRequest',
        'format'
    ];

request_params('GenerateUnitedOrdersReport') ->
    [
        'GenerateUnitedOrdersRequest',
        'format'
    ];

request_params('GetAllOffers') ->
    [
        'campaignId',
        'feedId',
        'chunk'
    ];

request_params('GetBidsInfoForBusiness') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetBidsInfoRequest'
    ];

request_params('GetBidsRecommendations') ->
    [
        'businessId',
        'GetBidsRecommendationsRequest'
    ];

request_params('GetBusinessQuarantineOffers') ->
    [
        'businessId',
        'GetQuarantineOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetBusinessSettings') ->
    [
        'businessId'
    ];

request_params('GetCampaign') ->
    [
        'campaignId'
    ];

request_params('GetCampaignLogins') ->
    [
        'campaignId'
    ];

request_params('GetCampaignOffers') ->
    [
        'campaignId',
        'GetCampaignOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetCampaignQuarantineOffers') ->
    [
        'campaignId',
        'GetQuarantineOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetCampaignRegion') ->
    [
        'campaignId'
    ];

request_params('GetCampaignSettings') ->
    [
        'campaignId'
    ];

request_params('GetCampaigns') ->
    [
        'page',
        'pageSize'
    ];

request_params('GetCampaignsByLogin') ->
    [
        'login',
        'page',
        'pageSize'
    ];

request_params('GetCategoriesMaxSaleQuantum') ->
    [
        'GetCategoriesMaxSaleQuantumRequest'
    ];

request_params('GetCategoriesTree') ->
    [
        'GetCategoriesRequest'
    ];

request_params('GetCategoryContentParameters') ->
    [
        'categoryId'
    ];

request_params('GetChatHistory') ->
    [
        'businessId',
        'chatId',
        'GetChatHistoryRequest',
        'page_token',
        'limit'
    ];

request_params('GetChats') ->
    [
        'businessId',
        'GetChatsRequest',
        'page_token',
        'limit'
    ];

request_params('GetDeliveryServices') ->
    [
    ];

request_params('GetFeed') ->
    [
        'campaignId',
        'feedId'
    ];

request_params('GetFeedIndexLogs') ->
    [
        'campaignId',
        'feedId',
        'limit',
        'published_time_from',
        'published_time_to',
        'status'
    ];

request_params('GetFeedbackAndCommentUpdates') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'from_date'
    ];

request_params('GetFeeds') ->
    [
        'campaignId'
    ];

request_params('GetGoodsFeedbackComments') ->
    [
        'businessId',
        'GetGoodsFeedbackCommentsRequest',
        'page_token',
        'limit'
    ];

request_params('GetGoodsFeedbacks') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetGoodsFeedbackRequest'
    ];

request_params('GetGoodsStats') ->
    [
        'campaignId',
        'GetGoodsStatsRequest'
    ];

request_params('GetHiddenOffers') ->
    [
        'campaignId',
        'offer_id',
        'page_token',
        'limit',
        'offset',
        'page',
        'pageSize'
    ];

request_params('GetModel') ->
    [
        'modelId',
        'regionId',
        'currency'
    ];

request_params('GetModelOffers') ->
    [
        'modelId',
        'regionId',
        'currency',
        'orderByPrice',
        'count',
        'page'
    ];

request_params('GetModels') ->
    [
        'regionId',
        'GetModelsRequest',
        'currency'
    ];

request_params('GetModelsOffers') ->
    [
        'regionId',
        'GetModelsRequest',
        'currency',
        'orderByPrice'
    ];

request_params('GetOfferCardsContentStatus') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetOfferCardsContentStatusRequest'
    ];

request_params('GetOfferMappingEntries') ->
    [
        'campaignId',
        'offer_id',
        'shop_sku',
        'mapping_kind',
        'status',
        'availability',
        'category_id',
        'vendor',
        'page_token',
        'limit'
    ];

request_params('GetOfferMappings') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetOfferMappingsRequest'
    ];

request_params('GetOfferRecommendations') ->
    [
        'businessId',
        'GetOfferRecommendationsRequest',
        'page_token',
        'limit'
    ];

request_params('GetOffers') ->
    [
        'campaignId',
        'query',
        'feedId',
        'shopCategoryId',
        'currency',
        'matched',
        'page',
        'pageSize'
    ];

request_params('GetOrder') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderBusinessBuyerInfo') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderBusinessDocumentsInfo') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderBuyerInfo') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderLabelsData') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrders') ->
    [
        'campaignId',
        'orderIds',
        'status',
        'substatus',
        'fromDate',
        'toDate',
        'supplierShipmentDateFrom',
        'supplierShipmentDateTo',
        'updatedAtFrom',
        'updatedAtTo',
        'dispatchType',
        'fake',
        'hasCis',
        'onlyWaitingForCancellationApprove',
        'onlyEstimatedDelivery',
        'buyerType',
        'page',
        'pageSize',
        'page_token',
        'limit'
    ];

request_params('GetOrdersStats') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetOrdersStatsRequest'
    ];

request_params('GetOutlet') ->
    [
        'campaignId',
        'outletId'
    ];

request_params('GetOutletLicenses') ->
    [
        'campaignId',
        'outletIds',
        'ids'
    ];

request_params('GetOutlets') ->
    [
        'campaignId',
        'page_token',
        'region_id',
        'shop_outlet_code',
        'regionId'
    ];

request_params('GetPrices') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'archived'
    ];

request_params('GetPricesByOfferIds') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetPricesByOfferIdsRequest'
    ];

request_params('GetPromoOffers') ->
    [
        'businessId',
        'GetPromoOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetPromos') ->
    [
        'businessId',
        'GetPromosRequest'
    ];

request_params('GetQualityRatingDetails') ->
    [
        'campaignId'
    ];

request_params('GetQualityRatings') ->
    [
        'businessId',
        'GetQualityRatingRequest'
    ];

request_params('GetReportInfo') ->
    [
        'reportId'
    ];

request_params('GetReturn') ->
    [
        'campaignId',
        'orderId',
        'returnId'
    ];

request_params('GetReturnApplication') ->
    [
        'campaignId',
        'orderId',
        'returnId'
    ];

request_params('GetReturnPhoto') ->
    [
        'campaignId',
        'orderId',
        'returnId',
        'itemId',
        'imageHash'
    ];

request_params('GetReturns') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'orderIds',
        'statuses',
        'type',
        'fromDate',
        'toDate',
        'from_date',
        'to_date'
    ];

request_params('GetStocks') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetWarehouseStocksRequest'
    ];

request_params('GetSuggestedOfferMappingEntries') ->
    [
        'campaignId',
        'GetSuggestedOfferMappingEntriesRequest'
    ];

request_params('GetSuggestedOfferMappings') ->
    [
        'businessId',
        'GetSuggestedOfferMappingsRequest'
    ];

request_params('GetSuggestedPrices') ->
    [
        'campaignId',
        'SuggestPricesRequest'
    ];

request_params('GetWarehouses') ->
    [
        'businessId'
    ];

request_params('ProvideOrderDigitalCodes') ->
    [
        'campaignId',
        'orderId',
        'ProvideOrderDigitalCodesRequest'
    ];

request_params('ProvideOrderItemIdentifiers') ->
    [
        'campaignId',
        'orderId',
        'ProvideOrderItemIdentifiersRequest'
    ];

request_params('PutBidsForBusiness') ->
    [
        'businessId',
        'PutSkuBidsRequest'
    ];

request_params('PutBidsForCampaign') ->
    [
        'campaignId',
        'PutSkuBidsRequest'
    ];

request_params('RefreshFeed') ->
    [
        'campaignId',
        'feedId'
    ];

request_params('SearchModels') ->
    [
        'query',
        'regionId',
        'currency',
        'page',
        'pageSize'
    ];

request_params('SearchRegionChildren') ->
    [
        'regionId',
        'page',
        'pageSize'
    ];

request_params('SearchRegionsById') ->
    [
        'regionId'
    ];

request_params('SearchRegionsByName') ->
    [
        'name',
        'page_token',
        'limit'
    ];

request_params('SendFileToChat') ->
    [
        'businessId',
        'chatId',
        'file'
    ];

request_params('SendMessageToChat') ->
    [
        'businessId',
        'chatId',
        'SendMessageToChatRequest'
    ];

request_params('SetFeedParams') ->
    [
        'campaignId',
        'feedId',
        'SetFeedParamsRequest'
    ];

request_params('SetOrderBoxLayout') ->
    [
        'campaignId',
        'orderId',
        'SetOrderBoxLayoutRequest'
    ];

request_params('SetOrderDeliveryDate') ->
    [
        'campaignId',
        'orderId',
        'SetOrderDeliveryDateRequest'
    ];

request_params('SetOrderDeliveryTrackCode') ->
    [
        'campaignId',
        'orderId',
        'SetOrderDeliveryTrackCodeRequest'
    ];

request_params('SetOrderShipmentBoxes') ->
    [
        'campaignId',
        'orderId',
        'shipmentId',
        'SetOrderShipmentBoxesRequest'
    ];

request_params('SetReturnDecision') ->
    [
        'campaignId',
        'orderId',
        'returnId',
        'SetReturnDecisionRequest'
    ];

request_params('SkipGoodsFeedbacksReaction') ->
    [
        'businessId',
        'SkipGoodsFeedbackReactionRequest'
    ];

request_params('SubmitReturnDecision') ->
    [
        'campaignId',
        'orderId',
        'returnId'
    ];

request_params('UpdateBusinessPrices') ->
    [
        'businessId',
        'UpdateBusinessPricesRequest'
    ];

request_params('UpdateCampaignOffers') ->
    [
        'campaignId',
        'UpdateCampaignOffersRequest'
    ];

request_params('UpdateGoodsFeedbackComment') ->
    [
        'businessId',
        'UpdateGoodsFeedbackCommentRequest'
    ];

request_params('UpdateOfferContent') ->
    [
        'businessId',
        'UpdateOfferContentRequest'
    ];

request_params('UpdateOfferMappingEntries') ->
    [
        'campaignId',
        'UpdateOfferMappingEntryRequest'
    ];

request_params('UpdateOfferMappings') ->
    [
        'businessId',
        'UpdateOfferMappingsRequest'
    ];

request_params('UpdateOrderItems') ->
    [
        'campaignId',
        'orderId',
        'UpdateOrderItemRequest'
    ];

request_params('UpdateOrderStatus') ->
    [
        'campaignId',
        'orderId',
        'UpdateOrderStatusRequest'
    ];

request_params('UpdateOrderStatuses') ->
    [
        'campaignId',
        'UpdateOrderStatusesRequest'
    ];

request_params('UpdateOrderStorageLimit') ->
    [
        'campaignId',
        'orderId',
        'UpdateOrderStorageLimitRequest'
    ];

request_params('UpdateOutlet') ->
    [
        'campaignId',
        'outletId',
        'ChangeOutletRequest'
    ];

request_params('UpdateOutletLicenses') ->
    [
        'campaignId',
        'UpdateOutletLicenseRequest'
    ];

request_params('UpdatePrices') ->
    [
        'campaignId',
        'UpdatePricesRequest'
    ];

request_params('UpdatePromoOffers') ->
    [
        'businessId',
        'UpdatePromoOffersRequest'
    ];

request_params('UpdateStocks') ->
    [
        'campaignId',
        'UpdateStocksRequest'
    ];


request_params('GetDeliveryServices') ->
    [
    ];


request_params('AddHiddenOffers') ->
    [
        'campaignId',
        'AddHiddenOffersRequest'
    ];

request_params('AddOffersToArchive') ->
    [
        'businessId',
        'AddOffersToArchiveRequest'
    ];

request_params('CalculateTariffs') ->
    [
        'CalculateTariffsRequest'
    ];

request_params('ConfirmBusinessPrices') ->
    [
        'businessId',
        'ConfirmPricesRequest'
    ];

request_params('ConfirmCampaignPrices') ->
    [
        'campaignId',
        'ConfirmPricesRequest'
    ];

request_params('CreateChat') ->
    [
        'businessId',
        'CreateChatRequest'
    ];

request_params('DeleteCampaignOffers') ->
    [
        'campaignId',
        'DeleteCampaignOffersRequest'
    ];

request_params('DeleteGoodsFeedbackComment') ->
    [
        'businessId',
        'DeleteGoodsFeedbackCommentRequest'
    ];

request_params('DeleteHiddenOffers') ->
    [
        'campaignId',
        'DeleteHiddenOffersRequest'
    ];

request_params('DeleteOffers') ->
    [
        'businessId',
        'DeleteOffersRequest'
    ];

request_params('DeleteOffersFromArchive') ->
    [
        'businessId',
        'DeleteOffersFromArchiveRequest'
    ];

request_params('DeletePromoOffers') ->
    [
        'businessId',
        'DeletePromoOffersRequest'
    ];

request_params('GenerateBoostConsolidatedReport') ->
    [
        'GenerateBoostConsolidatedRequest',
        'format'
    ];

request_params('GenerateCompetitorsPositionReport') ->
    [
        'GenerateCompetitorsPositionReportRequest',
        'format'
    ];

request_params('GenerateGoodsFeedbackReport') ->
    [
        'GenerateGoodsFeedbackRequest',
        'format'
    ];

request_params('GenerateGoodsRealizationReport') ->
    [
        'GenerateGoodsRealizationReportRequest',
        'format'
    ];

request_params('GenerateMassOrderLabelsReport') ->
    [
        'GenerateMassOrderLabelsRequest',
        'format'
    ];

request_params('GenerateOrderLabel') ->
    [
        'campaignId',
        'orderId',
        'shipmentId',
        'boxId',
        'format'
    ];

request_params('GenerateOrderLabels') ->
    [
        'campaignId',
        'orderId',
        'format'
    ];

request_params('GeneratePricesReport') ->
    [
        'GeneratePricesReportRequest',
        'format'
    ];

request_params('GenerateShelfsStatisticsReport') ->
    [
        'GenerateShelfsStatisticsRequest',
        'format'
    ];

request_params('GenerateShowsSalesReport') ->
    [
        'GenerateShowsSalesReportRequest',
        'format'
    ];

request_params('GenerateStocksOnWarehousesReport') ->
    [
        'GenerateStocksOnWarehousesReportRequest',
        'format'
    ];

request_params('GenerateUnitedMarketplaceServicesReport') ->
    [
        'GenerateUnitedMarketplaceServicesReportRequest',
        'format'
    ];

request_params('GenerateUnitedNettingReport') ->
    [
        'GenerateUnitedNettingReportRequest',
        'format'
    ];

request_params('GenerateUnitedOrdersReport') ->
    [
        'GenerateUnitedOrdersRequest',
        'format'
    ];

request_params('GetAllOffers') ->
    [
        'campaignId',
        'feedId',
        'chunk'
    ];

request_params('GetBidsInfoForBusiness') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetBidsInfoRequest'
    ];

request_params('GetBidsRecommendations') ->
    [
        'businessId',
        'GetBidsRecommendationsRequest'
    ];

request_params('GetBusinessQuarantineOffers') ->
    [
        'businessId',
        'GetQuarantineOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetBusinessSettings') ->
    [
        'businessId'
    ];

request_params('GetCampaign') ->
    [
        'campaignId'
    ];

request_params('GetCampaignLogins') ->
    [
        'campaignId'
    ];

request_params('GetCampaignOffers') ->
    [
        'campaignId',
        'GetCampaignOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetCampaignQuarantineOffers') ->
    [
        'campaignId',
        'GetQuarantineOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetCampaignRegion') ->
    [
        'campaignId'
    ];

request_params('GetCampaignSettings') ->
    [
        'campaignId'
    ];

request_params('GetCampaigns') ->
    [
        'page',
        'pageSize'
    ];

request_params('GetCampaignsByLogin') ->
    [
        'login',
        'page',
        'pageSize'
    ];

request_params('GetCategoriesMaxSaleQuantum') ->
    [
        'GetCategoriesMaxSaleQuantumRequest'
    ];

request_params('GetCategoriesTree') ->
    [
        'GetCategoriesRequest'
    ];

request_params('GetCategoryContentParameters') ->
    [
        'categoryId'
    ];

request_params('GetChatHistory') ->
    [
        'businessId',
        'chatId',
        'GetChatHistoryRequest',
        'page_token',
        'limit'
    ];

request_params('GetChats') ->
    [
        'businessId',
        'GetChatsRequest',
        'page_token',
        'limit'
    ];

request_params('GetDeliveryServices') ->
    [
    ];

request_params('GetFeed') ->
    [
        'campaignId',
        'feedId'
    ];

request_params('GetFeedIndexLogs') ->
    [
        'campaignId',
        'feedId',
        'limit',
        'published_time_from',
        'published_time_to',
        'status'
    ];

request_params('GetFeedbackAndCommentUpdates') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'from_date'
    ];

request_params('GetFeeds') ->
    [
        'campaignId'
    ];

request_params('GetGoodsFeedbackComments') ->
    [
        'businessId',
        'GetGoodsFeedbackCommentsRequest',
        'page_token',
        'limit'
    ];

request_params('GetGoodsFeedbacks') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetGoodsFeedbackRequest'
    ];

request_params('GetGoodsStats') ->
    [
        'campaignId',
        'GetGoodsStatsRequest'
    ];

request_params('GetHiddenOffers') ->
    [
        'campaignId',
        'offer_id',
        'page_token',
        'limit',
        'offset',
        'page',
        'pageSize'
    ];

request_params('GetOfferCardsContentStatus') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetOfferCardsContentStatusRequest'
    ];

request_params('GetOfferMappingEntries') ->
    [
        'campaignId',
        'offer_id',
        'shop_sku',
        'mapping_kind',
        'status',
        'availability',
        'category_id',
        'vendor',
        'page_token',
        'limit'
    ];

request_params('GetOfferMappings') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetOfferMappingsRequest'
    ];

request_params('GetOfferRecommendations') ->
    [
        'businessId',
        'GetOfferRecommendationsRequest',
        'page_token',
        'limit'
    ];

request_params('GetOffers') ->
    [
        'campaignId',
        'query',
        'feedId',
        'shopCategoryId',
        'currency',
        'matched',
        'page',
        'pageSize'
    ];

request_params('GetOrder') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderBusinessBuyerInfo') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderBusinessDocumentsInfo') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderLabelsData') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrders') ->
    [
        'campaignId',
        'orderIds',
        'status',
        'substatus',
        'fromDate',
        'toDate',
        'supplierShipmentDateFrom',
        'supplierShipmentDateTo',
        'updatedAtFrom',
        'updatedAtTo',
        'dispatchType',
        'fake',
        'hasCis',
        'onlyWaitingForCancellationApprove',
        'onlyEstimatedDelivery',
        'buyerType',
        'page',
        'pageSize',
        'page_token',
        'limit'
    ];

request_params('GetOrdersStats') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetOrdersStatsRequest'
    ];

request_params('GetPrices') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'archived'
    ];

request_params('GetPricesByOfferIds') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetPricesByOfferIdsRequest'
    ];

request_params('GetPromoOffers') ->
    [
        'businessId',
        'GetPromoOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetPromos') ->
    [
        'businessId',
        'GetPromosRequest'
    ];

request_params('GetQualityRatingDetails') ->
    [
        'campaignId'
    ];

request_params('GetQualityRatings') ->
    [
        'businessId',
        'GetQualityRatingRequest'
    ];

request_params('GetReportInfo') ->
    [
        'reportId'
    ];

request_params('GetReturn') ->
    [
        'campaignId',
        'orderId',
        'returnId'
    ];

request_params('GetReturnApplication') ->
    [
        'campaignId',
        'orderId',
        'returnId'
    ];

request_params('GetReturnPhoto') ->
    [
        'campaignId',
        'orderId',
        'returnId',
        'itemId',
        'imageHash'
    ];

request_params('GetReturns') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'orderIds',
        'statuses',
        'type',
        'fromDate',
        'toDate',
        'from_date',
        'to_date'
    ];

request_params('GetStocks') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetWarehouseStocksRequest'
    ];

request_params('GetSuggestedOfferMappingEntries') ->
    [
        'campaignId',
        'GetSuggestedOfferMappingEntriesRequest'
    ];

request_params('GetSuggestedOfferMappings') ->
    [
        'businessId',
        'GetSuggestedOfferMappingsRequest'
    ];

request_params('GetSuggestedPrices') ->
    [
        'campaignId',
        'SuggestPricesRequest'
    ];

request_params('GetWarehouses') ->
    [
        'businessId'
    ];

request_params('ProvideOrderItemIdentifiers') ->
    [
        'campaignId',
        'orderId',
        'ProvideOrderItemIdentifiersRequest'
    ];

request_params('PutBidsForBusiness') ->
    [
        'businessId',
        'PutSkuBidsRequest'
    ];

request_params('PutBidsForCampaign') ->
    [
        'campaignId',
        'PutSkuBidsRequest'
    ];

request_params('RefreshFeed') ->
    [
        'campaignId',
        'feedId'
    ];

request_params('SearchRegionChildren') ->
    [
        'regionId',
        'page',
        'pageSize'
    ];

request_params('SearchRegionsById') ->
    [
        'regionId'
    ];

request_params('SearchRegionsByName') ->
    [
        'name',
        'page_token',
        'limit'
    ];

request_params('SendFileToChat') ->
    [
        'businessId',
        'chatId',
        'file'
    ];

request_params('SendMessageToChat') ->
    [
        'businessId',
        'chatId',
        'SendMessageToChatRequest'
    ];

request_params('SetFeedParams') ->
    [
        'campaignId',
        'feedId',
        'SetFeedParamsRequest'
    ];

request_params('SetOrderBoxLayout') ->
    [
        'campaignId',
        'orderId',
        'SetOrderBoxLayoutRequest'
    ];

request_params('SetOrderShipmentBoxes') ->
    [
        'campaignId',
        'orderId',
        'shipmentId',
        'SetOrderShipmentBoxesRequest'
    ];

request_params('SkipGoodsFeedbacksReaction') ->
    [
        'businessId',
        'SkipGoodsFeedbackReactionRequest'
    ];

request_params('UpdateBusinessPrices') ->
    [
        'businessId',
        'UpdateBusinessPricesRequest'
    ];

request_params('UpdateCampaignOffers') ->
    [
        'campaignId',
        'UpdateCampaignOffersRequest'
    ];

request_params('UpdateGoodsFeedbackComment') ->
    [
        'businessId',
        'UpdateGoodsFeedbackCommentRequest'
    ];

request_params('UpdateOfferContent') ->
    [
        'businessId',
        'UpdateOfferContentRequest'
    ];

request_params('UpdateOfferMappingEntries') ->
    [
        'campaignId',
        'UpdateOfferMappingEntryRequest'
    ];

request_params('UpdateOfferMappings') ->
    [
        'businessId',
        'UpdateOfferMappingsRequest'
    ];

request_params('UpdateOrderItems') ->
    [
        'campaignId',
        'orderId',
        'UpdateOrderItemRequest'
    ];

request_params('UpdateOrderStatus') ->
    [
        'campaignId',
        'orderId',
        'UpdateOrderStatusRequest'
    ];

request_params('UpdateOrderStatuses') ->
    [
        'campaignId',
        'UpdateOrderStatusesRequest'
    ];

request_params('UpdatePrices') ->
    [
        'campaignId',
        'UpdatePricesRequest'
    ];

request_params('UpdatePromoOffers') ->
    [
        'businessId',
        'UpdatePromoOffersRequest'
    ];

request_params('UpdateStocks') ->
    [
        'campaignId',
        'UpdateStocksRequest'
    ];

request_params('VerifyOrderEac') ->
    [
        'campaignId',
        'orderId',
        'VerifyOrderEacRequest'
    ];


request_params('AddHiddenOffers') ->
    [
        'campaignId',
        'AddHiddenOffersRequest'
    ];

request_params('AddOffersToArchive') ->
    [
        'businessId',
        'AddOffersToArchiveRequest'
    ];

request_params('CalculateTariffs') ->
    [
        'CalculateTariffsRequest'
    ];

request_params('ConfirmBusinessPrices') ->
    [
        'businessId',
        'ConfirmPricesRequest'
    ];

request_params('ConfirmCampaignPrices') ->
    [
        'campaignId',
        'ConfirmPricesRequest'
    ];

request_params('ConfirmShipment') ->
    [
        'campaignId',
        'shipmentId',
        'ConfirmShipmentRequest'
    ];

request_params('CreateChat') ->
    [
        'businessId',
        'CreateChatRequest'
    ];

request_params('DeleteCampaignOffers') ->
    [
        'campaignId',
        'DeleteCampaignOffersRequest'
    ];

request_params('DeleteGoodsFeedbackComment') ->
    [
        'businessId',
        'DeleteGoodsFeedbackCommentRequest'
    ];

request_params('DeleteHiddenOffers') ->
    [
        'campaignId',
        'DeleteHiddenOffersRequest'
    ];

request_params('DeleteOffers') ->
    [
        'businessId',
        'DeleteOffersRequest'
    ];

request_params('DeleteOffersFromArchive') ->
    [
        'businessId',
        'DeleteOffersFromArchiveRequest'
    ];

request_params('DeletePromoOffers') ->
    [
        'businessId',
        'DeletePromoOffersRequest'
    ];

request_params('DownloadShipmentAct') ->
    [
        'campaignId',
        'shipmentId'
    ];

request_params('DownloadShipmentDiscrepancyAct') ->
    [
        'campaignId',
        'shipmentId'
    ];

request_params('DownloadShipmentInboundAct') ->
    [
        'campaignId',
        'shipmentId'
    ];

request_params('DownloadShipmentPalletLabels') ->
    [
        'campaignId',
        'shipmentId',
        'format'
    ];

request_params('DownloadShipmentReceptionTransferAct') ->
    [
        'campaignId',
        'warehouse_id'
    ];

request_params('DownloadShipmentTransportationWaybill') ->
    [
        'campaignId',
        'shipmentId'
    ];

request_params('GenerateBoostConsolidatedReport') ->
    [
        'GenerateBoostConsolidatedRequest',
        'format'
    ];

request_params('GenerateCompetitorsPositionReport') ->
    [
        'GenerateCompetitorsPositionReportRequest',
        'format'
    ];

request_params('GenerateGoodsFeedbackReport') ->
    [
        'GenerateGoodsFeedbackRequest',
        'format'
    ];

request_params('GenerateGoodsRealizationReport') ->
    [
        'GenerateGoodsRealizationReportRequest',
        'format'
    ];

request_params('GenerateMassOrderLabelsReport') ->
    [
        'GenerateMassOrderLabelsRequest',
        'format'
    ];

request_params('GenerateOrderLabel') ->
    [
        'campaignId',
        'orderId',
        'shipmentId',
        'boxId',
        'format'
    ];

request_params('GenerateOrderLabels') ->
    [
        'campaignId',
        'orderId',
        'format'
    ];

request_params('GeneratePricesReport') ->
    [
        'GeneratePricesReportRequest',
        'format'
    ];

request_params('GenerateShelfsStatisticsReport') ->
    [
        'GenerateShelfsStatisticsRequest',
        'format'
    ];

request_params('GenerateShipmentListDocumentReport') ->
    [
        'GenerateShipmentListDocumentReportRequest'
    ];

request_params('GenerateShowsSalesReport') ->
    [
        'GenerateShowsSalesReportRequest',
        'format'
    ];

request_params('GenerateStocksOnWarehousesReport') ->
    [
        'GenerateStocksOnWarehousesReportRequest',
        'format'
    ];

request_params('GenerateUnitedMarketplaceServicesReport') ->
    [
        'GenerateUnitedMarketplaceServicesReportRequest',
        'format'
    ];

request_params('GenerateUnitedNettingReport') ->
    [
        'GenerateUnitedNettingReportRequest',
        'format'
    ];

request_params('GenerateUnitedOrdersReport') ->
    [
        'GenerateUnitedOrdersRequest',
        'format'
    ];

request_params('GetAllOffers') ->
    [
        'campaignId',
        'feedId',
        'chunk'
    ];

request_params('GetBidsInfoForBusiness') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetBidsInfoRequest'
    ];

request_params('GetBidsRecommendations') ->
    [
        'businessId',
        'GetBidsRecommendationsRequest'
    ];

request_params('GetBusinessQuarantineOffers') ->
    [
        'businessId',
        'GetQuarantineOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetBusinessSettings') ->
    [
        'businessId'
    ];

request_params('GetCampaign') ->
    [
        'campaignId'
    ];

request_params('GetCampaignLogins') ->
    [
        'campaignId'
    ];

request_params('GetCampaignOffers') ->
    [
        'campaignId',
        'GetCampaignOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetCampaignQuarantineOffers') ->
    [
        'campaignId',
        'GetQuarantineOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetCampaignRegion') ->
    [
        'campaignId'
    ];

request_params('GetCampaignSettings') ->
    [
        'campaignId'
    ];

request_params('GetCampaigns') ->
    [
        'page',
        'pageSize'
    ];

request_params('GetCampaignsByLogin') ->
    [
        'login',
        'page',
        'pageSize'
    ];

request_params('GetCategoriesMaxSaleQuantum') ->
    [
        'GetCategoriesMaxSaleQuantumRequest'
    ];

request_params('GetCategoriesTree') ->
    [
        'GetCategoriesRequest'
    ];

request_params('GetCategoryContentParameters') ->
    [
        'categoryId'
    ];

request_params('GetChatHistory') ->
    [
        'businessId',
        'chatId',
        'GetChatHistoryRequest',
        'page_token',
        'limit'
    ];

request_params('GetChats') ->
    [
        'businessId',
        'GetChatsRequest',
        'page_token',
        'limit'
    ];

request_params('GetDeliveryServices') ->
    [
    ];

request_params('GetFeed') ->
    [
        'campaignId',
        'feedId'
    ];

request_params('GetFeedIndexLogs') ->
    [
        'campaignId',
        'feedId',
        'limit',
        'published_time_from',
        'published_time_to',
        'status'
    ];

request_params('GetFeedbackAndCommentUpdates') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'from_date'
    ];

request_params('GetFeeds') ->
    [
        'campaignId'
    ];

request_params('GetGoodsFeedbackComments') ->
    [
        'businessId',
        'GetGoodsFeedbackCommentsRequest',
        'page_token',
        'limit'
    ];

request_params('GetGoodsFeedbacks') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetGoodsFeedbackRequest'
    ];

request_params('GetGoodsStats') ->
    [
        'campaignId',
        'GetGoodsStatsRequest'
    ];

request_params('GetHiddenOffers') ->
    [
        'campaignId',
        'offer_id',
        'page_token',
        'limit',
        'offset',
        'page',
        'pageSize'
    ];

request_params('GetOfferCardsContentStatus') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetOfferCardsContentStatusRequest'
    ];

request_params('GetOfferMappingEntries') ->
    [
        'campaignId',
        'offer_id',
        'shop_sku',
        'mapping_kind',
        'status',
        'availability',
        'category_id',
        'vendor',
        'page_token',
        'limit'
    ];

request_params('GetOfferMappings') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetOfferMappingsRequest'
    ];

request_params('GetOfferRecommendations') ->
    [
        'businessId',
        'GetOfferRecommendationsRequest',
        'page_token',
        'limit'
    ];

request_params('GetOffers') ->
    [
        'campaignId',
        'query',
        'feedId',
        'shopCategoryId',
        'currency',
        'matched',
        'page',
        'pageSize'
    ];

request_params('GetOrder') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderBusinessBuyerInfo') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderBusinessDocumentsInfo') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderLabelsData') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrders') ->
    [
        'campaignId',
        'orderIds',
        'status',
        'substatus',
        'fromDate',
        'toDate',
        'supplierShipmentDateFrom',
        'supplierShipmentDateTo',
        'updatedAtFrom',
        'updatedAtTo',
        'dispatchType',
        'fake',
        'hasCis',
        'onlyWaitingForCancellationApprove',
        'onlyEstimatedDelivery',
        'buyerType',
        'page',
        'pageSize',
        'page_token',
        'limit'
    ];

request_params('GetOrdersStats') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetOrdersStatsRequest'
    ];

request_params('GetPrices') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'archived'
    ];

request_params('GetPricesByOfferIds') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetPricesByOfferIdsRequest'
    ];

request_params('GetPromoOffers') ->
    [
        'businessId',
        'GetPromoOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetPromos') ->
    [
        'businessId',
        'GetPromosRequest'
    ];

request_params('GetQualityRatingDetails') ->
    [
        'campaignId'
    ];

request_params('GetQualityRatings') ->
    [
        'businessId',
        'GetQualityRatingRequest'
    ];

request_params('GetReportInfo') ->
    [
        'reportId'
    ];

request_params('GetReturn') ->
    [
        'campaignId',
        'orderId',
        'returnId'
    ];

request_params('GetReturnApplication') ->
    [
        'campaignId',
        'orderId',
        'returnId'
    ];

request_params('GetReturnPhoto') ->
    [
        'campaignId',
        'orderId',
        'returnId',
        'itemId',
        'imageHash'
    ];

request_params('GetReturns') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'orderIds',
        'statuses',
        'type',
        'fromDate',
        'toDate',
        'from_date',
        'to_date'
    ];

request_params('GetShipment') ->
    [
        'campaignId',
        'shipmentId',
        'cancelledOrders'
    ];

request_params('GetShipmentOrdersInfo') ->
    [
        'campaignId',
        'shipmentId'
    ];

request_params('GetStocks') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetWarehouseStocksRequest'
    ];

request_params('GetSuggestedOfferMappingEntries') ->
    [
        'campaignId',
        'GetSuggestedOfferMappingEntriesRequest'
    ];

request_params('GetSuggestedOfferMappings') ->
    [
        'businessId',
        'GetSuggestedOfferMappingsRequest'
    ];

request_params('GetSuggestedPrices') ->
    [
        'campaignId',
        'SuggestPricesRequest'
    ];

request_params('GetWarehouses') ->
    [
        'businessId'
    ];

request_params('ProvideOrderItemIdentifiers') ->
    [
        'campaignId',
        'orderId',
        'ProvideOrderItemIdentifiersRequest'
    ];

request_params('PutBidsForBusiness') ->
    [
        'businessId',
        'PutSkuBidsRequest'
    ];

request_params('PutBidsForCampaign') ->
    [
        'campaignId',
        'PutSkuBidsRequest'
    ];

request_params('RefreshFeed') ->
    [
        'campaignId',
        'feedId'
    ];

request_params('SearchRegionChildren') ->
    [
        'regionId',
        'page',
        'pageSize'
    ];

request_params('SearchRegionsById') ->
    [
        'regionId'
    ];

request_params('SearchRegionsByName') ->
    [
        'name',
        'page_token',
        'limit'
    ];

request_params('SearchShipments') ->
    [
        'campaignId',
        'SearchShipmentsRequest',
        'page_token',
        'limit'
    ];

request_params('SendFileToChat') ->
    [
        'businessId',
        'chatId',
        'file'
    ];

request_params('SendMessageToChat') ->
    [
        'businessId',
        'chatId',
        'SendMessageToChatRequest'
    ];

request_params('SetFeedParams') ->
    [
        'campaignId',
        'feedId',
        'SetFeedParamsRequest'
    ];

request_params('SetOrderBoxLayout') ->
    [
        'campaignId',
        'orderId',
        'SetOrderBoxLayoutRequest'
    ];

request_params('SetOrderShipmentBoxes') ->
    [
        'campaignId',
        'orderId',
        'shipmentId',
        'SetOrderShipmentBoxesRequest'
    ];

request_params('SetShipmentPalletsCount') ->
    [
        'campaignId',
        'shipmentId',
        'SetShipmentPalletsCountRequest'
    ];

request_params('SkipGoodsFeedbacksReaction') ->
    [
        'businessId',
        'SkipGoodsFeedbackReactionRequest'
    ];

request_params('TransferOrdersFromShipment') ->
    [
        'campaignId',
        'shipmentId',
        'TransferOrdersFromShipmentRequest'
    ];

request_params('UpdateBusinessPrices') ->
    [
        'businessId',
        'UpdateBusinessPricesRequest'
    ];

request_params('UpdateCampaignOffers') ->
    [
        'campaignId',
        'UpdateCampaignOffersRequest'
    ];

request_params('UpdateGoodsFeedbackComment') ->
    [
        'businessId',
        'UpdateGoodsFeedbackCommentRequest'
    ];

request_params('UpdateOfferContent') ->
    [
        'businessId',
        'UpdateOfferContentRequest'
    ];

request_params('UpdateOfferMappingEntries') ->
    [
        'campaignId',
        'UpdateOfferMappingEntryRequest'
    ];

request_params('UpdateOfferMappings') ->
    [
        'businessId',
        'UpdateOfferMappingsRequest'
    ];

request_params('UpdateOrderItems') ->
    [
        'campaignId',
        'orderId',
        'UpdateOrderItemRequest'
    ];

request_params('UpdateOrderStatus') ->
    [
        'campaignId',
        'orderId',
        'UpdateOrderStatusRequest'
    ];

request_params('UpdateOrderStatuses') ->
    [
        'campaignId',
        'UpdateOrderStatusesRequest'
    ];

request_params('UpdatePrices') ->
    [
        'campaignId',
        'UpdatePricesRequest'
    ];

request_params('UpdatePromoOffers') ->
    [
        'businessId',
        'UpdatePromoOffersRequest'
    ];

request_params('UpdateStocks') ->
    [
        'campaignId',
        'UpdateStocksRequest'
    ];


request_params('AddHiddenOffers') ->
    [
        'campaignId',
        'AddHiddenOffersRequest'
    ];

request_params('AddOffersToArchive') ->
    [
        'businessId',
        'AddOffersToArchiveRequest'
    ];

request_params('CalculateTariffs') ->
    [
        'CalculateTariffsRequest'
    ];

request_params('ConfirmBusinessPrices') ->
    [
        'businessId',
        'ConfirmPricesRequest'
    ];

request_params('ConfirmCampaignPrices') ->
    [
        'campaignId',
        'ConfirmPricesRequest'
    ];

request_params('CreateChat') ->
    [
        'businessId',
        'CreateChatRequest'
    ];

request_params('DeleteCampaignOffers') ->
    [
        'campaignId',
        'DeleteCampaignOffersRequest'
    ];

request_params('DeleteGoodsFeedbackComment') ->
    [
        'businessId',
        'DeleteGoodsFeedbackCommentRequest'
    ];

request_params('DeleteHiddenOffers') ->
    [
        'campaignId',
        'DeleteHiddenOffersRequest'
    ];

request_params('DeleteOffers') ->
    [
        'businessId',
        'DeleteOffersRequest'
    ];

request_params('DeleteOffersFromArchive') ->
    [
        'businessId',
        'DeleteOffersFromArchiveRequest'
    ];

request_params('DeletePromoOffers') ->
    [
        'businessId',
        'DeletePromoOffersRequest'
    ];

request_params('GenerateBoostConsolidatedReport') ->
    [
        'GenerateBoostConsolidatedRequest',
        'format'
    ];

request_params('GenerateCompetitorsPositionReport') ->
    [
        'GenerateCompetitorsPositionReportRequest',
        'format'
    ];

request_params('GenerateGoodsFeedbackReport') ->
    [
        'GenerateGoodsFeedbackRequest',
        'format'
    ];

request_params('GenerateGoodsMovementReport') ->
    [
        'GenerateGoodsMovementReportRequest',
        'format'
    ];

request_params('GenerateGoodsRealizationReport') ->
    [
        'GenerateGoodsRealizationReportRequest',
        'format'
    ];

request_params('GenerateGoodsTurnoverReport') ->
    [
        'GenerateGoodsTurnoverRequest',
        'format'
    ];

request_params('GeneratePricesReport') ->
    [
        'GeneratePricesReportRequest',
        'format'
    ];

request_params('GenerateShelfsStatisticsReport') ->
    [
        'GenerateShelfsStatisticsRequest',
        'format'
    ];

request_params('GenerateShowsSalesReport') ->
    [
        'GenerateShowsSalesReportRequest',
        'format'
    ];

request_params('GenerateStocksOnWarehousesReport') ->
    [
        'GenerateStocksOnWarehousesReportRequest',
        'format'
    ];

request_params('GenerateUnitedMarketplaceServicesReport') ->
    [
        'GenerateUnitedMarketplaceServicesReportRequest',
        'format'
    ];

request_params('GenerateUnitedNettingReport') ->
    [
        'GenerateUnitedNettingReportRequest',
        'format'
    ];

request_params('GenerateUnitedOrdersReport') ->
    [
        'GenerateUnitedOrdersRequest',
        'format'
    ];

request_params('GetAllOffers') ->
    [
        'campaignId',
        'feedId',
        'chunk'
    ];

request_params('GetBidsInfoForBusiness') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetBidsInfoRequest'
    ];

request_params('GetBidsRecommendations') ->
    [
        'businessId',
        'GetBidsRecommendationsRequest'
    ];

request_params('GetBusinessQuarantineOffers') ->
    [
        'businessId',
        'GetQuarantineOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetBusinessSettings') ->
    [
        'businessId'
    ];

request_params('GetCampaign') ->
    [
        'campaignId'
    ];

request_params('GetCampaignLogins') ->
    [
        'campaignId'
    ];

request_params('GetCampaignOffers') ->
    [
        'campaignId',
        'GetCampaignOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetCampaignQuarantineOffers') ->
    [
        'campaignId',
        'GetQuarantineOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetCampaignRegion') ->
    [
        'campaignId'
    ];

request_params('GetCampaignSettings') ->
    [
        'campaignId'
    ];

request_params('GetCampaigns') ->
    [
        'page',
        'pageSize'
    ];

request_params('GetCampaignsByLogin') ->
    [
        'login',
        'page',
        'pageSize'
    ];

request_params('GetCategoriesMaxSaleQuantum') ->
    [
        'GetCategoriesMaxSaleQuantumRequest'
    ];

request_params('GetCategoriesTree') ->
    [
        'GetCategoriesRequest'
    ];

request_params('GetCategoryContentParameters') ->
    [
        'categoryId'
    ];

request_params('GetChatHistory') ->
    [
        'businessId',
        'chatId',
        'GetChatHistoryRequest',
        'page_token',
        'limit'
    ];

request_params('GetChats') ->
    [
        'businessId',
        'GetChatsRequest',
        'page_token',
        'limit'
    ];

request_params('GetFeed') ->
    [
        'campaignId',
        'feedId'
    ];

request_params('GetFeedIndexLogs') ->
    [
        'campaignId',
        'feedId',
        'limit',
        'published_time_from',
        'published_time_to',
        'status'
    ];

request_params('GetFeedbackAndCommentUpdates') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'from_date'
    ];

request_params('GetFeeds') ->
    [
        'campaignId'
    ];

request_params('GetFulfillmentWarehouses') ->
    [
    ];

request_params('GetGoodsFeedbackComments') ->
    [
        'businessId',
        'GetGoodsFeedbackCommentsRequest',
        'page_token',
        'limit'
    ];

request_params('GetGoodsFeedbacks') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetGoodsFeedbackRequest'
    ];

request_params('GetGoodsStats') ->
    [
        'campaignId',
        'GetGoodsStatsRequest'
    ];

request_params('GetHiddenOffers') ->
    [
        'campaignId',
        'offer_id',
        'page_token',
        'limit',
        'offset',
        'page',
        'pageSize'
    ];

request_params('GetOfferCardsContentStatus') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetOfferCardsContentStatusRequest'
    ];

request_params('GetOfferMappingEntries') ->
    [
        'campaignId',
        'offer_id',
        'shop_sku',
        'mapping_kind',
        'status',
        'availability',
        'category_id',
        'vendor',
        'page_token',
        'limit'
    ];

request_params('GetOfferMappings') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetOfferMappingsRequest'
    ];

request_params('GetOfferRecommendations') ->
    [
        'businessId',
        'GetOfferRecommendationsRequest',
        'page_token',
        'limit'
    ];

request_params('GetOffers') ->
    [
        'campaignId',
        'query',
        'feedId',
        'shopCategoryId',
        'currency',
        'matched',
        'page',
        'pageSize'
    ];

request_params('GetOrder') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderBusinessBuyerInfo') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderBusinessDocumentsInfo') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrders') ->
    [
        'campaignId',
        'orderIds',
        'status',
        'substatus',
        'fromDate',
        'toDate',
        'supplierShipmentDateFrom',
        'supplierShipmentDateTo',
        'updatedAtFrom',
        'updatedAtTo',
        'dispatchType',
        'fake',
        'hasCis',
        'onlyWaitingForCancellationApprove',
        'onlyEstimatedDelivery',
        'buyerType',
        'page',
        'pageSize',
        'page_token',
        'limit'
    ];

request_params('GetOrdersStats') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetOrdersStatsRequest'
    ];

request_params('GetPrices') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'archived'
    ];

request_params('GetPricesByOfferIds') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetPricesByOfferIdsRequest'
    ];

request_params('GetPromoOffers') ->
    [
        'businessId',
        'GetPromoOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetPromos') ->
    [
        'businessId',
        'GetPromosRequest'
    ];

request_params('GetQualityRatings') ->
    [
        'businessId',
        'GetQualityRatingRequest'
    ];

request_params('GetReportInfo') ->
    [
        'reportId'
    ];

request_params('GetReturn') ->
    [
        'campaignId',
        'orderId',
        'returnId'
    ];

request_params('GetReturnPhoto') ->
    [
        'campaignId',
        'orderId',
        'returnId',
        'itemId',
        'imageHash'
    ];

request_params('GetReturns') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'orderIds',
        'statuses',
        'type',
        'fromDate',
        'toDate',
        'from_date',
        'to_date'
    ];

request_params('GetStocks') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetWarehouseStocksRequest'
    ];

request_params('GetSuggestedOfferMappingEntries') ->
    [
        'campaignId',
        'GetSuggestedOfferMappingEntriesRequest'
    ];

request_params('GetSuggestedOfferMappings') ->
    [
        'businessId',
        'GetSuggestedOfferMappingsRequest'
    ];

request_params('GetSuggestedPrices') ->
    [
        'campaignId',
        'SuggestPricesRequest'
    ];

request_params('PutBidsForBusiness') ->
    [
        'businessId',
        'PutSkuBidsRequest'
    ];

request_params('PutBidsForCampaign') ->
    [
        'campaignId',
        'PutSkuBidsRequest'
    ];

request_params('RefreshFeed') ->
    [
        'campaignId',
        'feedId'
    ];

request_params('SearchRegionChildren') ->
    [
        'regionId',
        'page',
        'pageSize'
    ];

request_params('SearchRegionsById') ->
    [
        'regionId'
    ];

request_params('SearchRegionsByName') ->
    [
        'name',
        'page_token',
        'limit'
    ];

request_params('SendFileToChat') ->
    [
        'businessId',
        'chatId',
        'file'
    ];

request_params('SendMessageToChat') ->
    [
        'businessId',
        'chatId',
        'SendMessageToChatRequest'
    ];

request_params('SetFeedParams') ->
    [
        'campaignId',
        'feedId',
        'SetFeedParamsRequest'
    ];

request_params('SkipGoodsFeedbacksReaction') ->
    [
        'businessId',
        'SkipGoodsFeedbackReactionRequest'
    ];

request_params('UpdateBusinessPrices') ->
    [
        'businessId',
        'UpdateBusinessPricesRequest'
    ];

request_params('UpdateCampaignOffers') ->
    [
        'campaignId',
        'UpdateCampaignOffersRequest'
    ];

request_params('UpdateGoodsFeedbackComment') ->
    [
        'businessId',
        'UpdateGoodsFeedbackCommentRequest'
    ];

request_params('UpdateOfferContent') ->
    [
        'businessId',
        'UpdateOfferContentRequest'
    ];

request_params('UpdateOfferMappingEntries') ->
    [
        'campaignId',
        'UpdateOfferMappingEntryRequest'
    ];

request_params('UpdateOfferMappings') ->
    [
        'businessId',
        'UpdateOfferMappingsRequest'
    ];

request_params('UpdatePrices') ->
    [
        'campaignId',
        'UpdatePricesRequest'
    ];

request_params('UpdatePromoOffers') ->
    [
        'businessId',
        'UpdatePromoOffersRequest'
    ];


request_params('GetFeedbackAndCommentUpdates') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'from_date'
    ];


request_params('GetFeed') ->
    [
        'campaignId',
        'feedId'
    ];

request_params('GetFeedIndexLogs') ->
    [
        'campaignId',
        'feedId',
        'limit',
        'published_time_from',
        'published_time_to',
        'status'
    ];

request_params('GetFeeds') ->
    [
        'campaignId'
    ];

request_params('RefreshFeed') ->
    [
        'campaignId',
        'feedId'
    ];

request_params('SetFeedParams') ->
    [
        'campaignId',
        'feedId',
        'SetFeedParamsRequest'
    ];


request_params('DeleteGoodsFeedbackComment') ->
    [
        'businessId',
        'DeleteGoodsFeedbackCommentRequest'
    ];

request_params('GetGoodsFeedbackComments') ->
    [
        'businessId',
        'GetGoodsFeedbackCommentsRequest',
        'page_token',
        'limit'
    ];

request_params('GetGoodsFeedbacks') ->
    [
        'businessId',
        'page_token',
        'limit',
        'GetGoodsFeedbackRequest'
    ];

request_params('SkipGoodsFeedbacksReaction') ->
    [
        'businessId',
        'SkipGoodsFeedbackReactionRequest'
    ];

request_params('UpdateGoodsFeedbackComment') ->
    [
        'businessId',
        'UpdateGoodsFeedbackCommentRequest'
    ];


request_params('GetGoodsStats') ->
    [
        'campaignId',
        'GetGoodsStatsRequest'
    ];


request_params('AddHiddenOffers') ->
    [
        'campaignId',
        'AddHiddenOffersRequest'
    ];

request_params('DeleteHiddenOffers') ->
    [
        'campaignId',
        'DeleteHiddenOffersRequest'
    ];

request_params('GetHiddenOffers') ->
    [
        'campaignId',
        'offer_id',
        'page_token',
        'limit',
        'offset',
        'page',
        'pageSize'
    ];


request_params('GetModel') ->
    [
        'modelId',
        'regionId',
        'currency'
    ];

request_params('GetModelOffers') ->
    [
        'modelId',
        'regionId',
        'currency',
        'orderByPrice',
        'count',
        'page'
    ];

request_params('GetModels') ->
    [
        'regionId',
        'GetModelsRequest',
        'currency'
    ];

request_params('GetModelsOffers') ->
    [
        'regionId',
        'GetModelsRequest',
        'currency',
        'orderByPrice'
    ];

request_params('SearchModels') ->
    [
        'query',
        'regionId',
        'currency',
        'page',
        'pageSize'
    ];


request_params('GetOfferMappingEntries') ->
    [
        'campaignId',
        'offer_id',
        'shop_sku',
        'mapping_kind',
        'status',
        'availability',
        'category_id',
        'vendor',
        'page_token',
        'limit'
    ];

request_params('GetSuggestedOfferMappingEntries') ->
    [
        'campaignId',
        'GetSuggestedOfferMappingEntriesRequest'
    ];

request_params('UpdateOfferMappingEntries') ->
    [
        'campaignId',
        'UpdateOfferMappingEntryRequest'
    ];


request_params('DeleteCampaignOffers') ->
    [
        'campaignId',
        'DeleteCampaignOffersRequest'
    ];

request_params('GetAllOffers') ->
    [
        'campaignId',
        'feedId',
        'chunk'
    ];

request_params('GetCampaignOffers') ->
    [
        'campaignId',
        'GetCampaignOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetOfferRecommendations') ->
    [
        'businessId',
        'GetOfferRecommendationsRequest',
        'page_token',
        'limit'
    ];

request_params('GetOffers') ->
    [
        'campaignId',
        'query',
        'feedId',
        'shopCategoryId',
        'currency',
        'matched',
        'page',
        'pageSize'
    ];

request_params('UpdateCampaignOffers') ->
    [
        'campaignId',
        'UpdateCampaignOffersRequest'
    ];


request_params('GetOrderBusinessBuyerInfo') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrderBusinessDocumentsInfo') ->
    [
        'campaignId',
        'orderId'
    ];


request_params('GetOrderBuyerInfo') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('SetOrderDeliveryDate') ->
    [
        'campaignId',
        'orderId',
        'SetOrderDeliveryDateRequest'
    ];

request_params('SetOrderDeliveryTrackCode') ->
    [
        'campaignId',
        'orderId',
        'SetOrderDeliveryTrackCodeRequest'
    ];

request_params('UpdateOrderStorageLimit') ->
    [
        'campaignId',
        'orderId',
        'UpdateOrderStorageLimitRequest'
    ];

request_params('VerifyOrderEac') ->
    [
        'campaignId',
        'orderId',
        'VerifyOrderEacRequest'
    ];


request_params('GenerateOrderLabel') ->
    [
        'campaignId',
        'orderId',
        'shipmentId',
        'boxId',
        'format'
    ];

request_params('GenerateOrderLabels') ->
    [
        'campaignId',
        'orderId',
        'format'
    ];

request_params('GetOrderLabelsData') ->
    [
        'campaignId',
        'orderId'
    ];


request_params('AcceptOrderCancellation') ->
    [
        'campaignId',
        'orderId',
        'AcceptOrderCancellationRequest'
    ];

request_params('GetOrder') ->
    [
        'campaignId',
        'orderId'
    ];

request_params('GetOrders') ->
    [
        'campaignId',
        'orderIds',
        'status',
        'substatus',
        'fromDate',
        'toDate',
        'supplierShipmentDateFrom',
        'supplierShipmentDateTo',
        'updatedAtFrom',
        'updatedAtTo',
        'dispatchType',
        'fake',
        'hasCis',
        'onlyWaitingForCancellationApprove',
        'onlyEstimatedDelivery',
        'buyerType',
        'page',
        'pageSize',
        'page_token',
        'limit'
    ];

request_params('ProvideOrderDigitalCodes') ->
    [
        'campaignId',
        'orderId',
        'ProvideOrderDigitalCodesRequest'
    ];

request_params('ProvideOrderItemIdentifiers') ->
    [
        'campaignId',
        'orderId',
        'ProvideOrderItemIdentifiersRequest'
    ];

request_params('SetOrderBoxLayout') ->
    [
        'campaignId',
        'orderId',
        'SetOrderBoxLayoutRequest'
    ];

request_params('SetOrderShipmentBoxes') ->
    [
        'campaignId',
        'orderId',
        'shipmentId',
        'SetOrderShipmentBoxesRequest'
    ];

request_params('UpdateOrderItems') ->
    [
        'campaignId',
        'orderId',
        'UpdateOrderItemRequest'
    ];

request_params('UpdateOrderStatus') ->
    [
        'campaignId',
        'orderId',
        'UpdateOrderStatusRequest'
    ];

request_params('UpdateOrderStatuses') ->
    [
        'campaignId',
        'UpdateOrderStatusesRequest'
    ];


request_params('GetOrdersStats') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetOrdersStatsRequest'
    ];


request_params('DeleteOutletLicenses') ->
    [
        'campaignId',
        'ids'
    ];

request_params('GetOutletLicenses') ->
    [
        'campaignId',
        'outletIds',
        'ids'
    ];

request_params('UpdateOutletLicenses') ->
    [
        'campaignId',
        'UpdateOutletLicenseRequest'
    ];


request_params('CreateOutlet') ->
    [
        'campaignId',
        'ChangeOutletRequest'
    ];

request_params('DeleteOutlet') ->
    [
        'campaignId',
        'outletId'
    ];

request_params('GetOutlet') ->
    [
        'campaignId',
        'outletId'
    ];

request_params('GetOutlets') ->
    [
        'campaignId',
        'page_token',
        'region_id',
        'shop_outlet_code',
        'regionId'
    ];

request_params('UpdateOutlet') ->
    [
        'campaignId',
        'outletId',
        'ChangeOutletRequest'
    ];


request_params('ConfirmBusinessPrices') ->
    [
        'businessId',
        'ConfirmPricesRequest'
    ];

request_params('ConfirmCampaignPrices') ->
    [
        'campaignId',
        'ConfirmPricesRequest'
    ];

request_params('GetBusinessQuarantineOffers') ->
    [
        'businessId',
        'GetQuarantineOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetCampaignQuarantineOffers') ->
    [
        'campaignId',
        'GetQuarantineOffersRequest',
        'page_token',
        'limit'
    ];


request_params('GetPrices') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'archived'
    ];

request_params('GetPricesByOfferIds') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetPricesByOfferIdsRequest'
    ];

request_params('GetSuggestedPrices') ->
    [
        'campaignId',
        'SuggestPricesRequest'
    ];

request_params('UpdateBusinessPrices') ->
    [
        'businessId',
        'UpdateBusinessPricesRequest'
    ];

request_params('UpdatePrices') ->
    [
        'campaignId',
        'UpdatePricesRequest'
    ];


request_params('DeletePromoOffers') ->
    [
        'businessId',
        'DeletePromoOffersRequest'
    ];

request_params('GetPromoOffers') ->
    [
        'businessId',
        'GetPromoOffersRequest',
        'page_token',
        'limit'
    ];

request_params('GetPromos') ->
    [
        'businessId',
        'GetPromosRequest'
    ];

request_params('UpdatePromoOffers') ->
    [
        'businessId',
        'UpdatePromoOffersRequest'
    ];


request_params('GetQualityRatingDetails') ->
    [
        'campaignId'
    ];

request_params('GetQualityRatings') ->
    [
        'businessId',
        'GetQualityRatingRequest'
    ];


request_params('SearchRegionChildren') ->
    [
        'regionId',
        'page',
        'pageSize'
    ];

request_params('SearchRegionsById') ->
    [
        'regionId'
    ];

request_params('SearchRegionsByName') ->
    [
        'name',
        'page_token',
        'limit'
    ];


request_params('GenerateBoostConsolidatedReport') ->
    [
        'GenerateBoostConsolidatedRequest',
        'format'
    ];

request_params('GenerateCompetitorsPositionReport') ->
    [
        'GenerateCompetitorsPositionReportRequest',
        'format'
    ];

request_params('GenerateGoodsFeedbackReport') ->
    [
        'GenerateGoodsFeedbackRequest',
        'format'
    ];

request_params('GenerateGoodsMovementReport') ->
    [
        'GenerateGoodsMovementReportRequest',
        'format'
    ];

request_params('GenerateGoodsRealizationReport') ->
    [
        'GenerateGoodsRealizationReportRequest',
        'format'
    ];

request_params('GenerateGoodsTurnoverReport') ->
    [
        'GenerateGoodsTurnoverRequest',
        'format'
    ];

request_params('GenerateMassOrderLabelsReport') ->
    [
        'GenerateMassOrderLabelsRequest',
        'format'
    ];

request_params('GeneratePricesReport') ->
    [
        'GeneratePricesReportRequest',
        'format'
    ];

request_params('GenerateShelfsStatisticsReport') ->
    [
        'GenerateShelfsStatisticsRequest',
        'format'
    ];

request_params('GenerateShipmentListDocumentReport') ->
    [
        'GenerateShipmentListDocumentReportRequest'
    ];

request_params('GenerateShowsSalesReport') ->
    [
        'GenerateShowsSalesReportRequest',
        'format'
    ];

request_params('GenerateStocksOnWarehousesReport') ->
    [
        'GenerateStocksOnWarehousesReportRequest',
        'format'
    ];

request_params('GenerateUnitedMarketplaceServicesReport') ->
    [
        'GenerateUnitedMarketplaceServicesReportRequest',
        'format'
    ];

request_params('GenerateUnitedNettingReport') ->
    [
        'GenerateUnitedNettingReportRequest',
        'format'
    ];

request_params('GenerateUnitedOrdersReport') ->
    [
        'GenerateUnitedOrdersRequest',
        'format'
    ];

request_params('GetReportInfo') ->
    [
        'reportId'
    ];


request_params('GetReturn') ->
    [
        'campaignId',
        'orderId',
        'returnId'
    ];

request_params('GetReturnApplication') ->
    [
        'campaignId',
        'orderId',
        'returnId'
    ];

request_params('GetReturnPhoto') ->
    [
        'campaignId',
        'orderId',
        'returnId',
        'itemId',
        'imageHash'
    ];

request_params('GetReturns') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'orderIds',
        'statuses',
        'type',
        'fromDate',
        'toDate',
        'from_date',
        'to_date'
    ];

request_params('SetReturnDecision') ->
    [
        'campaignId',
        'orderId',
        'returnId',
        'SetReturnDecisionRequest'
    ];

request_params('SubmitReturnDecision') ->
    [
        'campaignId',
        'orderId',
        'returnId'
    ];


request_params('ConfirmShipment') ->
    [
        'campaignId',
        'shipmentId',
        'ConfirmShipmentRequest'
    ];

request_params('DownloadShipmentAct') ->
    [
        'campaignId',
        'shipmentId'
    ];

request_params('DownloadShipmentDiscrepancyAct') ->
    [
        'campaignId',
        'shipmentId'
    ];

request_params('DownloadShipmentInboundAct') ->
    [
        'campaignId',
        'shipmentId'
    ];

request_params('DownloadShipmentPalletLabels') ->
    [
        'campaignId',
        'shipmentId',
        'format'
    ];

request_params('DownloadShipmentReceptionTransferAct') ->
    [
        'campaignId',
        'warehouse_id'
    ];

request_params('DownloadShipmentTransportationWaybill') ->
    [
        'campaignId',
        'shipmentId'
    ];

request_params('GetShipment') ->
    [
        'campaignId',
        'shipmentId',
        'cancelledOrders'
    ];

request_params('GetShipmentOrdersInfo') ->
    [
        'campaignId',
        'shipmentId'
    ];

request_params('SearchShipments') ->
    [
        'campaignId',
        'SearchShipmentsRequest',
        'page_token',
        'limit'
    ];

request_params('SetShipmentPalletsCount') ->
    [
        'campaignId',
        'shipmentId',
        'SetShipmentPalletsCountRequest'
    ];

request_params('TransferOrdersFromShipment') ->
    [
        'campaignId',
        'shipmentId',
        'TransferOrdersFromShipmentRequest'
    ];


request_params('GetStocks') ->
    [
        'campaignId',
        'page_token',
        'limit',
        'GetWarehouseStocksRequest'
    ];

request_params('UpdateStocks') ->
    [
        'campaignId',
        'UpdateStocksRequest'
    ];


request_params('CalculateTariffs') ->
    [
        'CalculateTariffsRequest'
    ];


request_params('GetFulfillmentWarehouses') ->
    [
    ];

request_params('GetWarehouses') ->
    [
        'businessId'
    ];

request_params(_) ->
    error(unknown_operation).

-type rule() ::
    {type, 'binary'} |
    {type, 'integer'} |
    {type, 'float'} |
    {type, 'binary'} |
    {type, 'boolean'} |
    {type, 'date'} |
    {type, 'datetime'} |
    {enum, [atom()]} |
    {max, Max :: number()} |
    {exclusive_max, Max :: number()} |
    {min, Min :: number()} |
    {exclusive_min, Min :: number()} |
    {max_length, MaxLength :: integer()} |
    {min_length, MaxLength :: integer()} |
    {pattern, Pattern :: string()} |
    schema |
    required |
    not_required.

-spec request_param_info(OperationID :: operation_id(), Name :: request_param()) -> #{
    source => qs_val | binding | header | body,
    rules => [rule()]
}.



request_param_info('GetBidsInfoForBusiness', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'GetBidsInfoRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetBidsRecommendations', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBidsRecommendations', 'GetBidsRecommendationsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('PutBidsForBusiness', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('PutBidsForBusiness', 'PutSkuBidsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('PutBidsForCampaign', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('PutBidsForCampaign', 'PutSkuBidsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('AddOffersToArchive', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AddOffersToArchive', 'AddOffersToArchiveRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOffers', 'DeleteOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOffersFromArchive', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOffersFromArchive', 'DeleteOffersFromArchiveRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferMappings', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'GetOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetSuggestedOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedOfferMappings', 'GetSuggestedOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('UpdateOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferMappings', 'UpdateOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('GetBusinessSettings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };


request_param_info('GetCampaign', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignLogins', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignRegion', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignSettings', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaigns', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetCampaigns', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignsByLogin', 'login') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetCampaignsByLogin', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetCampaignsByLogin', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };


request_param_info('GetCategoriesMaxSaleQuantum', 'GetCategoriesMaxSaleQuantumRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCategoriesTree', 'GetCategoriesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };


request_param_info('CreateChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('CreateChat', 'CreateChatRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetChatHistory', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'GetChatHistoryRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetChatHistory', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetChatHistory', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetChats', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChats', 'GetChatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetChats', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetChats', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SendFileToChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendFileToChat', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendFileToChat', 'file') ->
    #{
        source =>   body,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'SendMessageToChatRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('GetCategoryContentParameters', 'categoryId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'GetOfferCardsContentStatusRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('UpdateOfferContent', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferContent', 'UpdateOfferContentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('AcceptOrderCancellation', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AcceptOrderCancellation', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AcceptOrderCancellation', 'AcceptOrderCancellationRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('AddHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AddHiddenOffers', 'AddHiddenOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('AddOffersToArchive', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AddOffersToArchive', 'AddOffersToArchiveRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('CalculateTariffs', 'CalculateTariffsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ConfirmBusinessPrices', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmBusinessPrices', 'ConfirmPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ConfirmCampaignPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmCampaignPrices', 'ConfirmPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('CreateChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('CreateChat', 'CreateChatRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('CreateOutlet', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('CreateOutlet', 'ChangeOutletRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteCampaignOffers', 'DeleteCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteGoodsFeedbackComment', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteGoodsFeedbackComment', 'DeleteGoodsFeedbackCommentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteHiddenOffers', 'DeleteHiddenOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOffers', 'DeleteOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOffersFromArchive', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOffersFromArchive', 'DeleteOffersFromArchiveRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOutlet', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOutlet', 'outletId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOutletLicenses', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOutletLicenses', 'ids') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('DeletePromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeletePromoOffers', 'DeletePromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateBoostConsolidatedReport', 'GenerateBoostConsolidatedRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateBoostConsolidatedReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateCompetitorsPositionReport', 'GenerateCompetitorsPositionReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateCompetitorsPositionReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsFeedbackReport', 'GenerateGoodsFeedbackRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsFeedbackReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateMassOrderLabelsReport', 'GenerateMassOrderLabelsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateMassOrderLabelsReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateOrderLabel', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'boxId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateOrderLabels', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabels', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabels', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GeneratePricesReport', 'GeneratePricesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GeneratePricesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateShelfsStatisticsReport', 'GenerateShelfsStatisticsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShelfsStatisticsReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateShowsSalesReport', 'GenerateShowsSalesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShowsSalesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateStocksOnWarehousesReport', 'GenerateStocksOnWarehousesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateStocksOnWarehousesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedMarketplaceServicesReport', 'GenerateUnitedMarketplaceServicesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedMarketplaceServicesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedNettingReport', 'GenerateUnitedNettingReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedNettingReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedOrdersReport', 'GenerateUnitedOrdersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedOrdersReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetAllOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetAllOffers', 'feedId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetAllOffers', 'chunk') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'GetBidsInfoRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetBidsRecommendations', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBidsRecommendations', 'GetBidsRecommendationsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'GetQuarantineOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBusinessSettings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaign', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignLogins', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignOffers', 'GetCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCampaignOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetCampaignOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'GetQuarantineOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignRegion', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignSettings', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaigns', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetCampaigns', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignsByLogin', 'login') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetCampaignsByLogin', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetCampaignsByLogin', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCategoriesMaxSaleQuantum', 'GetCategoriesMaxSaleQuantumRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCategoriesTree', 'GetCategoriesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetCategoryContentParameters', 'categoryId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'GetChatHistoryRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetChatHistory', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetChatHistory', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetChats', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChats', 'GetChatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetChats', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetChats', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeed', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeed', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'published_time_from') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'published_time_to') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'from_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetFeeds', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'GetGoodsFeedbackCommentsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'GetGoodsFeedbackRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetGoodsStats', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsStats', 'GetGoodsStatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetHiddenOffers', 'offer_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'offset') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetModel', 'modelId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            {min, 0 },
            {exclusive_min, true },
            required
        ]
    };

request_param_info('GetModel', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetModel', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetModelOffers', 'modelId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            {min, 0 },
            {exclusive_min, true },
            required
        ]
    };

request_param_info('GetModelOffers', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetModelOffers', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetModelOffers', 'orderByPrice') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetModelOffers', 'count') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetModelOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetModels', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetModels', 'GetModelsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetModels', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetModelsOffers', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetModelsOffers', 'GetModelsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetModelsOffers', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetModelsOffers', 'orderByPrice') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'GetOfferCardsContentStatusRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferMappingEntries', 'offer_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'shop_sku') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'mapping_kind') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'availability') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'category_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'vendor') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferMappings', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'GetOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetOfferRecommendations', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferRecommendations', 'GetOfferRecommendationsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetOfferRecommendations', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferRecommendations', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOffers', 'query') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOffers', 'feedId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOffers', 'shopCategoryId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOffers', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOffers', 'matched') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetOffers', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrder', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrder', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessBuyerInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessBuyerInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessDocumentsInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessDocumentsInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBuyerInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBuyerInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderLabelsData', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderLabelsData', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrders', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrders', 'orderIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'substatus') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'fromDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'toDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'supplierShipmentDateFrom') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'supplierShipmentDateTo') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'updatedAtFrom') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetOrders', 'updatedAtTo') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetOrders', 'dispatchType') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'fake') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'hasCis') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'onlyWaitingForCancellationApprove') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'onlyEstimatedDelivery') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'buyerType') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetOrders', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrders', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOrders', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrdersStats', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'GetOrdersStatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetOutlet', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOutlet', 'outletId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOutletLicenses', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOutletLicenses', 'outletIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOutletLicenses', 'ids') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOutlets', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOutlets', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOutlets', 'region_id') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOutlets', 'shop_outlet_code') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOutlets', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPrices', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPrices', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPrices', 'archived') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPricesByOfferIds', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'GetPricesByOfferIdsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetPromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPromoOffers', 'GetPromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetPromoOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPromoOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPromos', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPromos', 'GetPromosRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetQualityRatingDetails', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetQualityRatings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetQualityRatings', 'GetQualityRatingRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetReportInfo', 'reportId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetReturn', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturn', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturn', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'itemId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'imageHash') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetReturns', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturns', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetReturns', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetReturns', 'orderIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'statuses') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'type') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'fromDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'toDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'from_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'to_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetStocks', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetStocks', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetStocks', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetStocks', 'GetWarehouseStocksRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetSuggestedOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedOfferMappingEntries', 'GetSuggestedOfferMappingEntriesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetSuggestedOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedOfferMappings', 'GetSuggestedOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetSuggestedPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedPrices', 'SuggestPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetWarehouses', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderDigitalCodes', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderDigitalCodes', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderDigitalCodes', 'ProvideOrderDigitalCodesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'ProvideOrderItemIdentifiersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('PutBidsForBusiness', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('PutBidsForBusiness', 'PutSkuBidsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('PutBidsForCampaign', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('PutBidsForCampaign', 'PutSkuBidsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('RefreshFeed', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('RefreshFeed', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchModels', 'query') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SearchModels', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchModels', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('SearchModels', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('SearchModels', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SearchRegionChildren', 'regionId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionChildren', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('SearchRegionChildren', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SearchRegionsById', 'regionId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionsByName', 'name') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SearchRegionsByName', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('SearchRegionsByName', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SendFileToChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendFileToChat', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendFileToChat', 'file') ->
    #{
        source =>   body,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'SendMessageToChatRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetFeedParams', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetFeedParams', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetFeedParams', 'SetFeedParamsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'SetOrderBoxLayoutRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetOrderDeliveryDate', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderDeliveryDate', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderDeliveryDate', 'SetOrderDeliveryDateRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetOrderDeliveryTrackCode', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderDeliveryTrackCode', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderDeliveryTrackCode', 'SetOrderDeliveryTrackCodeRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'SetOrderShipmentBoxesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetReturnDecision', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetReturnDecision', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetReturnDecision', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetReturnDecision', 'SetReturnDecisionRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SkipGoodsFeedbacksReaction', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SkipGoodsFeedbacksReaction', 'SkipGoodsFeedbackReactionRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SubmitReturnDecision', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SubmitReturnDecision', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SubmitReturnDecision', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateBusinessPrices', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateBusinessPrices', 'UpdateBusinessPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateCampaignOffers', 'UpdateCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateGoodsFeedbackComment', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateGoodsFeedbackComment', 'UpdateGoodsFeedbackCommentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferContent', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferContent', 'UpdateOfferContentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferMappingEntries', 'UpdateOfferMappingEntryRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferMappings', 'UpdateOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderItems', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderItems', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderItems', 'UpdateOrderItemRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'UpdateOrderStatusRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderStatuses', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatuses', 'UpdateOrderStatusesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderStorageLimit', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStorageLimit', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStorageLimit', 'UpdateOrderStorageLimitRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOutlet', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOutlet', 'outletId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOutlet', 'ChangeOutletRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOutletLicenses', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOutletLicenses', 'UpdateOutletLicenseRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdatePrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdatePrices', 'UpdatePricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdatePromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdatePromoOffers', 'UpdatePromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateStocks', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateStocks', 'UpdateStocksRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };



request_param_info('AddHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AddHiddenOffers', 'AddHiddenOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('AddOffersToArchive', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AddOffersToArchive', 'AddOffersToArchiveRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('CalculateTariffs', 'CalculateTariffsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ConfirmBusinessPrices', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmBusinessPrices', 'ConfirmPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ConfirmCampaignPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmCampaignPrices', 'ConfirmPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('CreateChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('CreateChat', 'CreateChatRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteCampaignOffers', 'DeleteCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteGoodsFeedbackComment', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteGoodsFeedbackComment', 'DeleteGoodsFeedbackCommentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteHiddenOffers', 'DeleteHiddenOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOffers', 'DeleteOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOffersFromArchive', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOffersFromArchive', 'DeleteOffersFromArchiveRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeletePromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeletePromoOffers', 'DeletePromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateBoostConsolidatedReport', 'GenerateBoostConsolidatedRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateBoostConsolidatedReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateCompetitorsPositionReport', 'GenerateCompetitorsPositionReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateCompetitorsPositionReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsFeedbackReport', 'GenerateGoodsFeedbackRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsFeedbackReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsRealizationReport', 'GenerateGoodsRealizationReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsRealizationReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateMassOrderLabelsReport', 'GenerateMassOrderLabelsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateMassOrderLabelsReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateOrderLabel', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'boxId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateOrderLabels', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabels', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabels', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GeneratePricesReport', 'GeneratePricesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GeneratePricesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateShelfsStatisticsReport', 'GenerateShelfsStatisticsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShelfsStatisticsReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateShowsSalesReport', 'GenerateShowsSalesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShowsSalesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateStocksOnWarehousesReport', 'GenerateStocksOnWarehousesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateStocksOnWarehousesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedMarketplaceServicesReport', 'GenerateUnitedMarketplaceServicesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedMarketplaceServicesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedNettingReport', 'GenerateUnitedNettingReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedNettingReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedOrdersReport', 'GenerateUnitedOrdersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedOrdersReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetAllOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetAllOffers', 'feedId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetAllOffers', 'chunk') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'GetBidsInfoRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetBidsRecommendations', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBidsRecommendations', 'GetBidsRecommendationsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'GetQuarantineOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBusinessSettings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaign', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignLogins', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignOffers', 'GetCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCampaignOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetCampaignOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'GetQuarantineOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignRegion', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignSettings', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaigns', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetCampaigns', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignsByLogin', 'login') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetCampaignsByLogin', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetCampaignsByLogin', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCategoriesMaxSaleQuantum', 'GetCategoriesMaxSaleQuantumRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCategoriesTree', 'GetCategoriesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetCategoryContentParameters', 'categoryId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'GetChatHistoryRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetChatHistory', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetChatHistory', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetChats', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChats', 'GetChatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetChats', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetChats', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeed', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeed', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'published_time_from') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'published_time_to') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'from_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetFeeds', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'GetGoodsFeedbackCommentsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'GetGoodsFeedbackRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetGoodsStats', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsStats', 'GetGoodsStatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetHiddenOffers', 'offer_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'offset') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'GetOfferCardsContentStatusRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferMappingEntries', 'offer_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'shop_sku') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'mapping_kind') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'availability') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'category_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'vendor') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferMappings', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'GetOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetOfferRecommendations', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferRecommendations', 'GetOfferRecommendationsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetOfferRecommendations', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferRecommendations', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOffers', 'query') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOffers', 'feedId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOffers', 'shopCategoryId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOffers', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOffers', 'matched') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetOffers', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrder', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrder', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessBuyerInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessBuyerInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessDocumentsInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessDocumentsInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderLabelsData', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderLabelsData', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrders', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrders', 'orderIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'substatus') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'fromDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'toDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'supplierShipmentDateFrom') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'supplierShipmentDateTo') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'updatedAtFrom') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetOrders', 'updatedAtTo') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetOrders', 'dispatchType') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'fake') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'hasCis') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'onlyWaitingForCancellationApprove') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'onlyEstimatedDelivery') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'buyerType') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetOrders', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrders', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOrders', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrdersStats', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'GetOrdersStatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPrices', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPrices', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPrices', 'archived') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPricesByOfferIds', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'GetPricesByOfferIdsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetPromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPromoOffers', 'GetPromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetPromoOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPromoOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPromos', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPromos', 'GetPromosRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetQualityRatingDetails', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetQualityRatings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetQualityRatings', 'GetQualityRatingRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetReportInfo', 'reportId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetReturn', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturn', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturn', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'itemId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'imageHash') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetReturns', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturns', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetReturns', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetReturns', 'orderIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'statuses') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'type') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'fromDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'toDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'from_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'to_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetStocks', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetStocks', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetStocks', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetStocks', 'GetWarehouseStocksRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetSuggestedOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedOfferMappingEntries', 'GetSuggestedOfferMappingEntriesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetSuggestedOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedOfferMappings', 'GetSuggestedOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetSuggestedPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedPrices', 'SuggestPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetWarehouses', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'ProvideOrderItemIdentifiersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('PutBidsForBusiness', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('PutBidsForBusiness', 'PutSkuBidsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('PutBidsForCampaign', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('PutBidsForCampaign', 'PutSkuBidsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('RefreshFeed', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('RefreshFeed', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionChildren', 'regionId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionChildren', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('SearchRegionChildren', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SearchRegionsById', 'regionId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionsByName', 'name') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SearchRegionsByName', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('SearchRegionsByName', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SendFileToChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendFileToChat', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendFileToChat', 'file') ->
    #{
        source =>   body,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'SendMessageToChatRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetFeedParams', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetFeedParams', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetFeedParams', 'SetFeedParamsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'SetOrderBoxLayoutRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'SetOrderShipmentBoxesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SkipGoodsFeedbacksReaction', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SkipGoodsFeedbacksReaction', 'SkipGoodsFeedbackReactionRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateBusinessPrices', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateBusinessPrices', 'UpdateBusinessPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateCampaignOffers', 'UpdateCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateGoodsFeedbackComment', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateGoodsFeedbackComment', 'UpdateGoodsFeedbackCommentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferContent', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferContent', 'UpdateOfferContentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferMappingEntries', 'UpdateOfferMappingEntryRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferMappings', 'UpdateOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderItems', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderItems', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderItems', 'UpdateOrderItemRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'UpdateOrderStatusRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderStatuses', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatuses', 'UpdateOrderStatusesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdatePrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdatePrices', 'UpdatePricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdatePromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdatePromoOffers', 'UpdatePromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateStocks', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateStocks', 'UpdateStocksRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('VerifyOrderEac', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('VerifyOrderEac', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('VerifyOrderEac', 'VerifyOrderEacRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('AddHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AddHiddenOffers', 'AddHiddenOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('AddOffersToArchive', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AddOffersToArchive', 'AddOffersToArchiveRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('CalculateTariffs', 'CalculateTariffsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ConfirmBusinessPrices', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmBusinessPrices', 'ConfirmPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ConfirmCampaignPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmCampaignPrices', 'ConfirmPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ConfirmShipment', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmShipment', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmShipment', 'ConfirmShipmentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('CreateChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('CreateChat', 'CreateChatRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteCampaignOffers', 'DeleteCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteGoodsFeedbackComment', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteGoodsFeedbackComment', 'DeleteGoodsFeedbackCommentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteHiddenOffers', 'DeleteHiddenOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOffers', 'DeleteOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOffersFromArchive', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOffersFromArchive', 'DeleteOffersFromArchiveRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeletePromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeletePromoOffers', 'DeletePromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DownloadShipmentAct', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentAct', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentDiscrepancyAct', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentDiscrepancyAct', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentInboundAct', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentInboundAct', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentPalletLabels', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentPalletLabels', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentPalletLabels', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('DownloadShipmentReceptionTransferAct', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentReceptionTransferAct', 'warehouse_id') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('DownloadShipmentTransportationWaybill', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentTransportationWaybill', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateBoostConsolidatedReport', 'GenerateBoostConsolidatedRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateBoostConsolidatedReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateCompetitorsPositionReport', 'GenerateCompetitorsPositionReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateCompetitorsPositionReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsFeedbackReport', 'GenerateGoodsFeedbackRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsFeedbackReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsRealizationReport', 'GenerateGoodsRealizationReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsRealizationReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateMassOrderLabelsReport', 'GenerateMassOrderLabelsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateMassOrderLabelsReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateOrderLabel', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'boxId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateOrderLabels', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabels', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabels', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GeneratePricesReport', 'GeneratePricesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GeneratePricesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateShelfsStatisticsReport', 'GenerateShelfsStatisticsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShelfsStatisticsReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateShipmentListDocumentReport', 'GenerateShipmentListDocumentReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShowsSalesReport', 'GenerateShowsSalesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShowsSalesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateStocksOnWarehousesReport', 'GenerateStocksOnWarehousesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateStocksOnWarehousesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedMarketplaceServicesReport', 'GenerateUnitedMarketplaceServicesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedMarketplaceServicesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedNettingReport', 'GenerateUnitedNettingReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedNettingReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedOrdersReport', 'GenerateUnitedOrdersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedOrdersReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetAllOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetAllOffers', 'feedId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetAllOffers', 'chunk') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'GetBidsInfoRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetBidsRecommendations', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBidsRecommendations', 'GetBidsRecommendationsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'GetQuarantineOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBusinessSettings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaign', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignLogins', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignOffers', 'GetCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCampaignOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetCampaignOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'GetQuarantineOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignRegion', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignSettings', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaigns', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetCampaigns', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignsByLogin', 'login') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetCampaignsByLogin', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetCampaignsByLogin', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCategoriesMaxSaleQuantum', 'GetCategoriesMaxSaleQuantumRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCategoriesTree', 'GetCategoriesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetCategoryContentParameters', 'categoryId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'GetChatHistoryRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetChatHistory', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetChatHistory', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetChats', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChats', 'GetChatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetChats', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetChats', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeed', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeed', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'published_time_from') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'published_time_to') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'from_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetFeeds', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'GetGoodsFeedbackCommentsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'GetGoodsFeedbackRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetGoodsStats', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsStats', 'GetGoodsStatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetHiddenOffers', 'offer_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'offset') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'GetOfferCardsContentStatusRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferMappingEntries', 'offer_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'shop_sku') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'mapping_kind') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'availability') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'category_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'vendor') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferMappings', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'GetOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetOfferRecommendations', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferRecommendations', 'GetOfferRecommendationsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetOfferRecommendations', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferRecommendations', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOffers', 'query') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOffers', 'feedId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOffers', 'shopCategoryId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOffers', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOffers', 'matched') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetOffers', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrder', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrder', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessBuyerInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessBuyerInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessDocumentsInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessDocumentsInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderLabelsData', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderLabelsData', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrders', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrders', 'orderIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'substatus') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'fromDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'toDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'supplierShipmentDateFrom') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'supplierShipmentDateTo') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'updatedAtFrom') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetOrders', 'updatedAtTo') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetOrders', 'dispatchType') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'fake') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'hasCis') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'onlyWaitingForCancellationApprove') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'onlyEstimatedDelivery') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'buyerType') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetOrders', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrders', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOrders', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrdersStats', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'GetOrdersStatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPrices', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPrices', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPrices', 'archived') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPricesByOfferIds', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'GetPricesByOfferIdsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetPromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPromoOffers', 'GetPromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetPromoOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPromoOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPromos', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPromos', 'GetPromosRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetQualityRatingDetails', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetQualityRatings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetQualityRatings', 'GetQualityRatingRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetReportInfo', 'reportId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetReturn', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturn', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturn', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'itemId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'imageHash') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetReturns', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturns', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetReturns', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetReturns', 'orderIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'statuses') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'type') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'fromDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'toDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'from_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'to_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetShipment', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetShipment', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetShipment', 'cancelledOrders') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetShipmentOrdersInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetShipmentOrdersInfo', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetStocks', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetStocks', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetStocks', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetStocks', 'GetWarehouseStocksRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetSuggestedOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedOfferMappingEntries', 'GetSuggestedOfferMappingEntriesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetSuggestedOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedOfferMappings', 'GetSuggestedOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetSuggestedPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedPrices', 'SuggestPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetWarehouses', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'ProvideOrderItemIdentifiersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('PutBidsForBusiness', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('PutBidsForBusiness', 'PutSkuBidsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('PutBidsForCampaign', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('PutBidsForCampaign', 'PutSkuBidsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('RefreshFeed', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('RefreshFeed', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionChildren', 'regionId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionChildren', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('SearchRegionChildren', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SearchRegionsById', 'regionId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionsByName', 'name') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SearchRegionsByName', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('SearchRegionsByName', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SearchShipments', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchShipments', 'SearchShipmentsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SearchShipments', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('SearchShipments', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SendFileToChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendFileToChat', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendFileToChat', 'file') ->
    #{
        source =>   body,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'SendMessageToChatRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetFeedParams', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetFeedParams', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetFeedParams', 'SetFeedParamsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'SetOrderBoxLayoutRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'SetOrderShipmentBoxesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetShipmentPalletsCount', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetShipmentPalletsCount', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetShipmentPalletsCount', 'SetShipmentPalletsCountRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SkipGoodsFeedbacksReaction', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SkipGoodsFeedbacksReaction', 'SkipGoodsFeedbackReactionRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('TransferOrdersFromShipment', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('TransferOrdersFromShipment', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('TransferOrdersFromShipment', 'TransferOrdersFromShipmentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateBusinessPrices', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateBusinessPrices', 'UpdateBusinessPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateCampaignOffers', 'UpdateCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateGoodsFeedbackComment', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateGoodsFeedbackComment', 'UpdateGoodsFeedbackCommentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferContent', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferContent', 'UpdateOfferContentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferMappingEntries', 'UpdateOfferMappingEntryRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferMappings', 'UpdateOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderItems', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderItems', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderItems', 'UpdateOrderItemRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'UpdateOrderStatusRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderStatuses', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatuses', 'UpdateOrderStatusesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdatePrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdatePrices', 'UpdatePricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdatePromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdatePromoOffers', 'UpdatePromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateStocks', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateStocks', 'UpdateStocksRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('AddHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AddHiddenOffers', 'AddHiddenOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('AddOffersToArchive', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AddOffersToArchive', 'AddOffersToArchiveRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('CalculateTariffs', 'CalculateTariffsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ConfirmBusinessPrices', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmBusinessPrices', 'ConfirmPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ConfirmCampaignPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmCampaignPrices', 'ConfirmPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('CreateChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('CreateChat', 'CreateChatRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteCampaignOffers', 'DeleteCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteGoodsFeedbackComment', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteGoodsFeedbackComment', 'DeleteGoodsFeedbackCommentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteHiddenOffers', 'DeleteHiddenOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOffers', 'DeleteOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOffersFromArchive', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOffersFromArchive', 'DeleteOffersFromArchiveRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeletePromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeletePromoOffers', 'DeletePromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateBoostConsolidatedReport', 'GenerateBoostConsolidatedRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateBoostConsolidatedReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateCompetitorsPositionReport', 'GenerateCompetitorsPositionReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateCompetitorsPositionReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsFeedbackReport', 'GenerateGoodsFeedbackRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsFeedbackReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsMovementReport', 'GenerateGoodsMovementReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsMovementReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsRealizationReport', 'GenerateGoodsRealizationReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsRealizationReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsTurnoverReport', 'GenerateGoodsTurnoverRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsTurnoverReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GeneratePricesReport', 'GeneratePricesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GeneratePricesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateShelfsStatisticsReport', 'GenerateShelfsStatisticsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShelfsStatisticsReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateShowsSalesReport', 'GenerateShowsSalesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShowsSalesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateStocksOnWarehousesReport', 'GenerateStocksOnWarehousesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateStocksOnWarehousesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedMarketplaceServicesReport', 'GenerateUnitedMarketplaceServicesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedMarketplaceServicesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedNettingReport', 'GenerateUnitedNettingReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedNettingReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedOrdersReport', 'GenerateUnitedOrdersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedOrdersReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetAllOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetAllOffers', 'feedId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetAllOffers', 'chunk') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBidsInfoForBusiness', 'GetBidsInfoRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetBidsRecommendations', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBidsRecommendations', 'GetBidsRecommendationsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'GetQuarantineOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetBusinessSettings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaign', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignLogins', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignOffers', 'GetCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCampaignOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetCampaignOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'GetQuarantineOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignRegion', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignSettings', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaigns', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetCampaigns', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignsByLogin', 'login') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetCampaignsByLogin', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetCampaignsByLogin', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCategoriesMaxSaleQuantum', 'GetCategoriesMaxSaleQuantumRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCategoriesTree', 'GetCategoriesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetCategoryContentParameters', 'categoryId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChatHistory', 'GetChatHistoryRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetChatHistory', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetChatHistory', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetChats', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetChats', 'GetChatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetChats', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetChats', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeed', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeed', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'published_time_from') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'published_time_to') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'from_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetFeeds', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'GetGoodsFeedbackCommentsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'GetGoodsFeedbackRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetGoodsStats', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsStats', 'GetGoodsStatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetHiddenOffers', 'offer_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'offset') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferCardsContentStatus', 'GetOfferCardsContentStatusRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferMappingEntries', 'offer_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'shop_sku') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'mapping_kind') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'availability') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'category_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'vendor') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferMappings', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferMappings', 'GetOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetOfferRecommendations', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferRecommendations', 'GetOfferRecommendationsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetOfferRecommendations', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferRecommendations', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOffers', 'query') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOffers', 'feedId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOffers', 'shopCategoryId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOffers', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOffers', 'matched') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetOffers', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrder', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrder', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessBuyerInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessBuyerInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessDocumentsInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessDocumentsInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrders', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrders', 'orderIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'substatus') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'fromDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'toDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'supplierShipmentDateFrom') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'supplierShipmentDateTo') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'updatedAtFrom') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetOrders', 'updatedAtTo') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetOrders', 'dispatchType') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'fake') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'hasCis') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'onlyWaitingForCancellationApprove') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'onlyEstimatedDelivery') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'buyerType') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetOrders', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrders', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOrders', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrdersStats', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'GetOrdersStatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPrices', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPrices', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPrices', 'archived') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPricesByOfferIds', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'GetPricesByOfferIdsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetPromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPromoOffers', 'GetPromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetPromoOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPromoOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPromos', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPromos', 'GetPromosRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetQualityRatings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetQualityRatings', 'GetQualityRatingRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetReportInfo', 'reportId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetReturn', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturn', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturn', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'itemId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'imageHash') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetReturns', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturns', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetReturns', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetReturns', 'orderIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'statuses') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'type') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'fromDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'toDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'from_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'to_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetStocks', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetStocks', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetStocks', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetStocks', 'GetWarehouseStocksRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetSuggestedOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedOfferMappingEntries', 'GetSuggestedOfferMappingEntriesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetSuggestedOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedOfferMappings', 'GetSuggestedOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetSuggestedPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedPrices', 'SuggestPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('PutBidsForBusiness', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('PutBidsForBusiness', 'PutSkuBidsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('PutBidsForCampaign', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('PutBidsForCampaign', 'PutSkuBidsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('RefreshFeed', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('RefreshFeed', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionChildren', 'regionId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionChildren', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('SearchRegionChildren', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SearchRegionsById', 'regionId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionsByName', 'name') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SearchRegionsByName', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('SearchRegionsByName', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SendFileToChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendFileToChat', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendFileToChat', 'file') ->
    #{
        source =>   body,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'chatId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SendMessageToChat', 'SendMessageToChatRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetFeedParams', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetFeedParams', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetFeedParams', 'SetFeedParamsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SkipGoodsFeedbacksReaction', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SkipGoodsFeedbacksReaction', 'SkipGoodsFeedbackReactionRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateBusinessPrices', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateBusinessPrices', 'UpdateBusinessPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateCampaignOffers', 'UpdateCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateGoodsFeedbackComment', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateGoodsFeedbackComment', 'UpdateGoodsFeedbackCommentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferContent', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferContent', 'UpdateOfferContentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferMappingEntries', 'UpdateOfferMappingEntryRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferMappings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferMappings', 'UpdateOfferMappingsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdatePrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdatePrices', 'UpdatePricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdatePromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdatePromoOffers', 'UpdatePromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('GetFeedbackAndCommentUpdates', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeedbackAndCommentUpdates', 'from_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };


request_param_info('GetFeed', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeed', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetFeedIndexLogs', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'published_time_from') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'published_time_to') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetFeedIndexLogs', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetFeeds', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('RefreshFeed', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('RefreshFeed', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetFeedParams', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetFeedParams', 'feedId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetFeedParams', 'SetFeedParamsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('DeleteGoodsFeedbackComment', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteGoodsFeedbackComment', 'DeleteGoodsFeedbackCommentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'GetGoodsFeedbackCommentsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbackComments', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetGoodsFeedbacks', 'GetGoodsFeedbackRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('SkipGoodsFeedbacksReaction', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SkipGoodsFeedbacksReaction', 'SkipGoodsFeedbackReactionRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateGoodsFeedbackComment', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateGoodsFeedbackComment', 'UpdateGoodsFeedbackCommentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('GetGoodsStats', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetGoodsStats', 'GetGoodsStatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('AddHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AddHiddenOffers', 'AddHiddenOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteHiddenOffers', 'DeleteHiddenOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetHiddenOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetHiddenOffers', 'offer_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'offset') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetHiddenOffers', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };


request_param_info('GetModel', 'modelId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            {min, 0 },
            {exclusive_min, true },
            required
        ]
    };

request_param_info('GetModel', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetModel', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetModelOffers', 'modelId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            {min, 0 },
            {exclusive_min, true },
            required
        ]
    };

request_param_info('GetModelOffers', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetModelOffers', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetModelOffers', 'orderByPrice') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetModelOffers', 'count') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetModelOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetModels', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetModels', 'GetModelsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetModels', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetModelsOffers', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetModelsOffers', 'GetModelsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetModelsOffers', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetModelsOffers', 'orderByPrice') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('SearchModels', 'query') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SearchModels', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchModels', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('SearchModels', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('SearchModels', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };


request_param_info('GetOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferMappingEntries', 'offer_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'shop_sku') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'mapping_kind') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'availability') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'category_id') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'vendor') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferMappingEntries', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetSuggestedOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedOfferMappingEntries', 'GetSuggestedOfferMappingEntriesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOfferMappingEntries', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOfferMappingEntries', 'UpdateOfferMappingEntryRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('DeleteCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteCampaignOffers', 'DeleteCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetAllOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetAllOffers', 'feedId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetAllOffers', 'chunk') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignOffers', 'GetCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCampaignOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetCampaignOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOfferRecommendations', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOfferRecommendations', 'GetOfferRecommendationsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetOfferRecommendations', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOfferRecommendations', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOffers', 'query') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOffers', 'feedId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOffers', 'shopCategoryId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOffers', 'currency') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOffers', 'matched') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOffers', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetOffers', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('UpdateCampaignOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateCampaignOffers', 'UpdateCampaignOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('GetOrderBusinessBuyerInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessBuyerInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessDocumentsInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBusinessDocumentsInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };


request_param_info('GetOrderBuyerInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderBuyerInfo', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderDeliveryDate', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderDeliveryDate', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderDeliveryDate', 'SetOrderDeliveryDateRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetOrderDeliveryTrackCode', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderDeliveryTrackCode', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderDeliveryTrackCode', 'SetOrderDeliveryTrackCodeRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderStorageLimit', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStorageLimit', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStorageLimit', 'UpdateOrderStorageLimitRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('VerifyOrderEac', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('VerifyOrderEac', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('VerifyOrderEac', 'VerifyOrderEacRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('GenerateOrderLabel', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'boxId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabel', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateOrderLabels', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabels', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GenerateOrderLabels', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrderLabelsData', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrderLabelsData', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };


request_param_info('AcceptOrderCancellation', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AcceptOrderCancellation', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('AcceptOrderCancellation', 'AcceptOrderCancellationRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetOrder', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrder', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrders', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrders', 'orderIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'status') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'substatus') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'fromDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'toDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'supplierShipmentDateFrom') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'supplierShipmentDateTo') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetOrders', 'updatedAtFrom') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetOrders', 'updatedAtTo') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'datetime'},
            not_required
        ]
    };

request_param_info('GetOrders', 'dispatchType') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'fake') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'hasCis') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'onlyWaitingForCancellationApprove') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'onlyEstimatedDelivery') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetOrders', 'buyerType') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOrders', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('GetOrders', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrders', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOrders', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('ProvideOrderDigitalCodes', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderDigitalCodes', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderDigitalCodes', 'ProvideOrderDigitalCodesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ProvideOrderItemIdentifiers', 'ProvideOrderItemIdentifiersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderBoxLayout', 'SetOrderBoxLayoutRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetOrderShipmentBoxes', 'SetOrderShipmentBoxesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderItems', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderItems', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderItems', 'UpdateOrderItemRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatus', 'UpdateOrderStatusRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateOrderStatuses', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOrderStatuses', 'UpdateOrderStatusesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('GetOrdersStats', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOrdersStats', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOrdersStats', 'GetOrdersStatsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };


request_param_info('DeleteOutletLicenses', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOutletLicenses', 'ids') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOutletLicenses', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOutletLicenses', 'outletIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetOutletLicenses', 'ids') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('UpdateOutletLicenses', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOutletLicenses', 'UpdateOutletLicenseRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('CreateOutlet', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('CreateOutlet', 'ChangeOutletRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('DeleteOutlet', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeleteOutlet', 'outletId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOutlet', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOutlet', 'outletId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOutlets', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetOutlets', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOutlets', 'region_id') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetOutlets', 'shop_outlet_code') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetOutlets', 'regionId') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('UpdateOutlet', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOutlet', 'outletId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateOutlet', 'ChangeOutletRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('ConfirmBusinessPrices', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmBusinessPrices', 'ConfirmPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('ConfirmCampaignPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmCampaignPrices', 'ConfirmPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'GetQuarantineOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetBusinessQuarantineOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'GetQuarantineOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetCampaignQuarantineOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };


request_param_info('GetPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPrices', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPrices', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPrices', 'archived') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPricesByOfferIds', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPricesByOfferIds', 'GetPricesByOfferIdsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('GetSuggestedPrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetSuggestedPrices', 'SuggestPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdateBusinessPrices', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateBusinessPrices', 'UpdateBusinessPricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('UpdatePrices', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdatePrices', 'UpdatePricesRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('DeletePromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DeletePromoOffers', 'DeletePromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetPromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPromoOffers', 'GetPromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GetPromoOffers', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetPromoOffers', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetPromos', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetPromos', 'GetPromosRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('UpdatePromoOffers', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdatePromoOffers', 'UpdatePromoOffersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('GetQualityRatingDetails', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetQualityRatings', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetQualityRatings', 'GetQualityRatingRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('SearchRegionChildren', 'regionId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionChildren', 'page') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            {max, 10000 }, 
            not_required
        ]
    };

request_param_info('SearchRegionChildren', 'pageSize') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SearchRegionsById', 'regionId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchRegionsByName', 'name') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('SearchRegionsByName', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('SearchRegionsByName', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };


request_param_info('GenerateBoostConsolidatedReport', 'GenerateBoostConsolidatedRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateBoostConsolidatedReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateCompetitorsPositionReport', 'GenerateCompetitorsPositionReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateCompetitorsPositionReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsFeedbackReport', 'GenerateGoodsFeedbackRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsFeedbackReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsMovementReport', 'GenerateGoodsMovementReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsMovementReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsRealizationReport', 'GenerateGoodsRealizationReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsRealizationReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateGoodsTurnoverReport', 'GenerateGoodsTurnoverRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateGoodsTurnoverReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateMassOrderLabelsReport', 'GenerateMassOrderLabelsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateMassOrderLabelsReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GeneratePricesReport', 'GeneratePricesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GeneratePricesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateShelfsStatisticsReport', 'GenerateShelfsStatisticsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShelfsStatisticsReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateShipmentListDocumentReport', 'GenerateShipmentListDocumentReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShowsSalesReport', 'GenerateShowsSalesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateShowsSalesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateStocksOnWarehousesReport', 'GenerateStocksOnWarehousesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateStocksOnWarehousesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedMarketplaceServicesReport', 'GenerateUnitedMarketplaceServicesReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedMarketplaceServicesReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedNettingReport', 'GenerateUnitedNettingReportRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedNettingReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GenerateUnitedOrdersReport', 'GenerateUnitedOrdersRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('GenerateUnitedOrdersReport', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReportInfo', 'reportId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };


request_param_info('GetReturn', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturn', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturn', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnApplication', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'itemId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturnPhoto', 'imageHash') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'binary'},
            required
        ]
    };

request_param_info('GetReturns', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetReturns', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetReturns', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetReturns', 'orderIds') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'statuses') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'type') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('GetReturns', 'fromDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'toDate') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'from_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('GetReturns', 'to_date') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'date'},
            not_required
        ]
    };

request_param_info('SetReturnDecision', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetReturnDecision', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetReturnDecision', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetReturnDecision', 'SetReturnDecisionRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SubmitReturnDecision', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SubmitReturnDecision', 'orderId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SubmitReturnDecision', 'returnId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };


request_param_info('ConfirmShipment', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmShipment', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('ConfirmShipment', 'ConfirmShipmentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('DownloadShipmentAct', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentAct', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentDiscrepancyAct', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentDiscrepancyAct', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentInboundAct', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentInboundAct', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentPalletLabels', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentPalletLabels', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentPalletLabels', 'format') ->
    #{
        source => qs_val  ,
        rules => [
            not_required
        ]
    };

request_param_info('DownloadShipmentReceptionTransferAct', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentReceptionTransferAct', 'warehouse_id') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('DownloadShipmentTransportationWaybill', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('DownloadShipmentTransportationWaybill', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetShipment', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetShipment', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetShipment', 'cancelledOrders') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'boolean'},
            not_required
        ]
    };

request_param_info('GetShipmentOrdersInfo', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetShipmentOrdersInfo', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchShipments', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SearchShipments', 'SearchShipmentsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('SearchShipments', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('SearchShipments', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('SetShipmentPalletsCount', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetShipmentPalletsCount', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('SetShipmentPalletsCount', 'SetShipmentPalletsCountRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };

request_param_info('TransferOrdersFromShipment', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('TransferOrdersFromShipment', 'shipmentId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('TransferOrdersFromShipment', 'TransferOrdersFromShipmentRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('GetStocks', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('GetStocks', 'page_token') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'binary'},
            not_required
        ]
    };

request_param_info('GetStocks', 'limit') ->
    #{
        source => qs_val  ,
        rules => [
            {type, 'integer'},
            not_required
        ]
    };

request_param_info('GetStocks', 'GetWarehouseStocksRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            not_required
        ]
    };

request_param_info('UpdateStocks', 'campaignId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info('UpdateStocks', 'UpdateStocksRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('CalculateTariffs', 'CalculateTariffsRequest') ->
    #{
        source =>   body,
        rules => [
            schema,
            required
        ]
    };


request_param_info('GetWarehouses', 'businessId') ->
    #{
        source =>  binding ,
        rules => [
            {type, 'integer'},
            required
        ]
    };

request_param_info(OperationID, Name) ->
    error({unknown_param, OperationID, Name}).

-spec populate_request(
    OperationID :: operation_id(),
    Req :: cowboy_req:req(),
    ValidatorState :: jesse_state:state()
) ->
    {ok, Model :: #{}, Req :: cowboy_req:req()} |
    {error, Reason :: any(), Req :: cowboy_req:req()}.

populate_request(OperationID, Req, ValidatorState) ->
    Params = request_params(OperationID),
    populate_request_params(OperationID, Params, Req, ValidatorState, #{}).

populate_request_params(_, [], Req, _, Model) ->
    {ok, Model, Req};

populate_request_params(OperationID, [FieldParams | T], Req0, ValidatorState, Model) ->
    case populate_request_param(OperationID, FieldParams, Req0, ValidatorState) of
        {ok, K, V, Req} ->
            populate_request_params(OperationID, T, Req, ValidatorState, maps:put(K, V, Model));
        Error ->
            Error
    end.

populate_request_param(OperationID, Name, Req0, ValidatorState) ->
    #{rules := Rules, source := Source} = request_param_info(OperationID, Name),
    case get_value(Source, Name, Req0) of
        {error, Reason, Req} ->
            {error, Reason, Req};
        {Value, Req} ->
            case prepare_param(Rules, Name, Value, ValidatorState) of
                {ok, Result} -> {ok, Name, Result, Req};
                {error, Reason} ->
                    {error, Reason, Req}
            end
    end.

-spec validate_response(
    OperationID :: operation_id(),
    Code :: 200..599,
    Body :: jesse:json_term(),
    ValidatorState :: jesse_state:state()
) -> ok | no_return().


validate_response('GetBidsInfoForBusiness', 200, Body, ValidatorState) ->
    validate_response_body('GetBidsInfoResponse', 'GetBidsInfoResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBidsRecommendations', 200, Body, ValidatorState) ->
    validate_response_body('GetBidsRecommendationsResponse', 'GetBidsRecommendationsResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('PutBidsForBusiness', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('PutBidsForCampaign', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('AddOffersToArchive', 200, Body, ValidatorState) ->
    validate_response_body('AddOffersToArchiveResponse', 'AddOffersToArchiveResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeleteOffersResponse', 'DeleteOffersResponse', Body, ValidatorState);
validate_response('DeleteOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOffersFromArchive', 200, Body, ValidatorState) ->
    validate_response_body('DeleteOffersFromArchiveResponse', 'DeleteOffersFromArchiveResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferMappingsResponse', 'GetOfferMappingsResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('GetSuggestedOfferMappingsResponse', 'GetSuggestedOfferMappingsResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOfferMappingsResponse', 'UpdateOfferMappingsResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetBusinessSettings', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessSettingsResponse', 'GetBusinessSettingsResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetCampaign', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignResponse', 'GetCampaignResponse', Body, ValidatorState);
validate_response('GetCampaign', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignLogins', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignLoginsResponse', 'GetCampaignLoginsResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignRegion', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignRegionResponse', 'GetCampaignRegionResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignSettings', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignSettingsResponse', 'GetCampaignSettingsResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaigns', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignsResponse', 'GetCampaignsResponse', Body, ValidatorState);
validate_response('GetCampaigns', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignsByLogin', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignsResponse', 'GetCampaignsResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetCategoriesMaxSaleQuantum', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoriesMaxSaleQuantumResponse', 'GetCategoriesMaxSaleQuantumResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoriesTree', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoriesResponse', 'GetCategoriesResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('CreateChat', 200, Body, ValidatorState) ->
    validate_response_body('CreateChatResponse', 'CreateChatResponse', Body, ValidatorState);
validate_response('CreateChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetChatHistory', 200, Body, ValidatorState) ->
    validate_response_body('GetChatHistoryResponse', 'GetChatHistoryResponse', Body, ValidatorState);
validate_response('GetChatHistory', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetChats', 200, Body, ValidatorState) ->
    validate_response_body('GetChatsResponse', 'GetChatsResponse', Body, ValidatorState);
validate_response('GetChats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetChats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetChats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetChats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetChats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetChats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SendFileToChat', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SendFileToChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SendMessageToChat', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetCategoryContentParameters', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoryContentParametersResponse', 'GetCategoryContentParametersResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferCardsContentStatus', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferCardsContentStatusResponse', 'GetOfferCardsContentStatusResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferContent', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOfferContentResponse', 'UpdateOfferContentResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('AcceptOrderCancellation', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('AddHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('AddOffersToArchive', 200, Body, ValidatorState) ->
    validate_response_body('AddOffersToArchiveResponse', 'AddOffersToArchiveResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('CalculateTariffs', 200, Body, ValidatorState) ->
    validate_response_body('CalculateTariffsResponse', 'CalculateTariffsResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ConfirmBusinessPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ConfirmCampaignPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('CreateChat', 200, Body, ValidatorState) ->
    validate_response_body('CreateChatResponse', 'CreateChatResponse', Body, ValidatorState);
validate_response('CreateChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('CreateOutlet', 200, Body, ValidatorState) ->
    validate_response_body('CreateOutletResponse', 'CreateOutletResponse', Body, ValidatorState);
validate_response('CreateOutlet', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CreateOutlet', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CreateOutlet', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CreateOutlet', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CreateOutlet', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CreateOutlet', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeleteCampaignOffersResponse', 'DeleteCampaignOffersResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteGoodsFeedbackComment', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeleteOffersResponse', 'DeleteOffersResponse', Body, ValidatorState);
validate_response('DeleteOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOffersFromArchive', 200, Body, ValidatorState) ->
    validate_response_body('DeleteOffersFromArchiveResponse', 'DeleteOffersFromArchiveResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOutlet', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOutletLicenses', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeletePromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeletePromoOffersResponse', 'DeletePromoOffersResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateBoostConsolidatedReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateCompetitorsPositionReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsFeedbackReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateMassOrderLabelsReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateOrderLabel', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GenerateOrderLabel', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateOrderLabels', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GenerateOrderLabels', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GeneratePricesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShelfsStatisticsReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShowsSalesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateStocksOnWarehousesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedMarketplaceServicesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedNettingReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedOrdersReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetAllOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetAllOffersResponse', 'GetAllOffersResponse', Body, ValidatorState);
validate_response('GetAllOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBidsInfoForBusiness', 200, Body, ValidatorState) ->
    validate_response_body('GetBidsInfoResponse', 'GetBidsInfoResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBidsRecommendations', 200, Body, ValidatorState) ->
    validate_response_body('GetBidsRecommendationsResponse', 'GetBidsRecommendationsResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBusinessQuarantineOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetQuarantineOffersResponse', 'GetQuarantineOffersResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBusinessSettings', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessSettingsResponse', 'GetBusinessSettingsResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaign', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignResponse', 'GetCampaignResponse', Body, ValidatorState);
validate_response('GetCampaign', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignLogins', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignLoginsResponse', 'GetCampaignLoginsResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignOffersResponse', 'GetCampaignOffersResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignQuarantineOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetQuarantineOffersResponse', 'GetQuarantineOffersResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignRegion', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignRegionResponse', 'GetCampaignRegionResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignSettings', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignSettingsResponse', 'GetCampaignSettingsResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaigns', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignsResponse', 'GetCampaignsResponse', Body, ValidatorState);
validate_response('GetCampaigns', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignsByLogin', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignsResponse', 'GetCampaignsResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoriesMaxSaleQuantum', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoriesMaxSaleQuantumResponse', 'GetCategoriesMaxSaleQuantumResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoriesTree', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoriesResponse', 'GetCategoriesResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoryContentParameters', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoryContentParametersResponse', 'GetCategoryContentParametersResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetChatHistory', 200, Body, ValidatorState) ->
    validate_response_body('GetChatHistoryResponse', 'GetChatHistoryResponse', Body, ValidatorState);
validate_response('GetChatHistory', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetChats', 200, Body, ValidatorState) ->
    validate_response_body('GetChatsResponse', 'GetChatsResponse', Body, ValidatorState);
validate_response('GetChats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetChats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetChats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetChats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetChats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetChats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetDeliveryServices', 200, Body, ValidatorState) ->
    validate_response_body('GetDeliveryServicesResponse', 'GetDeliveryServicesResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeed', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedResponse', 'GetFeedResponse', Body, ValidatorState);
validate_response('GetFeed', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeedIndexLogs', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedIndexLogsResponse', 'GetFeedIndexLogsResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeedbackAndCommentUpdates', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedbackListResponse', 'GetFeedbackListResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeeds', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedsResponse', 'GetFeedsResponse', Body, ValidatorState);
validate_response('GetFeeds', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsFeedbackComments', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsFeedbackCommentsResponse', 'GetGoodsFeedbackCommentsResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsFeedbacks', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsFeedbackResponse', 'GetGoodsFeedbackResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsStats', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsStatsResponse', 'GetGoodsStatsResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetHiddenOffersResponse', 'GetHiddenOffersResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetModel', 200, Body, ValidatorState) ->
    validate_response_body('GetModelsResponse', 'GetModelsResponse', Body, ValidatorState);
validate_response('GetModel', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetModel', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetModel', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetModel', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetModel', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetModel', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetModelOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetModelsOffersResponse', 'GetModelsOffersResponse', Body, ValidatorState);
validate_response('GetModelOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetModelOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetModelOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetModelOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetModelOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetModelOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetModels', 200, Body, ValidatorState) ->
    validate_response_body('GetModelsResponse', 'GetModelsResponse', Body, ValidatorState);
validate_response('GetModels', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetModels', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetModels', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetModels', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetModels', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetModels', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetModelsOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetModelsOffersResponse', 'GetModelsOffersResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferCardsContentStatus', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferCardsContentStatusResponse', 'GetOfferCardsContentStatusResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferMappingEntriesResponse', 'GetOfferMappingEntriesResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferMappingsResponse', 'GetOfferMappingsResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferRecommendations', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferRecommendationsResponse', 'GetOfferRecommendationsResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetOffersResponse', 'GetOffersResponse', Body, ValidatorState);
validate_response('GetOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrder', 200, Body, ValidatorState) ->
    validate_response_body('GetOrderResponse', 'GetOrderResponse', Body, ValidatorState);
validate_response('GetOrder', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderBusinessBuyerInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessBuyerInfoResponse', 'GetBusinessBuyerInfoResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderBusinessDocumentsInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessDocumentsInfoResponse', 'GetBusinessDocumentsInfoResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderBuyerInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetOrderBuyerInfoResponse', 'GetOrderBuyerInfoResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderLabelsData', 200, Body, ValidatorState) ->
    validate_response_body('GetOrderLabelsDataResponse', 'GetOrderLabelsDataResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrders', 200, Body, ValidatorState) ->
    validate_response_body('GetOrdersResponse', 'GetOrdersResponse', Body, ValidatorState);
validate_response('GetOrders', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrdersStats', 200, Body, ValidatorState) ->
    validate_response_body('GetOrdersStatsResponse', 'GetOrdersStatsResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOutlet', 200, Body, ValidatorState) ->
    validate_response_body('GetOutletResponse', 'GetOutletResponse', Body, ValidatorState);
validate_response('GetOutlet', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOutlet', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOutlet', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOutlet', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOutlet', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOutlet', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOutletLicenses', 200, Body, ValidatorState) ->
    validate_response_body('GetOutletLicensesResponse', 'GetOutletLicensesResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOutlets', 200, Body, ValidatorState) ->
    validate_response_body('GetOutletsResponse', 'GetOutletsResponse', Body, ValidatorState);
validate_response('GetOutlets', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOutlets', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOutlets', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOutlets', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOutlets', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOutlets', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPrices', 200, Body, ValidatorState) ->
    validate_response_body('GetPricesResponse', 'GetPricesResponse', Body, ValidatorState);
validate_response('GetPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPricesByOfferIds', 200, Body, ValidatorState) ->
    validate_response_body('GetPricesByOfferIdsResponse', 'GetPricesByOfferIdsResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetPromoOffersResponse', 'GetPromoOffersResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPromos', 200, Body, ValidatorState) ->
    validate_response_body('GetPromosResponse', 'GetPromosResponse', Body, ValidatorState);
validate_response('GetPromos', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetQualityRatingDetails', 200, Body, ValidatorState) ->
    validate_response_body('GetQualityRatingDetailsResponse', 'GetQualityRatingDetailsResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetQualityRatings', 200, Body, ValidatorState) ->
    validate_response_body('GetQualityRatingResponse', 'GetQualityRatingResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReportInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetReportInfoResponse', 'GetReportInfoResponse', Body, ValidatorState);
validate_response('GetReportInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturn', 200, Body, ValidatorState) ->
    validate_response_body('GetReturnResponse', 'GetReturnResponse', Body, ValidatorState);
validate_response('GetReturn', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturnApplication', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GetReturnApplication', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturnPhoto', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GetReturnPhoto', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturns', 200, Body, ValidatorState) ->
    validate_response_body('GetReturnsResponse', 'GetReturnsResponse', Body, ValidatorState);
validate_response('GetReturns', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetStocks', 200, Body, ValidatorState) ->
    validate_response_body('GetWarehouseStocksResponse', 'GetWarehouseStocksResponse', Body, ValidatorState);
validate_response('GetStocks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('GetSuggestedOfferMappingEntriesResponse', 'GetSuggestedOfferMappingEntriesResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('GetSuggestedOfferMappingsResponse', 'GetSuggestedOfferMappingsResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedPrices', 200, Body, ValidatorState) ->
    validate_response_body('SuggestPricesResponse', 'SuggestPricesResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetWarehouses', 200, Body, ValidatorState) ->
    validate_response_body('GetWarehousesResponse', 'GetWarehousesResponse', Body, ValidatorState);
validate_response('GetWarehouses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ProvideOrderDigitalCodes', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ProvideOrderItemIdentifiers', 200, Body, ValidatorState) ->
    validate_response_body('ProvideOrderItemIdentifiersResponse', 'ProvideOrderItemIdentifiersResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('PutBidsForBusiness', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('PutBidsForCampaign', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('RefreshFeed', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('RefreshFeed', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchModels', 200, Body, ValidatorState) ->
    validate_response_body('SearchModelsResponse', 'SearchModelsResponse', Body, ValidatorState);
validate_response('SearchModels', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SearchModels', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchModels', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchModels', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchModels', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchModels', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionChildren', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionWithChildrenResponse', 'GetRegionWithChildrenResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionsById', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionsResponse', 'GetRegionsResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionsByName', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionsResponse', 'GetRegionsResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SendFileToChat', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SendFileToChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SendMessageToChat', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetFeedParams', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetFeedParams', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderBoxLayout', 200, Body, ValidatorState) ->
    validate_response_body('SetOrderBoxLayoutResponse', 'SetOrderBoxLayoutResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderDeliveryDate', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderDeliveryTrackCode', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderShipmentBoxes', 200, Body, ValidatorState) ->
    validate_response_body('SetOrderShipmentBoxesResponse', 'SetOrderShipmentBoxesResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetReturnDecision', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SkipGoodsFeedbacksReaction', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SubmitReturnDecision', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateBusinessPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateGoodsFeedbackComment', 200, Body, ValidatorState) ->
    validate_response_body('UpdateGoodsFeedbackCommentResponse', 'UpdateGoodsFeedbackCommentResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferContent', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOfferContentResponse', 'UpdateOfferContentResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOfferMappingsResponse', 'UpdateOfferMappingsResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderItems', 200, Body, ValidatorState) ->
    validate_response_body('', '', Body, ValidatorState);
validate_response('UpdateOrderItems', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderStatus', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOrderStatusResponse', 'UpdateOrderStatusResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderStatuses', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOrderStatusesResponse', 'UpdateOrderStatusesResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderStorageLimit', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOutlet', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOutletLicenses', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdatePrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdatePrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdatePromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('UpdatePromoOffersResponse', 'UpdatePromoOffersResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateStocks', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateStocks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetDeliveryServices', 200, Body, ValidatorState) ->
    validate_response_body('GetDeliveryServicesResponse', 'GetDeliveryServicesResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('AddHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('AddOffersToArchive', 200, Body, ValidatorState) ->
    validate_response_body('AddOffersToArchiveResponse', 'AddOffersToArchiveResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('CalculateTariffs', 200, Body, ValidatorState) ->
    validate_response_body('CalculateTariffsResponse', 'CalculateTariffsResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ConfirmBusinessPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ConfirmCampaignPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('CreateChat', 200, Body, ValidatorState) ->
    validate_response_body('CreateChatResponse', 'CreateChatResponse', Body, ValidatorState);
validate_response('CreateChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeleteCampaignOffersResponse', 'DeleteCampaignOffersResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteGoodsFeedbackComment', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeleteOffersResponse', 'DeleteOffersResponse', Body, ValidatorState);
validate_response('DeleteOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOffersFromArchive', 200, Body, ValidatorState) ->
    validate_response_body('DeleteOffersFromArchiveResponse', 'DeleteOffersFromArchiveResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeletePromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeletePromoOffersResponse', 'DeletePromoOffersResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateBoostConsolidatedReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateCompetitorsPositionReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsFeedbackReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsRealizationReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateMassOrderLabelsReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateOrderLabel', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GenerateOrderLabel', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateOrderLabels', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GenerateOrderLabels', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GeneratePricesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShelfsStatisticsReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShowsSalesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateStocksOnWarehousesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedMarketplaceServicesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedNettingReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedOrdersReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetAllOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetAllOffersResponse', 'GetAllOffersResponse', Body, ValidatorState);
validate_response('GetAllOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBidsInfoForBusiness', 200, Body, ValidatorState) ->
    validate_response_body('GetBidsInfoResponse', 'GetBidsInfoResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBidsRecommendations', 200, Body, ValidatorState) ->
    validate_response_body('GetBidsRecommendationsResponse', 'GetBidsRecommendationsResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBusinessQuarantineOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetQuarantineOffersResponse', 'GetQuarantineOffersResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBusinessSettings', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessSettingsResponse', 'GetBusinessSettingsResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaign', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignResponse', 'GetCampaignResponse', Body, ValidatorState);
validate_response('GetCampaign', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignLogins', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignLoginsResponse', 'GetCampaignLoginsResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignOffersResponse', 'GetCampaignOffersResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignQuarantineOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetQuarantineOffersResponse', 'GetQuarantineOffersResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignRegion', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignRegionResponse', 'GetCampaignRegionResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignSettings', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignSettingsResponse', 'GetCampaignSettingsResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaigns', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignsResponse', 'GetCampaignsResponse', Body, ValidatorState);
validate_response('GetCampaigns', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignsByLogin', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignsResponse', 'GetCampaignsResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoriesMaxSaleQuantum', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoriesMaxSaleQuantumResponse', 'GetCategoriesMaxSaleQuantumResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoriesTree', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoriesResponse', 'GetCategoriesResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoryContentParameters', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoryContentParametersResponse', 'GetCategoryContentParametersResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetChatHistory', 200, Body, ValidatorState) ->
    validate_response_body('GetChatHistoryResponse', 'GetChatHistoryResponse', Body, ValidatorState);
validate_response('GetChatHistory', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetChats', 200, Body, ValidatorState) ->
    validate_response_body('GetChatsResponse', 'GetChatsResponse', Body, ValidatorState);
validate_response('GetChats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetChats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetChats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetChats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetChats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetChats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetDeliveryServices', 200, Body, ValidatorState) ->
    validate_response_body('GetDeliveryServicesResponse', 'GetDeliveryServicesResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeed', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedResponse', 'GetFeedResponse', Body, ValidatorState);
validate_response('GetFeed', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeedIndexLogs', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedIndexLogsResponse', 'GetFeedIndexLogsResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeedbackAndCommentUpdates', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedbackListResponse', 'GetFeedbackListResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeeds', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedsResponse', 'GetFeedsResponse', Body, ValidatorState);
validate_response('GetFeeds', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsFeedbackComments', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsFeedbackCommentsResponse', 'GetGoodsFeedbackCommentsResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsFeedbacks', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsFeedbackResponse', 'GetGoodsFeedbackResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsStats', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsStatsResponse', 'GetGoodsStatsResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetHiddenOffersResponse', 'GetHiddenOffersResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferCardsContentStatus', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferCardsContentStatusResponse', 'GetOfferCardsContentStatusResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferMappingEntriesResponse', 'GetOfferMappingEntriesResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferMappingsResponse', 'GetOfferMappingsResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferRecommendations', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferRecommendationsResponse', 'GetOfferRecommendationsResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetOffersResponse', 'GetOffersResponse', Body, ValidatorState);
validate_response('GetOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrder', 200, Body, ValidatorState) ->
    validate_response_body('GetOrderResponse', 'GetOrderResponse', Body, ValidatorState);
validate_response('GetOrder', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderBusinessBuyerInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessBuyerInfoResponse', 'GetBusinessBuyerInfoResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderBusinessDocumentsInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessDocumentsInfoResponse', 'GetBusinessDocumentsInfoResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderLabelsData', 200, Body, ValidatorState) ->
    validate_response_body('GetOrderLabelsDataResponse', 'GetOrderLabelsDataResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrders', 200, Body, ValidatorState) ->
    validate_response_body('GetOrdersResponse', 'GetOrdersResponse', Body, ValidatorState);
validate_response('GetOrders', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrdersStats', 200, Body, ValidatorState) ->
    validate_response_body('GetOrdersStatsResponse', 'GetOrdersStatsResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPrices', 200, Body, ValidatorState) ->
    validate_response_body('GetPricesResponse', 'GetPricesResponse', Body, ValidatorState);
validate_response('GetPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPricesByOfferIds', 200, Body, ValidatorState) ->
    validate_response_body('GetPricesByOfferIdsResponse', 'GetPricesByOfferIdsResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetPromoOffersResponse', 'GetPromoOffersResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPromos', 200, Body, ValidatorState) ->
    validate_response_body('GetPromosResponse', 'GetPromosResponse', Body, ValidatorState);
validate_response('GetPromos', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetQualityRatingDetails', 200, Body, ValidatorState) ->
    validate_response_body('GetQualityRatingDetailsResponse', 'GetQualityRatingDetailsResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetQualityRatings', 200, Body, ValidatorState) ->
    validate_response_body('GetQualityRatingResponse', 'GetQualityRatingResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReportInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetReportInfoResponse', 'GetReportInfoResponse', Body, ValidatorState);
validate_response('GetReportInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturn', 200, Body, ValidatorState) ->
    validate_response_body('GetReturnResponse', 'GetReturnResponse', Body, ValidatorState);
validate_response('GetReturn', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturnApplication', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GetReturnApplication', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturnPhoto', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GetReturnPhoto', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturns', 200, Body, ValidatorState) ->
    validate_response_body('GetReturnsResponse', 'GetReturnsResponse', Body, ValidatorState);
validate_response('GetReturns', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetStocks', 200, Body, ValidatorState) ->
    validate_response_body('GetWarehouseStocksResponse', 'GetWarehouseStocksResponse', Body, ValidatorState);
validate_response('GetStocks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('GetSuggestedOfferMappingEntriesResponse', 'GetSuggestedOfferMappingEntriesResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('GetSuggestedOfferMappingsResponse', 'GetSuggestedOfferMappingsResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedPrices', 200, Body, ValidatorState) ->
    validate_response_body('SuggestPricesResponse', 'SuggestPricesResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetWarehouses', 200, Body, ValidatorState) ->
    validate_response_body('GetWarehousesResponse', 'GetWarehousesResponse', Body, ValidatorState);
validate_response('GetWarehouses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ProvideOrderItemIdentifiers', 200, Body, ValidatorState) ->
    validate_response_body('ProvideOrderItemIdentifiersResponse', 'ProvideOrderItemIdentifiersResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('PutBidsForBusiness', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('PutBidsForCampaign', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('RefreshFeed', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('RefreshFeed', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionChildren', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionWithChildrenResponse', 'GetRegionWithChildrenResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionsById', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionsResponse', 'GetRegionsResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionsByName', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionsResponse', 'GetRegionsResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SendFileToChat', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SendFileToChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SendMessageToChat', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetFeedParams', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetFeedParams', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderBoxLayout', 200, Body, ValidatorState) ->
    validate_response_body('SetOrderBoxLayoutResponse', 'SetOrderBoxLayoutResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderShipmentBoxes', 200, Body, ValidatorState) ->
    validate_response_body('SetOrderShipmentBoxesResponse', 'SetOrderShipmentBoxesResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SkipGoodsFeedbacksReaction', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateBusinessPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateGoodsFeedbackComment', 200, Body, ValidatorState) ->
    validate_response_body('UpdateGoodsFeedbackCommentResponse', 'UpdateGoodsFeedbackCommentResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferContent', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOfferContentResponse', 'UpdateOfferContentResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOfferMappingsResponse', 'UpdateOfferMappingsResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderItems', 200, Body, ValidatorState) ->
    validate_response_body('', '', Body, ValidatorState);
validate_response('UpdateOrderItems', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderStatus', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOrderStatusResponse', 'UpdateOrderStatusResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderStatuses', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOrderStatusesResponse', 'UpdateOrderStatusesResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdatePrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdatePrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdatePromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('UpdatePromoOffersResponse', 'UpdatePromoOffersResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateStocks', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateStocks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('VerifyOrderEac', 200, Body, ValidatorState) ->
    validate_response_body('VerifyOrderEacResponse', 'VerifyOrderEacResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('AddHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('AddOffersToArchive', 200, Body, ValidatorState) ->
    validate_response_body('AddOffersToArchiveResponse', 'AddOffersToArchiveResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('CalculateTariffs', 200, Body, ValidatorState) ->
    validate_response_body('CalculateTariffsResponse', 'CalculateTariffsResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ConfirmBusinessPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ConfirmCampaignPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ConfirmShipment', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('CreateChat', 200, Body, ValidatorState) ->
    validate_response_body('CreateChatResponse', 'CreateChatResponse', Body, ValidatorState);
validate_response('CreateChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeleteCampaignOffersResponse', 'DeleteCampaignOffersResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteGoodsFeedbackComment', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeleteOffersResponse', 'DeleteOffersResponse', Body, ValidatorState);
validate_response('DeleteOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOffersFromArchive', 200, Body, ValidatorState) ->
    validate_response_body('DeleteOffersFromArchiveResponse', 'DeleteOffersFromArchiveResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeletePromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeletePromoOffersResponse', 'DeletePromoOffersResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentAct', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentAct', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentAct', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentAct', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentAct', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentAct', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentAct', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentDiscrepancyAct', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentInboundAct', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentPalletLabels', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentReceptionTransferAct', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentTransportationWaybill', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateBoostConsolidatedReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateCompetitorsPositionReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsFeedbackReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsRealizationReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateMassOrderLabelsReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateOrderLabel', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GenerateOrderLabel', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateOrderLabels', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GenerateOrderLabels', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GeneratePricesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShelfsStatisticsReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShipmentListDocumentReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShipmentListDocumentReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShipmentListDocumentReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShipmentListDocumentReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShipmentListDocumentReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShipmentListDocumentReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShowsSalesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateStocksOnWarehousesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedMarketplaceServicesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedNettingReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedOrdersReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetAllOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetAllOffersResponse', 'GetAllOffersResponse', Body, ValidatorState);
validate_response('GetAllOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBidsInfoForBusiness', 200, Body, ValidatorState) ->
    validate_response_body('GetBidsInfoResponse', 'GetBidsInfoResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBidsRecommendations', 200, Body, ValidatorState) ->
    validate_response_body('GetBidsRecommendationsResponse', 'GetBidsRecommendationsResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBusinessQuarantineOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetQuarantineOffersResponse', 'GetQuarantineOffersResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBusinessSettings', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessSettingsResponse', 'GetBusinessSettingsResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaign', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignResponse', 'GetCampaignResponse', Body, ValidatorState);
validate_response('GetCampaign', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignLogins', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignLoginsResponse', 'GetCampaignLoginsResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignOffersResponse', 'GetCampaignOffersResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignQuarantineOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetQuarantineOffersResponse', 'GetQuarantineOffersResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignRegion', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignRegionResponse', 'GetCampaignRegionResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignSettings', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignSettingsResponse', 'GetCampaignSettingsResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaigns', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignsResponse', 'GetCampaignsResponse', Body, ValidatorState);
validate_response('GetCampaigns', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignsByLogin', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignsResponse', 'GetCampaignsResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoriesMaxSaleQuantum', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoriesMaxSaleQuantumResponse', 'GetCategoriesMaxSaleQuantumResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoriesTree', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoriesResponse', 'GetCategoriesResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoryContentParameters', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoryContentParametersResponse', 'GetCategoryContentParametersResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetChatHistory', 200, Body, ValidatorState) ->
    validate_response_body('GetChatHistoryResponse', 'GetChatHistoryResponse', Body, ValidatorState);
validate_response('GetChatHistory', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetChats', 200, Body, ValidatorState) ->
    validate_response_body('GetChatsResponse', 'GetChatsResponse', Body, ValidatorState);
validate_response('GetChats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetChats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetChats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetChats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetChats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetChats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetDeliveryServices', 200, Body, ValidatorState) ->
    validate_response_body('GetDeliveryServicesResponse', 'GetDeliveryServicesResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetDeliveryServices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeed', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedResponse', 'GetFeedResponse', Body, ValidatorState);
validate_response('GetFeed', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeedIndexLogs', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedIndexLogsResponse', 'GetFeedIndexLogsResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeedbackAndCommentUpdates', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedbackListResponse', 'GetFeedbackListResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeeds', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedsResponse', 'GetFeedsResponse', Body, ValidatorState);
validate_response('GetFeeds', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsFeedbackComments', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsFeedbackCommentsResponse', 'GetGoodsFeedbackCommentsResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsFeedbacks', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsFeedbackResponse', 'GetGoodsFeedbackResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsStats', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsStatsResponse', 'GetGoodsStatsResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetHiddenOffersResponse', 'GetHiddenOffersResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferCardsContentStatus', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferCardsContentStatusResponse', 'GetOfferCardsContentStatusResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferMappingEntriesResponse', 'GetOfferMappingEntriesResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferMappingsResponse', 'GetOfferMappingsResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferRecommendations', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferRecommendationsResponse', 'GetOfferRecommendationsResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetOffersResponse', 'GetOffersResponse', Body, ValidatorState);
validate_response('GetOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrder', 200, Body, ValidatorState) ->
    validate_response_body('GetOrderResponse', 'GetOrderResponse', Body, ValidatorState);
validate_response('GetOrder', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderBusinessBuyerInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessBuyerInfoResponse', 'GetBusinessBuyerInfoResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderBusinessDocumentsInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessDocumentsInfoResponse', 'GetBusinessDocumentsInfoResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderLabelsData', 200, Body, ValidatorState) ->
    validate_response_body('GetOrderLabelsDataResponse', 'GetOrderLabelsDataResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrders', 200, Body, ValidatorState) ->
    validate_response_body('GetOrdersResponse', 'GetOrdersResponse', Body, ValidatorState);
validate_response('GetOrders', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrdersStats', 200, Body, ValidatorState) ->
    validate_response_body('GetOrdersStatsResponse', 'GetOrdersStatsResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPrices', 200, Body, ValidatorState) ->
    validate_response_body('GetPricesResponse', 'GetPricesResponse', Body, ValidatorState);
validate_response('GetPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPricesByOfferIds', 200, Body, ValidatorState) ->
    validate_response_body('GetPricesByOfferIdsResponse', 'GetPricesByOfferIdsResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetPromoOffersResponse', 'GetPromoOffersResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPromos', 200, Body, ValidatorState) ->
    validate_response_body('GetPromosResponse', 'GetPromosResponse', Body, ValidatorState);
validate_response('GetPromos', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetQualityRatingDetails', 200, Body, ValidatorState) ->
    validate_response_body('GetQualityRatingDetailsResponse', 'GetQualityRatingDetailsResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetQualityRatings', 200, Body, ValidatorState) ->
    validate_response_body('GetQualityRatingResponse', 'GetQualityRatingResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReportInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetReportInfoResponse', 'GetReportInfoResponse', Body, ValidatorState);
validate_response('GetReportInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturn', 200, Body, ValidatorState) ->
    validate_response_body('GetReturnResponse', 'GetReturnResponse', Body, ValidatorState);
validate_response('GetReturn', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturnApplication', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GetReturnApplication', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturnPhoto', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GetReturnPhoto', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturns', 200, Body, ValidatorState) ->
    validate_response_body('GetReturnsResponse', 'GetReturnsResponse', Body, ValidatorState);
validate_response('GetReturns', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetShipment', 200, Body, ValidatorState) ->
    validate_response_body('GetShipmentResponse', 'GetShipmentResponse', Body, ValidatorState);
validate_response('GetShipment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetShipment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetShipment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetShipment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetShipment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetShipment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetShipmentOrdersInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetShipmentOrdersInfoResponse', 'GetShipmentOrdersInfoResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetStocks', 200, Body, ValidatorState) ->
    validate_response_body('GetWarehouseStocksResponse', 'GetWarehouseStocksResponse', Body, ValidatorState);
validate_response('GetStocks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('GetSuggestedOfferMappingEntriesResponse', 'GetSuggestedOfferMappingEntriesResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('GetSuggestedOfferMappingsResponse', 'GetSuggestedOfferMappingsResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedPrices', 200, Body, ValidatorState) ->
    validate_response_body('SuggestPricesResponse', 'SuggestPricesResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetWarehouses', 200, Body, ValidatorState) ->
    validate_response_body('GetWarehousesResponse', 'GetWarehousesResponse', Body, ValidatorState);
validate_response('GetWarehouses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ProvideOrderItemIdentifiers', 200, Body, ValidatorState) ->
    validate_response_body('ProvideOrderItemIdentifiersResponse', 'ProvideOrderItemIdentifiersResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('PutBidsForBusiness', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('PutBidsForCampaign', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('RefreshFeed', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('RefreshFeed', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionChildren', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionWithChildrenResponse', 'GetRegionWithChildrenResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionsById', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionsResponse', 'GetRegionsResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionsByName', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionsResponse', 'GetRegionsResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchShipments', 200, Body, ValidatorState) ->
    validate_response_body('SearchShipmentsResponse', 'SearchShipmentsResponse', Body, ValidatorState);
validate_response('SearchShipments', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SearchShipments', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchShipments', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchShipments', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchShipments', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchShipments', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SendFileToChat', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SendFileToChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SendMessageToChat', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetFeedParams', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetFeedParams', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderBoxLayout', 200, Body, ValidatorState) ->
    validate_response_body('SetOrderBoxLayoutResponse', 'SetOrderBoxLayoutResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderShipmentBoxes', 200, Body, ValidatorState) ->
    validate_response_body('SetOrderShipmentBoxesResponse', 'SetOrderShipmentBoxesResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetShipmentPalletsCount', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SkipGoodsFeedbacksReaction', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('TransferOrdersFromShipment', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateBusinessPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateGoodsFeedbackComment', 200, Body, ValidatorState) ->
    validate_response_body('UpdateGoodsFeedbackCommentResponse', 'UpdateGoodsFeedbackCommentResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferContent', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOfferContentResponse', 'UpdateOfferContentResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOfferMappingsResponse', 'UpdateOfferMappingsResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderItems', 200, Body, ValidatorState) ->
    validate_response_body('', '', Body, ValidatorState);
validate_response('UpdateOrderItems', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderStatus', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOrderStatusResponse', 'UpdateOrderStatusResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderStatuses', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOrderStatusesResponse', 'UpdateOrderStatusesResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdatePrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdatePrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdatePromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('UpdatePromoOffersResponse', 'UpdatePromoOffersResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateStocks', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateStocks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('AddHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('AddOffersToArchive', 200, Body, ValidatorState) ->
    validate_response_body('AddOffersToArchiveResponse', 'AddOffersToArchiveResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('AddOffersToArchive', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('CalculateTariffs', 200, Body, ValidatorState) ->
    validate_response_body('CalculateTariffsResponse', 'CalculateTariffsResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ConfirmBusinessPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ConfirmCampaignPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('CreateChat', 200, Body, ValidatorState) ->
    validate_response_body('CreateChatResponse', 'CreateChatResponse', Body, ValidatorState);
validate_response('CreateChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CreateChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeleteCampaignOffersResponse', 'DeleteCampaignOffersResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteGoodsFeedbackComment', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeleteOffersResponse', 'DeleteOffersResponse', Body, ValidatorState);
validate_response('DeleteOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOffersFromArchive', 200, Body, ValidatorState) ->
    validate_response_body('DeleteOffersFromArchiveResponse', 'DeleteOffersFromArchiveResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteOffersFromArchive', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeletePromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeletePromoOffersResponse', 'DeletePromoOffersResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateBoostConsolidatedReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateCompetitorsPositionReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsFeedbackReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsMovementReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsMovementReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsMovementReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsMovementReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsMovementReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsMovementReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsRealizationReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsTurnoverReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsTurnoverReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsTurnoverReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsTurnoverReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsTurnoverReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsTurnoverReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GeneratePricesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShelfsStatisticsReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShowsSalesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateStocksOnWarehousesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedMarketplaceServicesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedNettingReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedOrdersReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetAllOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetAllOffersResponse', 'GetAllOffersResponse', Body, ValidatorState);
validate_response('GetAllOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBidsInfoForBusiness', 200, Body, ValidatorState) ->
    validate_response_body('GetBidsInfoResponse', 'GetBidsInfoResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBidsInfoForBusiness', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBidsRecommendations', 200, Body, ValidatorState) ->
    validate_response_body('GetBidsRecommendationsResponse', 'GetBidsRecommendationsResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBidsRecommendations', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBusinessQuarantineOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetQuarantineOffersResponse', 'GetQuarantineOffersResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBusinessSettings', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessSettingsResponse', 'GetBusinessSettingsResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBusinessSettings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaign', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignResponse', 'GetCampaignResponse', Body, ValidatorState);
validate_response('GetCampaign', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaign', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignLogins', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignLoginsResponse', 'GetCampaignLoginsResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignLogins', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignOffersResponse', 'GetCampaignOffersResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignQuarantineOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetQuarantineOffersResponse', 'GetQuarantineOffersResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignRegion', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignRegionResponse', 'GetCampaignRegionResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignRegion', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignSettings', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignSettingsResponse', 'GetCampaignSettingsResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignSettings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaigns', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignsResponse', 'GetCampaignsResponse', Body, ValidatorState);
validate_response('GetCampaigns', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaigns', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignsByLogin', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignsResponse', 'GetCampaignsResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignsByLogin', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoriesMaxSaleQuantum', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoriesMaxSaleQuantumResponse', 'GetCategoriesMaxSaleQuantumResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesMaxSaleQuantum', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoriesTree', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoriesResponse', 'GetCategoriesResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoriesTree', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCategoryContentParameters', 200, Body, ValidatorState) ->
    validate_response_body('GetCategoryContentParametersResponse', 'GetCategoryContentParametersResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCategoryContentParameters', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetChatHistory', 200, Body, ValidatorState) ->
    validate_response_body('GetChatHistoryResponse', 'GetChatHistoryResponse', Body, ValidatorState);
validate_response('GetChatHistory', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetChatHistory', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetChats', 200, Body, ValidatorState) ->
    validate_response_body('GetChatsResponse', 'GetChatsResponse', Body, ValidatorState);
validate_response('GetChats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetChats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetChats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetChats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetChats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetChats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeed', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedResponse', 'GetFeedResponse', Body, ValidatorState);
validate_response('GetFeed', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeedIndexLogs', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedIndexLogsResponse', 'GetFeedIndexLogsResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeedbackAndCommentUpdates', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedbackListResponse', 'GetFeedbackListResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeeds', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedsResponse', 'GetFeedsResponse', Body, ValidatorState);
validate_response('GetFeeds', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFulfillmentWarehouses', 200, Body, ValidatorState) ->
    validate_response_body('GetFulfillmentWarehousesResponse', 'GetFulfillmentWarehousesResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsFeedbackComments', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsFeedbackCommentsResponse', 'GetGoodsFeedbackCommentsResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsFeedbacks', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsFeedbackResponse', 'GetGoodsFeedbackResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsStats', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsStatsResponse', 'GetGoodsStatsResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetHiddenOffersResponse', 'GetHiddenOffersResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferCardsContentStatus', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferCardsContentStatusResponse', 'GetOfferCardsContentStatusResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferCardsContentStatus', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferMappingEntriesResponse', 'GetOfferMappingEntriesResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferMappingsResponse', 'GetOfferMappingsResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferRecommendations', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferRecommendationsResponse', 'GetOfferRecommendationsResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetOffersResponse', 'GetOffersResponse', Body, ValidatorState);
validate_response('GetOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrder', 200, Body, ValidatorState) ->
    validate_response_body('GetOrderResponse', 'GetOrderResponse', Body, ValidatorState);
validate_response('GetOrder', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderBusinessBuyerInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessBuyerInfoResponse', 'GetBusinessBuyerInfoResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderBusinessDocumentsInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessDocumentsInfoResponse', 'GetBusinessDocumentsInfoResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrders', 200, Body, ValidatorState) ->
    validate_response_body('GetOrdersResponse', 'GetOrdersResponse', Body, ValidatorState);
validate_response('GetOrders', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrdersStats', 200, Body, ValidatorState) ->
    validate_response_body('GetOrdersStatsResponse', 'GetOrdersStatsResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPrices', 200, Body, ValidatorState) ->
    validate_response_body('GetPricesResponse', 'GetPricesResponse', Body, ValidatorState);
validate_response('GetPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPricesByOfferIds', 200, Body, ValidatorState) ->
    validate_response_body('GetPricesByOfferIdsResponse', 'GetPricesByOfferIdsResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetPromoOffersResponse', 'GetPromoOffersResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPromos', 200, Body, ValidatorState) ->
    validate_response_body('GetPromosResponse', 'GetPromosResponse', Body, ValidatorState);
validate_response('GetPromos', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetQualityRatings', 200, Body, ValidatorState) ->
    validate_response_body('GetQualityRatingResponse', 'GetQualityRatingResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReportInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetReportInfoResponse', 'GetReportInfoResponse', Body, ValidatorState);
validate_response('GetReportInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturn', 200, Body, ValidatorState) ->
    validate_response_body('GetReturnResponse', 'GetReturnResponse', Body, ValidatorState);
validate_response('GetReturn', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturnPhoto', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GetReturnPhoto', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturns', 200, Body, ValidatorState) ->
    validate_response_body('GetReturnsResponse', 'GetReturnsResponse', Body, ValidatorState);
validate_response('GetReturns', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetStocks', 200, Body, ValidatorState) ->
    validate_response_body('GetWarehouseStocksResponse', 'GetWarehouseStocksResponse', Body, ValidatorState);
validate_response('GetStocks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('GetSuggestedOfferMappingEntriesResponse', 'GetSuggestedOfferMappingEntriesResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('GetSuggestedOfferMappingsResponse', 'GetSuggestedOfferMappingsResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedPrices', 200, Body, ValidatorState) ->
    validate_response_body('SuggestPricesResponse', 'SuggestPricesResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('PutBidsForBusiness', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('PutBidsForBusiness', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('PutBidsForCampaign', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('PutBidsForCampaign', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('RefreshFeed', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('RefreshFeed', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionChildren', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionWithChildrenResponse', 'GetRegionWithChildrenResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionsById', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionsResponse', 'GetRegionsResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionsByName', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionsResponse', 'GetRegionsResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SendFileToChat', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SendFileToChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SendFileToChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SendMessageToChat', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SendMessageToChat', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetFeedParams', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetFeedParams', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SkipGoodsFeedbacksReaction', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateBusinessPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateGoodsFeedbackComment', 200, Body, ValidatorState) ->
    validate_response_body('UpdateGoodsFeedbackCommentResponse', 'UpdateGoodsFeedbackCommentResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferContent', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOfferContentResponse', 'UpdateOfferContentResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferContent', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferMappings', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOfferMappingsResponse', 'UpdateOfferMappingsResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdatePrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdatePrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdatePromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('UpdatePromoOffersResponse', 'UpdatePromoOffersResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetFeedbackAndCommentUpdates', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedbackListResponse', 'GetFeedbackListResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeedbackAndCommentUpdates', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetFeed', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedResponse', 'GetFeedResponse', Body, ValidatorState);
validate_response('GetFeed', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeed', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeedIndexLogs', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedIndexLogsResponse', 'GetFeedIndexLogsResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeedIndexLogs', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetFeeds', 200, Body, ValidatorState) ->
    validate_response_body('GetFeedsResponse', 'GetFeedsResponse', Body, ValidatorState);
validate_response('GetFeeds', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFeeds', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('RefreshFeed', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('RefreshFeed', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('RefreshFeed', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetFeedParams', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetFeedParams', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('SetFeedParams', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('DeleteGoodsFeedbackComment', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteGoodsFeedbackComment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsFeedbackComments', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsFeedbackCommentsResponse', 'GetGoodsFeedbackCommentsResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbackComments', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetGoodsFeedbacks', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsFeedbackResponse', 'GetGoodsFeedbackResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsFeedbacks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SkipGoodsFeedbacksReaction', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SkipGoodsFeedbacksReaction', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateGoodsFeedbackComment', 200, Body, ValidatorState) ->
    validate_response_body('UpdateGoodsFeedbackCommentResponse', 'UpdateGoodsFeedbackCommentResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateGoodsFeedbackComment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetGoodsStats', 200, Body, ValidatorState) ->
    validate_response_body('GetGoodsStatsResponse', 'GetGoodsStatsResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetGoodsStats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('AddHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('AddHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetHiddenOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetHiddenOffersResponse', 'GetHiddenOffersResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetHiddenOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetModel', 200, Body, ValidatorState) ->
    validate_response_body('GetModelsResponse', 'GetModelsResponse', Body, ValidatorState);
validate_response('GetModel', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetModel', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetModel', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetModel', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetModel', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetModel', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetModelOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetModelsOffersResponse', 'GetModelsOffersResponse', Body, ValidatorState);
validate_response('GetModelOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetModelOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetModelOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetModelOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetModelOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetModelOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetModels', 200, Body, ValidatorState) ->
    validate_response_body('GetModelsResponse', 'GetModelsResponse', Body, ValidatorState);
validate_response('GetModels', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetModels', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetModels', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetModels', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetModels', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetModels', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetModelsOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetModelsOffersResponse', 'GetModelsOffersResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetModelsOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchModels', 200, Body, ValidatorState) ->
    validate_response_body('SearchModelsResponse', 'SearchModelsResponse', Body, ValidatorState);
validate_response('SearchModels', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SearchModels', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchModels', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchModels', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchModels', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchModels', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferMappingEntriesResponse', 'GetOfferMappingEntriesResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('GetSuggestedOfferMappingEntriesResponse', 'GetSuggestedOfferMappingEntriesResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOfferMappingEntries', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateOfferMappingEntries', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('DeleteCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeleteCampaignOffersResponse', 'DeleteCampaignOffersResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('DeleteCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetAllOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetAllOffersResponse', 'GetAllOffersResponse', Body, ValidatorState);
validate_response('GetAllOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetAllOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetCampaignOffersResponse', 'GetCampaignOffersResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOfferRecommendations', 200, Body, ValidatorState) ->
    validate_response_body('GetOfferRecommendationsResponse', 'GetOfferRecommendationsResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOfferRecommendations', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetOffersResponse', 'GetOffersResponse', Body, ValidatorState);
validate_response('GetOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateCampaignOffers', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateCampaignOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetOrderBusinessBuyerInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessBuyerInfoResponse', 'GetBusinessBuyerInfoResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessBuyerInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderBusinessDocumentsInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetBusinessDocumentsInfoResponse', 'GetBusinessDocumentsInfoResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBusinessDocumentsInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetOrderBuyerInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetOrderBuyerInfoResponse', 'GetOrderBuyerInfoResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderBuyerInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderDeliveryDate', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryDate', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderDeliveryTrackCode', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderDeliveryTrackCode', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderStorageLimit', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStorageLimit', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('VerifyOrderEac', 200, Body, ValidatorState) ->
    validate_response_body('VerifyOrderEacResponse', 'VerifyOrderEacResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('VerifyOrderEac', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GenerateOrderLabel', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GenerateOrderLabel', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabel', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateOrderLabels', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GenerateOrderLabels', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateOrderLabels', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrderLabelsData', 200, Body, ValidatorState) ->
    validate_response_body('GetOrderLabelsDataResponse', 'GetOrderLabelsDataResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrderLabelsData', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('AcceptOrderCancellation', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('AcceptOrderCancellation', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrder', 200, Body, ValidatorState) ->
    validate_response_body('GetOrderResponse', 'GetOrderResponse', Body, ValidatorState);
validate_response('GetOrder', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrder', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOrders', 200, Body, ValidatorState) ->
    validate_response_body('GetOrdersResponse', 'GetOrdersResponse', Body, ValidatorState);
validate_response('GetOrders', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrders', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ProvideOrderDigitalCodes', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderDigitalCodes', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ProvideOrderItemIdentifiers', 200, Body, ValidatorState) ->
    validate_response_body('ProvideOrderItemIdentifiersResponse', 'ProvideOrderItemIdentifiersResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ProvideOrderItemIdentifiers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderBoxLayout', 200, Body, ValidatorState) ->
    validate_response_body('SetOrderBoxLayoutResponse', 'SetOrderBoxLayoutResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderBoxLayout', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetOrderShipmentBoxes', 200, Body, ValidatorState) ->
    validate_response_body('SetOrderShipmentBoxesResponse', 'SetOrderShipmentBoxesResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetOrderShipmentBoxes', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderItems', 200, Body, ValidatorState) ->
    validate_response_body('', '', Body, ValidatorState);
validate_response('UpdateOrderItems', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderItems', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderStatus', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOrderStatusResponse', 'UpdateOrderStatusResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatus', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOrderStatuses', 200, Body, ValidatorState) ->
    validate_response_body('UpdateOrderStatusesResponse', 'UpdateOrderStatusesResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOrderStatuses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetOrdersStats', 200, Body, ValidatorState) ->
    validate_response_body('GetOrdersStatsResponse', 'GetOrdersStatsResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOrdersStats', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('DeleteOutletLicenses', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOutletLicenses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOutletLicenses', 200, Body, ValidatorState) ->
    validate_response_body('GetOutletLicensesResponse', 'GetOutletLicensesResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOutletLicenses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOutletLicenses', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOutletLicenses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('CreateOutlet', 200, Body, ValidatorState) ->
    validate_response_body('CreateOutletResponse', 'CreateOutletResponse', Body, ValidatorState);
validate_response('CreateOutlet', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CreateOutlet', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CreateOutlet', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CreateOutlet', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CreateOutlet', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CreateOutlet', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DeleteOutlet', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeleteOutlet', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOutlet', 200, Body, ValidatorState) ->
    validate_response_body('GetOutletResponse', 'GetOutletResponse', Body, ValidatorState);
validate_response('GetOutlet', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOutlet', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOutlet', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOutlet', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOutlet', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOutlet', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetOutlets', 200, Body, ValidatorState) ->
    validate_response_body('GetOutletsResponse', 'GetOutletsResponse', Body, ValidatorState);
validate_response('GetOutlets', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetOutlets', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetOutlets', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetOutlets', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetOutlets', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetOutlets', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateOutlet', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateOutlet', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('ConfirmBusinessPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('ConfirmBusinessPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('ConfirmCampaignPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('ConfirmCampaignPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetBusinessQuarantineOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetQuarantineOffersResponse', 'GetQuarantineOffersResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetBusinessQuarantineOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetCampaignQuarantineOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetQuarantineOffersResponse', 'GetQuarantineOffersResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetCampaignQuarantineOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetPrices', 200, Body, ValidatorState) ->
    validate_response_body('GetPricesResponse', 'GetPricesResponse', Body, ValidatorState);
validate_response('GetPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPricesByOfferIds', 200, Body, ValidatorState) ->
    validate_response_body('GetPricesByOfferIdsResponse', 'GetPricesByOfferIdsResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPricesByOfferIds', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetSuggestedPrices', 200, Body, ValidatorState) ->
    validate_response_body('SuggestPricesResponse', 'SuggestPricesResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetSuggestedPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateBusinessPrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdateBusinessPrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdatePrices', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdatePrices', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 423, Body, ValidatorState) ->
    validate_response_body('ApiLockedErrorResponse', 'ApiLockedErrorResponse', Body, ValidatorState);
validate_response('UpdatePrices', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('DeletePromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('DeletePromoOffersResponse', 'DeletePromoOffersResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DeletePromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('GetPromoOffersResponse', 'GetPromoOffersResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetPromos', 200, Body, ValidatorState) ->
    validate_response_body('GetPromosResponse', 'GetPromosResponse', Body, ValidatorState);
validate_response('GetPromos', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetPromos', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdatePromoOffers', 200, Body, ValidatorState) ->
    validate_response_body('UpdatePromoOffersResponse', 'UpdatePromoOffersResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdatePromoOffers', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetQualityRatingDetails', 200, Body, ValidatorState) ->
    validate_response_body('GetQualityRatingDetailsResponse', 'GetQualityRatingDetailsResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatingDetails', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetQualityRatings', 200, Body, ValidatorState) ->
    validate_response_body('GetQualityRatingResponse', 'GetQualityRatingResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetQualityRatings', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('SearchRegionChildren', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionWithChildrenResponse', 'GetRegionWithChildrenResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionChildren', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionsById', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionsResponse', 'GetRegionsResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsById', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchRegionsByName', 200, Body, ValidatorState) ->
    validate_response_body('GetRegionsResponse', 'GetRegionsResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchRegionsByName', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GenerateBoostConsolidatedReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateBoostConsolidatedReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateCompetitorsPositionReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateCompetitorsPositionReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsFeedbackReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsFeedbackReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsMovementReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsMovementReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsMovementReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsMovementReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsMovementReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsMovementReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsRealizationReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsRealizationReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateGoodsTurnoverReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateGoodsTurnoverReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsTurnoverReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsTurnoverReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsTurnoverReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateGoodsTurnoverReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateMassOrderLabelsReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateMassOrderLabelsReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GeneratePricesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GeneratePricesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShelfsStatisticsReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShelfsStatisticsReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShipmentListDocumentReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShipmentListDocumentReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShipmentListDocumentReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShipmentListDocumentReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShipmentListDocumentReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShipmentListDocumentReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateShowsSalesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateShowsSalesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateStocksOnWarehousesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateStocksOnWarehousesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedMarketplaceServicesReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedMarketplaceServicesReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedNettingReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedNettingReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GenerateUnitedOrdersReport', 200, Body, ValidatorState) ->
    validate_response_body('GenerateReportResponse', 'GenerateReportResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GenerateUnitedOrdersReport', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReportInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetReportInfoResponse', 'GetReportInfoResponse', Body, ValidatorState);
validate_response('GetReportInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReportInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetReturn', 200, Body, ValidatorState) ->
    validate_response_body('GetReturnResponse', 'GetReturnResponse', Body, ValidatorState);
validate_response('GetReturn', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturn', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturnApplication', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GetReturnApplication', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturnApplication', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturnPhoto', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('GetReturnPhoto', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturnPhoto', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetReturns', 200, Body, ValidatorState) ->
    validate_response_body('GetReturnsResponse', 'GetReturnsResponse', Body, ValidatorState);
validate_response('GetReturns', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetReturns', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetReturnDecision', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetReturnDecision', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SubmitReturnDecision', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SubmitReturnDecision', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('ConfirmShipment', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('ConfirmShipment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentAct', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentAct', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentAct', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentAct', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentAct', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentAct', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentAct', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentDiscrepancyAct', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentDiscrepancyAct', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentInboundAct', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentInboundAct', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentPalletLabels', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentPalletLabels', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentReceptionTransferAct', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentReceptionTransferAct', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('DownloadShipmentTransportationWaybill', 200, Body, ValidatorState) ->
    validate_response_body('file', 'file', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('DownloadShipmentTransportationWaybill', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetShipment', 200, Body, ValidatorState) ->
    validate_response_body('GetShipmentResponse', 'GetShipmentResponse', Body, ValidatorState);
validate_response('GetShipment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetShipment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetShipment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetShipment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetShipment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetShipment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetShipmentOrdersInfo', 200, Body, ValidatorState) ->
    validate_response_body('GetShipmentOrdersInfoResponse', 'GetShipmentOrdersInfoResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetShipmentOrdersInfo', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SearchShipments', 200, Body, ValidatorState) ->
    validate_response_body('SearchShipmentsResponse', 'SearchShipmentsResponse', Body, ValidatorState);
validate_response('SearchShipments', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SearchShipments', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SearchShipments', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SearchShipments', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SearchShipments', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SearchShipments', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('SetShipmentPalletsCount', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('SetShipmentPalletsCount', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('TransferOrdersFromShipment', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('TransferOrdersFromShipment', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetStocks', 200, Body, ValidatorState) ->
    validate_response_body('GetWarehouseStocksResponse', 'GetWarehouseStocksResponse', Body, ValidatorState);
validate_response('GetStocks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetStocks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('UpdateStocks', 200, Body, ValidatorState) ->
    validate_response_body('EmptyApiResponse', 'EmptyApiResponse', Body, ValidatorState);
validate_response('UpdateStocks', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('UpdateStocks', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('CalculateTariffs', 200, Body, ValidatorState) ->
    validate_response_body('CalculateTariffsResponse', 'CalculateTariffsResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('CalculateTariffs', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response('GetFulfillmentWarehouses', 200, Body, ValidatorState) ->
    validate_response_body('GetFulfillmentWarehousesResponse', 'GetFulfillmentWarehousesResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetFulfillmentWarehouses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);

validate_response('GetWarehouses', 200, Body, ValidatorState) ->
    validate_response_body('GetWarehousesResponse', 'GetWarehousesResponse', Body, ValidatorState);
validate_response('GetWarehouses', 400, Body, ValidatorState) ->
    validate_response_body('ApiClientDataErrorResponse', 'ApiClientDataErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 401, Body, ValidatorState) ->
    validate_response_body('ApiUnauthorizedErrorResponse', 'ApiUnauthorizedErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 403, Body, ValidatorState) ->
    validate_response_body('ApiForbiddenErrorResponse', 'ApiForbiddenErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 404, Body, ValidatorState) ->
    validate_response_body('ApiNotFoundErrorResponse', 'ApiNotFoundErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 420, Body, ValidatorState) ->
    validate_response_body('ApiLimitErrorResponse', 'ApiLimitErrorResponse', Body, ValidatorState);
validate_response('GetWarehouses', 500, Body, ValidatorState) ->
    validate_response_body('ApiServerErrorResponse', 'ApiServerErrorResponse', Body, ValidatorState);


validate_response(_OperationID, _Code, _Body, _ValidatorState) ->
    ok.

validate_response_body('list', ReturnBaseType, Body, ValidatorState) ->
    [
        validate(schema, ReturnBaseType, Item, ValidatorState)
    || Item <- Body];

validate_response_body(_, ReturnBaseType, Body, ValidatorState) ->
    validate(schema, ReturnBaseType, Body, ValidatorState).

%%%
validate(Rule = required, Name, Value, _ValidatorState) ->
    case Value of
        undefined -> validation_error(Rule, Name);
        _ -> ok
    end;

validate(not_required, _Name, _Value, _ValidatorState) ->
    ok;

validate(_, _Name, undefined, _ValidatorState) ->
    ok;

validate(Rule = {type, 'integer'}, Name, Value, _ValidatorState) ->
    try
        {ok, ympa_erlang_server_utils:to_int(Value)}
    catch
        error:badarg ->
            validation_error(Rule, Name)
    end;

validate(Rule = {type, 'float'}, Name, Value, _ValidatorState) ->
    try
        {ok, ympa_erlang_server_utils:to_float(Value)}
    catch
        error:badarg ->
            validation_error(Rule, Name)
    end;

validate(Rule = {type, 'binary'}, Name, Value, _ValidatorState) ->
    case is_binary(Value) of
        true -> ok;
        false -> validation_error(Rule, Name)
    end;

validate(_Rule = {type, 'boolean'}, _Name, Value, _ValidatorState) when is_boolean(Value) ->
    {ok, Value};

validate(Rule = {type, 'boolean'}, Name, Value, _ValidatorState) ->
    V = binary_to_lower(Value),
    try
        case binary_to_existing_atom(V, utf8) of
            B when is_boolean(B) -> {ok, B};
            _ -> validation_error(Rule, Name)
        end
    catch
        error:badarg ->
            validation_error(Rule, Name)
    end;

validate(Rule = {type, 'date'}, Name, Value, _ValidatorState) ->
    case is_binary(Value) of
        true -> ok;
        false -> validation_error(Rule, Name)
    end;

validate(Rule = {type, 'datetime'}, Name, Value, _ValidatorState) ->
    case is_binary(Value) of
        true -> ok;
        false -> validation_error(Rule, Name)
    end;

validate(Rule = {enum, Values}, Name, Value, _ValidatorState) ->
    try
        FormattedValue = erlang:binary_to_existing_atom(Value, utf8),
        case lists:member(FormattedValue, Values) of
            true -> {ok, FormattedValue};
            false -> validation_error(Rule, Name)
        end
    catch
        error:badarg ->
            validation_error(Rule, Name)
    end;

validate(Rule = {max, Max}, Name, Value, _ValidatorState) ->
    case Value =< Max of
        true -> ok;
        false -> validation_error(Rule, Name)
    end;

validate(Rule = {exclusive_max, ExclusiveMax}, Name, Value, _ValidatorState) ->
    case Value > ExclusiveMax of
        true -> ok;
        false -> validation_error(Rule, Name)
    end;

validate(Rule = {min, Min}, Name, Value, _ValidatorState) ->
    case Value >= Min of
        true -> ok;
        false -> validation_error(Rule, Name)
    end;

validate(Rule = {exclusive_min, ExclusiveMin}, Name, Value, _ValidatorState) ->
    case Value =< ExclusiveMin of
        true -> ok;
        false -> validation_error(Rule, Name)
    end;

validate(Rule = {max_length, MaxLength}, Name, Value, _ValidatorState) ->
    case size(Value) =< MaxLength of
        true -> ok;
        false -> validation_error(Rule, Name)
    end;

validate(Rule = {min_length, MinLength}, Name, Value, _ValidatorState) ->
    case size(Value) >= MinLength of
        true -> ok;
        false -> validation_error(Rule, Name)
    end;

validate(Rule = {pattern, Pattern}, Name, Value, _ValidatorState) ->
    {ok, MP} = re:compile(Pattern),
    case re:run(Value, MP) of
        {match, _} -> ok;
        _ -> validation_error(Rule, Name)
    end;

validate(Rule = schema, Name, Value, ValidatorState) ->
    Definition =  list_to_binary("#/components/schemas/" ++ ympa_erlang_server_utils:to_list(Name)),
    try
        _ = validate_with_schema(Value, Definition, ValidatorState),
        ok
    catch
        throw:[{schema_invalid, _, Error} | _] ->
            Info = #{
                type => schema_invalid,
                error => Error
            },
            validation_error(Rule, Name, Info);
        throw:[{data_invalid, Schema, Error, _, Path} | _] ->
            Info = #{
                type => data_invalid,
                error => Error,
                schema => Schema,
                path => Path
            },
            validation_error(Rule, Name, Info)
    end;

validate(Rule, Name, _Value, _ValidatorState) ->
    error_logger:info_msg("Can't validate ~p with ~p", [Name, Rule]),
    error({unknown_validation_rule, Rule}).

-spec validation_error(Rule :: any(), Name :: any()) -> no_return().

validation_error(ViolatedRule, Name) ->
    validation_error(ViolatedRule, Name, #{}).

-spec validation_error(Rule :: any(), Name :: any(), Info :: #{}) -> no_return().

validation_error(ViolatedRule, Name, Info) ->
    throw({wrong_param, Name, ViolatedRule, Info}).

-spec get_value(body | qs_val | header | binding, Name :: any(), Req0 :: cowboy_req:req()) ->
    {Value :: any(), Req :: cowboy_req:req()} |
    {error, Reason :: any(), Req :: cowboy_req:req()}.
get_value(body, _Name, Req0) ->
    {ok, Body, Req} = cowboy_req:read_body(Req0),
    case prepare_body(Body) of
        {error, Reason} ->
            {error, Reason, Req};
        Value ->
            {Value, Req}
    end;

get_value(qs_val, Name, Req) ->
    QS = cowboy_req:parse_qs(Req),
    Value = ympa_erlang_server_utils:get_opt(ympa_erlang_server_utils:to_qs(Name), QS),
    {Value, Req};

get_value(header, Name, Req) ->
    Headers = cowboy_req:headers(Req),
    Value =  maps:get(ympa_erlang_server_utils:to_header(Name), Headers, undefined),
    {Value, Req};

get_value(binding, Name, Req) ->
    Value = cowboy_req:binding(ympa_erlang_server_utils:to_binding(Name), Req),
    {Value, Req}.

prepare_body(Body) ->
    case Body of
        <<"">> -> <<"">>;
        _ ->
            try
                jsx:decode(Body, [return_maps])
            catch
              error:_ ->
                {error, {invalid_body, not_json, Body}}
            end
    end.

validate_with_schema(Body, Definition, ValidatorState) ->
    jesse_schema_validator:validate_with_state(
        [{<<"$ref">>, Definition}],
        Body,
        ValidatorState
    ).

prepare_param(Rules, Name, Value, ValidatorState) ->
    try
        Result = lists:foldl(
            fun(Rule, Acc) ->
                case validate(Rule, Name, Acc, ValidatorState) of
                    ok -> Acc;
                    {ok, Prepared} -> Prepared
                end
            end,
            Value,
            Rules
        ),
        {ok, Result}
    catch
        throw:Reason ->
            {error, Reason}
    end.

binary_to_lower(V) when is_binary(V) ->
    list_to_binary(string:to_lower(ympa_erlang_server_utils:to_list(V))).
