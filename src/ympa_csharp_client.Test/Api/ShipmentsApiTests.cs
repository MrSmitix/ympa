/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ympa_csharp_client.Client;
using ympa_csharp_client.Api;
// uncomment below to import models
//using ympa_csharp_client.Model;

namespace ympa_csharp_client.Test.Api
{
    /// <summary>
    ///  Class for testing ShipmentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ShipmentsApiTests : IDisposable
    {
        private ShipmentsApi instance;

        public ShipmentsApiTests()
        {
            instance = new ShipmentsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ShipmentsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ShipmentsApi
            //Assert.IsType<ShipmentsApi>(instance);
        }

        /// <summary>
        /// Test ConfirmShipment
        /// </summary>
        [Fact]
        public void ConfirmShipmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long shipmentId = null;
            //ConfirmShipmentRequest? confirmShipmentRequest = null;
            //var response = instance.ConfirmShipment(campaignId, shipmentId, confirmShipmentRequest);
            //Assert.IsType<EmptyApiResponse>(response);
        }

        /// <summary>
        /// Test DownloadShipmentAct
        /// </summary>
        [Fact]
        public void DownloadShipmentActTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long shipmentId = null;
            //var response = instance.DownloadShipmentAct(campaignId, shipmentId);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test DownloadShipmentDiscrepancyAct
        /// </summary>
        [Fact]
        public void DownloadShipmentDiscrepancyActTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long shipmentId = null;
            //var response = instance.DownloadShipmentDiscrepancyAct(campaignId, shipmentId);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test DownloadShipmentInboundAct
        /// </summary>
        [Fact]
        public void DownloadShipmentInboundActTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long shipmentId = null;
            //var response = instance.DownloadShipmentInboundAct(campaignId, shipmentId);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test DownloadShipmentPalletLabels
        /// </summary>
        [Fact]
        public void DownloadShipmentPalletLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long shipmentId = null;
            //ShipmentPalletLabelPageFormatType? format = null;
            //var response = instance.DownloadShipmentPalletLabels(campaignId, shipmentId, format);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test DownloadShipmentReceptionTransferAct
        /// </summary>
        [Fact]
        public void DownloadShipmentReceptionTransferActTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //int? warehouseId = null;
            //var response = instance.DownloadShipmentReceptionTransferAct(campaignId, warehouseId);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test DownloadShipmentTransportationWaybill
        /// </summary>
        [Fact]
        public void DownloadShipmentTransportationWaybillTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long shipmentId = null;
            //var response = instance.DownloadShipmentTransportationWaybill(campaignId, shipmentId);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetShipment
        /// </summary>
        [Fact]
        public void GetShipmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long shipmentId = null;
            //bool? cancelledOrders = null;
            //var response = instance.GetShipment(campaignId, shipmentId, cancelledOrders);
            //Assert.IsType<GetShipmentResponse>(response);
        }

        /// <summary>
        /// Test GetShipmentOrdersInfo
        /// </summary>
        [Fact]
        public void GetShipmentOrdersInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long shipmentId = null;
            //var response = instance.GetShipmentOrdersInfo(campaignId, shipmentId);
            //Assert.IsType<GetShipmentOrdersInfoResponse>(response);
        }

        /// <summary>
        /// Test SearchShipments
        /// </summary>
        [Fact]
        public void SearchShipmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //SearchShipmentsRequest searchShipmentsRequest = null;
            //string? pageToken = null;
            //int? limit = null;
            //var response = instance.SearchShipments(campaignId, searchShipmentsRequest, pageToken, limit);
            //Assert.IsType<SearchShipmentsResponse>(response);
        }

        /// <summary>
        /// Test SetShipmentPalletsCount
        /// </summary>
        [Fact]
        public void SetShipmentPalletsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long shipmentId = null;
            //SetShipmentPalletsCountRequest setShipmentPalletsCountRequest = null;
            //var response = instance.SetShipmentPalletsCount(campaignId, shipmentId, setShipmentPalletsCountRequest);
            //Assert.IsType<EmptyApiResponse>(response);
        }

        /// <summary>
        /// Test TransferOrdersFromShipment
        /// </summary>
        [Fact]
        public void TransferOrdersFromShipmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long shipmentId = null;
            //TransferOrdersFromShipmentRequest transferOrdersFromShipmentRequest = null;
            //var response = instance.TransferOrdersFromShipment(campaignId, shipmentId, transferOrdersFromShipmentRequest);
            //Assert.IsType<EmptyApiResponse>(response);
        }
    }
}
