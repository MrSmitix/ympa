/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ympa_csharp_client.Client;
using ympa_csharp_client.Api;
// uncomment below to import models
//using ympa_csharp_client.Model;

namespace ympa_csharp_client.Test.Api
{
    /// <summary>
    ///  Class for testing ChatsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ChatsApiTests : IDisposable
    {
        private ChatsApi instance;

        public ChatsApiTests()
        {
            instance = new ChatsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ChatsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ChatsApi
            //Assert.IsType<ChatsApi>(instance);
        }

        /// <summary>
        /// Test CreateChat
        /// </summary>
        [Fact]
        public void CreateChatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long businessId = null;
            //CreateChatRequest createChatRequest = null;
            //var response = instance.CreateChat(businessId, createChatRequest);
            //Assert.IsType<CreateChatResponse>(response);
        }

        /// <summary>
        /// Test GetChatHistory
        /// </summary>
        [Fact]
        public void GetChatHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long businessId = null;
            //long chatId = null;
            //GetChatHistoryRequest getChatHistoryRequest = null;
            //string? pageToken = null;
            //int? limit = null;
            //var response = instance.GetChatHistory(businessId, chatId, getChatHistoryRequest, pageToken, limit);
            //Assert.IsType<GetChatHistoryResponse>(response);
        }

        /// <summary>
        /// Test GetChats
        /// </summary>
        [Fact]
        public void GetChatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long businessId = null;
            //GetChatsRequest getChatsRequest = null;
            //string? pageToken = null;
            //int? limit = null;
            //var response = instance.GetChats(businessId, getChatsRequest, pageToken, limit);
            //Assert.IsType<GetChatsResponse>(response);
        }

        /// <summary>
        /// Test SendFileToChat
        /// </summary>
        [Fact]
        public void SendFileToChatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long businessId = null;
            //long chatId = null;
            //System.IO.Stream file = null;
            //var response = instance.SendFileToChat(businessId, chatId, file);
            //Assert.IsType<EmptyApiResponse>(response);
        }

        /// <summary>
        /// Test SendMessageToChat
        /// </summary>
        [Fact]
        public void SendMessageToChatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long businessId = null;
            //long chatId = null;
            //SendMessageToChatRequest sendMessageToChatRequest = null;
            //var response = instance.SendMessageToChat(businessId, chatId, sendMessageToChatRequest);
            //Assert.IsType<EmptyApiResponse>(response);
        }
    }
}
