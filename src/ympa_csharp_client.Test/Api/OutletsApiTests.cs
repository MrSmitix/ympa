/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ympa_csharp_client.Client;
using ympa_csharp_client.Api;
// uncomment below to import models
//using ympa_csharp_client.Model;

namespace ympa_csharp_client.Test.Api
{
    /// <summary>
    ///  Class for testing OutletsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OutletsApiTests : IDisposable
    {
        private OutletsApi instance;

        public OutletsApiTests()
        {
            instance = new OutletsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OutletsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' OutletsApi
            //Assert.IsType<OutletsApi>(instance);
        }

        /// <summary>
        /// Test CreateOutlet
        /// </summary>
        [Fact]
        public void CreateOutletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //ChangeOutletRequest changeOutletRequest = null;
            //var response = instance.CreateOutlet(campaignId, changeOutletRequest);
            //Assert.IsType<CreateOutletResponse>(response);
        }

        /// <summary>
        /// Test DeleteOutlet
        /// </summary>
        [Fact]
        public void DeleteOutletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long outletId = null;
            //var response = instance.DeleteOutlet(campaignId, outletId);
            //Assert.IsType<EmptyApiResponse>(response);
        }

        /// <summary>
        /// Test GetOutlet
        /// </summary>
        [Fact]
        public void GetOutletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long outletId = null;
            //var response = instance.GetOutlet(campaignId, outletId);
            //Assert.IsType<GetOutletResponse>(response);
        }

        /// <summary>
        /// Test GetOutlets
        /// </summary>
        [Fact]
        public void GetOutletsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //string? pageToken = null;
            //long? regionId = null;
            //string? shopOutletCode = null;
            //long? regionId2 = null;
            //var response = instance.GetOutlets(campaignId, pageToken, regionId, shopOutletCode, regionId2);
            //Assert.IsType<GetOutletsResponse>(response);
        }

        /// <summary>
        /// Test UpdateOutlet
        /// </summary>
        [Fact]
        public void UpdateOutletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long outletId = null;
            //ChangeOutletRequest changeOutletRequest = null;
            //var response = instance.UpdateOutlet(campaignId, outletId, changeOutletRequest);
            //Assert.IsType<EmptyApiResponse>(response);
        }
    }
}
