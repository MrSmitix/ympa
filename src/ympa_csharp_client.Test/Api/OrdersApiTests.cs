/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ympa_csharp_client.Client;
using ympa_csharp_client.Api;
// uncomment below to import models
//using ympa_csharp_client.Model;

namespace ympa_csharp_client.Test.Api
{
    /// <summary>
    ///  Class for testing OrdersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OrdersApiTests : IDisposable
    {
        private OrdersApi instance;

        public OrdersApiTests()
        {
            instance = new OrdersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OrdersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' OrdersApi
            //Assert.IsType<OrdersApi>(instance);
        }

        /// <summary>
        /// Test AcceptOrderCancellation
        /// </summary>
        [Fact]
        public void AcceptOrderCancellationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long orderId = null;
            //AcceptOrderCancellationRequest acceptOrderCancellationRequest = null;
            //var response = instance.AcceptOrderCancellation(campaignId, orderId, acceptOrderCancellationRequest);
            //Assert.IsType<EmptyApiResponse>(response);
        }

        /// <summary>
        /// Test GetOrder
        /// </summary>
        [Fact]
        public void GetOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long orderId = null;
            //var response = instance.GetOrder(campaignId, orderId);
            //Assert.IsType<GetOrderResponse>(response);
        }

        /// <summary>
        /// Test GetOrders
        /// </summary>
        [Fact]
        public void GetOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //List<long>? orderIds = null;
            //List<OrderStatusType>? status = null;
            //List<OrderSubstatusType>? substatus = null;
            //DateOnly? fromDate = null;
            //DateOnly? toDate = null;
            //DateOnly? supplierShipmentDateFrom = null;
            //DateOnly? supplierShipmentDateTo = null;
            //DateTime? updatedAtFrom = null;
            //DateTime? updatedAtTo = null;
            //OrderDeliveryDispatchType? dispatchType = null;
            //bool? fake = null;
            //bool? hasCis = null;
            //bool? onlyWaitingForCancellationApprove = null;
            //bool? onlyEstimatedDelivery = null;
            //OrderBuyerType? buyerType = null;
            //int? page = null;
            //int? pageSize = null;
            //string? pageToken = null;
            //int? limit = null;
            //var response = instance.GetOrders(campaignId, orderIds, status, substatus, fromDate, toDate, supplierShipmentDateFrom, supplierShipmentDateTo, updatedAtFrom, updatedAtTo, dispatchType, fake, hasCis, onlyWaitingForCancellationApprove, onlyEstimatedDelivery, buyerType, page, pageSize, pageToken, limit);
            //Assert.IsType<GetOrdersResponse>(response);
        }

        /// <summary>
        /// Test ProvideOrderDigitalCodes
        /// </summary>
        [Fact]
        public void ProvideOrderDigitalCodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long orderId = null;
            //ProvideOrderDigitalCodesRequest provideOrderDigitalCodesRequest = null;
            //var response = instance.ProvideOrderDigitalCodes(campaignId, orderId, provideOrderDigitalCodesRequest);
            //Assert.IsType<EmptyApiResponse>(response);
        }

        /// <summary>
        /// Test ProvideOrderItemIdentifiers
        /// </summary>
        [Fact]
        public void ProvideOrderItemIdentifiersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long orderId = null;
            //ProvideOrderItemIdentifiersRequest provideOrderItemIdentifiersRequest = null;
            //var response = instance.ProvideOrderItemIdentifiers(campaignId, orderId, provideOrderItemIdentifiersRequest);
            //Assert.IsType<ProvideOrderItemIdentifiersResponse>(response);
        }

        /// <summary>
        /// Test SetOrderBoxLayout
        /// </summary>
        [Fact]
        public void SetOrderBoxLayoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long orderId = null;
            //SetOrderBoxLayoutRequest setOrderBoxLayoutRequest = null;
            //var response = instance.SetOrderBoxLayout(campaignId, orderId, setOrderBoxLayoutRequest);
            //Assert.IsType<SetOrderBoxLayoutResponse>(response);
        }

        /// <summary>
        /// Test SetOrderShipmentBoxes
        /// </summary>
        [Fact]
        public void SetOrderShipmentBoxesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long orderId = null;
            //long shipmentId = null;
            //SetOrderShipmentBoxesRequest setOrderShipmentBoxesRequest = null;
            //var response = instance.SetOrderShipmentBoxes(campaignId, orderId, shipmentId, setOrderShipmentBoxesRequest);
            //Assert.IsType<SetOrderShipmentBoxesResponse>(response);
        }

        /// <summary>
        /// Test UpdateOrderItems
        /// </summary>
        [Fact]
        public void UpdateOrderItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long orderId = null;
            //UpdateOrderItemRequest updateOrderItemRequest = null;
            //instance.UpdateOrderItems(campaignId, orderId, updateOrderItemRequest);
        }

        /// <summary>
        /// Test UpdateOrderStatus
        /// </summary>
        [Fact]
        public void UpdateOrderStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //long orderId = null;
            //UpdateOrderStatusRequest updateOrderStatusRequest = null;
            //var response = instance.UpdateOrderStatus(campaignId, orderId, updateOrderStatusRequest);
            //Assert.IsType<UpdateOrderStatusResponse>(response);
        }

        /// <summary>
        /// Test UpdateOrderStatuses
        /// </summary>
        [Fact]
        public void UpdateOrderStatusesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long campaignId = null;
            //UpdateOrderStatusesRequest updateOrderStatusesRequest = null;
            //var response = instance.UpdateOrderStatuses(campaignId, updateOrderStatusesRequest);
            //Assert.IsType<UpdateOrderStatusesResponse>(response);
        }
    }
}
