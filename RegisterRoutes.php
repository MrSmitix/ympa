<?php

/**
 * Партнерский API Маркета
 * PHP version 8.x
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace OpenAPIServer;

class RegisterRoutes {

    static public function registerRoutes(\OpenAPIServer\Api\AbstractBidsApi|\OpenAPIServer\Api\AbstractBusinessOfferMappingsApi|\OpenAPIServer\Api\AbstractBusinessesApi|\OpenAPIServer\Api\AbstractCampaignsApi|\OpenAPIServer\Api\AbstractCategoriesApi|\OpenAPIServer\Api\AbstractChatsApi|\OpenAPIServer\Api\AbstractContentApi|\OpenAPIServer\Api\AbstractDbsApi|\OpenAPIServer\Api\AbstractDeliveryServicesApi|\OpenAPIServer\Api\AbstractExpressApi|\OpenAPIServer\Api\AbstractFbsApi|\OpenAPIServer\Api\AbstractFbyApi|\OpenAPIServer\Api\AbstractFeedbacksApi|\OpenAPIServer\Api\AbstractFeedsApi|\OpenAPIServer\Api\AbstractGoodsFeedbackApi|\OpenAPIServer\Api\AbstractGoodsStatsApi|\OpenAPIServer\Api\AbstractHiddenOffersApi|\OpenAPIServer\Api\AbstractModelsApi|\OpenAPIServer\Api\AbstractOfferMappingsApi|\OpenAPIServer\Api\AbstractOffersApi|\OpenAPIServer\Api\AbstractOrderBusinessInformationApi|\OpenAPIServer\Api\AbstractOrderDeliveryApi|\OpenAPIServer\Api\AbstractOrderLabelsApi|\OpenAPIServer\Api\AbstractOrdersApi|\OpenAPIServer\Api\AbstractOrdersStatsApi|\OpenAPIServer\Api\AbstractOutletLicensesApi|\OpenAPIServer\Api\AbstractOutletsApi|\OpenAPIServer\Api\AbstractPriceQuarantineApi|\OpenAPIServer\Api\AbstractPricesApi|\OpenAPIServer\Api\AbstractPromosApi|\OpenAPIServer\Api\AbstractRatingsApi|\OpenAPIServer\Api\AbstractRegionsApi|\OpenAPIServer\Api\AbstractReportsApi|\OpenAPIServer\Api\AbstractReturnsApi|\OpenAPIServer\Api\AbstractShipmentsApi|\OpenAPIServer\Api\AbstractStocksApi|\OpenAPIServer\Api\AbstractTariffsApi|\OpenAPIServer\Api\AbstractWarehousesApi $handler): void
    {
        $reflectionClass = new \ReflectionClass($handler);

        if (declaresMethod($reflectionClass, 'getBidsInfoForBusiness') && declaresMethod($reflectionClass, 'getBidsInfoForBusinessStream')) {
            throw new \Exception('Operation getBidsInfoForBusiness cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBidsInfoForBusiness')) {
            \Flight::route('POST /businesses/@businessId/bids/info', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBidsInfoForBusiness(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetBidsInfoRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBidsInfoForBusinessStream')) {
            \Flight::route('POST /businesses/@businessId/bids/info', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBidsInfoForBusinessStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetBidsInfoRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBidsRecommendations') && declaresMethod($reflectionClass, 'getBidsRecommendationsStream')) {
            throw new \Exception('Operation getBidsRecommendations cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBidsRecommendations')) {
            \Flight::route('POST /businesses/@businessId/bids/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBidsRecommendations(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetBidsRecommendationsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBidsRecommendationsStream')) {
            \Flight::route('POST /businesses/@businessId/bids/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBidsRecommendationsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetBidsRecommendationsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'putBidsForBusiness') && declaresMethod($reflectionClass, 'putBidsForBusinessStream')) {
            throw new \Exception('Operation putBidsForBusiness cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'putBidsForBusiness')) {
            \Flight::route('PUT /businesses/@businessId/bids', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->putBidsForBusiness(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'putBidsForBusinessStream')) {
            \Flight::route('PUT /businesses/@businessId/bids', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->putBidsForBusinessStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'putBidsForCampaign') && declaresMethod($reflectionClass, 'putBidsForCampaignStream')) {
            throw new \Exception('Operation putBidsForCampaign cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'putBidsForCampaign')) {
            \Flight::route('PUT /campaigns/@campaignId/bids', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->putBidsForCampaign(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'putBidsForCampaignStream')) {
            \Flight::route('PUT /campaigns/@campaignId/bids', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->putBidsForCampaignStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'addOffersToArchive') && declaresMethod($reflectionClass, 'addOffersToArchiveStream')) {
            throw new \Exception('Operation addOffersToArchive cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'addOffersToArchive')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/archive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->addOffersToArchive(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddOffersToArchiveRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'addOffersToArchiveStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/archive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->addOffersToArchiveStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddOffersToArchiveRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOffers') && declaresMethod($reflectionClass, 'deleteOffersStream')) {
            throw new \Exception('Operation deleteOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOffers')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOffersStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOffersFromArchive') && declaresMethod($reflectionClass, 'deleteOffersFromArchiveStream')) {
            throw new \Exception('Operation deleteOffersFromArchive cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOffersFromArchive')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/unarchive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOffersFromArchive(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersFromArchiveRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOffersFromArchiveStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/unarchive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOffersFromArchiveStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersFromArchiveRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferMappings') && declaresMethod($reflectionClass, 'getOfferMappingsStream')) {
            throw new \Exception('Operation getOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappings') && declaresMethod($reflectionClass, 'getSuggestedOfferMappingsStream')) {
            throw new \Exception('Operation getSuggestedOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/suggestions', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetSuggestedOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/suggestions', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetSuggestedOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferMappings') && declaresMethod($reflectionClass, 'updateOfferMappingsStream')) {
            throw new \Exception('Operation updateOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBusinessSettings') && declaresMethod($reflectionClass, 'getBusinessSettingsStream')) {
            throw new \Exception('Operation getBusinessSettings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBusinessSettings')) {
            \Flight::route('POST /businesses/@businessId/settings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBusinessSettings(
                    parseParam($businessId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBusinessSettingsStream')) {
            \Flight::route('POST /businesses/@businessId/settings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBusinessSettingsStream(
                    parseParam($businessId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaign') && declaresMethod($reflectionClass, 'getCampaignStream')) {
            throw new \Exception('Operation getCampaign cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaign')) {
            \Flight::route('GET /campaigns/@campaignId', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaign(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignStream')) {
            \Flight::route('GET /campaigns/@campaignId', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignLogins') && declaresMethod($reflectionClass, 'getCampaignLoginsStream')) {
            throw new \Exception('Operation getCampaignLogins cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignLogins')) {
            \Flight::route('GET /campaigns/@campaignId/logins', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignLogins(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignLoginsStream')) {
            \Flight::route('GET /campaigns/@campaignId/logins', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignLoginsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignRegion') && declaresMethod($reflectionClass, 'getCampaignRegionStream')) {
            throw new \Exception('Operation getCampaignRegion cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignRegion')) {
            \Flight::route('GET /campaigns/@campaignId/region', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignRegion(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignRegionStream')) {
            \Flight::route('GET /campaigns/@campaignId/region', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignRegionStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignSettings') && declaresMethod($reflectionClass, 'getCampaignSettingsStream')) {
            throw new \Exception('Operation getCampaignSettings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignSettings')) {
            \Flight::route('GET /campaigns/@campaignId/settings', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignSettings(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignSettingsStream')) {
            \Flight::route('GET /campaigns/@campaignId/settings', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignSettingsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaigns') && declaresMethod($reflectionClass, 'getCampaignsStream')) {
            throw new \Exception('Operation getCampaigns cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaigns')) {
            \Flight::route('GET /campaigns', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaigns(
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignsStream')) {
            \Flight::route('GET /campaigns', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignsStream(
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignsByLogin') && declaresMethod($reflectionClass, 'getCampaignsByLoginStream')) {
            throw new \Exception('Operation getCampaignsByLogin cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignsByLogin')) {
            \Flight::route('GET /campaigns/by_login/@login', function (string $login) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignsByLogin(
                    parseParam($login, 'string'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignsByLoginStream')) {
            \Flight::route('GET /campaigns/by_login/@login', function (string $login) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignsByLoginStream(
                    parseParam($login, 'string'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantum') && declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantumStream')) {
            throw new \Exception('Operation getCategoriesMaxSaleQuantum cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantum')) {
            \Flight::route('POST /categories/max-sale-quantum', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoriesMaxSaleQuantum(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCategoriesMaxSaleQuantumRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantumStream')) {
            \Flight::route('POST /categories/max-sale-quantum', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCategoriesMaxSaleQuantumStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCategoriesMaxSaleQuantumRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoriesTree') && declaresMethod($reflectionClass, 'getCategoriesTreeStream')) {
            throw new \Exception('Operation getCategoriesTree cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoriesTree')) {
            \Flight::route('POST /categories/tree', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoriesTree(
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetCategoriesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoriesTreeStream')) {
            \Flight::route('POST /categories/tree', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCategoriesTreeStream(
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetCategoriesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'createChat') && declaresMethod($reflectionClass, 'createChatStream')) {
            throw new \Exception('Operation createChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'createChat')) {
            \Flight::route('POST /businesses/@businessId/chats/new', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->createChat(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CreateChatRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'createChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/new', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->createChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CreateChatRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getChatHistory') && declaresMethod($reflectionClass, 'getChatHistoryStream')) {
            throw new \Exception('Operation getChatHistory cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getChatHistory')) {
            \Flight::route('POST /businesses/@businessId/chats/history', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getChatHistory(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatHistoryRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getChatHistoryStream')) {
            \Flight::route('POST /businesses/@businessId/chats/history', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getChatHistoryStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatHistoryRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getChats') && declaresMethod($reflectionClass, 'getChatsStream')) {
            throw new \Exception('Operation getChats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getChats')) {
            \Flight::route('POST /businesses/@businessId/chats', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getChats(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getChatsStream')) {
            \Flight::route('POST /businesses/@businessId/chats', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getChatsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'sendFileToChat') && declaresMethod($reflectionClass, 'sendFileToChatStream')) {
            throw new \Exception('Operation sendFileToChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'sendFileToChat')) {
            \Flight::route('POST /businesses/@businessId/chats/file/send', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->sendFileToChat(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'sendFileToChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/file/send', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->sendFileToChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'sendMessageToChat') && declaresMethod($reflectionClass, 'sendMessageToChatStream')) {
            throw new \Exception('Operation sendMessageToChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'sendMessageToChat')) {
            \Flight::route('POST /businesses/@businessId/chats/message', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->sendMessageToChat(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SendMessageToChatRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'sendMessageToChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/message', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->sendMessageToChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SendMessageToChatRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoryContentParameters') && declaresMethod($reflectionClass, 'getCategoryContentParametersStream')) {
            throw new \Exception('Operation getCategoryContentParameters cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoryContentParameters')) {
            \Flight::route('POST /category/@categoryId/parameters', function (string $categoryId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoryContentParameters(
                    parseParam($categoryId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoryContentParametersStream')) {
            \Flight::route('POST /category/@categoryId/parameters', function (string $categoryId) use ($handler) {
                $r = \Flight::request();
                $handler->getCategoryContentParametersStream(
                    parseParam($categoryId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatus') && declaresMethod($reflectionClass, 'getOfferCardsContentStatusStream')) {
            throw new \Exception('Operation getOfferCardsContentStatus cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatus')) {
            \Flight::route('POST /businesses/@businessId/offer-cards', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferCardsContentStatus(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferCardsContentStatusRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatusStream')) {
            \Flight::route('POST /businesses/@businessId/offer-cards', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferCardsContentStatusStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferCardsContentStatusRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferContent') && declaresMethod($reflectionClass, 'updateOfferContentStream')) {
            throw new \Exception('Operation updateOfferContent cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferContent')) {
            \Flight::route('POST /businesses/@businessId/offer-cards/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferContent(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferContentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferContentStream')) {
            \Flight::route('POST /businesses/@businessId/offer-cards/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferContentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferContentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'acceptOrderCancellation') && declaresMethod($reflectionClass, 'acceptOrderCancellationStream')) {
            throw new \Exception('Operation acceptOrderCancellation cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'acceptOrderCancellation')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/cancellation/accept', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->acceptOrderCancellation(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AcceptOrderCancellationRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'acceptOrderCancellationStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/cancellation/accept', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->acceptOrderCancellationStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AcceptOrderCancellationRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'addHiddenOffers') && declaresMethod($reflectionClass, 'addHiddenOffersStream')) {
            throw new \Exception('Operation addHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'addHiddenOffers')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->addHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddHiddenOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'addHiddenOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->addHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddHiddenOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'addOffersToArchive') && declaresMethod($reflectionClass, 'addOffersToArchiveStream')) {
            throw new \Exception('Operation addOffersToArchive cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'addOffersToArchive')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/archive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->addOffersToArchive(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddOffersToArchiveRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'addOffersToArchiveStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/archive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->addOffersToArchiveStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddOffersToArchiveRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'calculateTariffs') && declaresMethod($reflectionClass, 'calculateTariffsStream')) {
            throw new \Exception('Operation calculateTariffs cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'calculateTariffs')) {
            \Flight::route('POST /tariffs/calculate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->calculateTariffs(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CalculateTariffsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'calculateTariffsStream')) {
            \Flight::route('POST /tariffs/calculate', function () use ($handler) {
                $r = \Flight::request();
                $handler->calculateTariffsStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CalculateTariffsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmBusinessPrices') && declaresMethod($reflectionClass, 'confirmBusinessPricesStream')) {
            throw new \Exception('Operation confirmBusinessPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmBusinessPrices')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine/confirm', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmBusinessPrices(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmBusinessPricesStream')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine/confirm', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmBusinessPricesStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmCampaignPrices') && declaresMethod($reflectionClass, 'confirmCampaignPricesStream')) {
            throw new \Exception('Operation confirmCampaignPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmCampaignPrices')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine/confirm', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmCampaignPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmCampaignPricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine/confirm', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmCampaignPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'createChat') && declaresMethod($reflectionClass, 'createChatStream')) {
            throw new \Exception('Operation createChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'createChat')) {
            \Flight::route('POST /businesses/@businessId/chats/new', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->createChat(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CreateChatRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'createChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/new', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->createChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CreateChatRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'createOutlet') && declaresMethod($reflectionClass, 'createOutletStream')) {
            throw new \Exception('Operation createOutlet cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'createOutlet')) {
            \Flight::route('POST /campaigns/@campaignId/outlets', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->createOutlet(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ChangeOutletRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'createOutletStream')) {
            \Flight::route('POST /campaigns/@campaignId/outlets', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->createOutletStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ChangeOutletRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteCampaignOffers') && declaresMethod($reflectionClass, 'deleteCampaignOffersStream')) {
            throw new \Exception('Operation deleteCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteCampaignOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteCampaignOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackComment') && declaresMethod($reflectionClass, 'deleteGoodsFeedbackCommentStream')) {
            throw new \Exception('Operation deleteGoodsFeedbackComment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackComment')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteGoodsFeedbackComment(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteGoodsFeedbackCommentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackCommentStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteGoodsFeedbackCommentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteGoodsFeedbackCommentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteHiddenOffers') && declaresMethod($reflectionClass, 'deleteHiddenOffersStream')) {
            throw new \Exception('Operation deleteHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteHiddenOffers')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteHiddenOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteHiddenOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteHiddenOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOffers') && declaresMethod($reflectionClass, 'deleteOffersStream')) {
            throw new \Exception('Operation deleteOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOffers')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOffersStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOffersFromArchive') && declaresMethod($reflectionClass, 'deleteOffersFromArchiveStream')) {
            throw new \Exception('Operation deleteOffersFromArchive cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOffersFromArchive')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/unarchive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOffersFromArchive(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersFromArchiveRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOffersFromArchiveStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/unarchive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOffersFromArchiveStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersFromArchiveRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOutlet') && declaresMethod($reflectionClass, 'deleteOutletStream')) {
            throw new \Exception('Operation deleteOutlet cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOutlet')) {
            \Flight::route('DELETE /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOutlet(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOutletStream')) {
            \Flight::route('DELETE /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOutletStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOutletLicenses') && declaresMethod($reflectionClass, 'deleteOutletLicensesStream')) {
            throw new \Exception('Operation deleteOutletLicenses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOutletLicenses')) {
            \Flight::route('DELETE /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOutletLicenses(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['ids'] ?? null, '?array')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOutletLicensesStream')) {
            \Flight::route('DELETE /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOutletLicensesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['ids'] ?? null, '?array')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deletePromoOffers') && declaresMethod($reflectionClass, 'deletePromoOffersStream')) {
            throw new \Exception('Operation deletePromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deletePromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deletePromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeletePromoOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deletePromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deletePromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeletePromoOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReport') && declaresMethod($reflectionClass, 'generateBoostConsolidatedReportStream')) {
            throw new \Exception('Operation generateBoostConsolidatedReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReport')) {
            \Flight::route('POST /reports/boost-consolidated/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateBoostConsolidatedReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateBoostConsolidatedRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReportStream')) {
            \Flight::route('POST /reports/boost-consolidated/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateBoostConsolidatedReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateBoostConsolidatedRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReport') && declaresMethod($reflectionClass, 'generateCompetitorsPositionReportStream')) {
            throw new \Exception('Operation generateCompetitorsPositionReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReport')) {
            \Flight::route('POST /reports/competitors-position/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateCompetitorsPositionReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateCompetitorsPositionReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReportStream')) {
            \Flight::route('POST /reports/competitors-position/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateCompetitorsPositionReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateCompetitorsPositionReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReport') && declaresMethod($reflectionClass, 'generateGoodsFeedbackReportStream')) {
            throw new \Exception('Operation generateGoodsFeedbackReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReport')) {
            \Flight::route('POST /reports/goods-feedback/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsFeedbackReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsFeedbackRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReportStream')) {
            \Flight::route('POST /reports/goods-feedback/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsFeedbackReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsFeedbackRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReport') && declaresMethod($reflectionClass, 'generateMassOrderLabelsReportStream')) {
            throw new \Exception('Operation generateMassOrderLabelsReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReport')) {
            \Flight::route('POST /reports/documents/labels/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateMassOrderLabelsReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateMassOrderLabelsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReportStream')) {
            \Flight::route('POST /reports/documents/labels/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateMassOrderLabelsReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateMassOrderLabelsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateOrderLabel') && declaresMethod($reflectionClass, 'generateOrderLabelStream')) {
            throw new \Exception('Operation generateOrderLabel cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabel')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes/@boxId/label', function (string $campaignId, string $orderId, string $shipmentId, string $boxId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabel(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($boxId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabelStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes/@boxId/label', function (string $campaignId, string $orderId, string $shipmentId, string $boxId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabelStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($boxId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'generateOrderLabels') && declaresMethod($reflectionClass, 'generateOrderLabelsStream')) {
            throw new \Exception('Operation generateOrderLabels cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabels')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabels(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabelsStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabelsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'generatePricesReport') && declaresMethod($reflectionClass, 'generatePricesReportStream')) {
            throw new \Exception('Operation generatePricesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generatePricesReport')) {
            \Flight::route('POST /reports/prices/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generatePricesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GeneratePricesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generatePricesReportStream')) {
            \Flight::route('POST /reports/prices/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generatePricesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GeneratePricesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReport') && declaresMethod($reflectionClass, 'generateShelfsStatisticsReportStream')) {
            throw new \Exception('Operation generateShelfsStatisticsReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReport')) {
            \Flight::route('POST /reports/shelf-statistics/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShelfsStatisticsReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShelfsStatisticsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReportStream')) {
            \Flight::route('POST /reports/shelf-statistics/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShelfsStatisticsReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShelfsStatisticsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShowsSalesReport') && declaresMethod($reflectionClass, 'generateShowsSalesReportStream')) {
            throw new \Exception('Operation generateShowsSalesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShowsSalesReport')) {
            \Flight::route('POST /reports/shows-sales/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShowsSalesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShowsSalesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShowsSalesReportStream')) {
            \Flight::route('POST /reports/shows-sales/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShowsSalesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShowsSalesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReport') && declaresMethod($reflectionClass, 'generateStocksOnWarehousesReportStream')) {
            throw new \Exception('Operation generateStocksOnWarehousesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReport')) {
            \Flight::route('POST /reports/stocks-on-warehouses/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateStocksOnWarehousesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateStocksOnWarehousesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReportStream')) {
            \Flight::route('POST /reports/stocks-on-warehouses/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateStocksOnWarehousesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateStocksOnWarehousesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReport') && declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReportStream')) {
            throw new \Exception('Operation generateUnitedMarketplaceServicesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReport')) {
            \Flight::route('POST /reports/united-marketplace-services/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedMarketplaceServicesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedMarketplaceServicesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReportStream')) {
            \Flight::route('POST /reports/united-marketplace-services/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedMarketplaceServicesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedMarketplaceServicesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedNettingReport') && declaresMethod($reflectionClass, 'generateUnitedNettingReportStream')) {
            throw new \Exception('Operation generateUnitedNettingReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedNettingReport')) {
            \Flight::route('POST /reports/united-netting/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedNettingReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedNettingReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedNettingReportStream')) {
            \Flight::route('POST /reports/united-netting/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedNettingReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedNettingReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReport') && declaresMethod($reflectionClass, 'generateUnitedOrdersReportStream')) {
            throw new \Exception('Operation generateUnitedOrdersReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReport')) {
            \Flight::route('POST /reports/united-orders/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedOrdersReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedOrdersRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReportStream')) {
            \Flight::route('POST /reports/united-orders/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedOrdersReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedOrdersRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getAllOffers') && declaresMethod($reflectionClass, 'getAllOffersStream')) {
            throw new \Exception('Operation getAllOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getAllOffers')) {
            \Flight::route('GET /campaigns/@campaignId/offers/all', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getAllOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['chunk'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getAllOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/offers/all', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getAllOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['chunk'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBidsInfoForBusiness') && declaresMethod($reflectionClass, 'getBidsInfoForBusinessStream')) {
            throw new \Exception('Operation getBidsInfoForBusiness cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBidsInfoForBusiness')) {
            \Flight::route('POST /businesses/@businessId/bids/info', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBidsInfoForBusiness(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetBidsInfoRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBidsInfoForBusinessStream')) {
            \Flight::route('POST /businesses/@businessId/bids/info', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBidsInfoForBusinessStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetBidsInfoRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBidsRecommendations') && declaresMethod($reflectionClass, 'getBidsRecommendationsStream')) {
            throw new \Exception('Operation getBidsRecommendations cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBidsRecommendations')) {
            \Flight::route('POST /businesses/@businessId/bids/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBidsRecommendations(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetBidsRecommendationsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBidsRecommendationsStream')) {
            \Flight::route('POST /businesses/@businessId/bids/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBidsRecommendationsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetBidsRecommendationsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffers') && declaresMethod($reflectionClass, 'getBusinessQuarantineOffersStream')) {
            throw new \Exception('Operation getBusinessQuarantineOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffers')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBusinessQuarantineOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffersStream')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBusinessQuarantineOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBusinessSettings') && declaresMethod($reflectionClass, 'getBusinessSettingsStream')) {
            throw new \Exception('Operation getBusinessSettings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBusinessSettings')) {
            \Flight::route('POST /businesses/@businessId/settings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBusinessSettings(
                    parseParam($businessId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBusinessSettingsStream')) {
            \Flight::route('POST /businesses/@businessId/settings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBusinessSettingsStream(
                    parseParam($businessId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaign') && declaresMethod($reflectionClass, 'getCampaignStream')) {
            throw new \Exception('Operation getCampaign cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaign')) {
            \Flight::route('GET /campaigns/@campaignId', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaign(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignStream')) {
            \Flight::route('GET /campaigns/@campaignId', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignLogins') && declaresMethod($reflectionClass, 'getCampaignLoginsStream')) {
            throw new \Exception('Operation getCampaignLogins cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignLogins')) {
            \Flight::route('GET /campaigns/@campaignId/logins', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignLogins(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignLoginsStream')) {
            \Flight::route('GET /campaigns/@campaignId/logins', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignLoginsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignOffers') && declaresMethod($reflectionClass, 'getCampaignOffersStream')) {
            throw new \Exception('Operation getCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCampaignOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCampaignOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffers') && declaresMethod($reflectionClass, 'getCampaignQuarantineOffersStream')) {
            throw new \Exception('Operation getCampaignQuarantineOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffers')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignQuarantineOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignQuarantineOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignRegion') && declaresMethod($reflectionClass, 'getCampaignRegionStream')) {
            throw new \Exception('Operation getCampaignRegion cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignRegion')) {
            \Flight::route('GET /campaigns/@campaignId/region', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignRegion(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignRegionStream')) {
            \Flight::route('GET /campaigns/@campaignId/region', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignRegionStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignSettings') && declaresMethod($reflectionClass, 'getCampaignSettingsStream')) {
            throw new \Exception('Operation getCampaignSettings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignSettings')) {
            \Flight::route('GET /campaigns/@campaignId/settings', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignSettings(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignSettingsStream')) {
            \Flight::route('GET /campaigns/@campaignId/settings', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignSettingsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaigns') && declaresMethod($reflectionClass, 'getCampaignsStream')) {
            throw new \Exception('Operation getCampaigns cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaigns')) {
            \Flight::route('GET /campaigns', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaigns(
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignsStream')) {
            \Flight::route('GET /campaigns', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignsStream(
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignsByLogin') && declaresMethod($reflectionClass, 'getCampaignsByLoginStream')) {
            throw new \Exception('Operation getCampaignsByLogin cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignsByLogin')) {
            \Flight::route('GET /campaigns/by_login/@login', function (string $login) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignsByLogin(
                    parseParam($login, 'string'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignsByLoginStream')) {
            \Flight::route('GET /campaigns/by_login/@login', function (string $login) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignsByLoginStream(
                    parseParam($login, 'string'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantum') && declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantumStream')) {
            throw new \Exception('Operation getCategoriesMaxSaleQuantum cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantum')) {
            \Flight::route('POST /categories/max-sale-quantum', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoriesMaxSaleQuantum(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCategoriesMaxSaleQuantumRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantumStream')) {
            \Flight::route('POST /categories/max-sale-quantum', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCategoriesMaxSaleQuantumStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCategoriesMaxSaleQuantumRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoriesTree') && declaresMethod($reflectionClass, 'getCategoriesTreeStream')) {
            throw new \Exception('Operation getCategoriesTree cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoriesTree')) {
            \Flight::route('POST /categories/tree', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoriesTree(
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetCategoriesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoriesTreeStream')) {
            \Flight::route('POST /categories/tree', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCategoriesTreeStream(
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetCategoriesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoryContentParameters') && declaresMethod($reflectionClass, 'getCategoryContentParametersStream')) {
            throw new \Exception('Operation getCategoryContentParameters cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoryContentParameters')) {
            \Flight::route('POST /category/@categoryId/parameters', function (string $categoryId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoryContentParameters(
                    parseParam($categoryId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoryContentParametersStream')) {
            \Flight::route('POST /category/@categoryId/parameters', function (string $categoryId) use ($handler) {
                $r = \Flight::request();
                $handler->getCategoryContentParametersStream(
                    parseParam($categoryId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getChatHistory') && declaresMethod($reflectionClass, 'getChatHistoryStream')) {
            throw new \Exception('Operation getChatHistory cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getChatHistory')) {
            \Flight::route('POST /businesses/@businessId/chats/history', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getChatHistory(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatHistoryRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getChatHistoryStream')) {
            \Flight::route('POST /businesses/@businessId/chats/history', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getChatHistoryStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatHistoryRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getChats') && declaresMethod($reflectionClass, 'getChatsStream')) {
            throw new \Exception('Operation getChats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getChats')) {
            \Flight::route('POST /businesses/@businessId/chats', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getChats(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getChatsStream')) {
            \Flight::route('POST /businesses/@businessId/chats', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getChatsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getDeliveryServices') && declaresMethod($reflectionClass, 'getDeliveryServicesStream')) {
            throw new \Exception('Operation getDeliveryServices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getDeliveryServices')) {
            \Flight::route('GET /delivery/services', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getDeliveryServices(
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getDeliveryServicesStream')) {
            \Flight::route('GET /delivery/services', function () use ($handler) {
                $r = \Flight::request();
                $handler->getDeliveryServicesStream(
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeed') && declaresMethod($reflectionClass, 'getFeedStream')) {
            throw new \Exception('Operation getFeed cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeed')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeed(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeedIndexLogs') && declaresMethod($reflectionClass, 'getFeedIndexLogsStream')) {
            throw new \Exception('Operation getFeedIndexLogs cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeedIndexLogs')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId/index-logs', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeedIndexLogs(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['published_time_from'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['published_time_to'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['status'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedIndexLogsStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId/index-logs', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedIndexLogsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['published_time_from'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['published_time_to'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['status'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdates') && declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdatesStream')) {
            throw new \Exception('Operation getFeedbackAndCommentUpdates cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdates')) {
            \Flight::route('GET /campaigns/@campaignId/feedback/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeedbackAndCommentUpdates(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdatesStream')) {
            \Flight::route('GET /campaigns/@campaignId/feedback/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedbackAndCommentUpdatesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeeds') && declaresMethod($reflectionClass, 'getFeedsStream')) {
            throw new \Exception('Operation getFeeds cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeeds')) {
            \Flight::route('GET /campaigns/@campaignId/feeds', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeeds(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedsStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsFeedbackComments') && declaresMethod($reflectionClass, 'getGoodsFeedbackCommentsStream')) {
            throw new \Exception('Operation getGoodsFeedbackComments cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbackComments')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsFeedbackComments(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsFeedbackCommentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbackCommentsStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsFeedbackCommentsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsFeedbackCommentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsFeedbacks') && declaresMethod($reflectionClass, 'getGoodsFeedbacksStream')) {
            throw new \Exception('Operation getGoodsFeedbacks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbacks')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsFeedbacks(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetGoodsFeedbackRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbacksStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsFeedbacksStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetGoodsFeedbackRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsStats') && declaresMethod($reflectionClass, 'getGoodsStatsStream')) {
            throw new \Exception('Operation getGoodsStats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsStats')) {
            \Flight::route('POST /campaigns/@campaignId/stats/skus', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsStats(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsStatsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsStatsStream')) {
            \Flight::route('POST /campaigns/@campaignId/stats/skus', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsStatsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsStatsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getHiddenOffers') && declaresMethod($reflectionClass, 'getHiddenOffersStream')) {
            throw new \Exception('Operation getHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getHiddenOffers')) {
            \Flight::route('GET /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['offset'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getHiddenOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['offset'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getModel') && declaresMethod($reflectionClass, 'getModelStream')) {
            throw new \Exception('Operation getModel cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getModel')) {
            \Flight::route('GET /models/@modelId', function (string $modelId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getModel(
                    parseParam($modelId, 'int'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getModelStream')) {
            \Flight::route('GET /models/@modelId', function (string $modelId) use ($handler) {
                $r = \Flight::request();
                $handler->getModelStream(
                    parseParam($modelId, 'int'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getModelOffers') && declaresMethod($reflectionClass, 'getModelOffersStream')) {
            throw new \Exception('Operation getModelOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getModelOffers')) {
            \Flight::route('GET /models/@modelId/offers', function (string $modelId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getModelOffers(
                    parseParam($modelId, 'int'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['orderByPrice'] ?? null, ''), 
                    parseParam($r->query['count'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getModelOffersStream')) {
            \Flight::route('GET /models/@modelId/offers', function (string $modelId) use ($handler) {
                $r = \Flight::request();
                $handler->getModelOffersStream(
                    parseParam($modelId, 'int'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['orderByPrice'] ?? null, ''), 
                    parseParam($r->query['count'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getModels') && declaresMethod($reflectionClass, 'getModelsStream')) {
            throw new \Exception('Operation getModels cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getModels')) {
            \Flight::route('POST /models', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getModels(
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetModelsRequest'), 
                    parseParam($r->query['currency'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getModelsStream')) {
            \Flight::route('POST /models', function () use ($handler) {
                $r = \Flight::request();
                $handler->getModelsStream(
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetModelsRequest'), 
                    parseParam($r->query['currency'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getModelsOffers') && declaresMethod($reflectionClass, 'getModelsOffersStream')) {
            throw new \Exception('Operation getModelsOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getModelsOffers')) {
            \Flight::route('POST /models/offers', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getModelsOffers(
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetModelsRequest'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['orderByPrice'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getModelsOffersStream')) {
            \Flight::route('POST /models/offers', function () use ($handler) {
                $r = \Flight::request();
                $handler->getModelsOffersStream(
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetModelsRequest'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['orderByPrice'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatus') && declaresMethod($reflectionClass, 'getOfferCardsContentStatusStream')) {
            throw new \Exception('Operation getOfferCardsContentStatus cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatus')) {
            \Flight::route('POST /businesses/@businessId/offer-cards', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferCardsContentStatus(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferCardsContentStatusRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatusStream')) {
            \Flight::route('POST /businesses/@businessId/offer-cards', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferCardsContentStatusStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferCardsContentStatusRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferMappingEntries') && declaresMethod($reflectionClass, 'getOfferMappingEntriesStream')) {
            throw new \Exception('Operation getOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingEntries')) {
            \Flight::route('GET /campaigns/@campaignId/offer-mapping-entries', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['shop_sku'] ?? null, '?array'), 
                    parseParam($r->query['mapping_kind'] ?? null, ''), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['availability'] ?? null, '?array'), 
                    parseParam($r->query['category_id'] ?? null, '?array'), 
                    parseParam($r->query['vendor'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingEntriesStream')) {
            \Flight::route('GET /campaigns/@campaignId/offer-mapping-entries', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['shop_sku'] ?? null, '?array'), 
                    parseParam($r->query['mapping_kind'] ?? null, ''), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['availability'] ?? null, '?array'), 
                    parseParam($r->query['category_id'] ?? null, '?array'), 
                    parseParam($r->query['vendor'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferMappings') && declaresMethod($reflectionClass, 'getOfferMappingsStream')) {
            throw new \Exception('Operation getOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferRecommendations') && declaresMethod($reflectionClass, 'getOfferRecommendationsStream')) {
            throw new \Exception('Operation getOfferRecommendations cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferRecommendations')) {
            \Flight::route('POST /businesses/@businessId/offers/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferRecommendations(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetOfferRecommendationsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferRecommendationsStream')) {
            \Flight::route('POST /businesses/@businessId/offers/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferRecommendationsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetOfferRecommendationsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOffers') && declaresMethod($reflectionClass, 'getOffersStream')) {
            throw new \Exception('Operation getOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOffers')) {
            \Flight::route('GET /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['query'] ?? null, '?string'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['shopCategoryId'] ?? null, '?string'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['matched'] ?? null, '?bool'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['query'] ?? null, '?string'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['shopCategoryId'] ?? null, '?string'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['matched'] ?? null, '?bool'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrder') && declaresMethod($reflectionClass, 'getOrderStream')) {
            throw new \Exception('Operation getOrder cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrder')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrder(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfo') && declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfoStream')) {
            throw new \Exception('Operation getOrderBusinessBuyerInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfo')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/business-buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBusinessBuyerInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfoStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/business-buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBusinessBuyerInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfo') && declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfoStream')) {
            throw new \Exception('Operation getOrderBusinessDocumentsInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfo')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/documents', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBusinessDocumentsInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfoStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/documents', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBusinessDocumentsInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBuyerInfo') && declaresMethod($reflectionClass, 'getOrderBuyerInfoStream')) {
            throw new \Exception('Operation getOrderBuyerInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBuyerInfo')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBuyerInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBuyerInfoStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBuyerInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderLabelsData') && declaresMethod($reflectionClass, 'getOrderLabelsDataStream')) {
            throw new \Exception('Operation getOrderLabelsData cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderLabelsData')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels/data', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderLabelsData(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderLabelsDataStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels/data', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderLabelsDataStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrders') && declaresMethod($reflectionClass, 'getOrdersStream')) {
            throw new \Exception('Operation getOrders cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrders')) {
            \Flight::route('GET /campaigns/@campaignId/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrders(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['substatus'] ?? null, '?array'), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['dispatchType'] ?? null, ''), 
                    parseParam($r->query['fake'] ?? null, '?bool'), 
                    parseParam($r->query['hasCis'] ?? null, '?bool'), 
                    parseParam($r->query['onlyWaitingForCancellationApprove'] ?? null, '?bool'), 
                    parseParam($r->query['onlyEstimatedDelivery'] ?? null, '?bool'), 
                    parseParam($r->query['buyerType'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrdersStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrdersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['substatus'] ?? null, '?array'), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['dispatchType'] ?? null, ''), 
                    parseParam($r->query['fake'] ?? null, '?bool'), 
                    parseParam($r->query['hasCis'] ?? null, '?bool'), 
                    parseParam($r->query['onlyWaitingForCancellationApprove'] ?? null, '?bool'), 
                    parseParam($r->query['onlyEstimatedDelivery'] ?? null, '?bool'), 
                    parseParam($r->query['buyerType'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrdersStats') && declaresMethod($reflectionClass, 'getOrdersStatsStream')) {
            throw new \Exception('Operation getOrdersStats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrdersStats')) {
            \Flight::route('POST /campaigns/@campaignId/stats/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrdersStats(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOrdersStatsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrdersStatsStream')) {
            \Flight::route('POST /campaigns/@campaignId/stats/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrdersStatsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOrdersStatsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOutlet') && declaresMethod($reflectionClass, 'getOutletStream')) {
            throw new \Exception('Operation getOutlet cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOutlet')) {
            \Flight::route('GET /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOutlet(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOutletStream')) {
            \Flight::route('GET /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $handler->getOutletStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOutletLicenses') && declaresMethod($reflectionClass, 'getOutletLicensesStream')) {
            throw new \Exception('Operation getOutletLicenses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOutletLicenses')) {
            \Flight::route('GET /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOutletLicenses(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['outletIds'] ?? null, '?array'), 
                    parseParam($r->query['ids'] ?? null, '?array')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOutletLicensesStream')) {
            \Flight::route('GET /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOutletLicensesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['outletIds'] ?? null, '?array'), 
                    parseParam($r->query['ids'] ?? null, '?array')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOutlets') && declaresMethod($reflectionClass, 'getOutletsStream')) {
            throw new \Exception('Operation getOutlets cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOutlets')) {
            \Flight::route('GET /campaigns/@campaignId/outlets', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOutlets(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['region_id'] ?? null, '?int'), 
                    parseParam($r->query['shop_outlet_code'] ?? null, '?string'), 
                    parseParam($r->query['regionId'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOutletsStream')) {
            \Flight::route('GET /campaigns/@campaignId/outlets', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOutletsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['region_id'] ?? null, '?int'), 
                    parseParam($r->query['shop_outlet_code'] ?? null, '?string'), 
                    parseParam($r->query['regionId'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPrices') && declaresMethod($reflectionClass, 'getPricesStream')) {
            throw new \Exception('Operation getPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPrices')) {
            \Flight::route('GET /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['archived'] ?? null, '?bool')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPricesStream')) {
            \Flight::route('GET /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['archived'] ?? null, '?bool')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPricesByOfferIds') && declaresMethod($reflectionClass, 'getPricesByOfferIdsStream')) {
            throw new \Exception('Operation getPricesByOfferIds cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPricesByOfferIds')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPricesByOfferIds(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPricesByOfferIdsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPricesByOfferIdsStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getPricesByOfferIdsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPricesByOfferIdsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPromoOffers') && declaresMethod($reflectionClass, 'getPromoOffersStream')) {
            throw new \Exception('Operation getPromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetPromoOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getPromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetPromoOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPromos') && declaresMethod($reflectionClass, 'getPromosStream')) {
            throw new \Exception('Operation getPromos cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPromos')) {
            \Flight::route('POST /businesses/@businessId/promos', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPromos(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPromosRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPromosStream')) {
            \Flight::route('POST /businesses/@businessId/promos', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getPromosStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPromosRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getQualityRatingDetails') && declaresMethod($reflectionClass, 'getQualityRatingDetailsStream')) {
            throw new \Exception('Operation getQualityRatingDetails cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingDetails')) {
            \Flight::route('POST /campaigns/@campaignId/ratings/quality/details', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getQualityRatingDetails(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingDetailsStream')) {
            \Flight::route('POST /campaigns/@campaignId/ratings/quality/details', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getQualityRatingDetailsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getQualityRatings') && declaresMethod($reflectionClass, 'getQualityRatingsStream')) {
            throw new \Exception('Operation getQualityRatings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getQualityRatings')) {
            \Flight::route('POST /businesses/@businessId/ratings/quality', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getQualityRatings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQualityRatingRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingsStream')) {
            \Flight::route('POST /businesses/@businessId/ratings/quality', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getQualityRatingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQualityRatingRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReportInfo') && declaresMethod($reflectionClass, 'getReportInfoStream')) {
            throw new \Exception('Operation getReportInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReportInfo')) {
            \Flight::route('GET /reports/info/@reportId', function (string $reportId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReportInfo(
                    parseParam($reportId, 'string')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReportInfoStream')) {
            \Flight::route('GET /reports/info/@reportId', function (string $reportId) use ($handler) {
                $r = \Flight::request();
                $handler->getReportInfoStream(
                    parseParam($reportId, 'string')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReturn') && declaresMethod($reflectionClass, 'getReturnStream')) {
            throw new \Exception('Operation getReturn cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturn')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReturn(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReturnApplication') && declaresMethod($reflectionClass, 'getReturnApplicationStream')) {
            throw new \Exception('Operation getReturnApplication cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturnApplication')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/application', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnApplication(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnApplicationStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/application', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnApplicationStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'getReturnPhoto') && declaresMethod($reflectionClass, 'getReturnPhotoStream')) {
            throw new \Exception('Operation getReturnPhoto cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturnPhoto')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/@itemId/image/@imageHash', function (string $campaignId, string $orderId, string $returnId, string $itemId, string $imageHash) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnPhoto(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam($itemId, 'int'), 
                    parseParam($imageHash, 'string')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnPhotoStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/@itemId/image/@imageHash', function (string $campaignId, string $orderId, string $returnId, string $itemId, string $imageHash) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnPhotoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam($itemId, 'int'), 
                    parseParam($imageHash, 'string')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'getReturns') && declaresMethod($reflectionClass, 'getReturnsStream')) {
            throw new \Exception('Operation getReturns cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturns')) {
            \Flight::route('GET /campaigns/@campaignId/returns', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReturns(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['statuses'] ?? null, '?array'), 
                    parseParam($r->query['type'] ?? null, ''), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['to_date'] ?? null, '?\\DateTime')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnsStream')) {
            \Flight::route('GET /campaigns/@campaignId/returns', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['statuses'] ?? null, '?array'), 
                    parseParam($r->query['type'] ?? null, ''), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['to_date'] ?? null, '?\\DateTime')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getStocks') && declaresMethod($reflectionClass, 'getStocksStream')) {
            throw new \Exception('Operation getStocks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getStocks')) {
            \Flight::route('POST /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getStocks(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetWarehouseStocksRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getStocksStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getStocksStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetWarehouseStocksRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntries') && declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntriesStream')) {
            throw new \Exception('Operation getSuggestedOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntries')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetSuggestedOfferMappingEntriesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntriesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetSuggestedOfferMappingEntriesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappings') && declaresMethod($reflectionClass, 'getSuggestedOfferMappingsStream')) {
            throw new \Exception('Operation getSuggestedOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/suggestions', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetSuggestedOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/suggestions', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetSuggestedOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedPrices') && declaresMethod($reflectionClass, 'getSuggestedPricesStream')) {
            throw new \Exception('Operation getSuggestedPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedPrices')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SuggestPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedPricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SuggestPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getWarehouses') && declaresMethod($reflectionClass, 'getWarehousesStream')) {
            throw new \Exception('Operation getWarehouses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getWarehouses')) {
            \Flight::route('GET /businesses/@businessId/warehouses', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getWarehouses(
                    parseParam($businessId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getWarehousesStream')) {
            \Flight::route('GET /businesses/@businessId/warehouses', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getWarehousesStream(
                    parseParam($businessId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'provideOrderDigitalCodes') && declaresMethod($reflectionClass, 'provideOrderDigitalCodesStream')) {
            throw new \Exception('Operation provideOrderDigitalCodes cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'provideOrderDigitalCodes')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/deliverDigitalGoods', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->provideOrderDigitalCodes(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderDigitalCodesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'provideOrderDigitalCodesStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/deliverDigitalGoods', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->provideOrderDigitalCodesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderDigitalCodesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiers') && declaresMethod($reflectionClass, 'provideOrderItemIdentifiersStream')) {
            throw new \Exception('Operation provideOrderItemIdentifiers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiers')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/identifiers', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->provideOrderItemIdentifiers(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderItemIdentifiersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiersStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/identifiers', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->provideOrderItemIdentifiersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderItemIdentifiersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'putBidsForBusiness') && declaresMethod($reflectionClass, 'putBidsForBusinessStream')) {
            throw new \Exception('Operation putBidsForBusiness cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'putBidsForBusiness')) {
            \Flight::route('PUT /businesses/@businessId/bids', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->putBidsForBusiness(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'putBidsForBusinessStream')) {
            \Flight::route('PUT /businesses/@businessId/bids', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->putBidsForBusinessStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'putBidsForCampaign') && declaresMethod($reflectionClass, 'putBidsForCampaignStream')) {
            throw new \Exception('Operation putBidsForCampaign cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'putBidsForCampaign')) {
            \Flight::route('PUT /campaigns/@campaignId/bids', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->putBidsForCampaign(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'putBidsForCampaignStream')) {
            \Flight::route('PUT /campaigns/@campaignId/bids', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->putBidsForCampaignStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'refreshFeed') && declaresMethod($reflectionClass, 'refreshFeedStream')) {
            throw new \Exception('Operation refreshFeed cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'refreshFeed')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/refresh', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->refreshFeed(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'refreshFeedStream')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/refresh', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->refreshFeedStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchModels') && declaresMethod($reflectionClass, 'searchModelsStream')) {
            throw new \Exception('Operation searchModels cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchModels')) {
            \Flight::route('GET /models', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchModels(
                    parseParam($r->query['query'] ?? null, 'string'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchModelsStream')) {
            \Flight::route('GET /models', function () use ($handler) {
                $r = \Flight::request();
                $handler->searchModelsStream(
                    parseParam($r->query['query'] ?? null, 'string'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionChildren') && declaresMethod($reflectionClass, 'searchRegionChildrenStream')) {
            throw new \Exception('Operation searchRegionChildren cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionChildren')) {
            \Flight::route('GET /regions/@regionId/children', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionChildren(
                    parseParam($regionId, 'int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionChildrenStream')) {
            \Flight::route('GET /regions/@regionId/children', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionChildrenStream(
                    parseParam($regionId, 'int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionsById') && declaresMethod($reflectionClass, 'searchRegionsByIdStream')) {
            throw new \Exception('Operation searchRegionsById cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionsById')) {
            \Flight::route('GET /regions/@regionId', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionsById(
                    parseParam($regionId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByIdStream')) {
            \Flight::route('GET /regions/@regionId', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionsByIdStream(
                    parseParam($regionId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionsByName') && declaresMethod($reflectionClass, 'searchRegionsByNameStream')) {
            throw new \Exception('Operation searchRegionsByName cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByName')) {
            \Flight::route('GET /regions', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionsByName(
                    parseParam($r->query['name'] ?? null, 'string'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByNameStream')) {
            \Flight::route('GET /regions', function () use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionsByNameStream(
                    parseParam($r->query['name'] ?? null, 'string'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'sendFileToChat') && declaresMethod($reflectionClass, 'sendFileToChatStream')) {
            throw new \Exception('Operation sendFileToChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'sendFileToChat')) {
            \Flight::route('POST /businesses/@businessId/chats/file/send', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->sendFileToChat(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'sendFileToChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/file/send', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->sendFileToChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'sendMessageToChat') && declaresMethod($reflectionClass, 'sendMessageToChatStream')) {
            throw new \Exception('Operation sendMessageToChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'sendMessageToChat')) {
            \Flight::route('POST /businesses/@businessId/chats/message', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->sendMessageToChat(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SendMessageToChatRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'sendMessageToChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/message', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->sendMessageToChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SendMessageToChatRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setFeedParams') && declaresMethod($reflectionClass, 'setFeedParamsStream')) {
            throw new \Exception('Operation setFeedParams cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setFeedParams')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/params', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setFeedParams(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetFeedParamsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setFeedParamsStream')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/params', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->setFeedParamsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetFeedParamsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderBoxLayout') && declaresMethod($reflectionClass, 'setOrderBoxLayoutStream')) {
            throw new \Exception('Operation setOrderBoxLayout cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderBoxLayout')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/boxes', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderBoxLayout(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderBoxLayoutRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderBoxLayoutStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/boxes', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderBoxLayoutStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderBoxLayoutRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderDeliveryDate') && declaresMethod($reflectionClass, 'setOrderDeliveryDateStream')) {
            throw new \Exception('Operation setOrderDeliveryDate cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderDeliveryDate')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/date', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderDeliveryDate(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderDeliveryDateRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderDeliveryDateStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/date', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderDeliveryDateStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderDeliveryDateRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderDeliveryTrackCode') && declaresMethod($reflectionClass, 'setOrderDeliveryTrackCodeStream')) {
            throw new \Exception('Operation setOrderDeliveryTrackCode cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderDeliveryTrackCode')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/delivery/track', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderDeliveryTrackCode(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderDeliveryTrackCodeRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderDeliveryTrackCodeStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/delivery/track', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderDeliveryTrackCodeStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderDeliveryTrackCodeRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxes') && declaresMethod($reflectionClass, 'setOrderShipmentBoxesStream')) {
            throw new \Exception('Operation setOrderShipmentBoxes cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxes')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes', function (string $campaignId, string $orderId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderShipmentBoxes(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderShipmentBoxesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxesStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes', function (string $campaignId, string $orderId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderShipmentBoxesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderShipmentBoxesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setReturnDecision') && declaresMethod($reflectionClass, 'setReturnDecisionStream')) {
            throw new \Exception('Operation setReturnDecision cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setReturnDecision')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setReturnDecision(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetReturnDecisionRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setReturnDecisionStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->setReturnDecisionStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetReturnDecisionRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReaction') && declaresMethod($reflectionClass, 'skipGoodsFeedbacksReactionStream')) {
            throw new \Exception('Operation skipGoodsFeedbacksReaction cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReaction')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/skip-reaction', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->skipGoodsFeedbacksReaction(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SkipGoodsFeedbackReactionRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReactionStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/skip-reaction', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->skipGoodsFeedbacksReactionStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SkipGoodsFeedbackReactionRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'submitReturnDecision') && declaresMethod($reflectionClass, 'submitReturnDecisionStream')) {
            throw new \Exception('Operation submitReturnDecision cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'submitReturnDecision')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/submit', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->submitReturnDecision(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'submitReturnDecisionStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/submit', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->submitReturnDecisionStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateBusinessPrices') && declaresMethod($reflectionClass, 'updateBusinessPricesStream')) {
            throw new \Exception('Operation updateBusinessPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateBusinessPrices')) {
            \Flight::route('POST /businesses/@businessId/offer-prices/updates', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateBusinessPrices(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateBusinessPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateBusinessPricesStream')) {
            \Flight::route('POST /businesses/@businessId/offer-prices/updates', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateBusinessPricesStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateBusinessPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateCampaignOffers') && declaresMethod($reflectionClass, 'updateCampaignOffersStream')) {
            throw new \Exception('Operation updateCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers/update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateCampaignOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateCampaignOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackComment') && declaresMethod($reflectionClass, 'updateGoodsFeedbackCommentStream')) {
            throw new \Exception('Operation updateGoodsFeedbackComment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackComment')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateGoodsFeedbackComment(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateGoodsFeedbackCommentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackCommentStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateGoodsFeedbackCommentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateGoodsFeedbackCommentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferContent') && declaresMethod($reflectionClass, 'updateOfferContentStream')) {
            throw new \Exception('Operation updateOfferContent cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferContent')) {
            \Flight::route('POST /businesses/@businessId/offer-cards/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferContent(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferContentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferContentStream')) {
            \Flight::route('POST /businesses/@businessId/offer-cards/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferContentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferContentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferMappingEntries') && declaresMethod($reflectionClass, 'updateOfferMappingEntriesStream')) {
            throw new \Exception('Operation updateOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingEntries')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingEntryRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingEntriesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingEntryRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferMappings') && declaresMethod($reflectionClass, 'updateOfferMappingsStream')) {
            throw new \Exception('Operation updateOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOrderItems') && declaresMethod($reflectionClass, 'updateOrderItemsStream')) {
            throw new \Exception('Operation updateOrderItems cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderItems')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/items', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderItems(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderItemRequest')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderItemsStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/items', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderItemsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderItemRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'updateOrderStatus') && declaresMethod($reflectionClass, 'updateOrderStatusStream')) {
            throw new \Exception('Operation updateOrderStatus cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatus')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/status', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOrderStatus(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatusStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/status', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderStatusStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOrderStatuses') && declaresMethod($reflectionClass, 'updateOrderStatusesStream')) {
            throw new \Exception('Operation updateOrderStatuses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatuses')) {
            \Flight::route('POST /campaigns/@campaignId/orders/status-update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOrderStatuses(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatusesStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/status-update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderStatusesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOrderStorageLimit') && declaresMethod($reflectionClass, 'updateOrderStorageLimitStream')) {
            throw new \Exception('Operation updateOrderStorageLimit cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderStorageLimit')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/storage-limit', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOrderStorageLimit(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStorageLimitRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderStorageLimitStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/storage-limit', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderStorageLimitStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStorageLimitRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOutlet') && declaresMethod($reflectionClass, 'updateOutletStream')) {
            throw new \Exception('Operation updateOutlet cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOutlet')) {
            \Flight::route('PUT /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOutlet(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ChangeOutletRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOutletStream')) {
            \Flight::route('PUT /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOutletStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ChangeOutletRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOutletLicenses') && declaresMethod($reflectionClass, 'updateOutletLicensesStream')) {
            throw new \Exception('Operation updateOutletLicenses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOutletLicenses')) {
            \Flight::route('POST /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOutletLicenses(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOutletLicenseRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOutletLicensesStream')) {
            \Flight::route('POST /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOutletLicensesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOutletLicenseRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updatePrices') && declaresMethod($reflectionClass, 'updatePricesStream')) {
            throw new \Exception('Operation updatePrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updatePrices')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updatePrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updatePricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updatePricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updatePromoOffers') && declaresMethod($reflectionClass, 'updatePromoOffersStream')) {
            throw new \Exception('Operation updatePromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updatePromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updatePromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePromoOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updatePromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updatePromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePromoOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateStocks') && declaresMethod($reflectionClass, 'updateStocksStream')) {
            throw new \Exception('Operation updateStocks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateStocks')) {
            \Flight::route('PUT /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateStocks(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateStocksRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateStocksStream')) {
            \Flight::route('PUT /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateStocksStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateStocksRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getDeliveryServices') && declaresMethod($reflectionClass, 'getDeliveryServicesStream')) {
            throw new \Exception('Operation getDeliveryServices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getDeliveryServices')) {
            \Flight::route('GET /delivery/services', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getDeliveryServices(
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getDeliveryServicesStream')) {
            \Flight::route('GET /delivery/services', function () use ($handler) {
                $r = \Flight::request();
                $handler->getDeliveryServicesStream(
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'addHiddenOffers') && declaresMethod($reflectionClass, 'addHiddenOffersStream')) {
            throw new \Exception('Operation addHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'addHiddenOffers')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->addHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddHiddenOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'addHiddenOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->addHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddHiddenOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'addOffersToArchive') && declaresMethod($reflectionClass, 'addOffersToArchiveStream')) {
            throw new \Exception('Operation addOffersToArchive cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'addOffersToArchive')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/archive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->addOffersToArchive(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddOffersToArchiveRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'addOffersToArchiveStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/archive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->addOffersToArchiveStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddOffersToArchiveRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'calculateTariffs') && declaresMethod($reflectionClass, 'calculateTariffsStream')) {
            throw new \Exception('Operation calculateTariffs cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'calculateTariffs')) {
            \Flight::route('POST /tariffs/calculate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->calculateTariffs(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CalculateTariffsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'calculateTariffsStream')) {
            \Flight::route('POST /tariffs/calculate', function () use ($handler) {
                $r = \Flight::request();
                $handler->calculateTariffsStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CalculateTariffsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmBusinessPrices') && declaresMethod($reflectionClass, 'confirmBusinessPricesStream')) {
            throw new \Exception('Operation confirmBusinessPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmBusinessPrices')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine/confirm', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmBusinessPrices(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmBusinessPricesStream')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine/confirm', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmBusinessPricesStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmCampaignPrices') && declaresMethod($reflectionClass, 'confirmCampaignPricesStream')) {
            throw new \Exception('Operation confirmCampaignPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmCampaignPrices')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine/confirm', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmCampaignPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmCampaignPricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine/confirm', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmCampaignPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'createChat') && declaresMethod($reflectionClass, 'createChatStream')) {
            throw new \Exception('Operation createChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'createChat')) {
            \Flight::route('POST /businesses/@businessId/chats/new', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->createChat(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CreateChatRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'createChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/new', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->createChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CreateChatRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteCampaignOffers') && declaresMethod($reflectionClass, 'deleteCampaignOffersStream')) {
            throw new \Exception('Operation deleteCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteCampaignOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteCampaignOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackComment') && declaresMethod($reflectionClass, 'deleteGoodsFeedbackCommentStream')) {
            throw new \Exception('Operation deleteGoodsFeedbackComment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackComment')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteGoodsFeedbackComment(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteGoodsFeedbackCommentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackCommentStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteGoodsFeedbackCommentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteGoodsFeedbackCommentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteHiddenOffers') && declaresMethod($reflectionClass, 'deleteHiddenOffersStream')) {
            throw new \Exception('Operation deleteHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteHiddenOffers')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteHiddenOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteHiddenOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteHiddenOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOffers') && declaresMethod($reflectionClass, 'deleteOffersStream')) {
            throw new \Exception('Operation deleteOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOffers')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOffersStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOffersFromArchive') && declaresMethod($reflectionClass, 'deleteOffersFromArchiveStream')) {
            throw new \Exception('Operation deleteOffersFromArchive cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOffersFromArchive')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/unarchive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOffersFromArchive(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersFromArchiveRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOffersFromArchiveStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/unarchive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOffersFromArchiveStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersFromArchiveRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deletePromoOffers') && declaresMethod($reflectionClass, 'deletePromoOffersStream')) {
            throw new \Exception('Operation deletePromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deletePromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deletePromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeletePromoOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deletePromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deletePromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeletePromoOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReport') && declaresMethod($reflectionClass, 'generateBoostConsolidatedReportStream')) {
            throw new \Exception('Operation generateBoostConsolidatedReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReport')) {
            \Flight::route('POST /reports/boost-consolidated/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateBoostConsolidatedReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateBoostConsolidatedRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReportStream')) {
            \Flight::route('POST /reports/boost-consolidated/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateBoostConsolidatedReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateBoostConsolidatedRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReport') && declaresMethod($reflectionClass, 'generateCompetitorsPositionReportStream')) {
            throw new \Exception('Operation generateCompetitorsPositionReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReport')) {
            \Flight::route('POST /reports/competitors-position/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateCompetitorsPositionReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateCompetitorsPositionReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReportStream')) {
            \Flight::route('POST /reports/competitors-position/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateCompetitorsPositionReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateCompetitorsPositionReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReport') && declaresMethod($reflectionClass, 'generateGoodsFeedbackReportStream')) {
            throw new \Exception('Operation generateGoodsFeedbackReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReport')) {
            \Flight::route('POST /reports/goods-feedback/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsFeedbackReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsFeedbackRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReportStream')) {
            \Flight::route('POST /reports/goods-feedback/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsFeedbackReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsFeedbackRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReport') && declaresMethod($reflectionClass, 'generateGoodsRealizationReportStream')) {
            throw new \Exception('Operation generateGoodsRealizationReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReport')) {
            \Flight::route('POST /reports/goods-realization/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsRealizationReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsRealizationReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReportStream')) {
            \Flight::route('POST /reports/goods-realization/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsRealizationReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsRealizationReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReport') && declaresMethod($reflectionClass, 'generateMassOrderLabelsReportStream')) {
            throw new \Exception('Operation generateMassOrderLabelsReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReport')) {
            \Flight::route('POST /reports/documents/labels/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateMassOrderLabelsReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateMassOrderLabelsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReportStream')) {
            \Flight::route('POST /reports/documents/labels/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateMassOrderLabelsReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateMassOrderLabelsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateOrderLabel') && declaresMethod($reflectionClass, 'generateOrderLabelStream')) {
            throw new \Exception('Operation generateOrderLabel cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabel')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes/@boxId/label', function (string $campaignId, string $orderId, string $shipmentId, string $boxId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabel(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($boxId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabelStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes/@boxId/label', function (string $campaignId, string $orderId, string $shipmentId, string $boxId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabelStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($boxId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'generateOrderLabels') && declaresMethod($reflectionClass, 'generateOrderLabelsStream')) {
            throw new \Exception('Operation generateOrderLabels cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabels')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabels(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabelsStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabelsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'generatePricesReport') && declaresMethod($reflectionClass, 'generatePricesReportStream')) {
            throw new \Exception('Operation generatePricesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generatePricesReport')) {
            \Flight::route('POST /reports/prices/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generatePricesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GeneratePricesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generatePricesReportStream')) {
            \Flight::route('POST /reports/prices/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generatePricesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GeneratePricesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReport') && declaresMethod($reflectionClass, 'generateShelfsStatisticsReportStream')) {
            throw new \Exception('Operation generateShelfsStatisticsReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReport')) {
            \Flight::route('POST /reports/shelf-statistics/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShelfsStatisticsReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShelfsStatisticsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReportStream')) {
            \Flight::route('POST /reports/shelf-statistics/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShelfsStatisticsReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShelfsStatisticsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShowsSalesReport') && declaresMethod($reflectionClass, 'generateShowsSalesReportStream')) {
            throw new \Exception('Operation generateShowsSalesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShowsSalesReport')) {
            \Flight::route('POST /reports/shows-sales/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShowsSalesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShowsSalesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShowsSalesReportStream')) {
            \Flight::route('POST /reports/shows-sales/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShowsSalesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShowsSalesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReport') && declaresMethod($reflectionClass, 'generateStocksOnWarehousesReportStream')) {
            throw new \Exception('Operation generateStocksOnWarehousesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReport')) {
            \Flight::route('POST /reports/stocks-on-warehouses/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateStocksOnWarehousesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateStocksOnWarehousesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReportStream')) {
            \Flight::route('POST /reports/stocks-on-warehouses/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateStocksOnWarehousesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateStocksOnWarehousesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReport') && declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReportStream')) {
            throw new \Exception('Operation generateUnitedMarketplaceServicesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReport')) {
            \Flight::route('POST /reports/united-marketplace-services/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedMarketplaceServicesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedMarketplaceServicesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReportStream')) {
            \Flight::route('POST /reports/united-marketplace-services/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedMarketplaceServicesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedMarketplaceServicesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedNettingReport') && declaresMethod($reflectionClass, 'generateUnitedNettingReportStream')) {
            throw new \Exception('Operation generateUnitedNettingReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedNettingReport')) {
            \Flight::route('POST /reports/united-netting/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedNettingReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedNettingReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedNettingReportStream')) {
            \Flight::route('POST /reports/united-netting/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedNettingReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedNettingReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReport') && declaresMethod($reflectionClass, 'generateUnitedOrdersReportStream')) {
            throw new \Exception('Operation generateUnitedOrdersReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReport')) {
            \Flight::route('POST /reports/united-orders/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedOrdersReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedOrdersRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReportStream')) {
            \Flight::route('POST /reports/united-orders/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedOrdersReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedOrdersRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getAllOffers') && declaresMethod($reflectionClass, 'getAllOffersStream')) {
            throw new \Exception('Operation getAllOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getAllOffers')) {
            \Flight::route('GET /campaigns/@campaignId/offers/all', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getAllOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['chunk'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getAllOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/offers/all', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getAllOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['chunk'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBidsInfoForBusiness') && declaresMethod($reflectionClass, 'getBidsInfoForBusinessStream')) {
            throw new \Exception('Operation getBidsInfoForBusiness cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBidsInfoForBusiness')) {
            \Flight::route('POST /businesses/@businessId/bids/info', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBidsInfoForBusiness(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetBidsInfoRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBidsInfoForBusinessStream')) {
            \Flight::route('POST /businesses/@businessId/bids/info', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBidsInfoForBusinessStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetBidsInfoRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBidsRecommendations') && declaresMethod($reflectionClass, 'getBidsRecommendationsStream')) {
            throw new \Exception('Operation getBidsRecommendations cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBidsRecommendations')) {
            \Flight::route('POST /businesses/@businessId/bids/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBidsRecommendations(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetBidsRecommendationsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBidsRecommendationsStream')) {
            \Flight::route('POST /businesses/@businessId/bids/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBidsRecommendationsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetBidsRecommendationsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffers') && declaresMethod($reflectionClass, 'getBusinessQuarantineOffersStream')) {
            throw new \Exception('Operation getBusinessQuarantineOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffers')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBusinessQuarantineOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffersStream')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBusinessQuarantineOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBusinessSettings') && declaresMethod($reflectionClass, 'getBusinessSettingsStream')) {
            throw new \Exception('Operation getBusinessSettings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBusinessSettings')) {
            \Flight::route('POST /businesses/@businessId/settings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBusinessSettings(
                    parseParam($businessId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBusinessSettingsStream')) {
            \Flight::route('POST /businesses/@businessId/settings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBusinessSettingsStream(
                    parseParam($businessId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaign') && declaresMethod($reflectionClass, 'getCampaignStream')) {
            throw new \Exception('Operation getCampaign cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaign')) {
            \Flight::route('GET /campaigns/@campaignId', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaign(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignStream')) {
            \Flight::route('GET /campaigns/@campaignId', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignLogins') && declaresMethod($reflectionClass, 'getCampaignLoginsStream')) {
            throw new \Exception('Operation getCampaignLogins cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignLogins')) {
            \Flight::route('GET /campaigns/@campaignId/logins', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignLogins(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignLoginsStream')) {
            \Flight::route('GET /campaigns/@campaignId/logins', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignLoginsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignOffers') && declaresMethod($reflectionClass, 'getCampaignOffersStream')) {
            throw new \Exception('Operation getCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCampaignOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCampaignOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffers') && declaresMethod($reflectionClass, 'getCampaignQuarantineOffersStream')) {
            throw new \Exception('Operation getCampaignQuarantineOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffers')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignQuarantineOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignQuarantineOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignRegion') && declaresMethod($reflectionClass, 'getCampaignRegionStream')) {
            throw new \Exception('Operation getCampaignRegion cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignRegion')) {
            \Flight::route('GET /campaigns/@campaignId/region', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignRegion(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignRegionStream')) {
            \Flight::route('GET /campaigns/@campaignId/region', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignRegionStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignSettings') && declaresMethod($reflectionClass, 'getCampaignSettingsStream')) {
            throw new \Exception('Operation getCampaignSettings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignSettings')) {
            \Flight::route('GET /campaigns/@campaignId/settings', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignSettings(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignSettingsStream')) {
            \Flight::route('GET /campaigns/@campaignId/settings', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignSettingsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaigns') && declaresMethod($reflectionClass, 'getCampaignsStream')) {
            throw new \Exception('Operation getCampaigns cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaigns')) {
            \Flight::route('GET /campaigns', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaigns(
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignsStream')) {
            \Flight::route('GET /campaigns', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignsStream(
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignsByLogin') && declaresMethod($reflectionClass, 'getCampaignsByLoginStream')) {
            throw new \Exception('Operation getCampaignsByLogin cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignsByLogin')) {
            \Flight::route('GET /campaigns/by_login/@login', function (string $login) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignsByLogin(
                    parseParam($login, 'string'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignsByLoginStream')) {
            \Flight::route('GET /campaigns/by_login/@login', function (string $login) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignsByLoginStream(
                    parseParam($login, 'string'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantum') && declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantumStream')) {
            throw new \Exception('Operation getCategoriesMaxSaleQuantum cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantum')) {
            \Flight::route('POST /categories/max-sale-quantum', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoriesMaxSaleQuantum(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCategoriesMaxSaleQuantumRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantumStream')) {
            \Flight::route('POST /categories/max-sale-quantum', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCategoriesMaxSaleQuantumStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCategoriesMaxSaleQuantumRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoriesTree') && declaresMethod($reflectionClass, 'getCategoriesTreeStream')) {
            throw new \Exception('Operation getCategoriesTree cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoriesTree')) {
            \Flight::route('POST /categories/tree', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoriesTree(
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetCategoriesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoriesTreeStream')) {
            \Flight::route('POST /categories/tree', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCategoriesTreeStream(
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetCategoriesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoryContentParameters') && declaresMethod($reflectionClass, 'getCategoryContentParametersStream')) {
            throw new \Exception('Operation getCategoryContentParameters cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoryContentParameters')) {
            \Flight::route('POST /category/@categoryId/parameters', function (string $categoryId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoryContentParameters(
                    parseParam($categoryId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoryContentParametersStream')) {
            \Flight::route('POST /category/@categoryId/parameters', function (string $categoryId) use ($handler) {
                $r = \Flight::request();
                $handler->getCategoryContentParametersStream(
                    parseParam($categoryId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getChatHistory') && declaresMethod($reflectionClass, 'getChatHistoryStream')) {
            throw new \Exception('Operation getChatHistory cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getChatHistory')) {
            \Flight::route('POST /businesses/@businessId/chats/history', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getChatHistory(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatHistoryRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getChatHistoryStream')) {
            \Flight::route('POST /businesses/@businessId/chats/history', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getChatHistoryStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatHistoryRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getChats') && declaresMethod($reflectionClass, 'getChatsStream')) {
            throw new \Exception('Operation getChats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getChats')) {
            \Flight::route('POST /businesses/@businessId/chats', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getChats(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getChatsStream')) {
            \Flight::route('POST /businesses/@businessId/chats', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getChatsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getDeliveryServices') && declaresMethod($reflectionClass, 'getDeliveryServicesStream')) {
            throw new \Exception('Operation getDeliveryServices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getDeliveryServices')) {
            \Flight::route('GET /delivery/services', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getDeliveryServices(
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getDeliveryServicesStream')) {
            \Flight::route('GET /delivery/services', function () use ($handler) {
                $r = \Flight::request();
                $handler->getDeliveryServicesStream(
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeed') && declaresMethod($reflectionClass, 'getFeedStream')) {
            throw new \Exception('Operation getFeed cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeed')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeed(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeedIndexLogs') && declaresMethod($reflectionClass, 'getFeedIndexLogsStream')) {
            throw new \Exception('Operation getFeedIndexLogs cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeedIndexLogs')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId/index-logs', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeedIndexLogs(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['published_time_from'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['published_time_to'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['status'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedIndexLogsStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId/index-logs', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedIndexLogsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['published_time_from'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['published_time_to'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['status'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdates') && declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdatesStream')) {
            throw new \Exception('Operation getFeedbackAndCommentUpdates cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdates')) {
            \Flight::route('GET /campaigns/@campaignId/feedback/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeedbackAndCommentUpdates(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdatesStream')) {
            \Flight::route('GET /campaigns/@campaignId/feedback/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedbackAndCommentUpdatesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeeds') && declaresMethod($reflectionClass, 'getFeedsStream')) {
            throw new \Exception('Operation getFeeds cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeeds')) {
            \Flight::route('GET /campaigns/@campaignId/feeds', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeeds(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedsStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsFeedbackComments') && declaresMethod($reflectionClass, 'getGoodsFeedbackCommentsStream')) {
            throw new \Exception('Operation getGoodsFeedbackComments cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbackComments')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsFeedbackComments(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsFeedbackCommentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbackCommentsStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsFeedbackCommentsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsFeedbackCommentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsFeedbacks') && declaresMethod($reflectionClass, 'getGoodsFeedbacksStream')) {
            throw new \Exception('Operation getGoodsFeedbacks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbacks')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsFeedbacks(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetGoodsFeedbackRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbacksStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsFeedbacksStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetGoodsFeedbackRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsStats') && declaresMethod($reflectionClass, 'getGoodsStatsStream')) {
            throw new \Exception('Operation getGoodsStats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsStats')) {
            \Flight::route('POST /campaigns/@campaignId/stats/skus', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsStats(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsStatsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsStatsStream')) {
            \Flight::route('POST /campaigns/@campaignId/stats/skus', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsStatsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsStatsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getHiddenOffers') && declaresMethod($reflectionClass, 'getHiddenOffersStream')) {
            throw new \Exception('Operation getHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getHiddenOffers')) {
            \Flight::route('GET /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['offset'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getHiddenOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['offset'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatus') && declaresMethod($reflectionClass, 'getOfferCardsContentStatusStream')) {
            throw new \Exception('Operation getOfferCardsContentStatus cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatus')) {
            \Flight::route('POST /businesses/@businessId/offer-cards', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferCardsContentStatus(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferCardsContentStatusRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatusStream')) {
            \Flight::route('POST /businesses/@businessId/offer-cards', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferCardsContentStatusStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferCardsContentStatusRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferMappingEntries') && declaresMethod($reflectionClass, 'getOfferMappingEntriesStream')) {
            throw new \Exception('Operation getOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingEntries')) {
            \Flight::route('GET /campaigns/@campaignId/offer-mapping-entries', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['shop_sku'] ?? null, '?array'), 
                    parseParam($r->query['mapping_kind'] ?? null, ''), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['availability'] ?? null, '?array'), 
                    parseParam($r->query['category_id'] ?? null, '?array'), 
                    parseParam($r->query['vendor'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingEntriesStream')) {
            \Flight::route('GET /campaigns/@campaignId/offer-mapping-entries', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['shop_sku'] ?? null, '?array'), 
                    parseParam($r->query['mapping_kind'] ?? null, ''), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['availability'] ?? null, '?array'), 
                    parseParam($r->query['category_id'] ?? null, '?array'), 
                    parseParam($r->query['vendor'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferMappings') && declaresMethod($reflectionClass, 'getOfferMappingsStream')) {
            throw new \Exception('Operation getOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferRecommendations') && declaresMethod($reflectionClass, 'getOfferRecommendationsStream')) {
            throw new \Exception('Operation getOfferRecommendations cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferRecommendations')) {
            \Flight::route('POST /businesses/@businessId/offers/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferRecommendations(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetOfferRecommendationsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferRecommendationsStream')) {
            \Flight::route('POST /businesses/@businessId/offers/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferRecommendationsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetOfferRecommendationsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOffers') && declaresMethod($reflectionClass, 'getOffersStream')) {
            throw new \Exception('Operation getOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOffers')) {
            \Flight::route('GET /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['query'] ?? null, '?string'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['shopCategoryId'] ?? null, '?string'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['matched'] ?? null, '?bool'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['query'] ?? null, '?string'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['shopCategoryId'] ?? null, '?string'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['matched'] ?? null, '?bool'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrder') && declaresMethod($reflectionClass, 'getOrderStream')) {
            throw new \Exception('Operation getOrder cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrder')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrder(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfo') && declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfoStream')) {
            throw new \Exception('Operation getOrderBusinessBuyerInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfo')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/business-buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBusinessBuyerInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfoStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/business-buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBusinessBuyerInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfo') && declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfoStream')) {
            throw new \Exception('Operation getOrderBusinessDocumentsInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfo')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/documents', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBusinessDocumentsInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfoStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/documents', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBusinessDocumentsInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderLabelsData') && declaresMethod($reflectionClass, 'getOrderLabelsDataStream')) {
            throw new \Exception('Operation getOrderLabelsData cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderLabelsData')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels/data', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderLabelsData(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderLabelsDataStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels/data', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderLabelsDataStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrders') && declaresMethod($reflectionClass, 'getOrdersStream')) {
            throw new \Exception('Operation getOrders cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrders')) {
            \Flight::route('GET /campaigns/@campaignId/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrders(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['substatus'] ?? null, '?array'), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['dispatchType'] ?? null, ''), 
                    parseParam($r->query['fake'] ?? null, '?bool'), 
                    parseParam($r->query['hasCis'] ?? null, '?bool'), 
                    parseParam($r->query['onlyWaitingForCancellationApprove'] ?? null, '?bool'), 
                    parseParam($r->query['onlyEstimatedDelivery'] ?? null, '?bool'), 
                    parseParam($r->query['buyerType'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrdersStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrdersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['substatus'] ?? null, '?array'), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['dispatchType'] ?? null, ''), 
                    parseParam($r->query['fake'] ?? null, '?bool'), 
                    parseParam($r->query['hasCis'] ?? null, '?bool'), 
                    parseParam($r->query['onlyWaitingForCancellationApprove'] ?? null, '?bool'), 
                    parseParam($r->query['onlyEstimatedDelivery'] ?? null, '?bool'), 
                    parseParam($r->query['buyerType'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrdersStats') && declaresMethod($reflectionClass, 'getOrdersStatsStream')) {
            throw new \Exception('Operation getOrdersStats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrdersStats')) {
            \Flight::route('POST /campaigns/@campaignId/stats/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrdersStats(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOrdersStatsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrdersStatsStream')) {
            \Flight::route('POST /campaigns/@campaignId/stats/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrdersStatsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOrdersStatsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPrices') && declaresMethod($reflectionClass, 'getPricesStream')) {
            throw new \Exception('Operation getPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPrices')) {
            \Flight::route('GET /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['archived'] ?? null, '?bool')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPricesStream')) {
            \Flight::route('GET /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['archived'] ?? null, '?bool')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPricesByOfferIds') && declaresMethod($reflectionClass, 'getPricesByOfferIdsStream')) {
            throw new \Exception('Operation getPricesByOfferIds cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPricesByOfferIds')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPricesByOfferIds(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPricesByOfferIdsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPricesByOfferIdsStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getPricesByOfferIdsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPricesByOfferIdsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPromoOffers') && declaresMethod($reflectionClass, 'getPromoOffersStream')) {
            throw new \Exception('Operation getPromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetPromoOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getPromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetPromoOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPromos') && declaresMethod($reflectionClass, 'getPromosStream')) {
            throw new \Exception('Operation getPromos cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPromos')) {
            \Flight::route('POST /businesses/@businessId/promos', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPromos(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPromosRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPromosStream')) {
            \Flight::route('POST /businesses/@businessId/promos', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getPromosStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPromosRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getQualityRatingDetails') && declaresMethod($reflectionClass, 'getQualityRatingDetailsStream')) {
            throw new \Exception('Operation getQualityRatingDetails cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingDetails')) {
            \Flight::route('POST /campaigns/@campaignId/ratings/quality/details', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getQualityRatingDetails(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingDetailsStream')) {
            \Flight::route('POST /campaigns/@campaignId/ratings/quality/details', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getQualityRatingDetailsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getQualityRatings') && declaresMethod($reflectionClass, 'getQualityRatingsStream')) {
            throw new \Exception('Operation getQualityRatings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getQualityRatings')) {
            \Flight::route('POST /businesses/@businessId/ratings/quality', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getQualityRatings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQualityRatingRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingsStream')) {
            \Flight::route('POST /businesses/@businessId/ratings/quality', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getQualityRatingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQualityRatingRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReportInfo') && declaresMethod($reflectionClass, 'getReportInfoStream')) {
            throw new \Exception('Operation getReportInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReportInfo')) {
            \Flight::route('GET /reports/info/@reportId', function (string $reportId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReportInfo(
                    parseParam($reportId, 'string')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReportInfoStream')) {
            \Flight::route('GET /reports/info/@reportId', function (string $reportId) use ($handler) {
                $r = \Flight::request();
                $handler->getReportInfoStream(
                    parseParam($reportId, 'string')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReturn') && declaresMethod($reflectionClass, 'getReturnStream')) {
            throw new \Exception('Operation getReturn cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturn')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReturn(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReturnApplication') && declaresMethod($reflectionClass, 'getReturnApplicationStream')) {
            throw new \Exception('Operation getReturnApplication cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturnApplication')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/application', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnApplication(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnApplicationStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/application', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnApplicationStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'getReturnPhoto') && declaresMethod($reflectionClass, 'getReturnPhotoStream')) {
            throw new \Exception('Operation getReturnPhoto cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturnPhoto')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/@itemId/image/@imageHash', function (string $campaignId, string $orderId, string $returnId, string $itemId, string $imageHash) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnPhoto(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam($itemId, 'int'), 
                    parseParam($imageHash, 'string')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnPhotoStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/@itemId/image/@imageHash', function (string $campaignId, string $orderId, string $returnId, string $itemId, string $imageHash) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnPhotoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam($itemId, 'int'), 
                    parseParam($imageHash, 'string')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'getReturns') && declaresMethod($reflectionClass, 'getReturnsStream')) {
            throw new \Exception('Operation getReturns cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturns')) {
            \Flight::route('GET /campaigns/@campaignId/returns', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReturns(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['statuses'] ?? null, '?array'), 
                    parseParam($r->query['type'] ?? null, ''), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['to_date'] ?? null, '?\\DateTime')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnsStream')) {
            \Flight::route('GET /campaigns/@campaignId/returns', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['statuses'] ?? null, '?array'), 
                    parseParam($r->query['type'] ?? null, ''), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['to_date'] ?? null, '?\\DateTime')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getStocks') && declaresMethod($reflectionClass, 'getStocksStream')) {
            throw new \Exception('Operation getStocks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getStocks')) {
            \Flight::route('POST /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getStocks(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetWarehouseStocksRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getStocksStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getStocksStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetWarehouseStocksRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntries') && declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntriesStream')) {
            throw new \Exception('Operation getSuggestedOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntries')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetSuggestedOfferMappingEntriesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntriesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetSuggestedOfferMappingEntriesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappings') && declaresMethod($reflectionClass, 'getSuggestedOfferMappingsStream')) {
            throw new \Exception('Operation getSuggestedOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/suggestions', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetSuggestedOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/suggestions', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetSuggestedOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedPrices') && declaresMethod($reflectionClass, 'getSuggestedPricesStream')) {
            throw new \Exception('Operation getSuggestedPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedPrices')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SuggestPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedPricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SuggestPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getWarehouses') && declaresMethod($reflectionClass, 'getWarehousesStream')) {
            throw new \Exception('Operation getWarehouses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getWarehouses')) {
            \Flight::route('GET /businesses/@businessId/warehouses', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getWarehouses(
                    parseParam($businessId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getWarehousesStream')) {
            \Flight::route('GET /businesses/@businessId/warehouses', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getWarehousesStream(
                    parseParam($businessId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiers') && declaresMethod($reflectionClass, 'provideOrderItemIdentifiersStream')) {
            throw new \Exception('Operation provideOrderItemIdentifiers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiers')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/identifiers', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->provideOrderItemIdentifiers(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderItemIdentifiersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiersStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/identifiers', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->provideOrderItemIdentifiersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderItemIdentifiersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'putBidsForBusiness') && declaresMethod($reflectionClass, 'putBidsForBusinessStream')) {
            throw new \Exception('Operation putBidsForBusiness cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'putBidsForBusiness')) {
            \Flight::route('PUT /businesses/@businessId/bids', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->putBidsForBusiness(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'putBidsForBusinessStream')) {
            \Flight::route('PUT /businesses/@businessId/bids', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->putBidsForBusinessStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'putBidsForCampaign') && declaresMethod($reflectionClass, 'putBidsForCampaignStream')) {
            throw new \Exception('Operation putBidsForCampaign cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'putBidsForCampaign')) {
            \Flight::route('PUT /campaigns/@campaignId/bids', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->putBidsForCampaign(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'putBidsForCampaignStream')) {
            \Flight::route('PUT /campaigns/@campaignId/bids', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->putBidsForCampaignStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'refreshFeed') && declaresMethod($reflectionClass, 'refreshFeedStream')) {
            throw new \Exception('Operation refreshFeed cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'refreshFeed')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/refresh', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->refreshFeed(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'refreshFeedStream')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/refresh', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->refreshFeedStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionChildren') && declaresMethod($reflectionClass, 'searchRegionChildrenStream')) {
            throw new \Exception('Operation searchRegionChildren cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionChildren')) {
            \Flight::route('GET /regions/@regionId/children', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionChildren(
                    parseParam($regionId, 'int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionChildrenStream')) {
            \Flight::route('GET /regions/@regionId/children', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionChildrenStream(
                    parseParam($regionId, 'int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionsById') && declaresMethod($reflectionClass, 'searchRegionsByIdStream')) {
            throw new \Exception('Operation searchRegionsById cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionsById')) {
            \Flight::route('GET /regions/@regionId', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionsById(
                    parseParam($regionId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByIdStream')) {
            \Flight::route('GET /regions/@regionId', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionsByIdStream(
                    parseParam($regionId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionsByName') && declaresMethod($reflectionClass, 'searchRegionsByNameStream')) {
            throw new \Exception('Operation searchRegionsByName cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByName')) {
            \Flight::route('GET /regions', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionsByName(
                    parseParam($r->query['name'] ?? null, 'string'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByNameStream')) {
            \Flight::route('GET /regions', function () use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionsByNameStream(
                    parseParam($r->query['name'] ?? null, 'string'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'sendFileToChat') && declaresMethod($reflectionClass, 'sendFileToChatStream')) {
            throw new \Exception('Operation sendFileToChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'sendFileToChat')) {
            \Flight::route('POST /businesses/@businessId/chats/file/send', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->sendFileToChat(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'sendFileToChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/file/send', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->sendFileToChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'sendMessageToChat') && declaresMethod($reflectionClass, 'sendMessageToChatStream')) {
            throw new \Exception('Operation sendMessageToChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'sendMessageToChat')) {
            \Flight::route('POST /businesses/@businessId/chats/message', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->sendMessageToChat(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SendMessageToChatRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'sendMessageToChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/message', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->sendMessageToChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SendMessageToChatRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setFeedParams') && declaresMethod($reflectionClass, 'setFeedParamsStream')) {
            throw new \Exception('Operation setFeedParams cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setFeedParams')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/params', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setFeedParams(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetFeedParamsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setFeedParamsStream')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/params', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->setFeedParamsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetFeedParamsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderBoxLayout') && declaresMethod($reflectionClass, 'setOrderBoxLayoutStream')) {
            throw new \Exception('Operation setOrderBoxLayout cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderBoxLayout')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/boxes', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderBoxLayout(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderBoxLayoutRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderBoxLayoutStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/boxes', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderBoxLayoutStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderBoxLayoutRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxes') && declaresMethod($reflectionClass, 'setOrderShipmentBoxesStream')) {
            throw new \Exception('Operation setOrderShipmentBoxes cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxes')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes', function (string $campaignId, string $orderId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderShipmentBoxes(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderShipmentBoxesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxesStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes', function (string $campaignId, string $orderId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderShipmentBoxesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderShipmentBoxesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReaction') && declaresMethod($reflectionClass, 'skipGoodsFeedbacksReactionStream')) {
            throw new \Exception('Operation skipGoodsFeedbacksReaction cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReaction')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/skip-reaction', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->skipGoodsFeedbacksReaction(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SkipGoodsFeedbackReactionRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReactionStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/skip-reaction', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->skipGoodsFeedbacksReactionStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SkipGoodsFeedbackReactionRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateBusinessPrices') && declaresMethod($reflectionClass, 'updateBusinessPricesStream')) {
            throw new \Exception('Operation updateBusinessPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateBusinessPrices')) {
            \Flight::route('POST /businesses/@businessId/offer-prices/updates', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateBusinessPrices(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateBusinessPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateBusinessPricesStream')) {
            \Flight::route('POST /businesses/@businessId/offer-prices/updates', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateBusinessPricesStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateBusinessPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateCampaignOffers') && declaresMethod($reflectionClass, 'updateCampaignOffersStream')) {
            throw new \Exception('Operation updateCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers/update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateCampaignOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateCampaignOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackComment') && declaresMethod($reflectionClass, 'updateGoodsFeedbackCommentStream')) {
            throw new \Exception('Operation updateGoodsFeedbackComment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackComment')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateGoodsFeedbackComment(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateGoodsFeedbackCommentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackCommentStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateGoodsFeedbackCommentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateGoodsFeedbackCommentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferContent') && declaresMethod($reflectionClass, 'updateOfferContentStream')) {
            throw new \Exception('Operation updateOfferContent cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferContent')) {
            \Flight::route('POST /businesses/@businessId/offer-cards/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferContent(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferContentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferContentStream')) {
            \Flight::route('POST /businesses/@businessId/offer-cards/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferContentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferContentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferMappingEntries') && declaresMethod($reflectionClass, 'updateOfferMappingEntriesStream')) {
            throw new \Exception('Operation updateOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingEntries')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingEntryRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingEntriesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingEntryRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferMappings') && declaresMethod($reflectionClass, 'updateOfferMappingsStream')) {
            throw new \Exception('Operation updateOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOrderItems') && declaresMethod($reflectionClass, 'updateOrderItemsStream')) {
            throw new \Exception('Operation updateOrderItems cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderItems')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/items', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderItems(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderItemRequest')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderItemsStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/items', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderItemsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderItemRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'updateOrderStatus') && declaresMethod($reflectionClass, 'updateOrderStatusStream')) {
            throw new \Exception('Operation updateOrderStatus cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatus')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/status', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOrderStatus(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatusStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/status', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderStatusStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOrderStatuses') && declaresMethod($reflectionClass, 'updateOrderStatusesStream')) {
            throw new \Exception('Operation updateOrderStatuses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatuses')) {
            \Flight::route('POST /campaigns/@campaignId/orders/status-update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOrderStatuses(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatusesStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/status-update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderStatusesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updatePrices') && declaresMethod($reflectionClass, 'updatePricesStream')) {
            throw new \Exception('Operation updatePrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updatePrices')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updatePrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updatePricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updatePricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updatePromoOffers') && declaresMethod($reflectionClass, 'updatePromoOffersStream')) {
            throw new \Exception('Operation updatePromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updatePromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updatePromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePromoOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updatePromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updatePromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePromoOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateStocks') && declaresMethod($reflectionClass, 'updateStocksStream')) {
            throw new \Exception('Operation updateStocks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateStocks')) {
            \Flight::route('PUT /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateStocks(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateStocksRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateStocksStream')) {
            \Flight::route('PUT /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateStocksStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateStocksRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'verifyOrderEac') && declaresMethod($reflectionClass, 'verifyOrderEacStream')) {
            throw new \Exception('Operation verifyOrderEac cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'verifyOrderEac')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/verifyEac', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->verifyOrderEac(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\VerifyOrderEacRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'verifyOrderEacStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/verifyEac', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->verifyOrderEacStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\VerifyOrderEacRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'addHiddenOffers') && declaresMethod($reflectionClass, 'addHiddenOffersStream')) {
            throw new \Exception('Operation addHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'addHiddenOffers')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->addHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddHiddenOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'addHiddenOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->addHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddHiddenOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'addOffersToArchive') && declaresMethod($reflectionClass, 'addOffersToArchiveStream')) {
            throw new \Exception('Operation addOffersToArchive cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'addOffersToArchive')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/archive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->addOffersToArchive(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddOffersToArchiveRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'addOffersToArchiveStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/archive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->addOffersToArchiveStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddOffersToArchiveRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'calculateTariffs') && declaresMethod($reflectionClass, 'calculateTariffsStream')) {
            throw new \Exception('Operation calculateTariffs cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'calculateTariffs')) {
            \Flight::route('POST /tariffs/calculate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->calculateTariffs(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CalculateTariffsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'calculateTariffsStream')) {
            \Flight::route('POST /tariffs/calculate', function () use ($handler) {
                $r = \Flight::request();
                $handler->calculateTariffsStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CalculateTariffsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmBusinessPrices') && declaresMethod($reflectionClass, 'confirmBusinessPricesStream')) {
            throw new \Exception('Operation confirmBusinessPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmBusinessPrices')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine/confirm', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmBusinessPrices(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmBusinessPricesStream')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine/confirm', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmBusinessPricesStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmCampaignPrices') && declaresMethod($reflectionClass, 'confirmCampaignPricesStream')) {
            throw new \Exception('Operation confirmCampaignPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmCampaignPrices')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine/confirm', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmCampaignPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmCampaignPricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine/confirm', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmCampaignPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmShipment') && declaresMethod($reflectionClass, 'confirmShipmentStream')) {
            throw new \Exception('Operation confirmShipment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmShipment')) {
            \Flight::route('POST /campaigns/@campaignId/first-mile/shipments/@shipmentId/confirm', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmShipment(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\ConfirmShipmentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmShipmentStream')) {
            \Flight::route('POST /campaigns/@campaignId/first-mile/shipments/@shipmentId/confirm', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmShipmentStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\ConfirmShipmentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'createChat') && declaresMethod($reflectionClass, 'createChatStream')) {
            throw new \Exception('Operation createChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'createChat')) {
            \Flight::route('POST /businesses/@businessId/chats/new', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->createChat(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CreateChatRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'createChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/new', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->createChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CreateChatRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteCampaignOffers') && declaresMethod($reflectionClass, 'deleteCampaignOffersStream')) {
            throw new \Exception('Operation deleteCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteCampaignOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteCampaignOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackComment') && declaresMethod($reflectionClass, 'deleteGoodsFeedbackCommentStream')) {
            throw new \Exception('Operation deleteGoodsFeedbackComment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackComment')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteGoodsFeedbackComment(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteGoodsFeedbackCommentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackCommentStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteGoodsFeedbackCommentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteGoodsFeedbackCommentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteHiddenOffers') && declaresMethod($reflectionClass, 'deleteHiddenOffersStream')) {
            throw new \Exception('Operation deleteHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteHiddenOffers')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteHiddenOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteHiddenOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteHiddenOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOffers') && declaresMethod($reflectionClass, 'deleteOffersStream')) {
            throw new \Exception('Operation deleteOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOffers')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOffersStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOffersFromArchive') && declaresMethod($reflectionClass, 'deleteOffersFromArchiveStream')) {
            throw new \Exception('Operation deleteOffersFromArchive cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOffersFromArchive')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/unarchive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOffersFromArchive(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersFromArchiveRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOffersFromArchiveStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/unarchive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOffersFromArchiveStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersFromArchiveRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deletePromoOffers') && declaresMethod($reflectionClass, 'deletePromoOffersStream')) {
            throw new \Exception('Operation deletePromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deletePromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deletePromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeletePromoOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deletePromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deletePromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeletePromoOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentAct') && declaresMethod($reflectionClass, 'downloadShipmentActStream')) {
            throw new \Exception('Operation downloadShipmentAct cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentAct')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentAct(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentActStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentActStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentDiscrepancyAct') && declaresMethod($reflectionClass, 'downloadShipmentDiscrepancyActStream')) {
            throw new \Exception('Operation downloadShipmentDiscrepancyAct cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentDiscrepancyAct')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/discrepancy-act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentDiscrepancyAct(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentDiscrepancyActStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/discrepancy-act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentDiscrepancyActStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentInboundAct') && declaresMethod($reflectionClass, 'downloadShipmentInboundActStream')) {
            throw new \Exception('Operation downloadShipmentInboundAct cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentInboundAct')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/inbound-act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentInboundAct(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentInboundActStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/inbound-act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentInboundActStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentPalletLabels') && declaresMethod($reflectionClass, 'downloadShipmentPalletLabelsStream')) {
            throw new \Exception('Operation downloadShipmentPalletLabels cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentPalletLabels')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/pallet/labels', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentPalletLabels(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentPalletLabelsStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/pallet/labels', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentPalletLabelsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentReceptionTransferAct') && declaresMethod($reflectionClass, 'downloadShipmentReceptionTransferActStream')) {
            throw new \Exception('Operation downloadShipmentReceptionTransferAct cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentReceptionTransferAct')) {
            \Flight::route('GET /campaigns/@campaignId/shipments/reception-transfer-act', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentReceptionTransferAct(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['warehouse_id'] ?? null, '?int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentReceptionTransferActStream')) {
            \Flight::route('GET /campaigns/@campaignId/shipments/reception-transfer-act', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentReceptionTransferActStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['warehouse_id'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentTransportationWaybill') && declaresMethod($reflectionClass, 'downloadShipmentTransportationWaybillStream')) {
            throw new \Exception('Operation downloadShipmentTransportationWaybill cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentTransportationWaybill')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/transportation-waybill', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentTransportationWaybill(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentTransportationWaybillStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/transportation-waybill', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentTransportationWaybillStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReport') && declaresMethod($reflectionClass, 'generateBoostConsolidatedReportStream')) {
            throw new \Exception('Operation generateBoostConsolidatedReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReport')) {
            \Flight::route('POST /reports/boost-consolidated/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateBoostConsolidatedReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateBoostConsolidatedRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReportStream')) {
            \Flight::route('POST /reports/boost-consolidated/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateBoostConsolidatedReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateBoostConsolidatedRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReport') && declaresMethod($reflectionClass, 'generateCompetitorsPositionReportStream')) {
            throw new \Exception('Operation generateCompetitorsPositionReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReport')) {
            \Flight::route('POST /reports/competitors-position/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateCompetitorsPositionReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateCompetitorsPositionReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReportStream')) {
            \Flight::route('POST /reports/competitors-position/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateCompetitorsPositionReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateCompetitorsPositionReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReport') && declaresMethod($reflectionClass, 'generateGoodsFeedbackReportStream')) {
            throw new \Exception('Operation generateGoodsFeedbackReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReport')) {
            \Flight::route('POST /reports/goods-feedback/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsFeedbackReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsFeedbackRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReportStream')) {
            \Flight::route('POST /reports/goods-feedback/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsFeedbackReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsFeedbackRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReport') && declaresMethod($reflectionClass, 'generateGoodsRealizationReportStream')) {
            throw new \Exception('Operation generateGoodsRealizationReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReport')) {
            \Flight::route('POST /reports/goods-realization/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsRealizationReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsRealizationReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReportStream')) {
            \Flight::route('POST /reports/goods-realization/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsRealizationReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsRealizationReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReport') && declaresMethod($reflectionClass, 'generateMassOrderLabelsReportStream')) {
            throw new \Exception('Operation generateMassOrderLabelsReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReport')) {
            \Flight::route('POST /reports/documents/labels/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateMassOrderLabelsReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateMassOrderLabelsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReportStream')) {
            \Flight::route('POST /reports/documents/labels/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateMassOrderLabelsReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateMassOrderLabelsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateOrderLabel') && declaresMethod($reflectionClass, 'generateOrderLabelStream')) {
            throw new \Exception('Operation generateOrderLabel cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabel')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes/@boxId/label', function (string $campaignId, string $orderId, string $shipmentId, string $boxId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabel(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($boxId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabelStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes/@boxId/label', function (string $campaignId, string $orderId, string $shipmentId, string $boxId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabelStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($boxId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'generateOrderLabels') && declaresMethod($reflectionClass, 'generateOrderLabelsStream')) {
            throw new \Exception('Operation generateOrderLabels cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabels')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabels(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabelsStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabelsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'generatePricesReport') && declaresMethod($reflectionClass, 'generatePricesReportStream')) {
            throw new \Exception('Operation generatePricesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generatePricesReport')) {
            \Flight::route('POST /reports/prices/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generatePricesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GeneratePricesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generatePricesReportStream')) {
            \Flight::route('POST /reports/prices/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generatePricesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GeneratePricesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReport') && declaresMethod($reflectionClass, 'generateShelfsStatisticsReportStream')) {
            throw new \Exception('Operation generateShelfsStatisticsReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReport')) {
            \Flight::route('POST /reports/shelf-statistics/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShelfsStatisticsReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShelfsStatisticsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReportStream')) {
            \Flight::route('POST /reports/shelf-statistics/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShelfsStatisticsReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShelfsStatisticsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShipmentListDocumentReport') && declaresMethod($reflectionClass, 'generateShipmentListDocumentReportStream')) {
            throw new \Exception('Operation generateShipmentListDocumentReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShipmentListDocumentReport')) {
            \Flight::route('POST /reports/documents/shipment-list/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShipmentListDocumentReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShipmentListDocumentReportRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShipmentListDocumentReportStream')) {
            \Flight::route('POST /reports/documents/shipment-list/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShipmentListDocumentReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShipmentListDocumentReportRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShowsSalesReport') && declaresMethod($reflectionClass, 'generateShowsSalesReportStream')) {
            throw new \Exception('Operation generateShowsSalesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShowsSalesReport')) {
            \Flight::route('POST /reports/shows-sales/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShowsSalesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShowsSalesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShowsSalesReportStream')) {
            \Flight::route('POST /reports/shows-sales/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShowsSalesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShowsSalesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReport') && declaresMethod($reflectionClass, 'generateStocksOnWarehousesReportStream')) {
            throw new \Exception('Operation generateStocksOnWarehousesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReport')) {
            \Flight::route('POST /reports/stocks-on-warehouses/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateStocksOnWarehousesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateStocksOnWarehousesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReportStream')) {
            \Flight::route('POST /reports/stocks-on-warehouses/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateStocksOnWarehousesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateStocksOnWarehousesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReport') && declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReportStream')) {
            throw new \Exception('Operation generateUnitedMarketplaceServicesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReport')) {
            \Flight::route('POST /reports/united-marketplace-services/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedMarketplaceServicesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedMarketplaceServicesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReportStream')) {
            \Flight::route('POST /reports/united-marketplace-services/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedMarketplaceServicesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedMarketplaceServicesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedNettingReport') && declaresMethod($reflectionClass, 'generateUnitedNettingReportStream')) {
            throw new \Exception('Operation generateUnitedNettingReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedNettingReport')) {
            \Flight::route('POST /reports/united-netting/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedNettingReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedNettingReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedNettingReportStream')) {
            \Flight::route('POST /reports/united-netting/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedNettingReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedNettingReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReport') && declaresMethod($reflectionClass, 'generateUnitedOrdersReportStream')) {
            throw new \Exception('Operation generateUnitedOrdersReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReport')) {
            \Flight::route('POST /reports/united-orders/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedOrdersReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedOrdersRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReportStream')) {
            \Flight::route('POST /reports/united-orders/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedOrdersReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedOrdersRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getAllOffers') && declaresMethod($reflectionClass, 'getAllOffersStream')) {
            throw new \Exception('Operation getAllOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getAllOffers')) {
            \Flight::route('GET /campaigns/@campaignId/offers/all', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getAllOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['chunk'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getAllOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/offers/all', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getAllOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['chunk'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBidsInfoForBusiness') && declaresMethod($reflectionClass, 'getBidsInfoForBusinessStream')) {
            throw new \Exception('Operation getBidsInfoForBusiness cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBidsInfoForBusiness')) {
            \Flight::route('POST /businesses/@businessId/bids/info', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBidsInfoForBusiness(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetBidsInfoRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBidsInfoForBusinessStream')) {
            \Flight::route('POST /businesses/@businessId/bids/info', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBidsInfoForBusinessStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetBidsInfoRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBidsRecommendations') && declaresMethod($reflectionClass, 'getBidsRecommendationsStream')) {
            throw new \Exception('Operation getBidsRecommendations cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBidsRecommendations')) {
            \Flight::route('POST /businesses/@businessId/bids/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBidsRecommendations(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetBidsRecommendationsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBidsRecommendationsStream')) {
            \Flight::route('POST /businesses/@businessId/bids/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBidsRecommendationsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetBidsRecommendationsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffers') && declaresMethod($reflectionClass, 'getBusinessQuarantineOffersStream')) {
            throw new \Exception('Operation getBusinessQuarantineOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffers')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBusinessQuarantineOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffersStream')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBusinessQuarantineOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBusinessSettings') && declaresMethod($reflectionClass, 'getBusinessSettingsStream')) {
            throw new \Exception('Operation getBusinessSettings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBusinessSettings')) {
            \Flight::route('POST /businesses/@businessId/settings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBusinessSettings(
                    parseParam($businessId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBusinessSettingsStream')) {
            \Flight::route('POST /businesses/@businessId/settings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBusinessSettingsStream(
                    parseParam($businessId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaign') && declaresMethod($reflectionClass, 'getCampaignStream')) {
            throw new \Exception('Operation getCampaign cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaign')) {
            \Flight::route('GET /campaigns/@campaignId', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaign(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignStream')) {
            \Flight::route('GET /campaigns/@campaignId', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignLogins') && declaresMethod($reflectionClass, 'getCampaignLoginsStream')) {
            throw new \Exception('Operation getCampaignLogins cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignLogins')) {
            \Flight::route('GET /campaigns/@campaignId/logins', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignLogins(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignLoginsStream')) {
            \Flight::route('GET /campaigns/@campaignId/logins', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignLoginsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignOffers') && declaresMethod($reflectionClass, 'getCampaignOffersStream')) {
            throw new \Exception('Operation getCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCampaignOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCampaignOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffers') && declaresMethod($reflectionClass, 'getCampaignQuarantineOffersStream')) {
            throw new \Exception('Operation getCampaignQuarantineOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffers')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignQuarantineOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignQuarantineOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignRegion') && declaresMethod($reflectionClass, 'getCampaignRegionStream')) {
            throw new \Exception('Operation getCampaignRegion cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignRegion')) {
            \Flight::route('GET /campaigns/@campaignId/region', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignRegion(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignRegionStream')) {
            \Flight::route('GET /campaigns/@campaignId/region', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignRegionStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignSettings') && declaresMethod($reflectionClass, 'getCampaignSettingsStream')) {
            throw new \Exception('Operation getCampaignSettings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignSettings')) {
            \Flight::route('GET /campaigns/@campaignId/settings', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignSettings(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignSettingsStream')) {
            \Flight::route('GET /campaigns/@campaignId/settings', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignSettingsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaigns') && declaresMethod($reflectionClass, 'getCampaignsStream')) {
            throw new \Exception('Operation getCampaigns cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaigns')) {
            \Flight::route('GET /campaigns', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaigns(
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignsStream')) {
            \Flight::route('GET /campaigns', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignsStream(
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignsByLogin') && declaresMethod($reflectionClass, 'getCampaignsByLoginStream')) {
            throw new \Exception('Operation getCampaignsByLogin cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignsByLogin')) {
            \Flight::route('GET /campaigns/by_login/@login', function (string $login) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignsByLogin(
                    parseParam($login, 'string'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignsByLoginStream')) {
            \Flight::route('GET /campaigns/by_login/@login', function (string $login) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignsByLoginStream(
                    parseParam($login, 'string'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantum') && declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantumStream')) {
            throw new \Exception('Operation getCategoriesMaxSaleQuantum cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantum')) {
            \Flight::route('POST /categories/max-sale-quantum', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoriesMaxSaleQuantum(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCategoriesMaxSaleQuantumRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantumStream')) {
            \Flight::route('POST /categories/max-sale-quantum', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCategoriesMaxSaleQuantumStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCategoriesMaxSaleQuantumRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoriesTree') && declaresMethod($reflectionClass, 'getCategoriesTreeStream')) {
            throw new \Exception('Operation getCategoriesTree cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoriesTree')) {
            \Flight::route('POST /categories/tree', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoriesTree(
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetCategoriesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoriesTreeStream')) {
            \Flight::route('POST /categories/tree', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCategoriesTreeStream(
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetCategoriesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoryContentParameters') && declaresMethod($reflectionClass, 'getCategoryContentParametersStream')) {
            throw new \Exception('Operation getCategoryContentParameters cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoryContentParameters')) {
            \Flight::route('POST /category/@categoryId/parameters', function (string $categoryId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoryContentParameters(
                    parseParam($categoryId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoryContentParametersStream')) {
            \Flight::route('POST /category/@categoryId/parameters', function (string $categoryId) use ($handler) {
                $r = \Flight::request();
                $handler->getCategoryContentParametersStream(
                    parseParam($categoryId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getChatHistory') && declaresMethod($reflectionClass, 'getChatHistoryStream')) {
            throw new \Exception('Operation getChatHistory cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getChatHistory')) {
            \Flight::route('POST /businesses/@businessId/chats/history', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getChatHistory(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatHistoryRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getChatHistoryStream')) {
            \Flight::route('POST /businesses/@businessId/chats/history', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getChatHistoryStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatHistoryRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getChats') && declaresMethod($reflectionClass, 'getChatsStream')) {
            throw new \Exception('Operation getChats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getChats')) {
            \Flight::route('POST /businesses/@businessId/chats', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getChats(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getChatsStream')) {
            \Flight::route('POST /businesses/@businessId/chats', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getChatsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getDeliveryServices') && declaresMethod($reflectionClass, 'getDeliveryServicesStream')) {
            throw new \Exception('Operation getDeliveryServices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getDeliveryServices')) {
            \Flight::route('GET /delivery/services', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getDeliveryServices(
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getDeliveryServicesStream')) {
            \Flight::route('GET /delivery/services', function () use ($handler) {
                $r = \Flight::request();
                $handler->getDeliveryServicesStream(
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeed') && declaresMethod($reflectionClass, 'getFeedStream')) {
            throw new \Exception('Operation getFeed cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeed')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeed(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeedIndexLogs') && declaresMethod($reflectionClass, 'getFeedIndexLogsStream')) {
            throw new \Exception('Operation getFeedIndexLogs cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeedIndexLogs')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId/index-logs', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeedIndexLogs(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['published_time_from'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['published_time_to'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['status'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedIndexLogsStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId/index-logs', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedIndexLogsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['published_time_from'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['published_time_to'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['status'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdates') && declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdatesStream')) {
            throw new \Exception('Operation getFeedbackAndCommentUpdates cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdates')) {
            \Flight::route('GET /campaigns/@campaignId/feedback/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeedbackAndCommentUpdates(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdatesStream')) {
            \Flight::route('GET /campaigns/@campaignId/feedback/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedbackAndCommentUpdatesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeeds') && declaresMethod($reflectionClass, 'getFeedsStream')) {
            throw new \Exception('Operation getFeeds cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeeds')) {
            \Flight::route('GET /campaigns/@campaignId/feeds', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeeds(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedsStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsFeedbackComments') && declaresMethod($reflectionClass, 'getGoodsFeedbackCommentsStream')) {
            throw new \Exception('Operation getGoodsFeedbackComments cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbackComments')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsFeedbackComments(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsFeedbackCommentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbackCommentsStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsFeedbackCommentsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsFeedbackCommentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsFeedbacks') && declaresMethod($reflectionClass, 'getGoodsFeedbacksStream')) {
            throw new \Exception('Operation getGoodsFeedbacks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbacks')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsFeedbacks(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetGoodsFeedbackRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbacksStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsFeedbacksStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetGoodsFeedbackRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsStats') && declaresMethod($reflectionClass, 'getGoodsStatsStream')) {
            throw new \Exception('Operation getGoodsStats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsStats')) {
            \Flight::route('POST /campaigns/@campaignId/stats/skus', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsStats(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsStatsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsStatsStream')) {
            \Flight::route('POST /campaigns/@campaignId/stats/skus', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsStatsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsStatsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getHiddenOffers') && declaresMethod($reflectionClass, 'getHiddenOffersStream')) {
            throw new \Exception('Operation getHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getHiddenOffers')) {
            \Flight::route('GET /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['offset'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getHiddenOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['offset'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatus') && declaresMethod($reflectionClass, 'getOfferCardsContentStatusStream')) {
            throw new \Exception('Operation getOfferCardsContentStatus cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatus')) {
            \Flight::route('POST /businesses/@businessId/offer-cards', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferCardsContentStatus(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferCardsContentStatusRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatusStream')) {
            \Flight::route('POST /businesses/@businessId/offer-cards', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferCardsContentStatusStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferCardsContentStatusRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferMappingEntries') && declaresMethod($reflectionClass, 'getOfferMappingEntriesStream')) {
            throw new \Exception('Operation getOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingEntries')) {
            \Flight::route('GET /campaigns/@campaignId/offer-mapping-entries', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['shop_sku'] ?? null, '?array'), 
                    parseParam($r->query['mapping_kind'] ?? null, ''), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['availability'] ?? null, '?array'), 
                    parseParam($r->query['category_id'] ?? null, '?array'), 
                    parseParam($r->query['vendor'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingEntriesStream')) {
            \Flight::route('GET /campaigns/@campaignId/offer-mapping-entries', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['shop_sku'] ?? null, '?array'), 
                    parseParam($r->query['mapping_kind'] ?? null, ''), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['availability'] ?? null, '?array'), 
                    parseParam($r->query['category_id'] ?? null, '?array'), 
                    parseParam($r->query['vendor'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferMappings') && declaresMethod($reflectionClass, 'getOfferMappingsStream')) {
            throw new \Exception('Operation getOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferRecommendations') && declaresMethod($reflectionClass, 'getOfferRecommendationsStream')) {
            throw new \Exception('Operation getOfferRecommendations cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferRecommendations')) {
            \Flight::route('POST /businesses/@businessId/offers/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferRecommendations(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetOfferRecommendationsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferRecommendationsStream')) {
            \Flight::route('POST /businesses/@businessId/offers/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferRecommendationsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetOfferRecommendationsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOffers') && declaresMethod($reflectionClass, 'getOffersStream')) {
            throw new \Exception('Operation getOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOffers')) {
            \Flight::route('GET /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['query'] ?? null, '?string'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['shopCategoryId'] ?? null, '?string'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['matched'] ?? null, '?bool'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['query'] ?? null, '?string'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['shopCategoryId'] ?? null, '?string'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['matched'] ?? null, '?bool'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrder') && declaresMethod($reflectionClass, 'getOrderStream')) {
            throw new \Exception('Operation getOrder cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrder')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrder(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfo') && declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfoStream')) {
            throw new \Exception('Operation getOrderBusinessBuyerInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfo')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/business-buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBusinessBuyerInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfoStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/business-buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBusinessBuyerInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfo') && declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfoStream')) {
            throw new \Exception('Operation getOrderBusinessDocumentsInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfo')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/documents', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBusinessDocumentsInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfoStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/documents', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBusinessDocumentsInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderLabelsData') && declaresMethod($reflectionClass, 'getOrderLabelsDataStream')) {
            throw new \Exception('Operation getOrderLabelsData cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderLabelsData')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels/data', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderLabelsData(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderLabelsDataStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels/data', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderLabelsDataStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrders') && declaresMethod($reflectionClass, 'getOrdersStream')) {
            throw new \Exception('Operation getOrders cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrders')) {
            \Flight::route('GET /campaigns/@campaignId/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrders(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['substatus'] ?? null, '?array'), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['dispatchType'] ?? null, ''), 
                    parseParam($r->query['fake'] ?? null, '?bool'), 
                    parseParam($r->query['hasCis'] ?? null, '?bool'), 
                    parseParam($r->query['onlyWaitingForCancellationApprove'] ?? null, '?bool'), 
                    parseParam($r->query['onlyEstimatedDelivery'] ?? null, '?bool'), 
                    parseParam($r->query['buyerType'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrdersStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrdersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['substatus'] ?? null, '?array'), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['dispatchType'] ?? null, ''), 
                    parseParam($r->query['fake'] ?? null, '?bool'), 
                    parseParam($r->query['hasCis'] ?? null, '?bool'), 
                    parseParam($r->query['onlyWaitingForCancellationApprove'] ?? null, '?bool'), 
                    parseParam($r->query['onlyEstimatedDelivery'] ?? null, '?bool'), 
                    parseParam($r->query['buyerType'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrdersStats') && declaresMethod($reflectionClass, 'getOrdersStatsStream')) {
            throw new \Exception('Operation getOrdersStats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrdersStats')) {
            \Flight::route('POST /campaigns/@campaignId/stats/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrdersStats(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOrdersStatsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrdersStatsStream')) {
            \Flight::route('POST /campaigns/@campaignId/stats/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrdersStatsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOrdersStatsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPrices') && declaresMethod($reflectionClass, 'getPricesStream')) {
            throw new \Exception('Operation getPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPrices')) {
            \Flight::route('GET /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['archived'] ?? null, '?bool')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPricesStream')) {
            \Flight::route('GET /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['archived'] ?? null, '?bool')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPricesByOfferIds') && declaresMethod($reflectionClass, 'getPricesByOfferIdsStream')) {
            throw new \Exception('Operation getPricesByOfferIds cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPricesByOfferIds')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPricesByOfferIds(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPricesByOfferIdsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPricesByOfferIdsStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getPricesByOfferIdsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPricesByOfferIdsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPromoOffers') && declaresMethod($reflectionClass, 'getPromoOffersStream')) {
            throw new \Exception('Operation getPromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetPromoOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getPromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetPromoOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPromos') && declaresMethod($reflectionClass, 'getPromosStream')) {
            throw new \Exception('Operation getPromos cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPromos')) {
            \Flight::route('POST /businesses/@businessId/promos', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPromos(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPromosRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPromosStream')) {
            \Flight::route('POST /businesses/@businessId/promos', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getPromosStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPromosRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getQualityRatingDetails') && declaresMethod($reflectionClass, 'getQualityRatingDetailsStream')) {
            throw new \Exception('Operation getQualityRatingDetails cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingDetails')) {
            \Flight::route('POST /campaigns/@campaignId/ratings/quality/details', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getQualityRatingDetails(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingDetailsStream')) {
            \Flight::route('POST /campaigns/@campaignId/ratings/quality/details', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getQualityRatingDetailsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getQualityRatings') && declaresMethod($reflectionClass, 'getQualityRatingsStream')) {
            throw new \Exception('Operation getQualityRatings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getQualityRatings')) {
            \Flight::route('POST /businesses/@businessId/ratings/quality', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getQualityRatings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQualityRatingRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingsStream')) {
            \Flight::route('POST /businesses/@businessId/ratings/quality', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getQualityRatingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQualityRatingRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReportInfo') && declaresMethod($reflectionClass, 'getReportInfoStream')) {
            throw new \Exception('Operation getReportInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReportInfo')) {
            \Flight::route('GET /reports/info/@reportId', function (string $reportId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReportInfo(
                    parseParam($reportId, 'string')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReportInfoStream')) {
            \Flight::route('GET /reports/info/@reportId', function (string $reportId) use ($handler) {
                $r = \Flight::request();
                $handler->getReportInfoStream(
                    parseParam($reportId, 'string')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReturn') && declaresMethod($reflectionClass, 'getReturnStream')) {
            throw new \Exception('Operation getReturn cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturn')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReturn(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReturnApplication') && declaresMethod($reflectionClass, 'getReturnApplicationStream')) {
            throw new \Exception('Operation getReturnApplication cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturnApplication')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/application', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnApplication(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnApplicationStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/application', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnApplicationStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'getReturnPhoto') && declaresMethod($reflectionClass, 'getReturnPhotoStream')) {
            throw new \Exception('Operation getReturnPhoto cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturnPhoto')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/@itemId/image/@imageHash', function (string $campaignId, string $orderId, string $returnId, string $itemId, string $imageHash) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnPhoto(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam($itemId, 'int'), 
                    parseParam($imageHash, 'string')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnPhotoStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/@itemId/image/@imageHash', function (string $campaignId, string $orderId, string $returnId, string $itemId, string $imageHash) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnPhotoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam($itemId, 'int'), 
                    parseParam($imageHash, 'string')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'getReturns') && declaresMethod($reflectionClass, 'getReturnsStream')) {
            throw new \Exception('Operation getReturns cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturns')) {
            \Flight::route('GET /campaigns/@campaignId/returns', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReturns(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['statuses'] ?? null, '?array'), 
                    parseParam($r->query['type'] ?? null, ''), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['to_date'] ?? null, '?\\DateTime')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnsStream')) {
            \Flight::route('GET /campaigns/@campaignId/returns', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['statuses'] ?? null, '?array'), 
                    parseParam($r->query['type'] ?? null, ''), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['to_date'] ?? null, '?\\DateTime')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getShipment') && declaresMethod($reflectionClass, 'getShipmentStream')) {
            throw new \Exception('Operation getShipment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getShipment')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getShipment(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($r->query['cancelledOrders'] ?? null, '?bool')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getShipmentStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->getShipmentStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($r->query['cancelledOrders'] ?? null, '?bool')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getShipmentOrdersInfo') && declaresMethod($reflectionClass, 'getShipmentOrdersInfoStream')) {
            throw new \Exception('Operation getShipmentOrdersInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getShipmentOrdersInfo')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/orders/info', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getShipmentOrdersInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getShipmentOrdersInfoStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/orders/info', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->getShipmentOrdersInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getStocks') && declaresMethod($reflectionClass, 'getStocksStream')) {
            throw new \Exception('Operation getStocks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getStocks')) {
            \Flight::route('POST /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getStocks(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetWarehouseStocksRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getStocksStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getStocksStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetWarehouseStocksRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntries') && declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntriesStream')) {
            throw new \Exception('Operation getSuggestedOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntries')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetSuggestedOfferMappingEntriesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntriesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetSuggestedOfferMappingEntriesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappings') && declaresMethod($reflectionClass, 'getSuggestedOfferMappingsStream')) {
            throw new \Exception('Operation getSuggestedOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/suggestions', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetSuggestedOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/suggestions', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetSuggestedOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedPrices') && declaresMethod($reflectionClass, 'getSuggestedPricesStream')) {
            throw new \Exception('Operation getSuggestedPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedPrices')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SuggestPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedPricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SuggestPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getWarehouses') && declaresMethod($reflectionClass, 'getWarehousesStream')) {
            throw new \Exception('Operation getWarehouses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getWarehouses')) {
            \Flight::route('GET /businesses/@businessId/warehouses', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getWarehouses(
                    parseParam($businessId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getWarehousesStream')) {
            \Flight::route('GET /businesses/@businessId/warehouses', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getWarehousesStream(
                    parseParam($businessId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiers') && declaresMethod($reflectionClass, 'provideOrderItemIdentifiersStream')) {
            throw new \Exception('Operation provideOrderItemIdentifiers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiers')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/identifiers', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->provideOrderItemIdentifiers(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderItemIdentifiersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiersStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/identifiers', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->provideOrderItemIdentifiersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderItemIdentifiersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'putBidsForBusiness') && declaresMethod($reflectionClass, 'putBidsForBusinessStream')) {
            throw new \Exception('Operation putBidsForBusiness cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'putBidsForBusiness')) {
            \Flight::route('PUT /businesses/@businessId/bids', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->putBidsForBusiness(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'putBidsForBusinessStream')) {
            \Flight::route('PUT /businesses/@businessId/bids', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->putBidsForBusinessStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'putBidsForCampaign') && declaresMethod($reflectionClass, 'putBidsForCampaignStream')) {
            throw new \Exception('Operation putBidsForCampaign cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'putBidsForCampaign')) {
            \Flight::route('PUT /campaigns/@campaignId/bids', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->putBidsForCampaign(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'putBidsForCampaignStream')) {
            \Flight::route('PUT /campaigns/@campaignId/bids', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->putBidsForCampaignStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'refreshFeed') && declaresMethod($reflectionClass, 'refreshFeedStream')) {
            throw new \Exception('Operation refreshFeed cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'refreshFeed')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/refresh', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->refreshFeed(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'refreshFeedStream')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/refresh', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->refreshFeedStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionChildren') && declaresMethod($reflectionClass, 'searchRegionChildrenStream')) {
            throw new \Exception('Operation searchRegionChildren cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionChildren')) {
            \Flight::route('GET /regions/@regionId/children', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionChildren(
                    parseParam($regionId, 'int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionChildrenStream')) {
            \Flight::route('GET /regions/@regionId/children', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionChildrenStream(
                    parseParam($regionId, 'int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionsById') && declaresMethod($reflectionClass, 'searchRegionsByIdStream')) {
            throw new \Exception('Operation searchRegionsById cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionsById')) {
            \Flight::route('GET /regions/@regionId', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionsById(
                    parseParam($regionId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByIdStream')) {
            \Flight::route('GET /regions/@regionId', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionsByIdStream(
                    parseParam($regionId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionsByName') && declaresMethod($reflectionClass, 'searchRegionsByNameStream')) {
            throw new \Exception('Operation searchRegionsByName cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByName')) {
            \Flight::route('GET /regions', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionsByName(
                    parseParam($r->query['name'] ?? null, 'string'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByNameStream')) {
            \Flight::route('GET /regions', function () use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionsByNameStream(
                    parseParam($r->query['name'] ?? null, 'string'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchShipments') && declaresMethod($reflectionClass, 'searchShipmentsStream')) {
            throw new \Exception('Operation searchShipments cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchShipments')) {
            \Flight::route('PUT /campaigns/@campaignId/first-mile/shipments', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchShipments(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SearchShipmentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchShipmentsStream')) {
            \Flight::route('PUT /campaigns/@campaignId/first-mile/shipments', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->searchShipmentsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SearchShipmentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'sendFileToChat') && declaresMethod($reflectionClass, 'sendFileToChatStream')) {
            throw new \Exception('Operation sendFileToChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'sendFileToChat')) {
            \Flight::route('POST /businesses/@businessId/chats/file/send', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->sendFileToChat(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'sendFileToChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/file/send', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->sendFileToChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'sendMessageToChat') && declaresMethod($reflectionClass, 'sendMessageToChatStream')) {
            throw new \Exception('Operation sendMessageToChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'sendMessageToChat')) {
            \Flight::route('POST /businesses/@businessId/chats/message', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->sendMessageToChat(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SendMessageToChatRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'sendMessageToChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/message', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->sendMessageToChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SendMessageToChatRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setFeedParams') && declaresMethod($reflectionClass, 'setFeedParamsStream')) {
            throw new \Exception('Operation setFeedParams cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setFeedParams')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/params', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setFeedParams(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetFeedParamsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setFeedParamsStream')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/params', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->setFeedParamsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetFeedParamsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderBoxLayout') && declaresMethod($reflectionClass, 'setOrderBoxLayoutStream')) {
            throw new \Exception('Operation setOrderBoxLayout cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderBoxLayout')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/boxes', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderBoxLayout(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderBoxLayoutRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderBoxLayoutStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/boxes', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderBoxLayoutStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderBoxLayoutRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxes') && declaresMethod($reflectionClass, 'setOrderShipmentBoxesStream')) {
            throw new \Exception('Operation setOrderShipmentBoxes cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxes')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes', function (string $campaignId, string $orderId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderShipmentBoxes(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderShipmentBoxesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxesStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes', function (string $campaignId, string $orderId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderShipmentBoxesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderShipmentBoxesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setShipmentPalletsCount') && declaresMethod($reflectionClass, 'setShipmentPalletsCountStream')) {
            throw new \Exception('Operation setShipmentPalletsCount cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setShipmentPalletsCount')) {
            \Flight::route('PUT /campaigns/@campaignId/first-mile/shipments/@shipmentId/pallets', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setShipmentPalletsCount(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetShipmentPalletsCountRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setShipmentPalletsCountStream')) {
            \Flight::route('PUT /campaigns/@campaignId/first-mile/shipments/@shipmentId/pallets', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->setShipmentPalletsCountStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetShipmentPalletsCountRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReaction') && declaresMethod($reflectionClass, 'skipGoodsFeedbacksReactionStream')) {
            throw new \Exception('Operation skipGoodsFeedbacksReaction cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReaction')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/skip-reaction', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->skipGoodsFeedbacksReaction(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SkipGoodsFeedbackReactionRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReactionStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/skip-reaction', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->skipGoodsFeedbacksReactionStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SkipGoodsFeedbackReactionRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'transferOrdersFromShipment') && declaresMethod($reflectionClass, 'transferOrdersFromShipmentStream')) {
            throw new \Exception('Operation transferOrdersFromShipment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'transferOrdersFromShipment')) {
            \Flight::route('POST /campaigns/@campaignId/first-mile/shipments/@shipmentId/orders/transfer', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->transferOrdersFromShipment(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\TransferOrdersFromShipmentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'transferOrdersFromShipmentStream')) {
            \Flight::route('POST /campaigns/@campaignId/first-mile/shipments/@shipmentId/orders/transfer', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->transferOrdersFromShipmentStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\TransferOrdersFromShipmentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateBusinessPrices') && declaresMethod($reflectionClass, 'updateBusinessPricesStream')) {
            throw new \Exception('Operation updateBusinessPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateBusinessPrices')) {
            \Flight::route('POST /businesses/@businessId/offer-prices/updates', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateBusinessPrices(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateBusinessPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateBusinessPricesStream')) {
            \Flight::route('POST /businesses/@businessId/offer-prices/updates', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateBusinessPricesStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateBusinessPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateCampaignOffers') && declaresMethod($reflectionClass, 'updateCampaignOffersStream')) {
            throw new \Exception('Operation updateCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers/update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateCampaignOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateCampaignOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackComment') && declaresMethod($reflectionClass, 'updateGoodsFeedbackCommentStream')) {
            throw new \Exception('Operation updateGoodsFeedbackComment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackComment')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateGoodsFeedbackComment(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateGoodsFeedbackCommentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackCommentStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateGoodsFeedbackCommentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateGoodsFeedbackCommentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferContent') && declaresMethod($reflectionClass, 'updateOfferContentStream')) {
            throw new \Exception('Operation updateOfferContent cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferContent')) {
            \Flight::route('POST /businesses/@businessId/offer-cards/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferContent(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferContentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferContentStream')) {
            \Flight::route('POST /businesses/@businessId/offer-cards/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferContentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferContentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferMappingEntries') && declaresMethod($reflectionClass, 'updateOfferMappingEntriesStream')) {
            throw new \Exception('Operation updateOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingEntries')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingEntryRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingEntriesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingEntryRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferMappings') && declaresMethod($reflectionClass, 'updateOfferMappingsStream')) {
            throw new \Exception('Operation updateOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOrderItems') && declaresMethod($reflectionClass, 'updateOrderItemsStream')) {
            throw new \Exception('Operation updateOrderItems cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderItems')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/items', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderItems(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderItemRequest')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderItemsStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/items', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderItemsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderItemRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'updateOrderStatus') && declaresMethod($reflectionClass, 'updateOrderStatusStream')) {
            throw new \Exception('Operation updateOrderStatus cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatus')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/status', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOrderStatus(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatusStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/status', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderStatusStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOrderStatuses') && declaresMethod($reflectionClass, 'updateOrderStatusesStream')) {
            throw new \Exception('Operation updateOrderStatuses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatuses')) {
            \Flight::route('POST /campaigns/@campaignId/orders/status-update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOrderStatuses(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatusesStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/status-update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderStatusesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updatePrices') && declaresMethod($reflectionClass, 'updatePricesStream')) {
            throw new \Exception('Operation updatePrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updatePrices')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updatePrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updatePricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updatePricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updatePromoOffers') && declaresMethod($reflectionClass, 'updatePromoOffersStream')) {
            throw new \Exception('Operation updatePromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updatePromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updatePromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePromoOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updatePromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updatePromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePromoOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateStocks') && declaresMethod($reflectionClass, 'updateStocksStream')) {
            throw new \Exception('Operation updateStocks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateStocks')) {
            \Flight::route('PUT /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateStocks(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateStocksRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateStocksStream')) {
            \Flight::route('PUT /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateStocksStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateStocksRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'addHiddenOffers') && declaresMethod($reflectionClass, 'addHiddenOffersStream')) {
            throw new \Exception('Operation addHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'addHiddenOffers')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->addHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddHiddenOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'addHiddenOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->addHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddHiddenOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'addOffersToArchive') && declaresMethod($reflectionClass, 'addOffersToArchiveStream')) {
            throw new \Exception('Operation addOffersToArchive cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'addOffersToArchive')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/archive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->addOffersToArchive(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddOffersToArchiveRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'addOffersToArchiveStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/archive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->addOffersToArchiveStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddOffersToArchiveRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'calculateTariffs') && declaresMethod($reflectionClass, 'calculateTariffsStream')) {
            throw new \Exception('Operation calculateTariffs cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'calculateTariffs')) {
            \Flight::route('POST /tariffs/calculate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->calculateTariffs(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CalculateTariffsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'calculateTariffsStream')) {
            \Flight::route('POST /tariffs/calculate', function () use ($handler) {
                $r = \Flight::request();
                $handler->calculateTariffsStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CalculateTariffsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmBusinessPrices') && declaresMethod($reflectionClass, 'confirmBusinessPricesStream')) {
            throw new \Exception('Operation confirmBusinessPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmBusinessPrices')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine/confirm', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmBusinessPrices(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmBusinessPricesStream')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine/confirm', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmBusinessPricesStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmCampaignPrices') && declaresMethod($reflectionClass, 'confirmCampaignPricesStream')) {
            throw new \Exception('Operation confirmCampaignPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmCampaignPrices')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine/confirm', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmCampaignPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmCampaignPricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine/confirm', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmCampaignPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'createChat') && declaresMethod($reflectionClass, 'createChatStream')) {
            throw new \Exception('Operation createChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'createChat')) {
            \Flight::route('POST /businesses/@businessId/chats/new', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->createChat(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CreateChatRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'createChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/new', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->createChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CreateChatRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteCampaignOffers') && declaresMethod($reflectionClass, 'deleteCampaignOffersStream')) {
            throw new \Exception('Operation deleteCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteCampaignOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteCampaignOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackComment') && declaresMethod($reflectionClass, 'deleteGoodsFeedbackCommentStream')) {
            throw new \Exception('Operation deleteGoodsFeedbackComment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackComment')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteGoodsFeedbackComment(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteGoodsFeedbackCommentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackCommentStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteGoodsFeedbackCommentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteGoodsFeedbackCommentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteHiddenOffers') && declaresMethod($reflectionClass, 'deleteHiddenOffersStream')) {
            throw new \Exception('Operation deleteHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteHiddenOffers')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteHiddenOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteHiddenOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteHiddenOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOffers') && declaresMethod($reflectionClass, 'deleteOffersStream')) {
            throw new \Exception('Operation deleteOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOffers')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOffersStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOffersFromArchive') && declaresMethod($reflectionClass, 'deleteOffersFromArchiveStream')) {
            throw new \Exception('Operation deleteOffersFromArchive cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOffersFromArchive')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/unarchive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOffersFromArchive(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersFromArchiveRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOffersFromArchiveStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/unarchive', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOffersFromArchiveStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteOffersFromArchiveRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deletePromoOffers') && declaresMethod($reflectionClass, 'deletePromoOffersStream')) {
            throw new \Exception('Operation deletePromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deletePromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deletePromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeletePromoOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deletePromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deletePromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeletePromoOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReport') && declaresMethod($reflectionClass, 'generateBoostConsolidatedReportStream')) {
            throw new \Exception('Operation generateBoostConsolidatedReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReport')) {
            \Flight::route('POST /reports/boost-consolidated/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateBoostConsolidatedReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateBoostConsolidatedRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReportStream')) {
            \Flight::route('POST /reports/boost-consolidated/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateBoostConsolidatedReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateBoostConsolidatedRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReport') && declaresMethod($reflectionClass, 'generateCompetitorsPositionReportStream')) {
            throw new \Exception('Operation generateCompetitorsPositionReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReport')) {
            \Flight::route('POST /reports/competitors-position/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateCompetitorsPositionReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateCompetitorsPositionReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReportStream')) {
            \Flight::route('POST /reports/competitors-position/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateCompetitorsPositionReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateCompetitorsPositionReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReport') && declaresMethod($reflectionClass, 'generateGoodsFeedbackReportStream')) {
            throw new \Exception('Operation generateGoodsFeedbackReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReport')) {
            \Flight::route('POST /reports/goods-feedback/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsFeedbackReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsFeedbackRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReportStream')) {
            \Flight::route('POST /reports/goods-feedback/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsFeedbackReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsFeedbackRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsMovementReport') && declaresMethod($reflectionClass, 'generateGoodsMovementReportStream')) {
            throw new \Exception('Operation generateGoodsMovementReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsMovementReport')) {
            \Flight::route('POST /reports/goods-movement/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsMovementReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsMovementReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsMovementReportStream')) {
            \Flight::route('POST /reports/goods-movement/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsMovementReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsMovementReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReport') && declaresMethod($reflectionClass, 'generateGoodsRealizationReportStream')) {
            throw new \Exception('Operation generateGoodsRealizationReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReport')) {
            \Flight::route('POST /reports/goods-realization/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsRealizationReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsRealizationReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReportStream')) {
            \Flight::route('POST /reports/goods-realization/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsRealizationReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsRealizationReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsTurnoverReport') && declaresMethod($reflectionClass, 'generateGoodsTurnoverReportStream')) {
            throw new \Exception('Operation generateGoodsTurnoverReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsTurnoverReport')) {
            \Flight::route('POST /reports/goods-turnover/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsTurnoverReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsTurnoverRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsTurnoverReportStream')) {
            \Flight::route('POST /reports/goods-turnover/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsTurnoverReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsTurnoverRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generatePricesReport') && declaresMethod($reflectionClass, 'generatePricesReportStream')) {
            throw new \Exception('Operation generatePricesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generatePricesReport')) {
            \Flight::route('POST /reports/prices/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generatePricesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GeneratePricesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generatePricesReportStream')) {
            \Flight::route('POST /reports/prices/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generatePricesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GeneratePricesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReport') && declaresMethod($reflectionClass, 'generateShelfsStatisticsReportStream')) {
            throw new \Exception('Operation generateShelfsStatisticsReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReport')) {
            \Flight::route('POST /reports/shelf-statistics/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShelfsStatisticsReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShelfsStatisticsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReportStream')) {
            \Flight::route('POST /reports/shelf-statistics/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShelfsStatisticsReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShelfsStatisticsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShowsSalesReport') && declaresMethod($reflectionClass, 'generateShowsSalesReportStream')) {
            throw new \Exception('Operation generateShowsSalesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShowsSalesReport')) {
            \Flight::route('POST /reports/shows-sales/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShowsSalesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShowsSalesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShowsSalesReportStream')) {
            \Flight::route('POST /reports/shows-sales/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShowsSalesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShowsSalesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReport') && declaresMethod($reflectionClass, 'generateStocksOnWarehousesReportStream')) {
            throw new \Exception('Operation generateStocksOnWarehousesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReport')) {
            \Flight::route('POST /reports/stocks-on-warehouses/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateStocksOnWarehousesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateStocksOnWarehousesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReportStream')) {
            \Flight::route('POST /reports/stocks-on-warehouses/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateStocksOnWarehousesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateStocksOnWarehousesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReport') && declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReportStream')) {
            throw new \Exception('Operation generateUnitedMarketplaceServicesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReport')) {
            \Flight::route('POST /reports/united-marketplace-services/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedMarketplaceServicesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedMarketplaceServicesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReportStream')) {
            \Flight::route('POST /reports/united-marketplace-services/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedMarketplaceServicesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedMarketplaceServicesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedNettingReport') && declaresMethod($reflectionClass, 'generateUnitedNettingReportStream')) {
            throw new \Exception('Operation generateUnitedNettingReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedNettingReport')) {
            \Flight::route('POST /reports/united-netting/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedNettingReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedNettingReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedNettingReportStream')) {
            \Flight::route('POST /reports/united-netting/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedNettingReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedNettingReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReport') && declaresMethod($reflectionClass, 'generateUnitedOrdersReportStream')) {
            throw new \Exception('Operation generateUnitedOrdersReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReport')) {
            \Flight::route('POST /reports/united-orders/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedOrdersReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedOrdersRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReportStream')) {
            \Flight::route('POST /reports/united-orders/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedOrdersReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedOrdersRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getAllOffers') && declaresMethod($reflectionClass, 'getAllOffersStream')) {
            throw new \Exception('Operation getAllOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getAllOffers')) {
            \Flight::route('GET /campaigns/@campaignId/offers/all', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getAllOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['chunk'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getAllOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/offers/all', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getAllOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['chunk'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBidsInfoForBusiness') && declaresMethod($reflectionClass, 'getBidsInfoForBusinessStream')) {
            throw new \Exception('Operation getBidsInfoForBusiness cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBidsInfoForBusiness')) {
            \Flight::route('POST /businesses/@businessId/bids/info', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBidsInfoForBusiness(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetBidsInfoRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBidsInfoForBusinessStream')) {
            \Flight::route('POST /businesses/@businessId/bids/info', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBidsInfoForBusinessStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetBidsInfoRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBidsRecommendations') && declaresMethod($reflectionClass, 'getBidsRecommendationsStream')) {
            throw new \Exception('Operation getBidsRecommendations cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBidsRecommendations')) {
            \Flight::route('POST /businesses/@businessId/bids/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBidsRecommendations(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetBidsRecommendationsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBidsRecommendationsStream')) {
            \Flight::route('POST /businesses/@businessId/bids/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBidsRecommendationsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetBidsRecommendationsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffers') && declaresMethod($reflectionClass, 'getBusinessQuarantineOffersStream')) {
            throw new \Exception('Operation getBusinessQuarantineOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffers')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBusinessQuarantineOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffersStream')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBusinessQuarantineOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBusinessSettings') && declaresMethod($reflectionClass, 'getBusinessSettingsStream')) {
            throw new \Exception('Operation getBusinessSettings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBusinessSettings')) {
            \Flight::route('POST /businesses/@businessId/settings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBusinessSettings(
                    parseParam($businessId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBusinessSettingsStream')) {
            \Flight::route('POST /businesses/@businessId/settings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBusinessSettingsStream(
                    parseParam($businessId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaign') && declaresMethod($reflectionClass, 'getCampaignStream')) {
            throw new \Exception('Operation getCampaign cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaign')) {
            \Flight::route('GET /campaigns/@campaignId', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaign(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignStream')) {
            \Flight::route('GET /campaigns/@campaignId', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignLogins') && declaresMethod($reflectionClass, 'getCampaignLoginsStream')) {
            throw new \Exception('Operation getCampaignLogins cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignLogins')) {
            \Flight::route('GET /campaigns/@campaignId/logins', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignLogins(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignLoginsStream')) {
            \Flight::route('GET /campaigns/@campaignId/logins', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignLoginsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignOffers') && declaresMethod($reflectionClass, 'getCampaignOffersStream')) {
            throw new \Exception('Operation getCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCampaignOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCampaignOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffers') && declaresMethod($reflectionClass, 'getCampaignQuarantineOffersStream')) {
            throw new \Exception('Operation getCampaignQuarantineOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffers')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignQuarantineOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignQuarantineOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignRegion') && declaresMethod($reflectionClass, 'getCampaignRegionStream')) {
            throw new \Exception('Operation getCampaignRegion cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignRegion')) {
            \Flight::route('GET /campaigns/@campaignId/region', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignRegion(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignRegionStream')) {
            \Flight::route('GET /campaigns/@campaignId/region', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignRegionStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignSettings') && declaresMethod($reflectionClass, 'getCampaignSettingsStream')) {
            throw new \Exception('Operation getCampaignSettings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignSettings')) {
            \Flight::route('GET /campaigns/@campaignId/settings', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignSettings(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignSettingsStream')) {
            \Flight::route('GET /campaigns/@campaignId/settings', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignSettingsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaigns') && declaresMethod($reflectionClass, 'getCampaignsStream')) {
            throw new \Exception('Operation getCampaigns cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaigns')) {
            \Flight::route('GET /campaigns', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaigns(
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignsStream')) {
            \Flight::route('GET /campaigns', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignsStream(
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignsByLogin') && declaresMethod($reflectionClass, 'getCampaignsByLoginStream')) {
            throw new \Exception('Operation getCampaignsByLogin cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignsByLogin')) {
            \Flight::route('GET /campaigns/by_login/@login', function (string $login) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignsByLogin(
                    parseParam($login, 'string'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignsByLoginStream')) {
            \Flight::route('GET /campaigns/by_login/@login', function (string $login) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignsByLoginStream(
                    parseParam($login, 'string'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantum') && declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantumStream')) {
            throw new \Exception('Operation getCategoriesMaxSaleQuantum cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantum')) {
            \Flight::route('POST /categories/max-sale-quantum', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoriesMaxSaleQuantum(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCategoriesMaxSaleQuantumRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoriesMaxSaleQuantumStream')) {
            \Flight::route('POST /categories/max-sale-quantum', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCategoriesMaxSaleQuantumStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCategoriesMaxSaleQuantumRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoriesTree') && declaresMethod($reflectionClass, 'getCategoriesTreeStream')) {
            throw new \Exception('Operation getCategoriesTree cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoriesTree')) {
            \Flight::route('POST /categories/tree', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoriesTree(
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetCategoriesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoriesTreeStream')) {
            \Flight::route('POST /categories/tree', function () use ($handler) {
                $r = \Flight::request();
                $handler->getCategoriesTreeStream(
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetCategoriesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCategoryContentParameters') && declaresMethod($reflectionClass, 'getCategoryContentParametersStream')) {
            throw new \Exception('Operation getCategoryContentParameters cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCategoryContentParameters')) {
            \Flight::route('POST /category/@categoryId/parameters', function (string $categoryId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCategoryContentParameters(
                    parseParam($categoryId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCategoryContentParametersStream')) {
            \Flight::route('POST /category/@categoryId/parameters', function (string $categoryId) use ($handler) {
                $r = \Flight::request();
                $handler->getCategoryContentParametersStream(
                    parseParam($categoryId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getChatHistory') && declaresMethod($reflectionClass, 'getChatHistoryStream')) {
            throw new \Exception('Operation getChatHistory cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getChatHistory')) {
            \Flight::route('POST /businesses/@businessId/chats/history', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getChatHistory(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatHistoryRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getChatHistoryStream')) {
            \Flight::route('POST /businesses/@businessId/chats/history', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getChatHistoryStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatHistoryRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getChats') && declaresMethod($reflectionClass, 'getChatsStream')) {
            throw new \Exception('Operation getChats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getChats')) {
            \Flight::route('POST /businesses/@businessId/chats', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getChats(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getChatsStream')) {
            \Flight::route('POST /businesses/@businessId/chats', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getChatsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetChatsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeed') && declaresMethod($reflectionClass, 'getFeedStream')) {
            throw new \Exception('Operation getFeed cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeed')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeed(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeedIndexLogs') && declaresMethod($reflectionClass, 'getFeedIndexLogsStream')) {
            throw new \Exception('Operation getFeedIndexLogs cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeedIndexLogs')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId/index-logs', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeedIndexLogs(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['published_time_from'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['published_time_to'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['status'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedIndexLogsStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId/index-logs', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedIndexLogsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['published_time_from'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['published_time_to'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['status'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdates') && declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdatesStream')) {
            throw new \Exception('Operation getFeedbackAndCommentUpdates cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdates')) {
            \Flight::route('GET /campaigns/@campaignId/feedback/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeedbackAndCommentUpdates(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdatesStream')) {
            \Flight::route('GET /campaigns/@campaignId/feedback/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedbackAndCommentUpdatesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeeds') && declaresMethod($reflectionClass, 'getFeedsStream')) {
            throw new \Exception('Operation getFeeds cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeeds')) {
            \Flight::route('GET /campaigns/@campaignId/feeds', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeeds(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedsStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFulfillmentWarehouses') && declaresMethod($reflectionClass, 'getFulfillmentWarehousesStream')) {
            throw new \Exception('Operation getFulfillmentWarehouses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFulfillmentWarehouses')) {
            \Flight::route('GET /warehouses', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFulfillmentWarehouses(
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFulfillmentWarehousesStream')) {
            \Flight::route('GET /warehouses', function () use ($handler) {
                $r = \Flight::request();
                $handler->getFulfillmentWarehousesStream(
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsFeedbackComments') && declaresMethod($reflectionClass, 'getGoodsFeedbackCommentsStream')) {
            throw new \Exception('Operation getGoodsFeedbackComments cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbackComments')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsFeedbackComments(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsFeedbackCommentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbackCommentsStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsFeedbackCommentsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsFeedbackCommentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsFeedbacks') && declaresMethod($reflectionClass, 'getGoodsFeedbacksStream')) {
            throw new \Exception('Operation getGoodsFeedbacks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbacks')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsFeedbacks(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetGoodsFeedbackRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbacksStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsFeedbacksStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetGoodsFeedbackRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsStats') && declaresMethod($reflectionClass, 'getGoodsStatsStream')) {
            throw new \Exception('Operation getGoodsStats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsStats')) {
            \Flight::route('POST /campaigns/@campaignId/stats/skus', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsStats(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsStatsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsStatsStream')) {
            \Flight::route('POST /campaigns/@campaignId/stats/skus', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsStatsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsStatsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getHiddenOffers') && declaresMethod($reflectionClass, 'getHiddenOffersStream')) {
            throw new \Exception('Operation getHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getHiddenOffers')) {
            \Flight::route('GET /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['offset'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getHiddenOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['offset'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatus') && declaresMethod($reflectionClass, 'getOfferCardsContentStatusStream')) {
            throw new \Exception('Operation getOfferCardsContentStatus cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatus')) {
            \Flight::route('POST /businesses/@businessId/offer-cards', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferCardsContentStatus(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferCardsContentStatusRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferCardsContentStatusStream')) {
            \Flight::route('POST /businesses/@businessId/offer-cards', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferCardsContentStatusStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferCardsContentStatusRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferMappingEntries') && declaresMethod($reflectionClass, 'getOfferMappingEntriesStream')) {
            throw new \Exception('Operation getOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingEntries')) {
            \Flight::route('GET /campaigns/@campaignId/offer-mapping-entries', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['shop_sku'] ?? null, '?array'), 
                    parseParam($r->query['mapping_kind'] ?? null, ''), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['availability'] ?? null, '?array'), 
                    parseParam($r->query['category_id'] ?? null, '?array'), 
                    parseParam($r->query['vendor'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingEntriesStream')) {
            \Flight::route('GET /campaigns/@campaignId/offer-mapping-entries', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['shop_sku'] ?? null, '?array'), 
                    parseParam($r->query['mapping_kind'] ?? null, ''), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['availability'] ?? null, '?array'), 
                    parseParam($r->query['category_id'] ?? null, '?array'), 
                    parseParam($r->query['vendor'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferMappings') && declaresMethod($reflectionClass, 'getOfferMappingsStream')) {
            throw new \Exception('Operation getOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferRecommendations') && declaresMethod($reflectionClass, 'getOfferRecommendationsStream')) {
            throw new \Exception('Operation getOfferRecommendations cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferRecommendations')) {
            \Flight::route('POST /businesses/@businessId/offers/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferRecommendations(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetOfferRecommendationsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferRecommendationsStream')) {
            \Flight::route('POST /businesses/@businessId/offers/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferRecommendationsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetOfferRecommendationsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOffers') && declaresMethod($reflectionClass, 'getOffersStream')) {
            throw new \Exception('Operation getOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOffers')) {
            \Flight::route('GET /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['query'] ?? null, '?string'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['shopCategoryId'] ?? null, '?string'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['matched'] ?? null, '?bool'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['query'] ?? null, '?string'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['shopCategoryId'] ?? null, '?string'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['matched'] ?? null, '?bool'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrder') && declaresMethod($reflectionClass, 'getOrderStream')) {
            throw new \Exception('Operation getOrder cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrder')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrder(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfo') && declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfoStream')) {
            throw new \Exception('Operation getOrderBusinessBuyerInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfo')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/business-buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBusinessBuyerInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfoStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/business-buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBusinessBuyerInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfo') && declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfoStream')) {
            throw new \Exception('Operation getOrderBusinessDocumentsInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfo')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/documents', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBusinessDocumentsInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfoStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/documents', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBusinessDocumentsInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrders') && declaresMethod($reflectionClass, 'getOrdersStream')) {
            throw new \Exception('Operation getOrders cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrders')) {
            \Flight::route('GET /campaigns/@campaignId/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrders(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['substatus'] ?? null, '?array'), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['dispatchType'] ?? null, ''), 
                    parseParam($r->query['fake'] ?? null, '?bool'), 
                    parseParam($r->query['hasCis'] ?? null, '?bool'), 
                    parseParam($r->query['onlyWaitingForCancellationApprove'] ?? null, '?bool'), 
                    parseParam($r->query['onlyEstimatedDelivery'] ?? null, '?bool'), 
                    parseParam($r->query['buyerType'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrdersStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrdersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['substatus'] ?? null, '?array'), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['dispatchType'] ?? null, ''), 
                    parseParam($r->query['fake'] ?? null, '?bool'), 
                    parseParam($r->query['hasCis'] ?? null, '?bool'), 
                    parseParam($r->query['onlyWaitingForCancellationApprove'] ?? null, '?bool'), 
                    parseParam($r->query['onlyEstimatedDelivery'] ?? null, '?bool'), 
                    parseParam($r->query['buyerType'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrdersStats') && declaresMethod($reflectionClass, 'getOrdersStatsStream')) {
            throw new \Exception('Operation getOrdersStats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrdersStats')) {
            \Flight::route('POST /campaigns/@campaignId/stats/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrdersStats(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOrdersStatsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrdersStatsStream')) {
            \Flight::route('POST /campaigns/@campaignId/stats/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrdersStatsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOrdersStatsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPrices') && declaresMethod($reflectionClass, 'getPricesStream')) {
            throw new \Exception('Operation getPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPrices')) {
            \Flight::route('GET /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['archived'] ?? null, '?bool')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPricesStream')) {
            \Flight::route('GET /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['archived'] ?? null, '?bool')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPricesByOfferIds') && declaresMethod($reflectionClass, 'getPricesByOfferIdsStream')) {
            throw new \Exception('Operation getPricesByOfferIds cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPricesByOfferIds')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPricesByOfferIds(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPricesByOfferIdsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPricesByOfferIdsStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getPricesByOfferIdsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPricesByOfferIdsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPromoOffers') && declaresMethod($reflectionClass, 'getPromoOffersStream')) {
            throw new \Exception('Operation getPromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetPromoOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getPromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetPromoOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPromos') && declaresMethod($reflectionClass, 'getPromosStream')) {
            throw new \Exception('Operation getPromos cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPromos')) {
            \Flight::route('POST /businesses/@businessId/promos', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPromos(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPromosRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPromosStream')) {
            \Flight::route('POST /businesses/@businessId/promos', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getPromosStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPromosRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getQualityRatings') && declaresMethod($reflectionClass, 'getQualityRatingsStream')) {
            throw new \Exception('Operation getQualityRatings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getQualityRatings')) {
            \Flight::route('POST /businesses/@businessId/ratings/quality', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getQualityRatings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQualityRatingRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingsStream')) {
            \Flight::route('POST /businesses/@businessId/ratings/quality', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getQualityRatingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQualityRatingRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReportInfo') && declaresMethod($reflectionClass, 'getReportInfoStream')) {
            throw new \Exception('Operation getReportInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReportInfo')) {
            \Flight::route('GET /reports/info/@reportId', function (string $reportId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReportInfo(
                    parseParam($reportId, 'string')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReportInfoStream')) {
            \Flight::route('GET /reports/info/@reportId', function (string $reportId) use ($handler) {
                $r = \Flight::request();
                $handler->getReportInfoStream(
                    parseParam($reportId, 'string')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReturn') && declaresMethod($reflectionClass, 'getReturnStream')) {
            throw new \Exception('Operation getReturn cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturn')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReturn(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReturnPhoto') && declaresMethod($reflectionClass, 'getReturnPhotoStream')) {
            throw new \Exception('Operation getReturnPhoto cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturnPhoto')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/@itemId/image/@imageHash', function (string $campaignId, string $orderId, string $returnId, string $itemId, string $imageHash) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnPhoto(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam($itemId, 'int'), 
                    parseParam($imageHash, 'string')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnPhotoStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/@itemId/image/@imageHash', function (string $campaignId, string $orderId, string $returnId, string $itemId, string $imageHash) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnPhotoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam($itemId, 'int'), 
                    parseParam($imageHash, 'string')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'getReturns') && declaresMethod($reflectionClass, 'getReturnsStream')) {
            throw new \Exception('Operation getReturns cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturns')) {
            \Flight::route('GET /campaigns/@campaignId/returns', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReturns(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['statuses'] ?? null, '?array'), 
                    parseParam($r->query['type'] ?? null, ''), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['to_date'] ?? null, '?\\DateTime')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnsStream')) {
            \Flight::route('GET /campaigns/@campaignId/returns', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['statuses'] ?? null, '?array'), 
                    parseParam($r->query['type'] ?? null, ''), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['to_date'] ?? null, '?\\DateTime')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getStocks') && declaresMethod($reflectionClass, 'getStocksStream')) {
            throw new \Exception('Operation getStocks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getStocks')) {
            \Flight::route('POST /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getStocks(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetWarehouseStocksRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getStocksStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getStocksStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetWarehouseStocksRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntries') && declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntriesStream')) {
            throw new \Exception('Operation getSuggestedOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntries')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetSuggestedOfferMappingEntriesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntriesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetSuggestedOfferMappingEntriesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappings') && declaresMethod($reflectionClass, 'getSuggestedOfferMappingsStream')) {
            throw new \Exception('Operation getSuggestedOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/suggestions', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetSuggestedOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/suggestions', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetSuggestedOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedPrices') && declaresMethod($reflectionClass, 'getSuggestedPricesStream')) {
            throw new \Exception('Operation getSuggestedPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedPrices')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SuggestPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedPricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SuggestPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'putBidsForBusiness') && declaresMethod($reflectionClass, 'putBidsForBusinessStream')) {
            throw new \Exception('Operation putBidsForBusiness cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'putBidsForBusiness')) {
            \Flight::route('PUT /businesses/@businessId/bids', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->putBidsForBusiness(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'putBidsForBusinessStream')) {
            \Flight::route('PUT /businesses/@businessId/bids', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->putBidsForBusinessStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'putBidsForCampaign') && declaresMethod($reflectionClass, 'putBidsForCampaignStream')) {
            throw new \Exception('Operation putBidsForCampaign cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'putBidsForCampaign')) {
            \Flight::route('PUT /campaigns/@campaignId/bids', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->putBidsForCampaign(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'putBidsForCampaignStream')) {
            \Flight::route('PUT /campaigns/@campaignId/bids', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->putBidsForCampaignStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\PutSkuBidsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'refreshFeed') && declaresMethod($reflectionClass, 'refreshFeedStream')) {
            throw new \Exception('Operation refreshFeed cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'refreshFeed')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/refresh', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->refreshFeed(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'refreshFeedStream')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/refresh', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->refreshFeedStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionChildren') && declaresMethod($reflectionClass, 'searchRegionChildrenStream')) {
            throw new \Exception('Operation searchRegionChildren cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionChildren')) {
            \Flight::route('GET /regions/@regionId/children', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionChildren(
                    parseParam($regionId, 'int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionChildrenStream')) {
            \Flight::route('GET /regions/@regionId/children', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionChildrenStream(
                    parseParam($regionId, 'int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionsById') && declaresMethod($reflectionClass, 'searchRegionsByIdStream')) {
            throw new \Exception('Operation searchRegionsById cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionsById')) {
            \Flight::route('GET /regions/@regionId', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionsById(
                    parseParam($regionId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByIdStream')) {
            \Flight::route('GET /regions/@regionId', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionsByIdStream(
                    parseParam($regionId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionsByName') && declaresMethod($reflectionClass, 'searchRegionsByNameStream')) {
            throw new \Exception('Operation searchRegionsByName cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByName')) {
            \Flight::route('GET /regions', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionsByName(
                    parseParam($r->query['name'] ?? null, 'string'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByNameStream')) {
            \Flight::route('GET /regions', function () use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionsByNameStream(
                    parseParam($r->query['name'] ?? null, 'string'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'sendFileToChat') && declaresMethod($reflectionClass, 'sendFileToChatStream')) {
            throw new \Exception('Operation sendFileToChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'sendFileToChat')) {
            \Flight::route('POST /businesses/@businessId/chats/file/send', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->sendFileToChat(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'sendFileToChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/file/send', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->sendFileToChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'sendMessageToChat') && declaresMethod($reflectionClass, 'sendMessageToChatStream')) {
            throw new \Exception('Operation sendMessageToChat cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'sendMessageToChat')) {
            \Flight::route('POST /businesses/@businessId/chats/message', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->sendMessageToChat(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SendMessageToChatRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'sendMessageToChatStream')) {
            \Flight::route('POST /businesses/@businessId/chats/message', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->sendMessageToChatStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['chatId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SendMessageToChatRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setFeedParams') && declaresMethod($reflectionClass, 'setFeedParamsStream')) {
            throw new \Exception('Operation setFeedParams cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setFeedParams')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/params', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setFeedParams(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetFeedParamsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setFeedParamsStream')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/params', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->setFeedParamsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetFeedParamsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReaction') && declaresMethod($reflectionClass, 'skipGoodsFeedbacksReactionStream')) {
            throw new \Exception('Operation skipGoodsFeedbacksReaction cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReaction')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/skip-reaction', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->skipGoodsFeedbacksReaction(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SkipGoodsFeedbackReactionRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReactionStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/skip-reaction', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->skipGoodsFeedbacksReactionStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SkipGoodsFeedbackReactionRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateBusinessPrices') && declaresMethod($reflectionClass, 'updateBusinessPricesStream')) {
            throw new \Exception('Operation updateBusinessPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateBusinessPrices')) {
            \Flight::route('POST /businesses/@businessId/offer-prices/updates', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateBusinessPrices(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateBusinessPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateBusinessPricesStream')) {
            \Flight::route('POST /businesses/@businessId/offer-prices/updates', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateBusinessPricesStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateBusinessPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateCampaignOffers') && declaresMethod($reflectionClass, 'updateCampaignOffersStream')) {
            throw new \Exception('Operation updateCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers/update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateCampaignOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateCampaignOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackComment') && declaresMethod($reflectionClass, 'updateGoodsFeedbackCommentStream')) {
            throw new \Exception('Operation updateGoodsFeedbackComment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackComment')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateGoodsFeedbackComment(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateGoodsFeedbackCommentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackCommentStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateGoodsFeedbackCommentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateGoodsFeedbackCommentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferContent') && declaresMethod($reflectionClass, 'updateOfferContentStream')) {
            throw new \Exception('Operation updateOfferContent cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferContent')) {
            \Flight::route('POST /businesses/@businessId/offer-cards/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferContent(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferContentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferContentStream')) {
            \Flight::route('POST /businesses/@businessId/offer-cards/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferContentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferContentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferMappingEntries') && declaresMethod($reflectionClass, 'updateOfferMappingEntriesStream')) {
            throw new \Exception('Operation updateOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingEntries')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingEntryRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingEntriesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingEntryRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferMappings') && declaresMethod($reflectionClass, 'updateOfferMappingsStream')) {
            throw new \Exception('Operation updateOfferMappings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappings')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferMappings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingsStream')) {
            \Flight::route('POST /businesses/@businessId/offer-mappings/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferMappingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updatePrices') && declaresMethod($reflectionClass, 'updatePricesStream')) {
            throw new \Exception('Operation updatePrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updatePrices')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updatePrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updatePricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updatePricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updatePromoOffers') && declaresMethod($reflectionClass, 'updatePromoOffersStream')) {
            throw new \Exception('Operation updatePromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updatePromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updatePromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePromoOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updatePromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updatePromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePromoOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdates') && declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdatesStream')) {
            throw new \Exception('Operation getFeedbackAndCommentUpdates cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdates')) {
            \Flight::route('GET /campaigns/@campaignId/feedback/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeedbackAndCommentUpdates(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedbackAndCommentUpdatesStream')) {
            \Flight::route('GET /campaigns/@campaignId/feedback/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedbackAndCommentUpdatesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeed') && declaresMethod($reflectionClass, 'getFeedStream')) {
            throw new \Exception('Operation getFeed cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeed')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeed(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeedIndexLogs') && declaresMethod($reflectionClass, 'getFeedIndexLogsStream')) {
            throw new \Exception('Operation getFeedIndexLogs cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeedIndexLogs')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId/index-logs', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeedIndexLogs(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['published_time_from'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['published_time_to'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['status'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedIndexLogsStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds/@feedId/index-logs', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedIndexLogsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['published_time_from'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['published_time_to'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['status'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFeeds') && declaresMethod($reflectionClass, 'getFeedsStream')) {
            throw new \Exception('Operation getFeeds cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFeeds')) {
            \Flight::route('GET /campaigns/@campaignId/feeds', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFeeds(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFeedsStream')) {
            \Flight::route('GET /campaigns/@campaignId/feeds', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getFeedsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'refreshFeed') && declaresMethod($reflectionClass, 'refreshFeedStream')) {
            throw new \Exception('Operation refreshFeed cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'refreshFeed')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/refresh', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->refreshFeed(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'refreshFeedStream')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/refresh', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->refreshFeedStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setFeedParams') && declaresMethod($reflectionClass, 'setFeedParamsStream')) {
            throw new \Exception('Operation setFeedParams cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setFeedParams')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/params', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setFeedParams(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetFeedParamsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setFeedParamsStream')) {
            \Flight::route('POST /campaigns/@campaignId/feeds/@feedId/params', function (string $campaignId, string $feedId) use ($handler) {
                $r = \Flight::request();
                $handler->setFeedParamsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($feedId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetFeedParamsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackComment') && declaresMethod($reflectionClass, 'deleteGoodsFeedbackCommentStream')) {
            throw new \Exception('Operation deleteGoodsFeedbackComment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackComment')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteGoodsFeedbackComment(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteGoodsFeedbackCommentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteGoodsFeedbackCommentStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteGoodsFeedbackCommentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteGoodsFeedbackCommentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsFeedbackComments') && declaresMethod($reflectionClass, 'getGoodsFeedbackCommentsStream')) {
            throw new \Exception('Operation getGoodsFeedbackComments cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbackComments')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsFeedbackComments(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsFeedbackCommentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbackCommentsStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsFeedbackCommentsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsFeedbackCommentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsFeedbacks') && declaresMethod($reflectionClass, 'getGoodsFeedbacksStream')) {
            throw new \Exception('Operation getGoodsFeedbacks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbacks')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsFeedbacks(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetGoodsFeedbackRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsFeedbacksStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsFeedbacksStream(
                    parseParam($businessId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetGoodsFeedbackRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReaction') && declaresMethod($reflectionClass, 'skipGoodsFeedbacksReactionStream')) {
            throw new \Exception('Operation skipGoodsFeedbacksReaction cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReaction')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/skip-reaction', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->skipGoodsFeedbacksReaction(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SkipGoodsFeedbackReactionRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'skipGoodsFeedbacksReactionStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/skip-reaction', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->skipGoodsFeedbacksReactionStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SkipGoodsFeedbackReactionRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackComment') && declaresMethod($reflectionClass, 'updateGoodsFeedbackCommentStream')) {
            throw new \Exception('Operation updateGoodsFeedbackComment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackComment')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateGoodsFeedbackComment(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateGoodsFeedbackCommentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateGoodsFeedbackCommentStream')) {
            \Flight::route('POST /businesses/@businessId/goods-feedback/comments/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateGoodsFeedbackCommentStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateGoodsFeedbackCommentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getGoodsStats') && declaresMethod($reflectionClass, 'getGoodsStatsStream')) {
            throw new \Exception('Operation getGoodsStats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getGoodsStats')) {
            \Flight::route('POST /campaigns/@campaignId/stats/skus', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getGoodsStats(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsStatsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getGoodsStatsStream')) {
            \Flight::route('POST /campaigns/@campaignId/stats/skus', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getGoodsStatsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetGoodsStatsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'addHiddenOffers') && declaresMethod($reflectionClass, 'addHiddenOffersStream')) {
            throw new \Exception('Operation addHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'addHiddenOffers')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->addHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddHiddenOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'addHiddenOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->addHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AddHiddenOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteHiddenOffers') && declaresMethod($reflectionClass, 'deleteHiddenOffersStream')) {
            throw new \Exception('Operation deleteHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteHiddenOffers')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteHiddenOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteHiddenOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/hidden-offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteHiddenOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getHiddenOffers') && declaresMethod($reflectionClass, 'getHiddenOffersStream')) {
            throw new \Exception('Operation getHiddenOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getHiddenOffers')) {
            \Flight::route('GET /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getHiddenOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['offset'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getHiddenOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/hidden-offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getHiddenOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['offset'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getModel') && declaresMethod($reflectionClass, 'getModelStream')) {
            throw new \Exception('Operation getModel cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getModel')) {
            \Flight::route('GET /models/@modelId', function (string $modelId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getModel(
                    parseParam($modelId, 'int'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getModelStream')) {
            \Flight::route('GET /models/@modelId', function (string $modelId) use ($handler) {
                $r = \Flight::request();
                $handler->getModelStream(
                    parseParam($modelId, 'int'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getModelOffers') && declaresMethod($reflectionClass, 'getModelOffersStream')) {
            throw new \Exception('Operation getModelOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getModelOffers')) {
            \Flight::route('GET /models/@modelId/offers', function (string $modelId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getModelOffers(
                    parseParam($modelId, 'int'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['orderByPrice'] ?? null, ''), 
                    parseParam($r->query['count'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getModelOffersStream')) {
            \Flight::route('GET /models/@modelId/offers', function (string $modelId) use ($handler) {
                $r = \Flight::request();
                $handler->getModelOffersStream(
                    parseParam($modelId, 'int'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['orderByPrice'] ?? null, ''), 
                    parseParam($r->query['count'] ?? null, '?int'), 
                    parseParam($r->query['page'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getModels') && declaresMethod($reflectionClass, 'getModelsStream')) {
            throw new \Exception('Operation getModels cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getModels')) {
            \Flight::route('POST /models', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getModels(
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetModelsRequest'), 
                    parseParam($r->query['currency'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getModelsStream')) {
            \Flight::route('POST /models', function () use ($handler) {
                $r = \Flight::request();
                $handler->getModelsStream(
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetModelsRequest'), 
                    parseParam($r->query['currency'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getModelsOffers') && declaresMethod($reflectionClass, 'getModelsOffersStream')) {
            throw new \Exception('Operation getModelsOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getModelsOffers')) {
            \Flight::route('POST /models/offers', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getModelsOffers(
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetModelsRequest'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['orderByPrice'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getModelsOffersStream')) {
            \Flight::route('POST /models/offers', function () use ($handler) {
                $r = \Flight::request();
                $handler->getModelsOffersStream(
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetModelsRequest'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['orderByPrice'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchModels') && declaresMethod($reflectionClass, 'searchModelsStream')) {
            throw new \Exception('Operation searchModels cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchModels')) {
            \Flight::route('GET /models', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchModels(
                    parseParam($r->query['query'] ?? null, 'string'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchModelsStream')) {
            \Flight::route('GET /models', function () use ($handler) {
                $r = \Flight::request();
                $handler->searchModelsStream(
                    parseParam($r->query['query'] ?? null, 'string'), 
                    parseParam($r->query['regionId'] ?? null, 'int'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferMappingEntries') && declaresMethod($reflectionClass, 'getOfferMappingEntriesStream')) {
            throw new \Exception('Operation getOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingEntries')) {
            \Flight::route('GET /campaigns/@campaignId/offer-mapping-entries', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['shop_sku'] ?? null, '?array'), 
                    parseParam($r->query['mapping_kind'] ?? null, ''), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['availability'] ?? null, '?array'), 
                    parseParam($r->query['category_id'] ?? null, '?array'), 
                    parseParam($r->query['vendor'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferMappingEntriesStream')) {
            \Flight::route('GET /campaigns/@campaignId/offer-mapping-entries', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['offer_id'] ?? null, '?array'), 
                    parseParam($r->query['shop_sku'] ?? null, '?array'), 
                    parseParam($r->query['mapping_kind'] ?? null, ''), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['availability'] ?? null, '?array'), 
                    parseParam($r->query['category_id'] ?? null, '?array'), 
                    parseParam($r->query['vendor'] ?? null, '?array'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntries') && declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntriesStream')) {
            throw new \Exception('Operation getSuggestedOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntries')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetSuggestedOfferMappingEntriesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedOfferMappingEntriesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetSuggestedOfferMappingEntriesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOfferMappingEntries') && declaresMethod($reflectionClass, 'updateOfferMappingEntriesStream')) {
            throw new \Exception('Operation updateOfferMappingEntries cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingEntries')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOfferMappingEntries(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingEntryRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOfferMappingEntriesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-mapping-entries/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOfferMappingEntriesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOfferMappingEntryRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteCampaignOffers') && declaresMethod($reflectionClass, 'deleteCampaignOffersStream')) {
            throw new \Exception('Operation deleteCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteCampaignOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/delete', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeleteCampaignOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getAllOffers') && declaresMethod($reflectionClass, 'getAllOffersStream')) {
            throw new \Exception('Operation getAllOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getAllOffers')) {
            \Flight::route('GET /campaigns/@campaignId/offers/all', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getAllOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['chunk'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getAllOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/offers/all', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getAllOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['chunk'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignOffers') && declaresMethod($reflectionClass, 'getCampaignOffersStream')) {
            throw new \Exception('Operation getCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCampaignOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetCampaignOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOfferRecommendations') && declaresMethod($reflectionClass, 'getOfferRecommendationsStream')) {
            throw new \Exception('Operation getOfferRecommendations cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOfferRecommendations')) {
            \Flight::route('POST /businesses/@businessId/offers/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOfferRecommendations(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetOfferRecommendationsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOfferRecommendationsStream')) {
            \Flight::route('POST /businesses/@businessId/offers/recommendations', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getOfferRecommendationsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetOfferRecommendationsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOffers') && declaresMethod($reflectionClass, 'getOffersStream')) {
            throw new \Exception('Operation getOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOffers')) {
            \Flight::route('GET /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['query'] ?? null, '?string'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['shopCategoryId'] ?? null, '?string'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['matched'] ?? null, '?bool'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOffersStream')) {
            \Flight::route('GET /campaigns/@campaignId/offers', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['query'] ?? null, '?string'), 
                    parseParam($r->query['feedId'] ?? null, '?int'), 
                    parseParam($r->query['shopCategoryId'] ?? null, '?string'), 
                    parseParam($r->query['currency'] ?? null, ''), 
                    parseParam($r->query['matched'] ?? null, '?bool'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateCampaignOffers') && declaresMethod($reflectionClass, 'updateCampaignOffersStream')) {
            throw new \Exception('Operation updateCampaignOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateCampaignOffers')) {
            \Flight::route('POST /campaigns/@campaignId/offers/update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateCampaignOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateCampaignOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateCampaignOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateCampaignOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateCampaignOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfo') && declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfoStream')) {
            throw new \Exception('Operation getOrderBusinessBuyerInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfo')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/business-buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBusinessBuyerInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessBuyerInfoStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/business-buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBusinessBuyerInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfo') && declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfoStream')) {
            throw new \Exception('Operation getOrderBusinessDocumentsInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfo')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/documents', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBusinessDocumentsInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBusinessDocumentsInfoStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/documents', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBusinessDocumentsInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrderBuyerInfo') && declaresMethod($reflectionClass, 'getOrderBuyerInfoStream')) {
            throw new \Exception('Operation getOrderBuyerInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderBuyerInfo')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderBuyerInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderBuyerInfoStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/buyer', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderBuyerInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderDeliveryDate') && declaresMethod($reflectionClass, 'setOrderDeliveryDateStream')) {
            throw new \Exception('Operation setOrderDeliveryDate cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderDeliveryDate')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/date', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderDeliveryDate(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderDeliveryDateRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderDeliveryDateStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/date', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderDeliveryDateStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderDeliveryDateRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderDeliveryTrackCode') && declaresMethod($reflectionClass, 'setOrderDeliveryTrackCodeStream')) {
            throw new \Exception('Operation setOrderDeliveryTrackCode cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderDeliveryTrackCode')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/delivery/track', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderDeliveryTrackCode(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderDeliveryTrackCodeRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderDeliveryTrackCodeStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/delivery/track', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderDeliveryTrackCodeStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderDeliveryTrackCodeRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOrderStorageLimit') && declaresMethod($reflectionClass, 'updateOrderStorageLimitStream')) {
            throw new \Exception('Operation updateOrderStorageLimit cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderStorageLimit')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/storage-limit', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOrderStorageLimit(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStorageLimitRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderStorageLimitStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/storage-limit', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderStorageLimitStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStorageLimitRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'verifyOrderEac') && declaresMethod($reflectionClass, 'verifyOrderEacStream')) {
            throw new \Exception('Operation verifyOrderEac cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'verifyOrderEac')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/verifyEac', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->verifyOrderEac(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\VerifyOrderEacRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'verifyOrderEacStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/verifyEac', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->verifyOrderEacStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\VerifyOrderEacRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateOrderLabel') && declaresMethod($reflectionClass, 'generateOrderLabelStream')) {
            throw new \Exception('Operation generateOrderLabel cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabel')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes/@boxId/label', function (string $campaignId, string $orderId, string $shipmentId, string $boxId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabel(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($boxId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabelStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes/@boxId/label', function (string $campaignId, string $orderId, string $shipmentId, string $boxId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabelStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($boxId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'generateOrderLabels') && declaresMethod($reflectionClass, 'generateOrderLabelsStream')) {
            throw new \Exception('Operation generateOrderLabels cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabels')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabels(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'generateOrderLabelsStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->generateOrderLabelsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'getOrderLabelsData') && declaresMethod($reflectionClass, 'getOrderLabelsDataStream')) {
            throw new \Exception('Operation getOrderLabelsData cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrderLabelsData')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels/data', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderLabelsData(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderLabelsDataStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/delivery/labels/data', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderLabelsDataStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'acceptOrderCancellation') && declaresMethod($reflectionClass, 'acceptOrderCancellationStream')) {
            throw new \Exception('Operation acceptOrderCancellation cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'acceptOrderCancellation')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/cancellation/accept', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->acceptOrderCancellation(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AcceptOrderCancellationRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'acceptOrderCancellationStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/cancellation/accept', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->acceptOrderCancellationStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\AcceptOrderCancellationRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrder') && declaresMethod($reflectionClass, 'getOrderStream')) {
            throw new \Exception('Operation getOrder cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrder')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrder(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrderStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrderStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrders') && declaresMethod($reflectionClass, 'getOrdersStream')) {
            throw new \Exception('Operation getOrders cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrders')) {
            \Flight::route('GET /campaigns/@campaignId/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrders(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['substatus'] ?? null, '?array'), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['dispatchType'] ?? null, ''), 
                    parseParam($r->query['fake'] ?? null, '?bool'), 
                    parseParam($r->query['hasCis'] ?? null, '?bool'), 
                    parseParam($r->query['onlyWaitingForCancellationApprove'] ?? null, '?bool'), 
                    parseParam($r->query['onlyEstimatedDelivery'] ?? null, '?bool'), 
                    parseParam($r->query['buyerType'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrdersStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrdersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['status'] ?? null, '?array'), 
                    parseParam($r->query['substatus'] ?? null, '?array'), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['supplierShipmentDateTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtFrom'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['updatedAtTo'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['dispatchType'] ?? null, ''), 
                    parseParam($r->query['fake'] ?? null, '?bool'), 
                    parseParam($r->query['hasCis'] ?? null, '?bool'), 
                    parseParam($r->query['onlyWaitingForCancellationApprove'] ?? null, '?bool'), 
                    parseParam($r->query['onlyEstimatedDelivery'] ?? null, '?bool'), 
                    parseParam($r->query['buyerType'] ?? null, ''), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'provideOrderDigitalCodes') && declaresMethod($reflectionClass, 'provideOrderDigitalCodesStream')) {
            throw new \Exception('Operation provideOrderDigitalCodes cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'provideOrderDigitalCodes')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/deliverDigitalGoods', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->provideOrderDigitalCodes(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderDigitalCodesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'provideOrderDigitalCodesStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/deliverDigitalGoods', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->provideOrderDigitalCodesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderDigitalCodesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiers') && declaresMethod($reflectionClass, 'provideOrderItemIdentifiersStream')) {
            throw new \Exception('Operation provideOrderItemIdentifiers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiers')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/identifiers', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->provideOrderItemIdentifiers(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderItemIdentifiersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'provideOrderItemIdentifiersStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/identifiers', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->provideOrderItemIdentifiersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ProvideOrderItemIdentifiersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderBoxLayout') && declaresMethod($reflectionClass, 'setOrderBoxLayoutStream')) {
            throw new \Exception('Operation setOrderBoxLayout cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderBoxLayout')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/boxes', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderBoxLayout(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderBoxLayoutRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderBoxLayoutStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/boxes', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderBoxLayoutStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderBoxLayoutRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxes') && declaresMethod($reflectionClass, 'setOrderShipmentBoxesStream')) {
            throw new \Exception('Operation setOrderShipmentBoxes cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxes')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes', function (string $campaignId, string $orderId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setOrderShipmentBoxes(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderShipmentBoxesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setOrderShipmentBoxesStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/delivery/shipments/@shipmentId/boxes', function (string $campaignId, string $orderId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->setOrderShipmentBoxesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetOrderShipmentBoxesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOrderItems') && declaresMethod($reflectionClass, 'updateOrderItemsStream')) {
            throw new \Exception('Operation updateOrderItems cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderItems')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/items', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderItems(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderItemRequest')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderItemsStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/items', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderItemsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderItemRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'updateOrderStatus') && declaresMethod($reflectionClass, 'updateOrderStatusStream')) {
            throw new \Exception('Operation updateOrderStatus cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatus')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/status', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOrderStatus(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatusStream')) {
            \Flight::route('PUT /campaigns/@campaignId/orders/@orderId/status', function (string $campaignId, string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderStatusStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOrderStatuses') && declaresMethod($reflectionClass, 'updateOrderStatusesStream')) {
            throw new \Exception('Operation updateOrderStatuses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatuses')) {
            \Flight::route('POST /campaigns/@campaignId/orders/status-update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOrderStatuses(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOrderStatusesStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/status-update', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOrderStatusesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOrderStatusesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOrdersStats') && declaresMethod($reflectionClass, 'getOrdersStatsStream')) {
            throw new \Exception('Operation getOrdersStats cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOrdersStats')) {
            \Flight::route('POST /campaigns/@campaignId/stats/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrdersStats(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOrdersStatsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOrdersStatsStream')) {
            \Flight::route('POST /campaigns/@campaignId/stats/orders', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOrdersStatsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetOrdersStatsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOutletLicenses') && declaresMethod($reflectionClass, 'deleteOutletLicensesStream')) {
            throw new \Exception('Operation deleteOutletLicenses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOutletLicenses')) {
            \Flight::route('DELETE /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOutletLicenses(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['ids'] ?? null, '?array')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOutletLicensesStream')) {
            \Flight::route('DELETE /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOutletLicensesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['ids'] ?? null, '?array')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOutletLicenses') && declaresMethod($reflectionClass, 'getOutletLicensesStream')) {
            throw new \Exception('Operation getOutletLicenses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOutletLicenses')) {
            \Flight::route('GET /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOutletLicenses(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['outletIds'] ?? null, '?array'), 
                    parseParam($r->query['ids'] ?? null, '?array')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOutletLicensesStream')) {
            \Flight::route('GET /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOutletLicensesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['outletIds'] ?? null, '?array'), 
                    parseParam($r->query['ids'] ?? null, '?array')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOutletLicenses') && declaresMethod($reflectionClass, 'updateOutletLicensesStream')) {
            throw new \Exception('Operation updateOutletLicenses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOutletLicenses')) {
            \Flight::route('POST /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOutletLicenses(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOutletLicenseRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOutletLicensesStream')) {
            \Flight::route('POST /campaigns/@campaignId/outlets/licenses', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOutletLicensesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateOutletLicenseRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'createOutlet') && declaresMethod($reflectionClass, 'createOutletStream')) {
            throw new \Exception('Operation createOutlet cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'createOutlet')) {
            \Flight::route('POST /campaigns/@campaignId/outlets', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->createOutlet(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ChangeOutletRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'createOutletStream')) {
            \Flight::route('POST /campaigns/@campaignId/outlets', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->createOutletStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ChangeOutletRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deleteOutlet') && declaresMethod($reflectionClass, 'deleteOutletStream')) {
            throw new \Exception('Operation deleteOutlet cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deleteOutlet')) {
            \Flight::route('DELETE /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deleteOutlet(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deleteOutletStream')) {
            \Flight::route('DELETE /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOutletStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOutlet') && declaresMethod($reflectionClass, 'getOutletStream')) {
            throw new \Exception('Operation getOutlet cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOutlet')) {
            \Flight::route('GET /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOutlet(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOutletStream')) {
            \Flight::route('GET /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $handler->getOutletStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getOutlets') && declaresMethod($reflectionClass, 'getOutletsStream')) {
            throw new \Exception('Operation getOutlets cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getOutlets')) {
            \Flight::route('GET /campaigns/@campaignId/outlets', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOutlets(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['region_id'] ?? null, '?int'), 
                    parseParam($r->query['shop_outlet_code'] ?? null, '?string'), 
                    parseParam($r->query['regionId'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getOutletsStream')) {
            \Flight::route('GET /campaigns/@campaignId/outlets', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getOutletsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['region_id'] ?? null, '?int'), 
                    parseParam($r->query['shop_outlet_code'] ?? null, '?string'), 
                    parseParam($r->query['regionId'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateOutlet') && declaresMethod($reflectionClass, 'updateOutletStream')) {
            throw new \Exception('Operation updateOutlet cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateOutlet')) {
            \Flight::route('PUT /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateOutlet(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ChangeOutletRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateOutletStream')) {
            \Flight::route('PUT /campaigns/@campaignId/outlets/@outletId', function (string $campaignId, string $outletId) use ($handler) {
                $r = \Flight::request();
                $handler->updateOutletStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($outletId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ChangeOutletRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmBusinessPrices') && declaresMethod($reflectionClass, 'confirmBusinessPricesStream')) {
            throw new \Exception('Operation confirmBusinessPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmBusinessPrices')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine/confirm', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmBusinessPrices(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmBusinessPricesStream')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine/confirm', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmBusinessPricesStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmCampaignPrices') && declaresMethod($reflectionClass, 'confirmCampaignPricesStream')) {
            throw new \Exception('Operation confirmCampaignPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmCampaignPrices')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine/confirm', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmCampaignPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmCampaignPricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine/confirm', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmCampaignPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\ConfirmPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffers') && declaresMethod($reflectionClass, 'getBusinessQuarantineOffersStream')) {
            throw new \Exception('Operation getBusinessQuarantineOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffers')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getBusinessQuarantineOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getBusinessQuarantineOffersStream')) {
            \Flight::route('POST /businesses/@businessId/price-quarantine', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getBusinessQuarantineOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffers') && declaresMethod($reflectionClass, 'getCampaignQuarantineOffersStream')) {
            throw new \Exception('Operation getCampaignQuarantineOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffers')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getCampaignQuarantineOffers(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getCampaignQuarantineOffersStream')) {
            \Flight::route('POST /campaigns/@campaignId/price-quarantine', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getCampaignQuarantineOffersStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQuarantineOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPrices') && declaresMethod($reflectionClass, 'getPricesStream')) {
            throw new \Exception('Operation getPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPrices')) {
            \Flight::route('GET /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['archived'] ?? null, '?bool')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPricesStream')) {
            \Flight::route('GET /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['archived'] ?? null, '?bool')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPricesByOfferIds') && declaresMethod($reflectionClass, 'getPricesByOfferIdsStream')) {
            throw new \Exception('Operation getPricesByOfferIds cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPricesByOfferIds')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPricesByOfferIds(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPricesByOfferIdsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPricesByOfferIdsStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getPricesByOfferIdsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPricesByOfferIdsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getSuggestedPrices') && declaresMethod($reflectionClass, 'getSuggestedPricesStream')) {
            throw new \Exception('Operation getSuggestedPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getSuggestedPrices')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getSuggestedPrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SuggestPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getSuggestedPricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/suggestions', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getSuggestedPricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SuggestPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateBusinessPrices') && declaresMethod($reflectionClass, 'updateBusinessPricesStream')) {
            throw new \Exception('Operation updateBusinessPrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateBusinessPrices')) {
            \Flight::route('POST /businesses/@businessId/offer-prices/updates', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateBusinessPrices(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateBusinessPricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateBusinessPricesStream')) {
            \Flight::route('POST /businesses/@businessId/offer-prices/updates', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updateBusinessPricesStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateBusinessPricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updatePrices') && declaresMethod($reflectionClass, 'updatePricesStream')) {
            throw new \Exception('Operation updatePrices cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updatePrices')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updatePrices(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePricesRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updatePricesStream')) {
            \Flight::route('POST /campaigns/@campaignId/offer-prices/updates', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updatePricesStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePricesRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'deletePromoOffers') && declaresMethod($reflectionClass, 'deletePromoOffersStream')) {
            throw new \Exception('Operation deletePromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'deletePromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->deletePromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeletePromoOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'deletePromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/delete', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->deletePromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\DeletePromoOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPromoOffers') && declaresMethod($reflectionClass, 'getPromoOffersStream')) {
            throw new \Exception('Operation getPromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetPromoOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getPromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetPromoOffersRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getPromos') && declaresMethod($reflectionClass, 'getPromosStream')) {
            throw new \Exception('Operation getPromos cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getPromos')) {
            \Flight::route('POST /businesses/@businessId/promos', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPromos(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPromosRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getPromosStream')) {
            \Flight::route('POST /businesses/@businessId/promos', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getPromosStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetPromosRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updatePromoOffers') && declaresMethod($reflectionClass, 'updatePromoOffersStream')) {
            throw new \Exception('Operation updatePromoOffers cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updatePromoOffers')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updatePromoOffers(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePromoOffersRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updatePromoOffersStream')) {
            \Flight::route('POST /businesses/@businessId/promos/offers/update', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->updatePromoOffersStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdatePromoOffersRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getQualityRatingDetails') && declaresMethod($reflectionClass, 'getQualityRatingDetailsStream')) {
            throw new \Exception('Operation getQualityRatingDetails cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingDetails')) {
            \Flight::route('POST /campaigns/@campaignId/ratings/quality/details', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getQualityRatingDetails(
                    parseParam($campaignId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingDetailsStream')) {
            \Flight::route('POST /campaigns/@campaignId/ratings/quality/details', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getQualityRatingDetailsStream(
                    parseParam($campaignId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getQualityRatings') && declaresMethod($reflectionClass, 'getQualityRatingsStream')) {
            throw new \Exception('Operation getQualityRatings cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getQualityRatings')) {
            \Flight::route('POST /businesses/@businessId/ratings/quality', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getQualityRatings(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQualityRatingRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getQualityRatingsStream')) {
            \Flight::route('POST /businesses/@businessId/ratings/quality', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getQualityRatingsStream(
                    parseParam($businessId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GetQualityRatingRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionChildren') && declaresMethod($reflectionClass, 'searchRegionChildrenStream')) {
            throw new \Exception('Operation searchRegionChildren cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionChildren')) {
            \Flight::route('GET /regions/@regionId/children', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionChildren(
                    parseParam($regionId, 'int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionChildrenStream')) {
            \Flight::route('GET /regions/@regionId/children', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionChildrenStream(
                    parseParam($regionId, 'int'), 
                    parseParam($r->query['page'] ?? null, '?int'), 
                    parseParam($r->query['pageSize'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionsById') && declaresMethod($reflectionClass, 'searchRegionsByIdStream')) {
            throw new \Exception('Operation searchRegionsById cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionsById')) {
            \Flight::route('GET /regions/@regionId', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionsById(
                    parseParam($regionId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByIdStream')) {
            \Flight::route('GET /regions/@regionId', function (string $regionId) use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionsByIdStream(
                    parseParam($regionId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchRegionsByName') && declaresMethod($reflectionClass, 'searchRegionsByNameStream')) {
            throw new \Exception('Operation searchRegionsByName cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByName')) {
            \Flight::route('GET /regions', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchRegionsByName(
                    parseParam($r->query['name'] ?? null, 'string'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchRegionsByNameStream')) {
            \Flight::route('GET /regions', function () use ($handler) {
                $r = \Flight::request();
                $handler->searchRegionsByNameStream(
                    parseParam($r->query['name'] ?? null, 'string'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReport') && declaresMethod($reflectionClass, 'generateBoostConsolidatedReportStream')) {
            throw new \Exception('Operation generateBoostConsolidatedReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReport')) {
            \Flight::route('POST /reports/boost-consolidated/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateBoostConsolidatedReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateBoostConsolidatedRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateBoostConsolidatedReportStream')) {
            \Flight::route('POST /reports/boost-consolidated/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateBoostConsolidatedReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateBoostConsolidatedRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReport') && declaresMethod($reflectionClass, 'generateCompetitorsPositionReportStream')) {
            throw new \Exception('Operation generateCompetitorsPositionReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReport')) {
            \Flight::route('POST /reports/competitors-position/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateCompetitorsPositionReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateCompetitorsPositionReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateCompetitorsPositionReportStream')) {
            \Flight::route('POST /reports/competitors-position/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateCompetitorsPositionReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateCompetitorsPositionReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReport') && declaresMethod($reflectionClass, 'generateGoodsFeedbackReportStream')) {
            throw new \Exception('Operation generateGoodsFeedbackReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReport')) {
            \Flight::route('POST /reports/goods-feedback/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsFeedbackReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsFeedbackRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsFeedbackReportStream')) {
            \Flight::route('POST /reports/goods-feedback/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsFeedbackReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsFeedbackRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsMovementReport') && declaresMethod($reflectionClass, 'generateGoodsMovementReportStream')) {
            throw new \Exception('Operation generateGoodsMovementReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsMovementReport')) {
            \Flight::route('POST /reports/goods-movement/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsMovementReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsMovementReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsMovementReportStream')) {
            \Flight::route('POST /reports/goods-movement/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsMovementReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsMovementReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReport') && declaresMethod($reflectionClass, 'generateGoodsRealizationReportStream')) {
            throw new \Exception('Operation generateGoodsRealizationReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReport')) {
            \Flight::route('POST /reports/goods-realization/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsRealizationReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsRealizationReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsRealizationReportStream')) {
            \Flight::route('POST /reports/goods-realization/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsRealizationReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsRealizationReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateGoodsTurnoverReport') && declaresMethod($reflectionClass, 'generateGoodsTurnoverReportStream')) {
            throw new \Exception('Operation generateGoodsTurnoverReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateGoodsTurnoverReport')) {
            \Flight::route('POST /reports/goods-turnover/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateGoodsTurnoverReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsTurnoverRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateGoodsTurnoverReportStream')) {
            \Flight::route('POST /reports/goods-turnover/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateGoodsTurnoverReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateGoodsTurnoverRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReport') && declaresMethod($reflectionClass, 'generateMassOrderLabelsReportStream')) {
            throw new \Exception('Operation generateMassOrderLabelsReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReport')) {
            \Flight::route('POST /reports/documents/labels/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateMassOrderLabelsReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateMassOrderLabelsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateMassOrderLabelsReportStream')) {
            \Flight::route('POST /reports/documents/labels/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateMassOrderLabelsReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateMassOrderLabelsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generatePricesReport') && declaresMethod($reflectionClass, 'generatePricesReportStream')) {
            throw new \Exception('Operation generatePricesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generatePricesReport')) {
            \Flight::route('POST /reports/prices/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generatePricesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GeneratePricesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generatePricesReportStream')) {
            \Flight::route('POST /reports/prices/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generatePricesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GeneratePricesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReport') && declaresMethod($reflectionClass, 'generateShelfsStatisticsReportStream')) {
            throw new \Exception('Operation generateShelfsStatisticsReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReport')) {
            \Flight::route('POST /reports/shelf-statistics/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShelfsStatisticsReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShelfsStatisticsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShelfsStatisticsReportStream')) {
            \Flight::route('POST /reports/shelf-statistics/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShelfsStatisticsReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShelfsStatisticsRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShipmentListDocumentReport') && declaresMethod($reflectionClass, 'generateShipmentListDocumentReportStream')) {
            throw new \Exception('Operation generateShipmentListDocumentReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShipmentListDocumentReport')) {
            \Flight::route('POST /reports/documents/shipment-list/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShipmentListDocumentReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShipmentListDocumentReportRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShipmentListDocumentReportStream')) {
            \Flight::route('POST /reports/documents/shipment-list/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShipmentListDocumentReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShipmentListDocumentReportRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateShowsSalesReport') && declaresMethod($reflectionClass, 'generateShowsSalesReportStream')) {
            throw new \Exception('Operation generateShowsSalesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateShowsSalesReport')) {
            \Flight::route('POST /reports/shows-sales/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateShowsSalesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShowsSalesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateShowsSalesReportStream')) {
            \Flight::route('POST /reports/shows-sales/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateShowsSalesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateShowsSalesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReport') && declaresMethod($reflectionClass, 'generateStocksOnWarehousesReportStream')) {
            throw new \Exception('Operation generateStocksOnWarehousesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReport')) {
            \Flight::route('POST /reports/stocks-on-warehouses/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateStocksOnWarehousesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateStocksOnWarehousesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateStocksOnWarehousesReportStream')) {
            \Flight::route('POST /reports/stocks-on-warehouses/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateStocksOnWarehousesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateStocksOnWarehousesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReport') && declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReportStream')) {
            throw new \Exception('Operation generateUnitedMarketplaceServicesReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReport')) {
            \Flight::route('POST /reports/united-marketplace-services/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedMarketplaceServicesReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedMarketplaceServicesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedMarketplaceServicesReportStream')) {
            \Flight::route('POST /reports/united-marketplace-services/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedMarketplaceServicesReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedMarketplaceServicesReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedNettingReport') && declaresMethod($reflectionClass, 'generateUnitedNettingReportStream')) {
            throw new \Exception('Operation generateUnitedNettingReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedNettingReport')) {
            \Flight::route('POST /reports/united-netting/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedNettingReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedNettingReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedNettingReportStream')) {
            \Flight::route('POST /reports/united-netting/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedNettingReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedNettingReportRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReport') && declaresMethod($reflectionClass, 'generateUnitedOrdersReportStream')) {
            throw new \Exception('Operation generateUnitedOrdersReport cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReport')) {
            \Flight::route('POST /reports/united-orders/generate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->generateUnitedOrdersReport(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedOrdersRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'generateUnitedOrdersReportStream')) {
            \Flight::route('POST /reports/united-orders/generate', function () use ($handler) {
                $r = \Flight::request();
                $handler->generateUnitedOrdersReportStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\GenerateUnitedOrdersRequest'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReportInfo') && declaresMethod($reflectionClass, 'getReportInfoStream')) {
            throw new \Exception('Operation getReportInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReportInfo')) {
            \Flight::route('GET /reports/info/@reportId', function (string $reportId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReportInfo(
                    parseParam($reportId, 'string')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReportInfoStream')) {
            \Flight::route('GET /reports/info/@reportId', function (string $reportId) use ($handler) {
                $r = \Flight::request();
                $handler->getReportInfoStream(
                    parseParam($reportId, 'string')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReturn') && declaresMethod($reflectionClass, 'getReturnStream')) {
            throw new \Exception('Operation getReturn cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturn')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReturn(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getReturnApplication') && declaresMethod($reflectionClass, 'getReturnApplicationStream')) {
            throw new \Exception('Operation getReturnApplication cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturnApplication')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/application', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnApplication(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnApplicationStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/application', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnApplicationStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'getReturnPhoto') && declaresMethod($reflectionClass, 'getReturnPhotoStream')) {
            throw new \Exception('Operation getReturnPhoto cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturnPhoto')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/@itemId/image/@imageHash', function (string $campaignId, string $orderId, string $returnId, string $itemId, string $imageHash) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnPhoto(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam($itemId, 'int'), 
                    parseParam($imageHash, 'string')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnPhotoStream')) {
            \Flight::route('GET /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/@itemId/image/@imageHash', function (string $campaignId, string $orderId, string $returnId, string $itemId, string $imageHash) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnPhotoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam($itemId, 'int'), 
                    parseParam($imageHash, 'string')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'getReturns') && declaresMethod($reflectionClass, 'getReturnsStream')) {
            throw new \Exception('Operation getReturns cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getReturns')) {
            \Flight::route('GET /campaigns/@campaignId/returns', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getReturns(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['statuses'] ?? null, '?array'), 
                    parseParam($r->query['type'] ?? null, ''), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['to_date'] ?? null, '?\\DateTime')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getReturnsStream')) {
            \Flight::route('GET /campaigns/@campaignId/returns', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getReturnsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam($r->query['orderIds'] ?? null, '?array'), 
                    parseParam($r->query['statuses'] ?? null, '?array'), 
                    parseParam($r->query['type'] ?? null, ''), 
                    parseParam($r->query['fromDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['toDate'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['from_date'] ?? null, '?\\DateTime'), 
                    parseParam($r->query['to_date'] ?? null, '?\\DateTime')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setReturnDecision') && declaresMethod($reflectionClass, 'setReturnDecisionStream')) {
            throw new \Exception('Operation setReturnDecision cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setReturnDecision')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setReturnDecision(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetReturnDecisionRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setReturnDecisionStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->setReturnDecisionStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetReturnDecisionRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'submitReturnDecision') && declaresMethod($reflectionClass, 'submitReturnDecisionStream')) {
            throw new \Exception('Operation submitReturnDecision cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'submitReturnDecision')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/submit', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->submitReturnDecision(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'submitReturnDecisionStream')) {
            \Flight::route('POST /campaigns/@campaignId/orders/@orderId/returns/@returnId/decision/submit', function (string $campaignId, string $orderId, string $returnId) use ($handler) {
                $r = \Flight::request();
                $handler->submitReturnDecisionStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($orderId, 'int'), 
                    parseParam($returnId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'confirmShipment') && declaresMethod($reflectionClass, 'confirmShipmentStream')) {
            throw new \Exception('Operation confirmShipment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'confirmShipment')) {
            \Flight::route('POST /campaigns/@campaignId/first-mile/shipments/@shipmentId/confirm', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->confirmShipment(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\ConfirmShipmentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'confirmShipmentStream')) {
            \Flight::route('POST /campaigns/@campaignId/first-mile/shipments/@shipmentId/confirm', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->confirmShipmentStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\ConfirmShipmentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentAct') && declaresMethod($reflectionClass, 'downloadShipmentActStream')) {
            throw new \Exception('Operation downloadShipmentAct cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentAct')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentAct(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentActStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentActStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentDiscrepancyAct') && declaresMethod($reflectionClass, 'downloadShipmentDiscrepancyActStream')) {
            throw new \Exception('Operation downloadShipmentDiscrepancyAct cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentDiscrepancyAct')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/discrepancy-act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentDiscrepancyAct(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentDiscrepancyActStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/discrepancy-act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentDiscrepancyActStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentInboundAct') && declaresMethod($reflectionClass, 'downloadShipmentInboundActStream')) {
            throw new \Exception('Operation downloadShipmentInboundAct cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentInboundAct')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/inbound-act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentInboundAct(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentInboundActStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/inbound-act', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentInboundActStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentPalletLabels') && declaresMethod($reflectionClass, 'downloadShipmentPalletLabelsStream')) {
            throw new \Exception('Operation downloadShipmentPalletLabels cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentPalletLabels')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/pallet/labels', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentPalletLabels(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentPalletLabelsStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/pallet/labels', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentPalletLabelsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($r->query['format'] ?? null, '')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentReceptionTransferAct') && declaresMethod($reflectionClass, 'downloadShipmentReceptionTransferActStream')) {
            throw new \Exception('Operation downloadShipmentReceptionTransferAct cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentReceptionTransferAct')) {
            \Flight::route('GET /campaigns/@campaignId/shipments/reception-transfer-act', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentReceptionTransferAct(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['warehouse_id'] ?? null, '?int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentReceptionTransferActStream')) {
            \Flight::route('GET /campaigns/@campaignId/shipments/reception-transfer-act', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentReceptionTransferActStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['warehouse_id'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'downloadShipmentTransportationWaybill') && declaresMethod($reflectionClass, 'downloadShipmentTransportationWaybillStream')) {
            throw new \Exception('Operation downloadShipmentTransportationWaybill cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentTransportationWaybill')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/transportation-waybill', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentTransportationWaybill(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                \Flight::halt(200);
            });
        }
        if (declaresMethod($reflectionClass, 'downloadShipmentTransportationWaybillStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/transportation-waybill', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->downloadShipmentTransportationWaybillStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200]);
        }

        if (declaresMethod($reflectionClass, 'getShipment') && declaresMethod($reflectionClass, 'getShipmentStream')) {
            throw new \Exception('Operation getShipment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getShipment')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getShipment(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($r->query['cancelledOrders'] ?? null, '?bool')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getShipmentStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->getShipmentStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam($r->query['cancelledOrders'] ?? null, '?bool')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getShipmentOrdersInfo') && declaresMethod($reflectionClass, 'getShipmentOrdersInfoStream')) {
            throw new \Exception('Operation getShipmentOrdersInfo cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getShipmentOrdersInfo')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/orders/info', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getShipmentOrdersInfo(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getShipmentOrdersInfoStream')) {
            \Flight::route('GET /campaigns/@campaignId/first-mile/shipments/@shipmentId/orders/info', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->getShipmentOrdersInfoStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'searchShipments') && declaresMethod($reflectionClass, 'searchShipmentsStream')) {
            throw new \Exception('Operation searchShipments cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'searchShipments')) {
            \Flight::route('PUT /campaigns/@campaignId/first-mile/shipments', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->searchShipments(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SearchShipmentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'searchShipmentsStream')) {
            \Flight::route('PUT /campaigns/@campaignId/first-mile/shipments', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->searchShipmentsStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SearchShipmentsRequest'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'setShipmentPalletsCount') && declaresMethod($reflectionClass, 'setShipmentPalletsCountStream')) {
            throw new \Exception('Operation setShipmentPalletsCount cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'setShipmentPalletsCount')) {
            \Flight::route('PUT /campaigns/@campaignId/first-mile/shipments/@shipmentId/pallets', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->setShipmentPalletsCount(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetShipmentPalletsCountRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'setShipmentPalletsCountStream')) {
            \Flight::route('PUT /campaigns/@campaignId/first-mile/shipments/@shipmentId/pallets', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->setShipmentPalletsCountStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\SetShipmentPalletsCountRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'transferOrdersFromShipment') && declaresMethod($reflectionClass, 'transferOrdersFromShipmentStream')) {
            throw new \Exception('Operation transferOrdersFromShipment cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'transferOrdersFromShipment')) {
            \Flight::route('POST /campaigns/@campaignId/first-mile/shipments/@shipmentId/orders/transfer', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->transferOrdersFromShipment(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\TransferOrdersFromShipmentRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'transferOrdersFromShipmentStream')) {
            \Flight::route('POST /campaigns/@campaignId/first-mile/shipments/@shipmentId/orders/transfer', function (string $campaignId, string $shipmentId) use ($handler) {
                $r = \Flight::request();
                $handler->transferOrdersFromShipmentStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($shipmentId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\TransferOrdersFromShipmentRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getStocks') && declaresMethod($reflectionClass, 'getStocksStream')) {
            throw new \Exception('Operation getStocks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getStocks')) {
            \Flight::route('POST /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getStocks(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetWarehouseStocksRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getStocksStream')) {
            \Flight::route('POST /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->getStocksStream(
                    parseParam($campaignId, 'int'), 
                    parseParam($r->query['page_token'] ?? null, '?string'), 
                    parseParam($r->query['limit'] ?? null, '?int'), 
                    parseParam(json_decode($r->getBody(), true), '?\\OpenAPIServer\\Model\\GetWarehouseStocksRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'updateStocks') && declaresMethod($reflectionClass, 'updateStocksStream')) {
            throw new \Exception('Operation updateStocks cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'updateStocks')) {
            \Flight::route('PUT /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->updateStocks(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateStocksRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'updateStocksStream')) {
            \Flight::route('PUT /campaigns/@campaignId/offers/stocks', function (string $campaignId) use ($handler) {
                $r = \Flight::request();
                $handler->updateStocksStream(
                    parseParam($campaignId, 'int'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\UpdateStocksRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'calculateTariffs') && declaresMethod($reflectionClass, 'calculateTariffsStream')) {
            throw new \Exception('Operation calculateTariffs cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'calculateTariffs')) {
            \Flight::route('POST /tariffs/calculate', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->calculateTariffs(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CalculateTariffsRequest')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'calculateTariffsStream')) {
            \Flight::route('POST /tariffs/calculate', function () use ($handler) {
                $r = \Flight::request();
                $handler->calculateTariffsStream(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\CalculateTariffsRequest')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getFulfillmentWarehouses') && declaresMethod($reflectionClass, 'getFulfillmentWarehousesStream')) {
            throw new \Exception('Operation getFulfillmentWarehouses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getFulfillmentWarehouses')) {
            \Flight::route('GET /warehouses', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->getFulfillmentWarehouses(
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getFulfillmentWarehousesStream')) {
            \Flight::route('GET /warehouses', function () use ($handler) {
                $r = \Flight::request();
                $handler->getFulfillmentWarehousesStream(
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

        if (declaresMethod($reflectionClass, 'getWarehouses') && declaresMethod($reflectionClass, 'getWarehousesStream')) {
            throw new \Exception('Operation getWarehouses cannot be both streaming and non-streaming');
        }
        if (declaresMethod($reflectionClass, 'getWarehouses')) {
            \Flight::route('GET /businesses/@businessId/warehouses', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getWarehouses(
                    parseParam($businessId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(200);
                } else {
                    \Flight::json($result, 200);
                }
            });
        }
        if (declaresMethod($reflectionClass, 'getWarehousesStream')) {
            \Flight::route('GET /businesses/@businessId/warehouses', function (string $businessId) use ($handler) {
                $r = \Flight::request();
                $handler->getWarehousesStream(
                    parseParam($businessId, 'int')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['status' => 200, 'Content-Type' => 'application/json']);
        }

    }
}


function parseParam(mixed $param, string $type)
{
    $nonNullType = str_replace('?', '', $type);
    if ($param === null) {
        return null;
    } elseif ($nonNullType === 'int') {
        return intval($param);
    } elseif ($nonNullType === 'float') {
        return floatval($param);
    } elseif ($nonNullType === 'bool') {
        return filter_var($param, FILTER_VALIDATE_BOOLEAN);
    } elseif (str_ends_with($type, '[]')) {
        return array_map(fn($el) => parseParam($el, substr($type, 0, -2)), $param);
    } elseif (str_starts_with($nonNullType, '\\OpenAPIServer\\Model')) {
        if (enum_exists($nonNullType)) {
            return $nonNullType::tryFrom($param);
        }
        return $nonNullType::fromArray($param);
    } else {
        return $param;
    }
}

function declaresMethod(\ReflectionClass $reflectionClass, string $methodName): bool
{
    return $reflectionClass->hasMethod($methodName) && $reflectionClass->getMethod($methodName)->getDeclaringClass()->getName() === $reflectionClass->getName();
}
