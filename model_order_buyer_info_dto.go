/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ympa_go_client

import (
	"encoding/json"
)

// checks if the OrderBuyerInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderBuyerInfoDTO{}

// OrderBuyerInfoDTO Информация о покупателе и его номере телефона.
type OrderBuyerInfoDTO struct {
	// Идентификатор покупателя.
	Id *string `json:"id,omitempty"`
	// Фамилия покупателя.
	LastName *string `json:"lastName,omitempty"`
	// Имя покупателя.
	FirstName *string `json:"firstName,omitempty"`
	// Отчество покупателя.
	MiddleName *string `json:"middleName,omitempty"`
	Type *OrderBuyerType `json:"type,omitempty"`
	// Подменный номер телефона покупателя. Подробнее о таких номерах читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/orders/dbs/call#fake-number).  Формат номера: `+<код_страны><код_региона><номер_телефона>`. 
	Phone *string `json:"phone,omitempty"`
}

// NewOrderBuyerInfoDTO instantiates a new OrderBuyerInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderBuyerInfoDTO() *OrderBuyerInfoDTO {
	this := OrderBuyerInfoDTO{}
	return &this
}

// NewOrderBuyerInfoDTOWithDefaults instantiates a new OrderBuyerInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderBuyerInfoDTOWithDefaults() *OrderBuyerInfoDTO {
	this := OrderBuyerInfoDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderBuyerInfoDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBuyerInfoDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderBuyerInfoDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrderBuyerInfoDTO) SetId(v string) {
	o.Id = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *OrderBuyerInfoDTO) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBuyerInfoDTO) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *OrderBuyerInfoDTO) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *OrderBuyerInfoDTO) SetLastName(v string) {
	o.LastName = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *OrderBuyerInfoDTO) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBuyerInfoDTO) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *OrderBuyerInfoDTO) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *OrderBuyerInfoDTO) SetFirstName(v string) {
	o.FirstName = &v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *OrderBuyerInfoDTO) GetMiddleName() string {
	if o == nil || IsNil(o.MiddleName) {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBuyerInfoDTO) GetMiddleNameOk() (*string, bool) {
	if o == nil || IsNil(o.MiddleName) {
		return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *OrderBuyerInfoDTO) HasMiddleName() bool {
	if o != nil && !IsNil(o.MiddleName) {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *OrderBuyerInfoDTO) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OrderBuyerInfoDTO) GetType() OrderBuyerType {
	if o == nil || IsNil(o.Type) {
		var ret OrderBuyerType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBuyerInfoDTO) GetTypeOk() (*OrderBuyerType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OrderBuyerInfoDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given OrderBuyerType and assigns it to the Type field.
func (o *OrderBuyerInfoDTO) SetType(v OrderBuyerType) {
	o.Type = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *OrderBuyerInfoDTO) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBuyerInfoDTO) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *OrderBuyerInfoDTO) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *OrderBuyerInfoDTO) SetPhone(v string) {
	o.Phone = &v
}

func (o OrderBuyerInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderBuyerInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.MiddleName) {
		toSerialize["middleName"] = o.MiddleName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	return toSerialize, nil
}

type NullableOrderBuyerInfoDTO struct {
	value *OrderBuyerInfoDTO
	isSet bool
}

func (v NullableOrderBuyerInfoDTO) Get() *OrderBuyerInfoDTO {
	return v.value
}

func (v *NullableOrderBuyerInfoDTO) Set(val *OrderBuyerInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderBuyerInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderBuyerInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderBuyerInfoDTO(val *OrderBuyerInfoDTO) *NullableOrderBuyerInfoDTO {
	return &NullableOrderBuyerInfoDTO{value: val, isSet: true}
}

func (v NullableOrderBuyerInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderBuyerInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


