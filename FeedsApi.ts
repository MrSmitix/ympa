/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  SetFeedParamsRequest,
  GetFeedIndexLogsResponse,
  GetFeedsResponse,
  GetFeedResponse,
  FeedIndexLogsStatusType,
  EmptyApiResponse,
} from './models';

/**
 * getFeed - parameters interface
 */
export interface IGetFeedParams {
  campaignId: number;
  feedId: number;
}

/**
 * getFeedIndexLogs - parameters interface
 */
export interface IGetFeedIndexLogsParams {
  campaignId: number;
  feedId: number;
  limit?: number;
  publishedTimeFrom?: string;
  publishedTimeTo?: string;
  status?: FeedIndexLogsStatusType;
}

/**
 * getFeeds - parameters interface
 */
export interface IGetFeedsParams {
  campaignId: number;
}

/**
 * refreshFeed - parameters interface
 */
export interface IRefreshFeedParams {
  campaignId: number;
  feedId: number;
}

/**
 * setFeedParams - parameters interface
 */
export interface ISetFeedParamsParams {
  campaignId: number;
  feedId: number;
  setFeedParamsRequest: SetFeedParamsRequest;
}

/**
 * FeedsApi - API class
 */
@autoinject()
export class FeedsApi extends Api {

  /**
   * Creates a new FeedsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Информация о прайс-листе
   * {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * @param params.campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.feedId Идентификатор прайс-листа.
   */
  async getFeed(params: IGetFeedParams): Promise<GetFeedResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getFeed', params, 'campaignId');
    this.ensureParamIsSet('getFeed', params, 'feedId');

    // Create URL to call
    const url = `${this.basePath}/campaigns/{campaignId}/feeds/{feedId}`
      .replace(`{${'campaignId'}}`, encodeURIComponent(`${params['campaignId']}`))
      .replace(`{${'feedId'}}`, encodeURIComponent(`${params['feedId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отчет по индексации прайс-листа
   * {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра &#x60;generationId&#x60;.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
   * @param params.campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.feedId Идентификатор прайс-листа.
   * @param params.limit Количество значений на одной странице. 
   * @param params.publishedTimeFrom Начальная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Значение по умолчанию: последние восемь дней со времени отправки запроса. 
   * @param params.publishedTimeTo Конечная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-31T00:42:42+03:00&#x60;.  Значение по умолчанию: дата и время отправки запроса.  {% note info %}  Если во время переключения между страницами выходных данных на Яндекс Маркете появятся новые результаты индексации прайс-листа, вы не получите часть данных. Чтобы этого не произошло, зафиксируйте выходные данные с помощью входного параметра &#x60;published_time_to&#x60;. Значение параметра не должно быть датой из будущего.  {% endnote %} 
   * @param params.status Статус индексации и проверки прайс-листа на соответствие техническим требованиям.  Возможные значения: * &#x60;ERROR&#x60; — произошли ошибки. * &#x60;OK&#x60; — обработан без ошибок. * &#x60;WARNING&#x60; — наблюдались некритичные проблемы. 
   */
  async getFeedIndexLogs(params: IGetFeedIndexLogsParams): Promise<GetFeedIndexLogsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getFeedIndexLogs', params, 'campaignId');
    this.ensureParamIsSet('getFeedIndexLogs', params, 'feedId');

    // Create URL to call
    const url = `${this.basePath}/campaigns/{campaignId}/feeds/{feedId}/index-logs`
      .replace(`{${'campaignId'}}`, encodeURIComponent(`${params['campaignId']}`))
      .replace(`{${'feedId'}}`, encodeURIComponent(`${params['feedId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'limit': params['limit'],
        'published_time_from': params['publishedTimeFrom'],
        'published_time_to': params['publishedTimeTo'],
        'status': params['status'],
      })

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Список прайс-листов магазина
   * {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * @param params.campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   */
  async getFeeds(params: IGetFeedsParams): Promise<GetFeedsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getFeeds', params, 'campaignId');

    // Create URL to call
    const url = `${this.basePath}/campaigns/{campaignId}/feeds`
      .replace(`{${'campaignId'}}`, encodeURIComponent(`${params['campaignId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Сообщить, что прайс-лист обновился
   * {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом &#x60;POST campaigns/{campaignId}/feeds/{feedId}/refresh&#x60;. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — &#x60;200 OK&#x60;. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
   * @param params.campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.feedId Идентификатор прайс-листа.
   */
  async refreshFeed(params: IRefreshFeedParams): Promise<EmptyApiResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('refreshFeed', params, 'campaignId');
    this.ensureParamIsSet('refreshFeed', params, 'feedId');

    // Create URL to call
    const url = `${this.basePath}/campaigns/{campaignId}/feeds/{feedId}/refresh`
      .replace(`{${'campaignId'}}`, encodeURIComponent(`${params['campaignId']}`))
      .replace(`{${'feedId'}}`, encodeURIComponent(`${params['feedId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Изменение параметров прайс-листа
   * {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;value&#x60; (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;delete&#x3D;true&#x60; (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
   * @param params.campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.feedId Идентификатор прайс-листа.
   * @param params.setFeedParamsRequest 
   */
  async setFeedParams(params: ISetFeedParamsParams): Promise<EmptyApiResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('setFeedParams', params, 'campaignId');
    this.ensureParamIsSet('setFeedParams', params, 'feedId');
    this.ensureParamIsSet('setFeedParams', params, 'setFeedParamsRequest');

    // Create URL to call
    const url = `${this.basePath}/campaigns/{campaignId}/feeds/{feedId}/params`
      .replace(`{${'campaignId'}}`, encodeURIComponent(`${params['campaignId']}`))
      .replace(`{${'feedId'}}`, encodeURIComponent(`${params['feedId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['setFeedParamsRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

