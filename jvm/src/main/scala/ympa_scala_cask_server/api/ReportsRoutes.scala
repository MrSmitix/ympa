//> using scala "3.3.1"
//> using lib "com.lihaoyi::cask:0.8.3"
//> using lib "com.lihaoyi::scalatags:0.12.0"
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */


// this is generated from apiRoutes.mustache
package ympa_scala_cask_server.api

import ympa_scala_cask_server.model.*

import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

import ympa_scala_cask_server.model.ApiClientDataErrorResponse
import ympa_scala_cask_server.model.ApiForbiddenErrorResponse
import ympa_scala_cask_server.model.ApiLimitErrorResponse
import ympa_scala_cask_server.model.ApiNotFoundErrorResponse
import ympa_scala_cask_server.model.ApiServerErrorResponse
import ympa_scala_cask_server.model.ApiUnauthorizedErrorResponse
import ympa_scala_cask_server.model.GenerateBoostConsolidatedRequest
import ympa_scala_cask_server.model.GenerateCompetitorsPositionReportRequest
import ympa_scala_cask_server.model.GenerateGoodsFeedbackRequest
import ympa_scala_cask_server.model.GenerateGoodsMovementReportRequest
import ympa_scala_cask_server.model.GenerateGoodsRealizationReportRequest
import ympa_scala_cask_server.model.GenerateGoodsTurnoverRequest
import ympa_scala_cask_server.model.GenerateMassOrderLabelsRequest
import ympa_scala_cask_server.model.GeneratePricesReportRequest
import ympa_scala_cask_server.model.GenerateReportResponse
import ympa_scala_cask_server.model.GenerateShelfsStatisticsRequest
import ympa_scala_cask_server.model.GenerateShipmentListDocumentReportRequest
import ympa_scala_cask_server.model.GenerateShowsSalesReportRequest
import ympa_scala_cask_server.model.GenerateStocksOnWarehousesReportRequest
import ympa_scala_cask_server.model.GenerateUnitedMarketplaceServicesReportRequest
import ympa_scala_cask_server.model.GenerateUnitedNettingReportRequest
import ympa_scala_cask_server.model.GenerateUnitedOrdersRequest
import ympa_scala_cask_server.model.GetReportInfoResponse
import ympa_scala_cask_server.model.PageFormatType
import ympa_scala_cask_server.model.ReportFormatType

class ReportsRoutes(service : ReportsService) extends cask.Routes {


        /** Отчет по бусту продаж
         * 
         */
        @cask.post("/reports/boost-consolidated/generate")
        def generateBoostConsolidatedReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateBoostConsolidatedRequestData <- Parsed.eval(GenerateBoostConsolidatedRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateBoostConsolidatedRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateBoostConsolidatedRequest <- Parsed.fromTry(generateBoostConsolidatedRequestData.validated(failFast))
            result <- Parsed.eval(service.generateBoostConsolidatedReport(generateBoostConsolidatedRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет «Конкурентная позиция»
         * 
         */
        @cask.post("/reports/competitors-position/generate")
        def generateCompetitorsPositionReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateCompetitorsPositionReportRequestData <- Parsed.eval(GenerateCompetitorsPositionReportRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateCompetitorsPositionReportRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateCompetitorsPositionReportRequest <- Parsed.fromTry(generateCompetitorsPositionReportRequestData.validated(failFast))
            result <- Parsed.eval(service.generateCompetitorsPositionReport(generateCompetitorsPositionReportRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет по отзывам о товарах
         * 
         */
        @cask.post("/reports/goods-feedback/generate")
        def generateGoodsFeedbackReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateGoodsFeedbackRequestData <- Parsed.eval(GenerateGoodsFeedbackRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateGoodsFeedbackRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateGoodsFeedbackRequest <- Parsed.fromTry(generateGoodsFeedbackRequestData.validated(failFast))
            result <- Parsed.eval(service.generateGoodsFeedbackReport(generateGoodsFeedbackRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет по движению товаров
         * 
         */
        @cask.post("/reports/goods-movement/generate")
        def generateGoodsMovementReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateGoodsMovementReportRequestData <- Parsed.eval(GenerateGoodsMovementReportRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateGoodsMovementReportRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateGoodsMovementReportRequest <- Parsed.fromTry(generateGoodsMovementReportRequestData.validated(failFast))
            result <- Parsed.eval(service.generateGoodsMovementReport(generateGoodsMovementReportRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет по реализации
         * 
         */
        @cask.post("/reports/goods-realization/generate")
        def generateGoodsRealizationReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateGoodsRealizationReportRequestData <- Parsed.eval(GenerateGoodsRealizationReportRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateGoodsRealizationReportRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateGoodsRealizationReportRequest <- Parsed.fromTry(generateGoodsRealizationReportRequestData.validated(failFast))
            result <- Parsed.eval(service.generateGoodsRealizationReport(generateGoodsRealizationReportRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет по оборачиваемости
         * 
         */
        @cask.post("/reports/goods-turnover/generate")
        def generateGoodsTurnoverReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateGoodsTurnoverRequestData <- Parsed.eval(GenerateGoodsTurnoverRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateGoodsTurnoverRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateGoodsTurnoverRequest <- Parsed.fromTry(generateGoodsTurnoverRequestData.validated(failFast))
            result <- Parsed.eval(service.generateGoodsTurnoverReport(generateGoodsTurnoverRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Готовые ярлыки‑наклейки на все коробки в нескольких заказах
         * 
         */
        @cask.post("/reports/documents/labels/generate")
        def generateMassOrderLabelsReport(request: cask.Request, format : Option[PageFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateMassOrderLabelsRequestData <- Parsed.eval(GenerateMassOrderLabelsRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateMassOrderLabelsRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateMassOrderLabelsRequest <- Parsed.fromTry(generateMassOrderLabelsRequestData.validated(failFast))
            result <- Parsed.eval(service.generateMassOrderLabelsReport(generateMassOrderLabelsRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет «Цены на рынке»
         * 
         */
        @cask.post("/reports/prices/generate")
        def generatePricesReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generatePricesReportRequestData <- Parsed.eval(GeneratePricesReportRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GeneratePricesReportRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generatePricesReportRequest <- Parsed.fromTry(generatePricesReportRequestData.validated(failFast))
            result <- Parsed.eval(service.generatePricesReport(generatePricesReportRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет по полкам
         * 
         */
        @cask.post("/reports/shelf-statistics/generate")
        def generateShelfsStatisticsReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateShelfsStatisticsRequestData <- Parsed.eval(GenerateShelfsStatisticsRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateShelfsStatisticsRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateShelfsStatisticsRequest <- Parsed.fromTry(generateShelfsStatisticsRequestData.validated(failFast))
            result <- Parsed.eval(service.generateShelfsStatisticsReport(generateShelfsStatisticsRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Получение листа сборки
         * 
         */
        @cask.post("/reports/documents/shipment-list/generate")
        def generateShipmentListDocumentReport(request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateShipmentListDocumentReportRequestData <- Parsed.eval(GenerateShipmentListDocumentReportRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateShipmentListDocumentReportRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateShipmentListDocumentReportRequest <- Parsed.fromTry(generateShipmentListDocumentReportRequestData.validated(failFast))
            result <- Parsed.eval(service.generateShipmentListDocumentReport(generateShipmentListDocumentReportRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет «Аналитика продаж»
         * 
         */
        @cask.post("/reports/shows-sales/generate")
        def generateShowsSalesReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateShowsSalesReportRequestData <- Parsed.eval(GenerateShowsSalesReportRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateShowsSalesReportRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateShowsSalesReportRequest <- Parsed.fromTry(generateShowsSalesReportRequestData.validated(failFast))
            result <- Parsed.eval(service.generateShowsSalesReport(generateShowsSalesReportRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет по остаткам на складах
         * 
         */
        @cask.post("/reports/stocks-on-warehouses/generate")
        def generateStocksOnWarehousesReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateStocksOnWarehousesReportRequestData <- Parsed.eval(GenerateStocksOnWarehousesReportRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateStocksOnWarehousesReportRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateStocksOnWarehousesReportRequest <- Parsed.fromTry(generateStocksOnWarehousesReportRequestData.validated(failFast))
            result <- Parsed.eval(service.generateStocksOnWarehousesReport(generateStocksOnWarehousesReportRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет по стоимости услуг
         * 
         */
        @cask.post("/reports/united-marketplace-services/generate")
        def generateUnitedMarketplaceServicesReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateUnitedMarketplaceServicesReportRequestData <- Parsed.eval(GenerateUnitedMarketplaceServicesReportRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateUnitedMarketplaceServicesReportRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateUnitedMarketplaceServicesReportRequest <- Parsed.fromTry(generateUnitedMarketplaceServicesReportRequestData.validated(failFast))
            result <- Parsed.eval(service.generateUnitedMarketplaceServicesReport(generateUnitedMarketplaceServicesReportRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет по платежам
         * 
         */
        @cask.post("/reports/united-netting/generate")
        def generateUnitedNettingReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateUnitedNettingReportRequestData <- Parsed.eval(GenerateUnitedNettingReportRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateUnitedNettingReportRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateUnitedNettingReportRequest <- Parsed.fromTry(generateUnitedNettingReportRequestData.validated(failFast))
            result <- Parsed.eval(service.generateUnitedNettingReport(generateUnitedNettingReportRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет по заказам
         * 
         */
        @cask.post("/reports/united-orders/generate")
        def generateUnitedOrdersReport(request: cask.Request, format : Option[ReportFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
              generateUnitedOrdersRequestData <- Parsed.eval(GenerateUnitedOrdersRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GenerateUnitedOrdersRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              generateUnitedOrdersRequest <- Parsed.fromTry(generateUnitedOrdersRequestData.validated(failFast))
            result <- Parsed.eval(service.generateUnitedOrdersReport(generateUnitedOrdersRequest, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GenerateReportResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Получение заданного отчета
         * 
         */
        @cask.get("/reports/info/:reportId")
        def getReportInfo(reportId : String, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            reportId <- Parsed(reportId)
            result <- Parsed.eval(service.getReportInfo(reportId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetReportInfoResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }

    initialize()
}
