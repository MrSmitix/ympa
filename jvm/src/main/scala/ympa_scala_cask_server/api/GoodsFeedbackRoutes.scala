//> using scala "3.3.1"
//> using lib "com.lihaoyi::cask:0.8.3"
//> using lib "com.lihaoyi::scalatags:0.12.0"
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */


// this is generated from apiRoutes.mustache
package ympa_scala_cask_server.api

import ympa_scala_cask_server.model.*

import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

import ympa_scala_cask_server.model.ApiClientDataErrorResponse
import ympa_scala_cask_server.model.ApiForbiddenErrorResponse
import ympa_scala_cask_server.model.ApiLimitErrorResponse
import ympa_scala_cask_server.model.ApiNotFoundErrorResponse
import ympa_scala_cask_server.model.ApiServerErrorResponse
import ympa_scala_cask_server.model.ApiUnauthorizedErrorResponse
import ympa_scala_cask_server.model.DeleteGoodsFeedbackCommentRequest
import ympa_scala_cask_server.model.EmptyApiResponse
import ympa_scala_cask_server.model.GetGoodsFeedbackCommentsRequest
import ympa_scala_cask_server.model.GetGoodsFeedbackCommentsResponse
import ympa_scala_cask_server.model.GetGoodsFeedbackRequest
import ympa_scala_cask_server.model.GetGoodsFeedbackResponse
import ympa_scala_cask_server.model.SkipGoodsFeedbackReactionRequest
import ympa_scala_cask_server.model.UpdateGoodsFeedbackCommentRequest
import ympa_scala_cask_server.model.UpdateGoodsFeedbackCommentResponse

class GoodsFeedbackRoutes(service : GoodsFeedbackService) extends cask.Routes {

    // route group for routeWorkAroundForPOSTBusinesses
    @cask.post("/businesses", true)
    def routeWorkAroundForPOSTBusinesses(request: cask.Request,pageToken : Option[String] = None,limit : Option[Int] = None,pageToken : Option[String] = None,limit : Option[Int] = None) = {
        request.remainingPathSegments match {
            case Seq(businessId,"goods-feedback","comments","delete") => deleteGoodsFeedbackComment(businessId.toLong,request)
            case Seq(businessId,"goods-feedback","comments") => getGoodsFeedbackComments(businessId.toLong,request,pageToken, limit)
            case Seq(businessId,"goods-feedback") => getGoodsFeedbacks(businessId.toLong,request,pageToken, limit)
            case Seq(businessId,"goods-feedback","skip-reaction") => skipGoodsFeedbacksReaction(businessId.toLong,request)
            case Seq(businessId,"goods-feedback","comments","update") => updateGoodsFeedbackComment(businessId.toLong,request)
            case _          => cask.Response("Not Found", statusCode = 404)
        }
    }

        /** Удаление комментария к отзыву
         * 
         */
        // conflicts with [/businesses/{businessId}/goods-feedback/comments/delete, /businesses/{businessId}/goods-feedback/comments, /businesses/{businessId}/goods-feedback, /businesses/{businessId}/goods-feedback/skip-reaction, /businesses/{businessId}/goods-feedback/comments/update] after/businesses, ignoring @cask.post("/businesses/:businessId/goods-feedback/comments/delete")
        def deleteGoodsFeedbackComment(businessId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            businessId <- Parsed(businessId)
              deleteGoodsFeedbackCommentRequestData <- Parsed.eval(DeleteGoodsFeedbackCommentRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as DeleteGoodsFeedbackCommentRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              deleteGoodsFeedbackCommentRequest <- Parsed.fromTry(deleteGoodsFeedbackCommentRequestData.validated(failFast))
            result <- Parsed.eval(service.deleteGoodsFeedbackComment(businessId, deleteGoodsFeedbackCommentRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Получение комментариев к отзыву
         * 
         */
        // conflicts with [/businesses/{businessId}/goods-feedback/comments/delete, /businesses/{businessId}/goods-feedback/comments, /businesses/{businessId}/goods-feedback, /businesses/{businessId}/goods-feedback/skip-reaction, /businesses/{businessId}/goods-feedback/comments/update] after/businesses, ignoring @cask.post("/businesses/:businessId/goods-feedback/comments")
        def getGoodsFeedbackComments(businessId : Long, request: cask.Request, pageToken : Option[String], limit : Option[Int]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            businessId <- Parsed(businessId)
              getGoodsFeedbackCommentsRequestData <- Parsed.eval(GetGoodsFeedbackCommentsRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GetGoodsFeedbackCommentsRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              getGoodsFeedbackCommentsRequest <- Parsed.fromTry(getGoodsFeedbackCommentsRequestData.validated(failFast))
            result <- Parsed.eval(service.getGoodsFeedbackComments(businessId, getGoodsFeedbackCommentsRequest, pageToken, limit))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetGoodsFeedbackCommentsResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Получение отзывов о товарах продавца
         * 
         */
        // conflicts with [/businesses/{businessId}/goods-feedback/comments/delete, /businesses/{businessId}/goods-feedback/comments, /businesses/{businessId}/goods-feedback, /businesses/{businessId}/goods-feedback/skip-reaction, /businesses/{businessId}/goods-feedback/comments/update] after/businesses, ignoring @cask.post("/businesses/:businessId/goods-feedback")
        def getGoodsFeedbacks(businessId : Long, request: cask.Request, pageToken : Option[String], limit : Option[Int]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            businessId <- Parsed(businessId)
              getGoodsFeedbackRequestData <- Parsed.eval(GetGoodsFeedbackRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GetGoodsFeedbackRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              getGoodsFeedbackRequest <- Parsed.fromTry(getGoodsFeedbackRequestData.validated(failFast))
            result <- Parsed.eval(service.getGoodsFeedbacks(businessId, pageToken, limit, getGoodsFeedbackRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetGoodsFeedbackResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отказ от ответа на отзывы
         * 
         */
        // conflicts with [/businesses/{businessId}/goods-feedback/comments/delete, /businesses/{businessId}/goods-feedback/comments, /businesses/{businessId}/goods-feedback, /businesses/{businessId}/goods-feedback/skip-reaction, /businesses/{businessId}/goods-feedback/comments/update] after/businesses, ignoring @cask.post("/businesses/:businessId/goods-feedback/skip-reaction")
        def skipGoodsFeedbacksReaction(businessId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            businessId <- Parsed(businessId)
              skipGoodsFeedbackReactionRequestData <- Parsed.eval(SkipGoodsFeedbackReactionRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as SkipGoodsFeedbackReactionRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              skipGoodsFeedbackReactionRequest <- Parsed.fromTry(skipGoodsFeedbackReactionRequestData.validated(failFast))
            result <- Parsed.eval(service.skipGoodsFeedbacksReaction(businessId, skipGoodsFeedbackReactionRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Добавление нового или изменение созданного комментария
         * 
         */
        // conflicts with [/businesses/{businessId}/goods-feedback/comments/delete, /businesses/{businessId}/goods-feedback/comments, /businesses/{businessId}/goods-feedback, /businesses/{businessId}/goods-feedback/skip-reaction, /businesses/{businessId}/goods-feedback/comments/update] after/businesses, ignoring @cask.post("/businesses/:businessId/goods-feedback/comments/update")
        def updateGoodsFeedbackComment(businessId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            businessId <- Parsed(businessId)
              updateGoodsFeedbackCommentRequestData <- Parsed.eval(UpdateGoodsFeedbackCommentRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as UpdateGoodsFeedbackCommentRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              updateGoodsFeedbackCommentRequest <- Parsed.fromTry(updateGoodsFeedbackCommentRequestData.validated(failFast))
            result <- Parsed.eval(service.updateGoodsFeedbackComment(businessId, updateGoodsFeedbackCommentRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : UpdateGoodsFeedbackCommentResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }

    initialize()
}
