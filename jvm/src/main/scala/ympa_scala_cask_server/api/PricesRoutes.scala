//> using scala "3.3.1"
//> using lib "com.lihaoyi::cask:0.8.3"
//> using lib "com.lihaoyi::scalatags:0.12.0"
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */


// this is generated from apiRoutes.mustache
package ympa_scala_cask_server.api

import ympa_scala_cask_server.model.*

import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

import ympa_scala_cask_server.model.ApiClientDataErrorResponse
import ympa_scala_cask_server.model.ApiForbiddenErrorResponse
import ympa_scala_cask_server.model.ApiLimitErrorResponse
import ympa_scala_cask_server.model.ApiLockedErrorResponse
import ympa_scala_cask_server.model.ApiNotFoundErrorResponse
import ympa_scala_cask_server.model.ApiServerErrorResponse
import ympa_scala_cask_server.model.ApiUnauthorizedErrorResponse
import ympa_scala_cask_server.model.EmptyApiResponse
import ympa_scala_cask_server.model.GetPricesByOfferIdsRequest
import ympa_scala_cask_server.model.GetPricesByOfferIdsResponse
import ympa_scala_cask_server.model.GetPricesResponse
import ympa_scala_cask_server.model.SuggestPricesRequest
import ympa_scala_cask_server.model.SuggestPricesResponse
import ympa_scala_cask_server.model.UpdateBusinessPricesRequest
import ympa_scala_cask_server.model.UpdatePricesRequest

class PricesRoutes(service : PricesService) extends cask.Routes {

    // route group for routeWorkAroundForPOSTCampaigns
    @cask.post("/campaigns", true)
    def routeWorkAroundForPOSTCampaigns(request: cask.Request,pageToken : Option[String] = None,limit : Option[Int] = None) = {
        request.remainingPathSegments match {
            case Seq(campaignId,"offer-prices") => getPricesByOfferIds(campaignId.toLong,request,pageToken, limit)
            case Seq(campaignId,"offer-prices","suggestions") => getSuggestedPrices(campaignId.toLong,request)
            case Seq(campaignId,"offer-prices","updates") => updatePrices(campaignId.toLong,request)
            case _          => cask.Response("Not Found", statusCode = 404)
        }
    }

        /** Список цен
         * 
         */
        @cask.get("/campaigns/:campaignId/offer-prices")
        def getPrices(campaignId : Long, request: cask.Request, pageToken : Option[String], limit : Option[Int], archived : Option[Boolean]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            result <- Parsed.eval(service.getPrices(campaignId, pageToken, limit, archived))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetPricesResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Просмотр цен на указанные товары в магазине
         * 
         */
        // conflicts with [/campaigns/{campaignId}/offer-prices, /campaigns/{campaignId}/offer-prices/suggestions, /campaigns/{campaignId}/offer-prices/updates] after/campaigns, ignoring @cask.post("/campaigns/:campaignId/offer-prices")
        def getPricesByOfferIds(campaignId : Long, request: cask.Request, pageToken : Option[String], limit : Option[Int]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
              getPricesByOfferIdsRequestData <- Parsed.eval(GetPricesByOfferIdsRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GetPricesByOfferIdsRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              getPricesByOfferIdsRequest <- Parsed.fromTry(getPricesByOfferIdsRequestData.validated(failFast))
            result <- Parsed.eval(service.getPricesByOfferIds(campaignId, pageToken, limit, getPricesByOfferIdsRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetPricesByOfferIdsResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Цены для продвижения товаров
         * 
         */
        // conflicts with [/campaigns/{campaignId}/offer-prices, /campaigns/{campaignId}/offer-prices/suggestions, /campaigns/{campaignId}/offer-prices/updates] after/campaigns, ignoring @cask.post("/campaigns/:campaignId/offer-prices/suggestions")
        def getSuggestedPrices(campaignId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
              suggestPricesRequestData <- Parsed.eval(SuggestPricesRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as SuggestPricesRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              suggestPricesRequest <- Parsed.fromTry(suggestPricesRequestData.validated(failFast))
            result <- Parsed.eval(service.getSuggestedPrices(campaignId, suggestPricesRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : SuggestPricesResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Установка цен на товары во всех магазинах
         * 
         */
        @cask.post("/businesses/:businessId/offer-prices/updates")
        def updateBusinessPrices(businessId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            businessId <- Parsed(businessId)
              updateBusinessPricesRequestData <- Parsed.eval(UpdateBusinessPricesRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as UpdateBusinessPricesRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              updateBusinessPricesRequest <- Parsed.fromTry(updateBusinessPricesRequestData.validated(failFast))
            result <- Parsed.eval(service.updateBusinessPrices(businessId, updateBusinessPricesRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLockedErrorResponse) => cask.Response(data = write(value), 423, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Установка цен на товары в конкретном магазине
         * 
         */
        // conflicts with [/campaigns/{campaignId}/offer-prices, /campaigns/{campaignId}/offer-prices/suggestions, /campaigns/{campaignId}/offer-prices/updates] after/campaigns, ignoring @cask.post("/campaigns/:campaignId/offer-prices/updates")
        def updatePrices(campaignId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
              updatePricesRequestData <- Parsed.eval(UpdatePricesRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as UpdatePricesRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              updatePricesRequest <- Parsed.fromTry(updatePricesRequestData.validated(failFast))
            result <- Parsed.eval(service.updatePrices(campaignId, updatePricesRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLockedErrorResponse) => cask.Response(data = write(value), 423, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }

    initialize()
}
