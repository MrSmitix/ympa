//> using scala "3.3.1"
//> using lib "com.lihaoyi::cask:0.8.3"
//> using lib "com.lihaoyi::scalatags:0.12.0"
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */


// this is generated from apiRoutes.mustache
package ympa_scala_cask_server.api

import ympa_scala_cask_server.model.*

import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

import ympa_scala_cask_server.model.ApiClientDataErrorResponse
import ympa_scala_cask_server.model.ApiForbiddenErrorResponse
import ympa_scala_cask_server.model.ApiLimitErrorResponse
import ympa_scala_cask_server.model.ApiNotFoundErrorResponse
import ympa_scala_cask_server.model.ApiServerErrorResponse
import ympa_scala_cask_server.model.ApiUnauthorizedErrorResponse
import ympa_scala_cask_server.model.EmptyApiResponse
import ympa_scala_cask_server.model.GetOrderBuyerInfoResponse
import ympa_scala_cask_server.model.SetOrderDeliveryDateRequest
import ympa_scala_cask_server.model.SetOrderDeliveryTrackCodeRequest
import ympa_scala_cask_server.model.UpdateOrderStorageLimitRequest
import ympa_scala_cask_server.model.VerifyOrderEacRequest
import ympa_scala_cask_server.model.VerifyOrderEacResponse

class OrderDeliveryRoutes(service : OrderDeliveryService) extends cask.Routes {

    // route group for routeWorkAroundForPUTCampaigns
    @cask.put("/campaigns", true)
    def routeWorkAroundForPUTCampaigns(request: cask.Request) = {
        request.remainingPathSegments match {
            case Seq(campaignId,"orders",orderId,"delivery","date") => setOrderDeliveryDate(campaignId.toLong, orderId.toLong,request)
            case Seq(campaignId,"orders",orderId,"delivery","storage-limit") => updateOrderStorageLimit(campaignId.toLong, orderId.toLong,request)
            case Seq(campaignId,"orders",orderId,"verifyEac") => verifyOrderEac(campaignId.toLong, orderId.toLong,request)
            case _          => cask.Response("Not Found", statusCode = 404)
        }
    }

        /** Информация о покупателе — физическом лице
         * 
         */
        @cask.get("/campaigns/:campaignId/orders/:orderId/buyer")
        def getOrderBuyerInfo(campaignId : Long, orderId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            orderId <- Parsed(orderId)
            result <- Parsed.eval(service.getOrderBuyerInfo(campaignId, orderId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetOrderBuyerInfoResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Изменение даты доставки заказа
         * 
         */
        // conflicts with [/campaigns/{campaignId}/orders/{orderId}/delivery/date, /campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit, /campaigns/{campaignId}/orders/{orderId}/verifyEac] after/campaigns, ignoring @cask.put("/campaigns/:campaignId/orders/:orderId/delivery/date")
        def setOrderDeliveryDate(campaignId : Long, orderId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            orderId <- Parsed(orderId)
              setOrderDeliveryDateRequestData <- Parsed.eval(SetOrderDeliveryDateRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as SetOrderDeliveryDateRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              setOrderDeliveryDateRequest <- Parsed.fromTry(setOrderDeliveryDateRequestData.validated(failFast))
            result <- Parsed.eval(service.setOrderDeliveryDate(campaignId, orderId, setOrderDeliveryDateRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Передача трек‑номера посылки
         * 
         */
        @cask.post("/campaigns/:campaignId/orders/:orderId/delivery/track")
        def setOrderDeliveryTrackCode(campaignId : Long, orderId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            orderId <- Parsed(orderId)
              setOrderDeliveryTrackCodeRequestData <- Parsed.eval(SetOrderDeliveryTrackCodeRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as SetOrderDeliveryTrackCodeRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              setOrderDeliveryTrackCodeRequest <- Parsed.fromTry(setOrderDeliveryTrackCodeRequestData.validated(failFast))
            result <- Parsed.eval(service.setOrderDeliveryTrackCode(campaignId, orderId, setOrderDeliveryTrackCodeRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Продление срока хранения заказа
         * 
         */
        // conflicts with [/campaigns/{campaignId}/orders/{orderId}/delivery/date, /campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit, /campaigns/{campaignId}/orders/{orderId}/verifyEac] after/campaigns, ignoring @cask.put("/campaigns/:campaignId/orders/:orderId/delivery/storage-limit")
        def updateOrderStorageLimit(campaignId : Long, orderId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            orderId <- Parsed(orderId)
              updateOrderStorageLimitRequestData <- Parsed.eval(UpdateOrderStorageLimitRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as UpdateOrderStorageLimitRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              updateOrderStorageLimitRequest <- Parsed.fromTry(updateOrderStorageLimitRequestData.validated(failFast))
            result <- Parsed.eval(service.updateOrderStorageLimit(campaignId, orderId, updateOrderStorageLimitRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Передача кода подтверждения
         * 
         */
        // conflicts with [/campaigns/{campaignId}/orders/{orderId}/delivery/date, /campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit, /campaigns/{campaignId}/orders/{orderId}/verifyEac] after/campaigns, ignoring @cask.put("/campaigns/:campaignId/orders/:orderId/verifyEac")
        def verifyOrderEac(campaignId : Long, orderId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            orderId <- Parsed(orderId)
              verifyOrderEacRequestData <- Parsed.eval(VerifyOrderEacRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as VerifyOrderEacRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              verifyOrderEacRequest <- Parsed.fromTry(verifyOrderEacRequestData.validated(failFast))
            result <- Parsed.eval(service.verifyOrderEac(campaignId, orderId, verifyOrderEacRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : VerifyOrderEacResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }

    initialize()
}
