//> using scala "3.3.1"
//> using lib "com.lihaoyi::cask:0.8.3"
//> using lib "com.lihaoyi::scalatags:0.12.0"
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */


// this is generated from apiRoutes.mustache
package ympa_scala_cask_server.api

import ympa_scala_cask_server.model.*

import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

import ympa_scala_cask_server.model.ApiClientDataErrorResponse
import ympa_scala_cask_server.model.ApiForbiddenErrorResponse
import ympa_scala_cask_server.model.ApiLimitErrorResponse
import ympa_scala_cask_server.model.ApiNotFoundErrorResponse
import ympa_scala_cask_server.model.ApiServerErrorResponse
import ympa_scala_cask_server.model.ApiUnauthorizedErrorResponse
import ympa_scala_cask_server.model.EmptyApiResponse
import ympa_scala_cask_server.model.GetBidsInfoRequest
import ympa_scala_cask_server.model.GetBidsInfoResponse
import ympa_scala_cask_server.model.GetBidsRecommendationsRequest
import ympa_scala_cask_server.model.GetBidsRecommendationsResponse
import ympa_scala_cask_server.model.PutSkuBidsRequest

class BidsRoutes(service : BidsService) extends cask.Routes {

    // route group for routeWorkAroundForPOSTBusinesses
    @cask.post("/businesses", true)
    def routeWorkAroundForPOSTBusinesses(request: cask.Request,pageToken : Option[String] = None,limit : Option[Int] = None) = {
        request.remainingPathSegments match {
            case Seq(businessId,"bids","info") => getBidsInfoForBusiness(businessId.toLong,request,pageToken, limit)
            case Seq(businessId,"bids","recommendations") => getBidsRecommendations(businessId.toLong,request)
            case _          => cask.Response("Not Found", statusCode = 404)
        }
    }

        /** Информация об установленных ставках
         * 
         */
        // conflicts with [/businesses/{businessId}/bids/info, /businesses/{businessId}/bids/recommendations] after/businesses, ignoring @cask.post("/businesses/:businessId/bids/info")
        def getBidsInfoForBusiness(businessId : Long, request: cask.Request, pageToken : Option[String], limit : Option[Int]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            businessId <- Parsed(businessId)
              getBidsInfoRequestData <- Parsed.eval(GetBidsInfoRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GetBidsInfoRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              getBidsInfoRequest <- Parsed.fromTry(getBidsInfoRequestData.validated(failFast))
            result <- Parsed.eval(service.getBidsInfoForBusiness(businessId, pageToken, limit, getBidsInfoRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetBidsInfoResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Рекомендованные ставки для заданных товаров
         * 
         */
        // conflicts with [/businesses/{businessId}/bids/info, /businesses/{businessId}/bids/recommendations] after/businesses, ignoring @cask.post("/businesses/:businessId/bids/recommendations")
        def getBidsRecommendations(businessId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            businessId <- Parsed(businessId)
              getBidsRecommendationsRequestData <- Parsed.eval(GetBidsRecommendationsRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as GetBidsRecommendationsRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              getBidsRecommendationsRequest <- Parsed.fromTry(getBidsRecommendationsRequestData.validated(failFast))
            result <- Parsed.eval(service.getBidsRecommendations(businessId, getBidsRecommendationsRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetBidsRecommendationsResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Включение буста продаж и установка ставок
         * 
         */
        @cask.put("/businesses/:businessId/bids")
        def putBidsForBusiness(businessId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            businessId <- Parsed(businessId)
              putSkuBidsRequestData <- Parsed.eval(PutSkuBidsRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as PutSkuBidsRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              putSkuBidsRequest <- Parsed.fromTry(putSkuBidsRequestData.validated(failFast))
            result <- Parsed.eval(service.putBidsForBusiness(businessId, putSkuBidsRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Включение буста продаж и установка ставок для магазина
         * 
         */
        @cask.put("/campaigns/:campaignId/bids")
        def putBidsForCampaign(campaignId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
              putSkuBidsRequestData <- Parsed.eval(PutSkuBidsRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as PutSkuBidsRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              putSkuBidsRequest <- Parsed.fromTry(putSkuBidsRequestData.validated(failFast))
            result <- Parsed.eval(service.putBidsForCampaign(campaignId, putSkuBidsRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }

    initialize()
}
