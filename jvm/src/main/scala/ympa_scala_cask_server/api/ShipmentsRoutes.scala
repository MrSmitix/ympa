//> using scala "3.3.1"
//> using lib "com.lihaoyi::cask:0.8.3"
//> using lib "com.lihaoyi::scalatags:0.12.0"
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */


// this is generated from apiRoutes.mustache
package ympa_scala_cask_server.api

import ympa_scala_cask_server.model.*

import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

import ympa_scala_cask_server.model.ApiClientDataErrorResponse
import ympa_scala_cask_server.model.ApiForbiddenErrorResponse
import ympa_scala_cask_server.model.ApiLimitErrorResponse
import ympa_scala_cask_server.model.ApiNotFoundErrorResponse
import ympa_scala_cask_server.model.ApiServerErrorResponse
import ympa_scala_cask_server.model.ApiUnauthorizedErrorResponse
import ympa_scala_cask_server.model.ConfirmShipmentRequest
import ympa_scala_cask_server.model.EmptyApiResponse
import java.io.File
import ympa_scala_cask_server.model.GetShipmentOrdersInfoResponse
import ympa_scala_cask_server.model.GetShipmentResponse
import ympa_scala_cask_server.model.SearchShipmentsRequest
import ympa_scala_cask_server.model.SearchShipmentsResponse
import ympa_scala_cask_server.model.SetShipmentPalletsCountRequest
import ympa_scala_cask_server.model.ShipmentPalletLabelPageFormatType
import ympa_scala_cask_server.model.TransferOrdersFromShipmentRequest

class ShipmentsRoutes(service : ShipmentsService) extends cask.Routes {

    // route group for routeWorkAroundForPOSTCampaigns
    @cask.post("/campaigns", true)
    def routeWorkAroundForPOSTCampaigns(request: cask.Request) = {
        request.remainingPathSegments match {
            case Seq(campaignId,"first-mile","shipments",shipmentId,"confirm") => confirmShipment(campaignId.toLong, shipmentId.toLong,request)
            case Seq(campaignId,"first-mile","shipments",shipmentId,"orders","transfer") => transferOrdersFromShipment(campaignId.toLong, shipmentId.toLong,request)
            case _          => cask.Response("Not Found", statusCode = 404)
        }
    }
    // route group for routeWorkAroundForPUTCampaigns
    @cask.put("/campaigns", true)
    def routeWorkAroundForPUTCampaigns(request: cask.Request,pageToken : Option[String] = None,limit : Option[Int] = None) = {
        request.remainingPathSegments match {
            case Seq(campaignId,"first-mile","shipments") => searchShipments(campaignId.toLong,request,pageToken, limit)
            case Seq(campaignId,"first-mile","shipments",shipmentId,"pallets") => setShipmentPalletsCount(campaignId.toLong, shipmentId.toLong,request)
            case _          => cask.Response("Not Found", statusCode = 404)
        }
    }
    // route group for routeWorkAroundForGETCampaigns
    @cask.get("/campaigns", true)
    def routeWorkAroundForGETCampaigns(request: cask.Request,warehouseId : Option[Int] = None,format : Option[ShipmentPalletLabelPageFormatType] = None,cancelledOrders : Option[Boolean] = None) = {
        request.remainingPathSegments match {
            case Seq(campaignId,"shipments","reception-transfer-act") => downloadShipmentReceptionTransferAct(campaignId.toLong,request,warehouseId)
            case Seq(campaignId,"first-mile","shipments",shipmentId,"act") => downloadShipmentAct(campaignId.toLong, shipmentId.toLong,request)
            case Seq(campaignId,"first-mile","shipments",shipmentId,"discrepancy-act") => downloadShipmentDiscrepancyAct(campaignId.toLong, shipmentId.toLong,request)
            case Seq(campaignId,"first-mile","shipments",shipmentId,"inbound-act") => downloadShipmentInboundAct(campaignId.toLong, shipmentId.toLong,request)
            case Seq(campaignId,"first-mile","shipments",shipmentId,"pallet","labels") => downloadShipmentPalletLabels(campaignId.toLong, shipmentId.toLong,request,format)
            case Seq(campaignId,"first-mile","shipments",shipmentId,"transportation-waybill") => downloadShipmentTransportationWaybill(campaignId.toLong, shipmentId.toLong,request)
            case Seq(campaignId,"first-mile","shipments",shipmentId) => getShipment(campaignId.toLong, shipmentId.toLong,request,cancelledOrders)
            case Seq(campaignId,"first-mile","shipments",shipmentId,"orders","info") => getShipmentOrdersInfo(campaignId.toLong, shipmentId.toLong,request)
            case _          => cask.Response("Not Found", statusCode = 404)
        }
    }

        /** Подтверждение отгрузки
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer] after/campaigns, ignoring @cask.post("/campaigns/:campaignId/first-mile/shipments/:shipmentId/confirm")
        def confirmShipment(campaignId : Long, shipmentId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            shipmentId <- Parsed(shipmentId)
              confirmShipmentRequestData <- Parsed.eval(ConfirmShipmentRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as ConfirmShipmentRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              confirmShipmentRequest <- Parsed.fromTry(confirmShipmentRequestData.validated(failFast))
            result <- Parsed.eval(service.confirmShipment(campaignId, shipmentId, confirmShipmentRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Получение акта приема-передачи
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels, /campaigns/{campaignId}/shipments/reception-transfer-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/first-mile/shipments/:shipmentId/act")
        def downloadShipmentAct(campaignId : Long, shipmentId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            shipmentId <- Parsed(shipmentId)
            result <- Parsed.eval(service.downloadShipmentAct(campaignId, shipmentId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : File) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Получение акта расхождений
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels, /campaigns/{campaignId}/shipments/reception-transfer-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/first-mile/shipments/:shipmentId/discrepancy-act")
        def downloadShipmentDiscrepancyAct(campaignId : Long, shipmentId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            shipmentId <- Parsed(shipmentId)
            result <- Parsed.eval(service.downloadShipmentDiscrepancyAct(campaignId, shipmentId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : File) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Получение фактического акта приема-передачи
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels, /campaigns/{campaignId}/shipments/reception-transfer-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/first-mile/shipments/:shipmentId/inbound-act")
        def downloadShipmentInboundAct(campaignId : Long, shipmentId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            shipmentId <- Parsed(shipmentId)
            result <- Parsed.eval(service.downloadShipmentInboundAct(campaignId, shipmentId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : File) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Ярлыки для доверительной приемки (FBS)
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels, /campaigns/{campaignId}/shipments/reception-transfer-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/first-mile/shipments/:shipmentId/pallet/labels")
        def downloadShipmentPalletLabels(campaignId : Long, shipmentId : Long, request: cask.Request, format : Option[ShipmentPalletLabelPageFormatType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            shipmentId <- Parsed(shipmentId)
            result <- Parsed.eval(service.downloadShipmentPalletLabels(campaignId, shipmentId, format))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : File) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels, /campaigns/{campaignId}/shipments/reception-transfer-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/shipments/reception-transfer-act")
        def downloadShipmentReceptionTransferAct(campaignId : Long, request: cask.Request, warehouseId : Option[Int]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            result <- Parsed.eval(service.downloadShipmentReceptionTransferAct(campaignId, warehouseId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : File) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Получение транспортной накладной
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels, /campaigns/{campaignId}/shipments/reception-transfer-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/first-mile/shipments/:shipmentId/transportation-waybill")
        def downloadShipmentTransportationWaybill(campaignId : Long, shipmentId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            shipmentId <- Parsed(shipmentId)
            result <- Parsed.eval(service.downloadShipmentTransportationWaybill(campaignId, shipmentId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : File) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Получение информации об одной отгрузке
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels, /campaigns/{campaignId}/shipments/reception-transfer-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/first-mile/shipments/:shipmentId")
        def getShipment(campaignId : Long, shipmentId : Long, request: cask.Request, cancelledOrders : Option[Boolean]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            shipmentId <- Parsed(shipmentId)
            result <- Parsed.eval(service.getShipment(campaignId, shipmentId, cancelledOrders))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetShipmentResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Получение информации о возможности печати ярлыков (FBS)
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels, /campaigns/{campaignId}/shipments/reception-transfer-act, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/first-mile/shipments/:shipmentId/orders/info")
        def getShipmentOrdersInfo(campaignId : Long, shipmentId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            shipmentId <- Parsed(shipmentId)
            result <- Parsed.eval(service.getShipmentOrdersInfo(campaignId, shipmentId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetShipmentOrdersInfoResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Получение информации о нескольких отгрузках
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets] after/campaigns, ignoring @cask.put("/campaigns/:campaignId/first-mile/shipments")
        def searchShipments(campaignId : Long, request: cask.Request, pageToken : Option[String], limit : Option[Int]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
              searchShipmentsRequestData <- Parsed.eval(SearchShipmentsRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as SearchShipmentsRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              searchShipmentsRequest <- Parsed.fromTry(searchShipmentsRequestData.validated(failFast))
            result <- Parsed.eval(service.searchShipments(campaignId, searchShipmentsRequest, pageToken, limit))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : SearchShipmentsResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Передача количества упаковок в отгрузке
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets] after/campaigns, ignoring @cask.put("/campaigns/:campaignId/first-mile/shipments/:shipmentId/pallets")
        def setShipmentPalletsCount(campaignId : Long, shipmentId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            shipmentId <- Parsed(shipmentId)
              setShipmentPalletsCountRequestData <- Parsed.eval(SetShipmentPalletsCountRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as SetShipmentPalletsCountRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              setShipmentPalletsCountRequest <- Parsed.fromTry(setShipmentPalletsCountRequestData.validated(failFast))
            result <- Parsed.eval(service.setShipmentPalletsCount(campaignId, shipmentId, setShipmentPalletsCountRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Перенос заказов в следующую отгрузку
         * 
         */
        // conflicts with [/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm, /campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer] after/campaigns, ignoring @cask.post("/campaigns/:campaignId/first-mile/shipments/:shipmentId/orders/transfer")
        def transferOrdersFromShipment(campaignId : Long, shipmentId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            shipmentId <- Parsed(shipmentId)
              transferOrdersFromShipmentRequestData <- Parsed.eval(TransferOrdersFromShipmentRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as TransferOrdersFromShipmentRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              transferOrdersFromShipmentRequest <- Parsed.fromTry(transferOrdersFromShipmentRequestData.validated(failFast))
            result <- Parsed.eval(service.transferOrdersFromShipment(campaignId, shipmentId, transferOrdersFromShipmentRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }

    initialize()
}
