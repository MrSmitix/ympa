//> using scala "3.3.1"
//> using lib "com.lihaoyi::cask:0.8.3"
//> using lib "com.lihaoyi::scalatags:0.12.0"
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */


// this is generated from apiRoutes.mustache
package ympa_scala_cask_server.api

import ympa_scala_cask_server.model.*

import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

import ympa_scala_cask_server.model.AddHiddenOffersRequest
import ympa_scala_cask_server.model.ApiClientDataErrorResponse
import ympa_scala_cask_server.model.ApiForbiddenErrorResponse
import ympa_scala_cask_server.model.ApiLimitErrorResponse
import ympa_scala_cask_server.model.ApiLockedErrorResponse
import ympa_scala_cask_server.model.ApiNotFoundErrorResponse
import ympa_scala_cask_server.model.ApiServerErrorResponse
import ympa_scala_cask_server.model.ApiUnauthorizedErrorResponse
import ympa_scala_cask_server.model.DeleteHiddenOffersRequest
import ympa_scala_cask_server.model.EmptyApiResponse
import ympa_scala_cask_server.model.GetHiddenOffersResponse

class HiddenOffersRoutes(service : HiddenOffersService) extends cask.Routes {

    // route group for routeWorkAroundForPOSTCampaigns
    @cask.post("/campaigns", true)
    def routeWorkAroundForPOSTCampaigns(request: cask.Request) = {
        request.remainingPathSegments match {
            case Seq(campaignId,"hidden-offers") => addHiddenOffers(campaignId.toLong,request)
            case Seq(campaignId,"hidden-offers","delete") => deleteHiddenOffers(campaignId.toLong,request)
            case _          => cask.Response("Not Found", statusCode = 404)
        }
    }

        /** Скрытие товаров и настройки скрытия
         * 
         */
        // conflicts with [/campaigns/{campaignId}/hidden-offers, /campaigns/{campaignId}/hidden-offers/delete] after/campaigns, ignoring @cask.post("/campaigns/:campaignId/hidden-offers")
        def addHiddenOffers(campaignId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
              addHiddenOffersRequestData <- Parsed.eval(AddHiddenOffersRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as AddHiddenOffersRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              addHiddenOffersRequest <- Parsed.fromTry(addHiddenOffersRequestData.validated(failFast))
            result <- Parsed.eval(service.addHiddenOffers(campaignId, addHiddenOffersRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLockedErrorResponse) => cask.Response(data = write(value), 423, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Возобновление показа товаров
         * 
         */
        // conflicts with [/campaigns/{campaignId}/hidden-offers, /campaigns/{campaignId}/hidden-offers/delete] after/campaigns, ignoring @cask.post("/campaigns/:campaignId/hidden-offers/delete")
        def deleteHiddenOffers(campaignId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
              deleteHiddenOffersRequestData <- Parsed.eval(DeleteHiddenOffersRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as DeleteHiddenOffersRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              deleteHiddenOffersRequest <- Parsed.fromTry(deleteHiddenOffersRequestData.validated(failFast))
            result <- Parsed.eval(service.deleteHiddenOffers(campaignId, deleteHiddenOffersRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLockedErrorResponse) => cask.Response(data = write(value), 423, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Информация о скрытых вами товарах
         * 
         */
        @cask.get("/campaigns/:campaignId/hidden-offers")
        def getHiddenOffers(campaignId : Long, request: cask.Request, offerId : Seq[String], pageToken : Option[String], limit : Option[Int], offset : Option[Int], page : Option[Int], pageSize : Option[Int]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            result <- Parsed.eval(service.getHiddenOffers(campaignId, offerId, pageToken, limit, offset, page, pageSize))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetHiddenOffersResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }

    initialize()
}
