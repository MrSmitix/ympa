//> using scala "3.3.1"
//> using lib "com.lihaoyi::cask:0.8.3"
//> using lib "com.lihaoyi::scalatags:0.12.0"
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */


// this is generated from apiRoutes.mustache
package ympa_scala_cask_server.api

import ympa_scala_cask_server.model.*

import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

import ympa_scala_cask_server.model.ApiClientDataErrorResponse
import ympa_scala_cask_server.model.ApiForbiddenErrorResponse
import ympa_scala_cask_server.model.ApiLimitErrorResponse
import ympa_scala_cask_server.model.ApiNotFoundErrorResponse
import ympa_scala_cask_server.model.ApiServerErrorResponse
import ympa_scala_cask_server.model.ApiUnauthorizedErrorResponse
import ympa_scala_cask_server.model.ChangeOutletRequest
import ympa_scala_cask_server.model.CreateOutletResponse
import ympa_scala_cask_server.model.EmptyApiResponse
import ympa_scala_cask_server.model.GetOutletResponse
import ympa_scala_cask_server.model.GetOutletsResponse

class OutletsRoutes(service : OutletsService) extends cask.Routes {

    // route group for routeWorkAroundForGETCampaigns
    @cask.get("/campaigns", true)
    def routeWorkAroundForGETCampaigns(request: cask.Request,pageToken : Option[String] = None,regionId : Option[Long] = None,shopOutletCode : Option[String] = None,regionId2 : Option[Long] = None) = {
        request.remainingPathSegments match {
            case Seq(campaignId,"outlets") => getOutlets(campaignId.toLong,request,pageToken, regionId, shopOutletCode, regionId2)
            case Seq(campaignId,"outlets",outletId) => getOutlet(campaignId.toLong, outletId.toLong,request)
            case _          => cask.Response("Not Found", statusCode = 404)
        }
    }

        /** Создание точки продаж
         * 
         */
        @cask.post("/campaigns/:campaignId/outlets")
        def createOutlet(campaignId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
              changeOutletRequestData <- Parsed.eval(ChangeOutletRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as ChangeOutletRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              changeOutletRequest <- Parsed.fromTry(changeOutletRequestData.validated(failFast))
            result <- Parsed.eval(service.createOutlet(campaignId, changeOutletRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : CreateOutletResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Удаление точки продаж
         * 
         */
        @cask.delete("/campaigns/:campaignId/outlets/:outletId")
        def deleteOutlet(campaignId : Long, outletId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            outletId <- Parsed(outletId)
            result <- Parsed.eval(service.deleteOutlet(campaignId, outletId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Информация об одной точке продаж
         * 
         */
        // conflicts with [/campaigns/{campaignId}/outlets/{outletId}, /campaigns/{campaignId}/outlets] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/outlets/:outletId")
        def getOutlet(campaignId : Long, outletId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            outletId <- Parsed(outletId)
            result <- Parsed.eval(service.getOutlet(campaignId, outletId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetOutletResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Информация о нескольких точках продаж
         * 
         */
        // conflicts with [/campaigns/{campaignId}/outlets/{outletId}, /campaigns/{campaignId}/outlets] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/outlets")
        def getOutlets(campaignId : Long, request: cask.Request, pageToken : Option[String], regionId : Option[Long], shopOutletCode : Option[String], regionId2 : Option[Long]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            result <- Parsed.eval(service.getOutlets(campaignId, pageToken, regionId, shopOutletCode, regionId2))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetOutletsResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Изменение информации о точке продаж
         * 
         */
        @cask.put("/campaigns/:campaignId/outlets/:outletId")
        def updateOutlet(campaignId : Long, outletId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            outletId <- Parsed(outletId)
              changeOutletRequestData <- Parsed.eval(ChangeOutletRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as ChangeOutletRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              changeOutletRequest <- Parsed.fromTry(changeOutletRequestData.validated(failFast))
            result <- Parsed.eval(service.updateOutlet(campaignId, outletId, changeOutletRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }

    initialize()
}
