//> using scala "3.3.1"
//> using lib "com.lihaoyi::cask:0.8.3"
//> using lib "com.lihaoyi::scalatags:0.12.0"
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */


// this is generated from apiRoutes.mustache
package ympa_scala_cask_server.api

import ympa_scala_cask_server.model.*

import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

import ympa_scala_cask_server.model.ApiClientDataErrorResponse
import ympa_scala_cask_server.model.ApiForbiddenErrorResponse
import ympa_scala_cask_server.model.ApiLimitErrorResponse
import ympa_scala_cask_server.model.ApiLockedErrorResponse
import ympa_scala_cask_server.model.ApiNotFoundErrorResponse
import ympa_scala_cask_server.model.ApiServerErrorResponse
import ympa_scala_cask_server.model.ApiUnauthorizedErrorResponse
import ympa_scala_cask_server.model.EmptyApiResponse
import ympa_scala_cask_server.model.FeedIndexLogsStatusType
import ympa_scala_cask_server.model.GetFeedIndexLogsResponse
import ympa_scala_cask_server.model.GetFeedResponse
import ympa_scala_cask_server.model.GetFeedsResponse
import java.time.OffsetDateTime
import ympa_scala_cask_server.model.SetFeedParamsRequest

class FeedsRoutes(service : FeedsService) extends cask.Routes {

    // route group for routeWorkAroundForPOSTCampaigns
    @cask.post("/campaigns", true)
    def routeWorkAroundForPOSTCampaigns(request: cask.Request) = {
        request.remainingPathSegments match {
            case Seq(campaignId,"feeds",feedId,"refresh") => refreshFeed(campaignId.toLong, feedId.toLong,request)
            case Seq(campaignId,"feeds",feedId,"params") => setFeedParams(campaignId.toLong, feedId.toLong,request)
            case _          => cask.Response("Not Found", statusCode = 404)
        }
    }
    // route group for routeWorkAroundForGETCampaigns
    @cask.get("/campaigns", true)
    def routeWorkAroundForGETCampaigns(request: cask.Request,limit : Option[Int] = None,publishedTimeFrom : Option[OffsetDateTime] = None,publishedTimeTo : Option[OffsetDateTime] = None,status : Option[FeedIndexLogsStatusType] = None) = {
        request.remainingPathSegments match {
            case Seq(campaignId,"feeds") => getFeeds(campaignId.toLong,request)
            case Seq(campaignId,"feeds",feedId) => getFeed(campaignId.toLong, feedId.toLong,request)
            case Seq(campaignId,"feeds",feedId,"index-logs") => getFeedIndexLogs(campaignId.toLong, feedId.toLong,request,limit, publishedTimeFrom, publishedTimeTo, status)
            case _          => cask.Response("Not Found", statusCode = 404)
        }
    }

        /** Информация о прайс-листе
         * 
         */
        // conflicts with [/campaigns/{campaignId}/feeds/{feedId}, /campaigns/{campaignId}/feeds/{feedId}/index-logs, /campaigns/{campaignId}/feeds] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/feeds/:feedId")
        def getFeed(campaignId : Long, feedId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            feedId <- Parsed(feedId)
            result <- Parsed.eval(service.getFeed(campaignId, feedId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetFeedResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Отчет по индексации прайс-листа
         * 
         */
        // conflicts with [/campaigns/{campaignId}/feeds/{feedId}, /campaigns/{campaignId}/feeds/{feedId}/index-logs, /campaigns/{campaignId}/feeds] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/feeds/:feedId/index-logs")
        def getFeedIndexLogs(campaignId : Long, feedId : Long, request: cask.Request, limit : Option[Int], publishedTimeFrom : Option[OffsetDateTime], publishedTimeTo : Option[OffsetDateTime], status : Option[FeedIndexLogsStatusType]) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            feedId <- Parsed(feedId)
            result <- Parsed.eval(service.getFeedIndexLogs(campaignId, feedId, limit, publishedTimeFrom, publishedTimeTo, status))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetFeedIndexLogsResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Список прайс-листов магазина
         * 
         */
        // conflicts with [/campaigns/{campaignId}/feeds/{feedId}, /campaigns/{campaignId}/feeds/{feedId}/index-logs, /campaigns/{campaignId}/feeds] after/campaigns, ignoring @cask.get("/campaigns/:campaignId/feeds")
        def getFeeds(campaignId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            result <- Parsed.eval(service.getFeeds(campaignId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : GetFeedsResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Сообщить, что прайс-лист обновился
         * 
         */
        // conflicts with [/campaigns/{campaignId}/feeds/{feedId}/refresh, /campaigns/{campaignId}/feeds/{feedId}/params] after/campaigns, ignoring @cask.post("/campaigns/:campaignId/feeds/:feedId/refresh")
        def refreshFeed(campaignId : Long, feedId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            feedId <- Parsed(feedId)
            result <- Parsed.eval(service.refreshFeed(campaignId, feedId))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }
        /** Изменение параметров прайс-листа
         * 
         */
        // conflicts with [/campaigns/{campaignId}/feeds/{feedId}/refresh, /campaigns/{campaignId}/feeds/{feedId}/params] after/campaigns, ignoring @cask.post("/campaigns/:campaignId/feeds/:feedId/params")
        def setFeedParams(campaignId : Long, feedId : Long, request: cask.Request) = {
            // auth method OAuth : oauth2, keyParamName: 

        def failFast = request.queryParams.keySet.contains("failFast")

        val result =         for {
            campaignId <- Parsed(campaignId)
            feedId <- Parsed(feedId)
              setFeedParamsRequestData <- Parsed.eval(SetFeedParamsRequestData.fromJsonString(request.bodyAsString)).mapError(e => s"Error parsing json as SetFeedParamsRequest from >${request.bodyAsString}< : ${e}") /* not array or map */
              setFeedParamsRequest <- Parsed.fromTry(setFeedParamsRequestData.validated(failFast))
            result <- Parsed.eval(service.setFeedParams(campaignId, feedId, setFeedParamsRequest))
        } yield result

        result match {
          case Left(error) => cask.Response(error, 500)
          case Right(value : EmptyApiResponse) => cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiClientDataErrorResponse) => cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiUnauthorizedErrorResponse) => cask.Response(data = write(value), 401, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiForbiddenErrorResponse) => cask.Response(data = write(value), 403, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiNotFoundErrorResponse) => cask.Response(data = write(value), 404, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLimitErrorResponse) => cask.Response(data = write(value), 420, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiLockedErrorResponse) => cask.Response(data = write(value), 423, headers = Seq("Content-Type" -> "application/json"))
          case Right(value : ApiServerErrorResponse) => cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
          case Right(other) => cask.Response(s"$other", 200)
        }
      }

    initialize()
}
