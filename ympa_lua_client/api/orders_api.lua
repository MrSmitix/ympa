--[[
  Партнерский API Маркета

  API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

  The version of the OpenAPI document: LATEST
  
  Generated by: https://openapi-generator.tech
]]

--package ympa_lua_client

local http_request = require "http.request"
local http_util = require "http.util"
local dkjson = require "dkjson"
local basexx = require "basexx"

-- model import
local ympa_lua_client_api_client_data_error_response = require "ympa_lua_client.model.api_client_data_error_response"
local ympa_lua_client_api_forbidden_error_response = require "ympa_lua_client.model.api_forbidden_error_response"
local ympa_lua_client_api_limit_error_response = require "ympa_lua_client.model.api_limit_error_response"
local ympa_lua_client_api_not_found_error_response = require "ympa_lua_client.model.api_not_found_error_response"
local ympa_lua_client_api_server_error_response = require "ympa_lua_client.model.api_server_error_response"
local ympa_lua_client_api_unauthorized_error_response = require "ympa_lua_client.model.api_unauthorized_error_response"
local ympa_lua_client_empty_api_response = require "ympa_lua_client.model.empty_api_response"
local ympa_lua_client_get_order_response = require "ympa_lua_client.model.get_order_response"
local ympa_lua_client_get_orders_response = require "ympa_lua_client.model.get_orders_response"
local ympa_lua_client_order_buyer_type = require "ympa_lua_client.model.order_buyer_type"
local ympa_lua_client_order_delivery_dispatch_type = require "ympa_lua_client.model.order_delivery_dispatch_type"
local ympa_lua_client_order_status_type = require "ympa_lua_client.model.order_status_type"
local ympa_lua_client_order_substatus_type = require "ympa_lua_client.model.order_substatus_type"
local ympa_lua_client_provide_order_item_identifiers_response = require "ympa_lua_client.model.provide_order_item_identifiers_response"
local ympa_lua_client_set_order_box_layout_response = require "ympa_lua_client.model.set_order_box_layout_response"
local ympa_lua_client_set_order_shipment_boxes_response = require "ympa_lua_client.model.set_order_shipment_boxes_response"
local ympa_lua_client_update_order_status_response = require "ympa_lua_client.model.update_order_status_response"
local ympa_lua_client_update_order_statuses_response = require "ympa_lua_client.model.update_order_statuses_response"
local ympa_lua_client_accept_order_cancellation_request = require "ympa_lua_client.model.accept_order_cancellation_request"
local ympa_lua_client_provide_order_digital_codes_request = require "ympa_lua_client.model.provide_order_digital_codes_request"
local ympa_lua_client_provide_order_item_identifiers_request = require "ympa_lua_client.model.provide_order_item_identifiers_request"
local ympa_lua_client_set = require "ympa_lua_client.model.set"
local ympa_lua_client_set_order_box_layout_request = require "ympa_lua_client.model.set_order_box_layout_request"
local ympa_lua_client_set_order_shipment_boxes_request = require "ympa_lua_client.model.set_order_shipment_boxes_request"
local ympa_lua_client_update_order_item_request = require "ympa_lua_client.model.update_order_item_request"
local ympa_lua_client_update_order_status_request = require "ympa_lua_client.model.update_order_status_request"
local ympa_lua_client_update_order_statuses_request = require "ympa_lua_client.model.update_order_statuses_request"

local orders_api = {}
local orders_api_mt = {
	__name = "orders_api";
	__index = orders_api;
}

local function new_orders_api(authority, basePath, schemes)
	local schemes_map = {}
	for _,v in ipairs(schemes) do
		schemes_map[v] = v
	end
	local default_scheme = schemes_map.https or schemes_map.http
	local host, port = http_util.split_authority(authority, default_scheme)
	return setmetatable({
		host = host;
		port = port;
		basePath = basePath or "https://api.partner.market.yandex.ru";
		schemes = schemes_map;
		default_scheme = default_scheme;
		http_username = nil;
		http_password = nil;
		api_key = {};
		access_token = nil;
	}, orders_api_mt)
end

function orders_api:accept_order_cancellation(campaign_id, order_id, accept_order_cancellation_request)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/campaigns/%s/orders/%s/cancellation/accept",
			self.basePath, campaign_id, order_id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(accept_order_cancellation_request))

	-- oAuth
	if self.access_token then
		req.headers:upsert("authorization", "Bearer " .. self.access_token)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return ympa_lua_client_empty_api_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function orders_api:get_order(campaign_id, order_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/campaigns/%s/orders/%s",
			self.basePath, campaign_id, order_id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- oAuth
	if self.access_token then
		req.headers:upsert("authorization", "Bearer " .. self.access_token)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return ympa_lua_client_get_order_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function orders_api:get_orders(campaign_id, order_ids, status, substatus, from_date, to_date, supplier_shipment_date_from, supplier_shipment_date_to, updated_at_from, updated_at_to, dispatch_type, fake, has_cis, only_waiting_for_cancellation_approve, only_estimated_delivery, buyer_type, page, page_size, page_token, limit)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/campaigns/%s/orders?orderIds=%s&status=%s&substatus=%s&fromDate=%s&toDate=%s&supplierShipmentDateFrom=%s&supplierShipmentDateTo=%s&updatedAtFrom=%s&updatedAtTo=%s&dispatchType=%s&fake=%s&hasCis=%s&onlyWaitingForCancellationApprove=%s&onlyEstimatedDelivery=%s&buyerType=%s&page=%s&pageSize=%s&page_token=%s&limit=%s",
			self.basePath, campaign_id, http_util.encodeURIComponent(order_ids), http_util.encodeURIComponent(status), http_util.encodeURIComponent(substatus), http_util.encodeURIComponent(from_date), http_util.encodeURIComponent(to_date), http_util.encodeURIComponent(supplier_shipment_date_from), http_util.encodeURIComponent(supplier_shipment_date_to), http_util.encodeURIComponent(updated_at_from), http_util.encodeURIComponent(updated_at_to), http_util.encodeURIComponent(dispatch_type), http_util.encodeURIComponent(fake), http_util.encodeURIComponent(has_cis), http_util.encodeURIComponent(only_waiting_for_cancellation_approve), http_util.encodeURIComponent(only_estimated_delivery), http_util.encodeURIComponent(buyer_type), http_util.encodeURIComponent(page), http_util.encodeURIComponent(page_size), http_util.encodeURIComponent(page_token), http_util.encodeURIComponent(limit));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- oAuth
	if self.access_token then
		req.headers:upsert("authorization", "Bearer " .. self.access_token)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return ympa_lua_client_get_orders_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function orders_api:provide_order_digital_codes(campaign_id, order_id, provide_order_digital_codes_request)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/campaigns/%s/orders/%s/deliverDigitalGoods",
			self.basePath, campaign_id, order_id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(provide_order_digital_codes_request))

	-- oAuth
	if self.access_token then
		req.headers:upsert("authorization", "Bearer " .. self.access_token)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return ympa_lua_client_empty_api_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function orders_api:provide_order_item_identifiers(campaign_id, order_id, provide_order_item_identifiers_request)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/campaigns/%s/orders/%s/identifiers",
			self.basePath, campaign_id, order_id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(provide_order_item_identifiers_request))

	-- oAuth
	if self.access_token then
		req.headers:upsert("authorization", "Bearer " .. self.access_token)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return ympa_lua_client_provide_order_item_identifiers_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function orders_api:set_order_box_layout(campaign_id, order_id, set_order_box_layout_request)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/campaigns/%s/orders/%s/boxes",
			self.basePath, campaign_id, order_id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(set_order_box_layout_request))

	-- oAuth
	if self.access_token then
		req.headers:upsert("authorization", "Bearer " .. self.access_token)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return ympa_lua_client_set_order_box_layout_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function orders_api:set_order_shipment_boxes(campaign_id, order_id, shipment_id, set_order_shipment_boxes_request)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/campaigns/%s/orders/%s/delivery/shipments/%s/boxes",
			self.basePath, campaign_id, order_id, shipment_id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(set_order_shipment_boxes_request))

	-- oAuth
	if self.access_token then
		req.headers:upsert("authorization", "Bearer " .. self.access_token)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return ympa_lua_client_set_order_shipment_boxes_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function orders_api:update_order_items(campaign_id, order_id, update_order_item_request)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/campaigns/%s/orders/%s/items",
			self.basePath, campaign_id, order_id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(update_order_item_request))

	-- oAuth
	if self.access_token then
		req.headers:upsert("authorization", "Bearer " .. self.access_token)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function orders_api:update_order_status(campaign_id, order_id, update_order_status_request)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/campaigns/%s/orders/%s/status",
			self.basePath, campaign_id, order_id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(update_order_status_request))

	-- oAuth
	if self.access_token then
		req.headers:upsert("authorization", "Bearer " .. self.access_token)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return ympa_lua_client_update_order_status_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function orders_api:update_order_statuses(campaign_id, update_order_statuses_request)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/campaigns/%s/orders/status-update",
			self.basePath, campaign_id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(update_order_statuses_request))

	-- oAuth
	if self.access_token then
		req.headers:upsert("authorization", "Bearer " .. self.access_token)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return ympa_lua_client_update_order_statuses_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

return {
	new = new_orders_api;
}
