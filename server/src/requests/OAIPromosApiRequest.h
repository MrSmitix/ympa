/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPromosApiRequest_H
#define OAI_OAIPromosApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIDeletePromoOffersRequest.h"
#include "OAIDeletePromoOffersResponse.h"
#include "OAIGetPromoOffersRequest.h"
#include "OAIGetPromoOffersResponse.h"
#include "OAIGetPromosRequest.h"
#include "OAIGetPromosResponse.h"
#include "OAIUpdatePromoOffersRequest.h"
#include "OAIUpdatePromoOffersResponse.h"
#include <QString>
#include "OAIPromosApiHandler.h"

namespace OpenAPI {

class OAIPromosApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIPromosApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIPromosApiHandler> handler);
    virtual ~OAIPromosApiRequest();

    void deletePromoOffersRequest(const QString& business_id);
    void getPromoOffersRequest(const QString& business_id);
    void getPromosRequest(const QString& business_id);
    void updatePromoOffersRequest(const QString& business_id);
    

    void deletePromoOffersResponse(const OAIDeletePromoOffersResponse& res);
    void getPromoOffersResponse(const OAIGetPromoOffersResponse& res);
    void getPromosResponse(const OAIGetPromosResponse& res);
    void updatePromoOffersResponse(const OAIUpdatePromoOffersResponse& res);
    

    void deletePromoOffersError(const OAIDeletePromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPromoOffersError(const OAIGetPromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPromosError(const OAIGetPromosResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePromoOffersError(const OAIUpdatePromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void deletePromoOffers(qint64 business_id, OAIDeletePromoOffersRequest oai_delete_promo_offers_request);
    void getPromoOffers(qint64 business_id, OAIGetPromoOffersRequest oai_get_promo_offers_request, QString page_token, qint32 limit);
    void getPromos(qint64 business_id, OAIGetPromosRequest oai_get_promos_request);
    void updatePromoOffers(qint64 business_id, OAIUpdatePromoOffersRequest oai_update_promo_offers_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIPromosApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIPromosApiRequest_H
