/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIModelsApiRequest.h"

namespace OpenAPI {

OAIModelsApiRequest::OAIModelsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIModelsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIModelsApiRequest::~OAIModelsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIModelsApiRequest::~OAIModelsApiRequest()";
}

QMap<QString, QString>
OAIModelsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIModelsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIModelsApiRequest::getRawSocket(){
    return socket;
}


void OAIModelsApiRequest::getModelRequest(const QString& model_idstr){
    qDebug() << "/models/{modelId}";
    connect(this, &OAIModelsApiRequest::getModel, handler.data(), &OAIModelsApiHandler::getModel);

    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
    qint64 model_id;
    fromStringValue(model_idstr, model_id);
    

    Q_EMIT getModel(model_id, region_id, currency);
}


void OAIModelsApiRequest::getModelOffersRequest(const QString& model_idstr){
    qDebug() << "/models/{modelId}/offers";
    connect(this, &OAIModelsApiRequest::getModelOffers, handler.data(), &OAIModelsApiHandler::getModelOffers);

    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
    OAISortOrderType order_by_price;
    if(socket->queryString().keys().contains("order_by_price")){
        fromStringValue(socket->queryString().value("order_by_price"), order_by_price);
    }
    
    qint32 count;
    if(socket->queryString().keys().contains("count")){
        fromStringValue(socket->queryString().value("count"), count);
    }
    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint64 model_id;
    fromStringValue(model_idstr, model_id);
    

    Q_EMIT getModelOffers(model_id, region_id, currency, order_by_price, count, page);
}


void OAIModelsApiRequest::getModelsRequest(){
    qDebug() << "/models";
    connect(this, &OAIModelsApiRequest::getModels, handler.data(), &OAIModelsApiHandler::getModels);

    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetModelsRequest oai_get_models_request;
    ::OpenAPI::fromJsonValue(oai_get_models_request, obj);
    

    Q_EMIT getModels(region_id, oai_get_models_request, currency);
}


void OAIModelsApiRequest::getModelsOffersRequest(){
    qDebug() << "/models/offers";
    connect(this, &OAIModelsApiRequest::getModelsOffers, handler.data(), &OAIModelsApiHandler::getModelsOffers);

    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
    OAISortOrderType order_by_price;
    if(socket->queryString().keys().contains("order_by_price")){
        fromStringValue(socket->queryString().value("order_by_price"), order_by_price);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetModelsRequest oai_get_models_request;
    ::OpenAPI::fromJsonValue(oai_get_models_request, obj);
    

    Q_EMIT getModelsOffers(region_id, oai_get_models_request, currency, order_by_price);
}


void OAIModelsApiRequest::searchModelsRequest(){
    qDebug() << "/models";
    connect(this, &OAIModelsApiRequest::searchModels, handler.data(), &OAIModelsApiHandler::searchModels);

    
    QString query;
    if(socket->queryString().keys().contains("query")){
        fromStringValue(socket->queryString().value("query"), query);
    }
    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    


    Q_EMIT searchModels(query, region_id, currency, page, page_size);
}



void OAIModelsApiRequest::getModelResponse(const OAIGetModelsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::getModelOffersResponse(const OAIGetModelsOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::getModelsResponse(const OAIGetModelsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::getModelsOffersResponse(const OAIGetModelsOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::searchModelsResponse(const OAISearchModelsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIModelsApiRequest::getModelError(const OAIGetModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::getModelOffersError(const OAIGetModelsOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::getModelsError(const OAIGetModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::getModelsOffersError(const OAIGetModelsOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::searchModelsError(const OAISearchModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIModelsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
