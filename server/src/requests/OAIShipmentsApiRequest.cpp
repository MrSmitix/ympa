/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIShipmentsApiRequest.h"

namespace OpenAPI {

OAIShipmentsApiRequest::OAIShipmentsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIShipmentsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIShipmentsApiRequest::~OAIShipmentsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIShipmentsApiRequest::~OAIShipmentsApiRequest()";
}

QMap<QString, QString>
OAIShipmentsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIShipmentsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIShipmentsApiRequest::getRawSocket(){
    return socket;
}


void OAIShipmentsApiRequest::confirmShipmentRequest(const QString& campaign_idstr, const QString& shipment_idstr){
    qDebug() << "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm";
    connect(this, &OAIShipmentsApiRequest::confirmShipment, handler.data(), &OAIShipmentsApiHandler::confirmShipment);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIConfirmShipmentRequest oai_confirm_shipment_request;
    ::OpenAPI::fromJsonValue(oai_confirm_shipment_request, obj);
    

    Q_EMIT confirmShipment(campaign_id, shipment_id, oai_confirm_shipment_request);
}


void OAIShipmentsApiRequest::downloadShipmentActRequest(const QString& campaign_idstr, const QString& shipment_idstr){
    qDebug() << "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act";
    connect(this, &OAIShipmentsApiRequest::downloadShipmentAct, handler.data(), &OAIShipmentsApiHandler::downloadShipmentAct);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
    

    Q_EMIT downloadShipmentAct(campaign_id, shipment_id);
}


void OAIShipmentsApiRequest::downloadShipmentDiscrepancyActRequest(const QString& campaign_idstr, const QString& shipment_idstr){
    qDebug() << "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act";
    connect(this, &OAIShipmentsApiRequest::downloadShipmentDiscrepancyAct, handler.data(), &OAIShipmentsApiHandler::downloadShipmentDiscrepancyAct);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
    

    Q_EMIT downloadShipmentDiscrepancyAct(campaign_id, shipment_id);
}


void OAIShipmentsApiRequest::downloadShipmentInboundActRequest(const QString& campaign_idstr, const QString& shipment_idstr){
    qDebug() << "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act";
    connect(this, &OAIShipmentsApiRequest::downloadShipmentInboundAct, handler.data(), &OAIShipmentsApiHandler::downloadShipmentInboundAct);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
    

    Q_EMIT downloadShipmentInboundAct(campaign_id, shipment_id);
}


void OAIShipmentsApiRequest::downloadShipmentPalletLabelsRequest(const QString& campaign_idstr, const QString& shipment_idstr){
    qDebug() << "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels";
    connect(this, &OAIShipmentsApiRequest::downloadShipmentPalletLabels, handler.data(), &OAIShipmentsApiHandler::downloadShipmentPalletLabels);

    
    OAIShipmentPalletLabelPageFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
    

    Q_EMIT downloadShipmentPalletLabels(campaign_id, shipment_id, format);
}


void OAIShipmentsApiRequest::downloadShipmentReceptionTransferActRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/shipments/reception-transfer-act";
    connect(this, &OAIShipmentsApiRequest::downloadShipmentReceptionTransferAct, handler.data(), &OAIShipmentsApiHandler::downloadShipmentReceptionTransferAct);

    
    qint32 warehouse_id;
    if(socket->queryString().keys().contains("warehouse_id")){
        fromStringValue(socket->queryString().value("warehouse_id"), warehouse_id);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT downloadShipmentReceptionTransferAct(campaign_id, warehouse_id);
}


void OAIShipmentsApiRequest::downloadShipmentTransportationWaybillRequest(const QString& campaign_idstr, const QString& shipment_idstr){
    qDebug() << "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill";
    connect(this, &OAIShipmentsApiRequest::downloadShipmentTransportationWaybill, handler.data(), &OAIShipmentsApiHandler::downloadShipmentTransportationWaybill);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
    

    Q_EMIT downloadShipmentTransportationWaybill(campaign_id, shipment_id);
}


void OAIShipmentsApiRequest::getShipmentRequest(const QString& campaign_idstr, const QString& shipment_idstr){
    qDebug() << "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}";
    connect(this, &OAIShipmentsApiRequest::getShipment, handler.data(), &OAIShipmentsApiHandler::getShipment);

    
    bool cancelled_orders;
    if(socket->queryString().keys().contains("cancelled_orders")){
        fromStringValue(socket->queryString().value("cancelled_orders"), cancelled_orders);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
    

    Q_EMIT getShipment(campaign_id, shipment_id, cancelled_orders);
}


void OAIShipmentsApiRequest::getShipmentOrdersInfoRequest(const QString& campaign_idstr, const QString& shipment_idstr){
    qDebug() << "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info";
    connect(this, &OAIShipmentsApiRequest::getShipmentOrdersInfo, handler.data(), &OAIShipmentsApiHandler::getShipmentOrdersInfo);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
    

    Q_EMIT getShipmentOrdersInfo(campaign_id, shipment_id);
}


void OAIShipmentsApiRequest::searchShipmentsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/first-mile/shipments";
    connect(this, &OAIShipmentsApiRequest::searchShipments, handler.data(), &OAIShipmentsApiHandler::searchShipments);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISearchShipmentsRequest oai_search_shipments_request;
    ::OpenAPI::fromJsonValue(oai_search_shipments_request, obj);
    

    Q_EMIT searchShipments(campaign_id, oai_search_shipments_request, page_token, limit);
}


void OAIShipmentsApiRequest::setShipmentPalletsCountRequest(const QString& campaign_idstr, const QString& shipment_idstr){
    qDebug() << "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets";
    connect(this, &OAIShipmentsApiRequest::setShipmentPalletsCount, handler.data(), &OAIShipmentsApiHandler::setShipmentPalletsCount);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISetShipmentPalletsCountRequest oai_set_shipment_pallets_count_request;
    ::OpenAPI::fromJsonValue(oai_set_shipment_pallets_count_request, obj);
    

    Q_EMIT setShipmentPalletsCount(campaign_id, shipment_id, oai_set_shipment_pallets_count_request);
}


void OAIShipmentsApiRequest::transferOrdersFromShipmentRequest(const QString& campaign_idstr, const QString& shipment_idstr){
    qDebug() << "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer";
    connect(this, &OAIShipmentsApiRequest::transferOrdersFromShipment, handler.data(), &OAIShipmentsApiHandler::transferOrdersFromShipment);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAITransferOrdersFromShipmentRequest oai_transfer_orders_from_shipment_request;
    ::OpenAPI::fromJsonValue(oai_transfer_orders_from_shipment_request, obj);
    

    Q_EMIT transferOrdersFromShipment(campaign_id, shipment_id, oai_transfer_orders_from_shipment_request);
}



void OAIShipmentsApiRequest::confirmShipmentResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentActResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentDiscrepancyActResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentInboundActResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentPalletLabelsResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentReceptionTransferActResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentTransportationWaybillResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::getShipmentResponse(const OAIGetShipmentResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::getShipmentOrdersInfoResponse(const OAIGetShipmentOrdersInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::searchShipmentsResponse(const OAISearchShipmentsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::setShipmentPalletsCountResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::transferOrdersFromShipmentResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIShipmentsApiRequest::confirmShipmentError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentActError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentDiscrepancyActError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentInboundActError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentPalletLabelsError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentReceptionTransferActError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::downloadShipmentTransportationWaybillError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::getShipmentError(const OAIGetShipmentResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::getShipmentOrdersInfoError(const OAIGetShipmentOrdersInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::searchShipmentsError(const OAISearchShipmentsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::setShipmentPalletsCountError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::transferOrdersFromShipmentError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIShipmentsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIShipmentsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
