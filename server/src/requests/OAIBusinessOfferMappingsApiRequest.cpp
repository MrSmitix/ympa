/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIBusinessOfferMappingsApiRequest.h"

namespace OpenAPI {

OAIBusinessOfferMappingsApiRequest::OAIBusinessOfferMappingsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIBusinessOfferMappingsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIBusinessOfferMappingsApiRequest::~OAIBusinessOfferMappingsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIBusinessOfferMappingsApiRequest::~OAIBusinessOfferMappingsApiRequest()";
}

QMap<QString, QString>
OAIBusinessOfferMappingsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIBusinessOfferMappingsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIBusinessOfferMappingsApiRequest::getRawSocket(){
    return socket;
}


void OAIBusinessOfferMappingsApiRequest::addOffersToArchiveRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/archive";
    connect(this, &OAIBusinessOfferMappingsApiRequest::addOffersToArchive, handler.data(), &OAIBusinessOfferMappingsApiHandler::addOffersToArchive);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAddOffersToArchiveRequest oai_add_offers_to_archive_request;
    ::OpenAPI::fromJsonValue(oai_add_offers_to_archive_request, obj);
    

    Q_EMIT addOffersToArchive(business_id, oai_add_offers_to_archive_request);
}


void OAIBusinessOfferMappingsApiRequest::deleteOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/delete";
    connect(this, &OAIBusinessOfferMappingsApiRequest::deleteOffers, handler.data(), &OAIBusinessOfferMappingsApiHandler::deleteOffers);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteOffersRequest oai_delete_offers_request;
    ::OpenAPI::fromJsonValue(oai_delete_offers_request, obj);
    

    Q_EMIT deleteOffers(business_id, oai_delete_offers_request);
}


void OAIBusinessOfferMappingsApiRequest::deleteOffersFromArchiveRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/unarchive";
    connect(this, &OAIBusinessOfferMappingsApiRequest::deleteOffersFromArchive, handler.data(), &OAIBusinessOfferMappingsApiHandler::deleteOffersFromArchive);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteOffersFromArchiveRequest oai_delete_offers_from_archive_request;
    ::OpenAPI::fromJsonValue(oai_delete_offers_from_archive_request, obj);
    

    Q_EMIT deleteOffersFromArchive(business_id, oai_delete_offers_from_archive_request);
}


void OAIBusinessOfferMappingsApiRequest::getOfferMappingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings";
    connect(this, &OAIBusinessOfferMappingsApiRequest::getOfferMappings, handler.data(), &OAIBusinessOfferMappingsApiHandler::getOfferMappings);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetOfferMappingsRequest oai_get_offer_mappings_request;
    ::OpenAPI::fromJsonValue(oai_get_offer_mappings_request, obj);
    

    Q_EMIT getOfferMappings(business_id, page_token, limit, oai_get_offer_mappings_request);
}


void OAIBusinessOfferMappingsApiRequest::getSuggestedOfferMappingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/suggestions";
    connect(this, &OAIBusinessOfferMappingsApiRequest::getSuggestedOfferMappings, handler.data(), &OAIBusinessOfferMappingsApiHandler::getSuggestedOfferMappings);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetSuggestedOfferMappingsRequest oai_get_suggested_offer_mappings_request;
    ::OpenAPI::fromJsonValue(oai_get_suggested_offer_mappings_request, obj);
    

    Q_EMIT getSuggestedOfferMappings(business_id, oai_get_suggested_offer_mappings_request);
}


void OAIBusinessOfferMappingsApiRequest::updateOfferMappingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/update";
    connect(this, &OAIBusinessOfferMappingsApiRequest::updateOfferMappings, handler.data(), &OAIBusinessOfferMappingsApiHandler::updateOfferMappings);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOfferMappingsRequest oai_update_offer_mappings_request;
    ::OpenAPI::fromJsonValue(oai_update_offer_mappings_request, obj);
    

    Q_EMIT updateOfferMappings(business_id, oai_update_offer_mappings_request);
}



void OAIBusinessOfferMappingsApiRequest::addOffersToArchiveResponse(const OAIAddOffersToArchiveResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessOfferMappingsApiRequest::deleteOffersResponse(const OAIDeleteOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessOfferMappingsApiRequest::deleteOffersFromArchiveResponse(const OAIDeleteOffersFromArchiveResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessOfferMappingsApiRequest::getOfferMappingsResponse(const OAIGetOfferMappingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessOfferMappingsApiRequest::getSuggestedOfferMappingsResponse(const OAIGetSuggestedOfferMappingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessOfferMappingsApiRequest::updateOfferMappingsResponse(const OAIUpdateOfferMappingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBusinessOfferMappingsApiRequest::addOffersToArchiveError(const OAIAddOffersToArchiveResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessOfferMappingsApiRequest::deleteOffersError(const OAIDeleteOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessOfferMappingsApiRequest::deleteOffersFromArchiveError(const OAIDeleteOffersFromArchiveResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessOfferMappingsApiRequest::getOfferMappingsError(const OAIGetOfferMappingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessOfferMappingsApiRequest::getSuggestedOfferMappingsError(const OAIGetSuggestedOfferMappingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessOfferMappingsApiRequest::updateOfferMappingsError(const OAIUpdateOfferMappingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBusinessOfferMappingsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessOfferMappingsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
