/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIChatsApiRequest.h"

namespace OpenAPI {

OAIChatsApiRequest::OAIChatsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIChatsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIChatsApiRequest::~OAIChatsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIChatsApiRequest::~OAIChatsApiRequest()";
}

QMap<QString, QString>
OAIChatsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIChatsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIChatsApiRequest::getRawSocket(){
    return socket;
}


void OAIChatsApiRequest::createChatRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/new";
    connect(this, &OAIChatsApiRequest::createChat, handler.data(), &OAIChatsApiHandler::createChat);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateChatRequest oai_create_chat_request;
    ::OpenAPI::fromJsonValue(oai_create_chat_request, obj);
    

    Q_EMIT createChat(business_id, oai_create_chat_request);
}


void OAIChatsApiRequest::getChatHistoryRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/history";
    connect(this, &OAIChatsApiRequest::getChatHistory, handler.data(), &OAIChatsApiHandler::getChatHistory);

    
    qint64 chat_id;
    if(socket->queryString().keys().contains("chat_id")){
        fromStringValue(socket->queryString().value("chat_id"), chat_id);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetChatHistoryRequest oai_get_chat_history_request;
    ::OpenAPI::fromJsonValue(oai_get_chat_history_request, obj);
    

    Q_EMIT getChatHistory(business_id, chat_id, oai_get_chat_history_request, page_token, limit);
}


void OAIChatsApiRequest::getChatsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats";
    connect(this, &OAIChatsApiRequest::getChats, handler.data(), &OAIChatsApiHandler::getChats);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetChatsRequest oai_get_chats_request;
    ::OpenAPI::fromJsonValue(oai_get_chats_request, obj);
    

    Q_EMIT getChats(business_id, oai_get_chats_request, page_token, limit);
}


void OAIChatsApiRequest::sendFileToChatRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/file/send";
    connect(this, &OAIChatsApiRequest::sendFileToChat, handler.data(), &OAIChatsApiHandler::sendFileToChat);

    
    qint64 chat_id;
    if(socket->queryString().keys().contains("chat_id")){
        fromStringValue(socket->queryString().value("chat_id"), chat_id);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
    
    OAIHttpFileElement file;

    Q_EMIT sendFileToChat(business_id, chat_id, file);
}


void OAIChatsApiRequest::sendMessageToChatRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/message";
    connect(this, &OAIChatsApiRequest::sendMessageToChat, handler.data(), &OAIChatsApiHandler::sendMessageToChat);

    
    qint64 chat_id;
    if(socket->queryString().keys().contains("chat_id")){
        fromStringValue(socket->queryString().value("chat_id"), chat_id);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISendMessageToChatRequest oai_send_message_to_chat_request;
    ::OpenAPI::fromJsonValue(oai_send_message_to_chat_request, obj);
    

    Q_EMIT sendMessageToChat(business_id, chat_id, oai_send_message_to_chat_request);
}



void OAIChatsApiRequest::createChatResponse(const OAICreateChatResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChatsApiRequest::getChatHistoryResponse(const OAIGetChatHistoryResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChatsApiRequest::getChatsResponse(const OAIGetChatsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChatsApiRequest::sendFileToChatResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChatsApiRequest::sendMessageToChatResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIChatsApiRequest::createChatError(const OAICreateChatResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChatsApiRequest::getChatHistoryError(const OAIGetChatHistoryResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChatsApiRequest::getChatsError(const OAIGetChatsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChatsApiRequest::sendFileToChatError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChatsApiRequest::sendMessageToChatError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIChatsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChatsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
