/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShipmentsApiRequest_H
#define OAI_OAIShipmentsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIConfirmShipmentRequest.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetShipmentOrdersInfoResponse.h"
#include "OAIGetShipmentResponse.h"
#include "OAIHttpFileElement.h"
#include "OAISearchShipmentsRequest.h"
#include "OAISearchShipmentsResponse.h"
#include "OAISetShipmentPalletsCountRequest.h"
#include "OAIShipmentPalletLabelPageFormatType.h"
#include "OAITransferOrdersFromShipmentRequest.h"
#include <QString>
#include "OAIShipmentsApiHandler.h"

namespace OpenAPI {

class OAIShipmentsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIShipmentsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIShipmentsApiHandler> handler);
    virtual ~OAIShipmentsApiRequest();

    void confirmShipmentRequest(const QString& campaign_id, const QString& shipment_id);
    void downloadShipmentActRequest(const QString& campaign_id, const QString& shipment_id);
    void downloadShipmentDiscrepancyActRequest(const QString& campaign_id, const QString& shipment_id);
    void downloadShipmentInboundActRequest(const QString& campaign_id, const QString& shipment_id);
    void downloadShipmentPalletLabelsRequest(const QString& campaign_id, const QString& shipment_id);
    void downloadShipmentReceptionTransferActRequest(const QString& campaign_id);
    void downloadShipmentTransportationWaybillRequest(const QString& campaign_id, const QString& shipment_id);
    void getShipmentRequest(const QString& campaign_id, const QString& shipment_id);
    void getShipmentOrdersInfoRequest(const QString& campaign_id, const QString& shipment_id);
    void searchShipmentsRequest(const QString& campaign_id);
    void setShipmentPalletsCountRequest(const QString& campaign_id, const QString& shipment_id);
    void transferOrdersFromShipmentRequest(const QString& campaign_id, const QString& shipment_id);
    

    void confirmShipmentResponse(const OAIEmptyApiResponse& res);
    void downloadShipmentActResponse(const OAIHttpFileElement& res);
    void downloadShipmentDiscrepancyActResponse(const OAIHttpFileElement& res);
    void downloadShipmentInboundActResponse(const OAIHttpFileElement& res);
    void downloadShipmentPalletLabelsResponse(const OAIHttpFileElement& res);
    void downloadShipmentReceptionTransferActResponse(const OAIHttpFileElement& res);
    void downloadShipmentTransportationWaybillResponse(const OAIHttpFileElement& res);
    void getShipmentResponse(const OAIGetShipmentResponse& res);
    void getShipmentOrdersInfoResponse(const OAIGetShipmentOrdersInfoResponse& res);
    void searchShipmentsResponse(const OAISearchShipmentsResponse& res);
    void setShipmentPalletsCountResponse(const OAIEmptyApiResponse& res);
    void transferOrdersFromShipmentResponse(const OAIEmptyApiResponse& res);
    

    void confirmShipmentError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadShipmentActError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadShipmentDiscrepancyActError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadShipmentInboundActError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadShipmentPalletLabelsError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadShipmentReceptionTransferActError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadShipmentTransportationWaybillError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getShipmentError(const OAIGetShipmentResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getShipmentOrdersInfoError(const OAIGetShipmentOrdersInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchShipmentsError(const OAISearchShipmentsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void setShipmentPalletsCountError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void transferOrdersFromShipmentError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void confirmShipment(qint64 campaign_id, qint64 shipment_id, OAIConfirmShipmentRequest oai_confirm_shipment_request);
    void downloadShipmentAct(qint64 campaign_id, qint64 shipment_id);
    void downloadShipmentDiscrepancyAct(qint64 campaign_id, qint64 shipment_id);
    void downloadShipmentInboundAct(qint64 campaign_id, qint64 shipment_id);
    void downloadShipmentPalletLabels(qint64 campaign_id, qint64 shipment_id, OAIShipmentPalletLabelPageFormatType format);
    void downloadShipmentReceptionTransferAct(qint64 campaign_id, qint32 warehouse_id);
    void downloadShipmentTransportationWaybill(qint64 campaign_id, qint64 shipment_id);
    void getShipment(qint64 campaign_id, qint64 shipment_id, bool cancelled_orders);
    void getShipmentOrdersInfo(qint64 campaign_id, qint64 shipment_id);
    void searchShipments(qint64 campaign_id, OAISearchShipmentsRequest oai_search_shipments_request, QString page_token, qint32 limit);
    void setShipmentPalletsCount(qint64 campaign_id, qint64 shipment_id, OAISetShipmentPalletsCountRequest oai_set_shipment_pallets_count_request);
    void transferOrdersFromShipment(qint64 campaign_id, qint64 shipment_id, OAITransferOrdersFromShipmentRequest oai_transfer_orders_from_shipment_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIShipmentsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIShipmentsApiRequest_H
