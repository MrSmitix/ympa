/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChatsApiRequest_H
#define OAI_OAIChatsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAICreateChatRequest.h"
#include "OAICreateChatResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetChatHistoryRequest.h"
#include "OAIGetChatHistoryResponse.h"
#include "OAIGetChatsRequest.h"
#include "OAIGetChatsResponse.h"
#include "OAIHttpFileElement.h"
#include "OAISendMessageToChatRequest.h"
#include <QString>
#include "OAIChatsApiHandler.h"

namespace OpenAPI {

class OAIChatsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIChatsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIChatsApiHandler> handler);
    virtual ~OAIChatsApiRequest();

    void createChatRequest(const QString& business_id);
    void getChatHistoryRequest(const QString& business_id);
    void getChatsRequest(const QString& business_id);
    void sendFileToChatRequest(const QString& business_id);
    void sendMessageToChatRequest(const QString& business_id);
    

    void createChatResponse(const OAICreateChatResponse& res);
    void getChatHistoryResponse(const OAIGetChatHistoryResponse& res);
    void getChatsResponse(const OAIGetChatsResponse& res);
    void sendFileToChatResponse(const OAIEmptyApiResponse& res);
    void sendMessageToChatResponse(const OAIEmptyApiResponse& res);
    

    void createChatError(const OAICreateChatResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getChatHistoryError(const OAIGetChatHistoryResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getChatsError(const OAIGetChatsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void sendFileToChatError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void sendMessageToChatError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void createChat(qint64 business_id, OAICreateChatRequest oai_create_chat_request);
    void getChatHistory(qint64 business_id, qint64 chat_id, OAIGetChatHistoryRequest oai_get_chat_history_request, QString page_token, qint32 limit);
    void getChats(qint64 business_id, OAIGetChatsRequest oai_get_chats_request, QString page_token, qint32 limit);
    void sendFileToChat(qint64 business_id, qint64 chat_id, OAIHttpFileElement file);
    void sendMessageToChat(qint64 business_id, qint64 chat_id, OAISendMessageToChatRequest oai_send_message_to_chat_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIChatsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIChatsApiRequest_H
