/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIRegionsApiRequest.h"

namespace OpenAPI {

OAIRegionsApiRequest::OAIRegionsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIRegionsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIRegionsApiRequest::~OAIRegionsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIRegionsApiRequest::~OAIRegionsApiRequest()";
}

QMap<QString, QString>
OAIRegionsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIRegionsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIRegionsApiRequest::getRawSocket(){
    return socket;
}


void OAIRegionsApiRequest::searchRegionChildrenRequest(const QString& region_idstr){
    qDebug() << "/regions/{regionId}/children";
    connect(this, &OAIRegionsApiRequest::searchRegionChildren, handler.data(), &OAIRegionsApiHandler::searchRegionChildren);

    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    qint64 region_id;
    fromStringValue(region_idstr, region_id);
    

    Q_EMIT searchRegionChildren(region_id, page, page_size);
}


void OAIRegionsApiRequest::searchRegionsByIdRequest(const QString& region_idstr){
    qDebug() << "/regions/{regionId}";
    connect(this, &OAIRegionsApiRequest::searchRegionsById, handler.data(), &OAIRegionsApiHandler::searchRegionsById);

    
    qint64 region_id;
    fromStringValue(region_idstr, region_id);
    

    Q_EMIT searchRegionsById(region_id);
}


void OAIRegionsApiRequest::searchRegionsByNameRequest(){
    qDebug() << "/regions";
    connect(this, &OAIRegionsApiRequest::searchRegionsByName, handler.data(), &OAIRegionsApiHandler::searchRegionsByName);

    
    QString name;
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    


    Q_EMIT searchRegionsByName(name, page_token, limit);
}



void OAIRegionsApiRequest::searchRegionChildrenResponse(const OAIGetRegionWithChildrenResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRegionsApiRequest::searchRegionsByIdResponse(const OAIGetRegionsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRegionsApiRequest::searchRegionsByNameResponse(const OAIGetRegionsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIRegionsApiRequest::searchRegionChildrenError(const OAIGetRegionWithChildrenResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRegionsApiRequest::searchRegionsByIdError(const OAIGetRegionsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRegionsApiRequest::searchRegionsByNameError(const OAIGetRegionsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIRegionsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRegionsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
