/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIFbyApiRequest.h"

namespace OpenAPI {

OAIFbyApiRequest::OAIFbyApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIFbyApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIFbyApiRequest::~OAIFbyApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIFbyApiRequest::~OAIFbyApiRequest()";
}

QMap<QString, QString>
OAIFbyApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIFbyApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIFbyApiRequest::getRawSocket(){
    return socket;
}


void OAIFbyApiRequest::addHiddenOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/hidden-offers";
    connect(this, &OAIFbyApiRequest::addHiddenOffers, handler.data(), &OAIFbyApiHandler::addHiddenOffers);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAddHiddenOffersRequest oai_add_hidden_offers_request;
    ::OpenAPI::fromJsonValue(oai_add_hidden_offers_request, obj);
    

    Q_EMIT addHiddenOffers(campaign_id, oai_add_hidden_offers_request);
}


void OAIFbyApiRequest::addOffersToArchiveRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/archive";
    connect(this, &OAIFbyApiRequest::addOffersToArchive, handler.data(), &OAIFbyApiHandler::addOffersToArchive);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAddOffersToArchiveRequest oai_add_offers_to_archive_request;
    ::OpenAPI::fromJsonValue(oai_add_offers_to_archive_request, obj);
    

    Q_EMIT addOffersToArchive(business_id, oai_add_offers_to_archive_request);
}


void OAIFbyApiRequest::calculateTariffsRequest(){
    qDebug() << "/tariffs/calculate";
    connect(this, &OAIFbyApiRequest::calculateTariffs, handler.data(), &OAIFbyApiHandler::calculateTariffs);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICalculateTariffsRequest oai_calculate_tariffs_request;
    ::OpenAPI::fromJsonValue(oai_calculate_tariffs_request, obj);
    

    Q_EMIT calculateTariffs(oai_calculate_tariffs_request);
}


void OAIFbyApiRequest::confirmBusinessPricesRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/price-quarantine/confirm";
    connect(this, &OAIFbyApiRequest::confirmBusinessPrices, handler.data(), &OAIFbyApiHandler::confirmBusinessPrices);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIConfirmPricesRequest oai_confirm_prices_request;
    ::OpenAPI::fromJsonValue(oai_confirm_prices_request, obj);
    

    Q_EMIT confirmBusinessPrices(business_id, oai_confirm_prices_request);
}


void OAIFbyApiRequest::confirmCampaignPricesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/price-quarantine/confirm";
    connect(this, &OAIFbyApiRequest::confirmCampaignPrices, handler.data(), &OAIFbyApiHandler::confirmCampaignPrices);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIConfirmPricesRequest oai_confirm_prices_request;
    ::OpenAPI::fromJsonValue(oai_confirm_prices_request, obj);
    

    Q_EMIT confirmCampaignPrices(campaign_id, oai_confirm_prices_request);
}


void OAIFbyApiRequest::createChatRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/new";
    connect(this, &OAIFbyApiRequest::createChat, handler.data(), &OAIFbyApiHandler::createChat);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateChatRequest oai_create_chat_request;
    ::OpenAPI::fromJsonValue(oai_create_chat_request, obj);
    

    Q_EMIT createChat(business_id, oai_create_chat_request);
}


void OAIFbyApiRequest::deleteCampaignOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/delete";
    connect(this, &OAIFbyApiRequest::deleteCampaignOffers, handler.data(), &OAIFbyApiHandler::deleteCampaignOffers);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteCampaignOffersRequest oai_delete_campaign_offers_request;
    ::OpenAPI::fromJsonValue(oai_delete_campaign_offers_request, obj);
    

    Q_EMIT deleteCampaignOffers(campaign_id, oai_delete_campaign_offers_request);
}


void OAIFbyApiRequest::deleteGoodsFeedbackCommentRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/comments/delete";
    connect(this, &OAIFbyApiRequest::deleteGoodsFeedbackComment, handler.data(), &OAIFbyApiHandler::deleteGoodsFeedbackComment);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteGoodsFeedbackCommentRequest oai_delete_goods_feedback_comment_request;
    ::OpenAPI::fromJsonValue(oai_delete_goods_feedback_comment_request, obj);
    

    Q_EMIT deleteGoodsFeedbackComment(business_id, oai_delete_goods_feedback_comment_request);
}


void OAIFbyApiRequest::deleteHiddenOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/hidden-offers/delete";
    connect(this, &OAIFbyApiRequest::deleteHiddenOffers, handler.data(), &OAIFbyApiHandler::deleteHiddenOffers);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteHiddenOffersRequest oai_delete_hidden_offers_request;
    ::OpenAPI::fromJsonValue(oai_delete_hidden_offers_request, obj);
    

    Q_EMIT deleteHiddenOffers(campaign_id, oai_delete_hidden_offers_request);
}


void OAIFbyApiRequest::deleteOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/delete";
    connect(this, &OAIFbyApiRequest::deleteOffers, handler.data(), &OAIFbyApiHandler::deleteOffers);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteOffersRequest oai_delete_offers_request;
    ::OpenAPI::fromJsonValue(oai_delete_offers_request, obj);
    

    Q_EMIT deleteOffers(business_id, oai_delete_offers_request);
}


void OAIFbyApiRequest::deleteOffersFromArchiveRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/unarchive";
    connect(this, &OAIFbyApiRequest::deleteOffersFromArchive, handler.data(), &OAIFbyApiHandler::deleteOffersFromArchive);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteOffersFromArchiveRequest oai_delete_offers_from_archive_request;
    ::OpenAPI::fromJsonValue(oai_delete_offers_from_archive_request, obj);
    

    Q_EMIT deleteOffersFromArchive(business_id, oai_delete_offers_from_archive_request);
}


void OAIFbyApiRequest::deletePromoOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos/offers/delete";
    connect(this, &OAIFbyApiRequest::deletePromoOffers, handler.data(), &OAIFbyApiHandler::deletePromoOffers);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeletePromoOffersRequest oai_delete_promo_offers_request;
    ::OpenAPI::fromJsonValue(oai_delete_promo_offers_request, obj);
    

    Q_EMIT deletePromoOffers(business_id, oai_delete_promo_offers_request);
}


void OAIFbyApiRequest::generateBoostConsolidatedReportRequest(){
    qDebug() << "/reports/boost-consolidated/generate";
    connect(this, &OAIFbyApiRequest::generateBoostConsolidatedReport, handler.data(), &OAIFbyApiHandler::generateBoostConsolidatedReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateBoostConsolidatedRequest oai_generate_boost_consolidated_request;
    ::OpenAPI::fromJsonValue(oai_generate_boost_consolidated_request, obj);
    

    Q_EMIT generateBoostConsolidatedReport(oai_generate_boost_consolidated_request, format);
}


void OAIFbyApiRequest::generateCompetitorsPositionReportRequest(){
    qDebug() << "/reports/competitors-position/generate";
    connect(this, &OAIFbyApiRequest::generateCompetitorsPositionReport, handler.data(), &OAIFbyApiHandler::generateCompetitorsPositionReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateCompetitorsPositionReportRequest oai_generate_competitors_position_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_competitors_position_report_request, obj);
    

    Q_EMIT generateCompetitorsPositionReport(oai_generate_competitors_position_report_request, format);
}


void OAIFbyApiRequest::generateGoodsFeedbackReportRequest(){
    qDebug() << "/reports/goods-feedback/generate";
    connect(this, &OAIFbyApiRequest::generateGoodsFeedbackReport, handler.data(), &OAIFbyApiHandler::generateGoodsFeedbackReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateGoodsFeedbackRequest oai_generate_goods_feedback_request;
    ::OpenAPI::fromJsonValue(oai_generate_goods_feedback_request, obj);
    

    Q_EMIT generateGoodsFeedbackReport(oai_generate_goods_feedback_request, format);
}


void OAIFbyApiRequest::generateGoodsMovementReportRequest(){
    qDebug() << "/reports/goods-movement/generate";
    connect(this, &OAIFbyApiRequest::generateGoodsMovementReport, handler.data(), &OAIFbyApiHandler::generateGoodsMovementReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateGoodsMovementReportRequest oai_generate_goods_movement_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_goods_movement_report_request, obj);
    

    Q_EMIT generateGoodsMovementReport(oai_generate_goods_movement_report_request, format);
}


void OAIFbyApiRequest::generateGoodsRealizationReportRequest(){
    qDebug() << "/reports/goods-realization/generate";
    connect(this, &OAIFbyApiRequest::generateGoodsRealizationReport, handler.data(), &OAIFbyApiHandler::generateGoodsRealizationReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateGoodsRealizationReportRequest oai_generate_goods_realization_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_goods_realization_report_request, obj);
    

    Q_EMIT generateGoodsRealizationReport(oai_generate_goods_realization_report_request, format);
}


void OAIFbyApiRequest::generateGoodsTurnoverReportRequest(){
    qDebug() << "/reports/goods-turnover/generate";
    connect(this, &OAIFbyApiRequest::generateGoodsTurnoverReport, handler.data(), &OAIFbyApiHandler::generateGoodsTurnoverReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateGoodsTurnoverRequest oai_generate_goods_turnover_request;
    ::OpenAPI::fromJsonValue(oai_generate_goods_turnover_request, obj);
    

    Q_EMIT generateGoodsTurnoverReport(oai_generate_goods_turnover_request, format);
}


void OAIFbyApiRequest::generatePricesReportRequest(){
    qDebug() << "/reports/prices/generate";
    connect(this, &OAIFbyApiRequest::generatePricesReport, handler.data(), &OAIFbyApiHandler::generatePricesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGeneratePricesReportRequest oai_generate_prices_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_prices_report_request, obj);
    

    Q_EMIT generatePricesReport(oai_generate_prices_report_request, format);
}


void OAIFbyApiRequest::generateShelfsStatisticsReportRequest(){
    qDebug() << "/reports/shelf-statistics/generate";
    connect(this, &OAIFbyApiRequest::generateShelfsStatisticsReport, handler.data(), &OAIFbyApiHandler::generateShelfsStatisticsReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateShelfsStatisticsRequest oai_generate_shelfs_statistics_request;
    ::OpenAPI::fromJsonValue(oai_generate_shelfs_statistics_request, obj);
    

    Q_EMIT generateShelfsStatisticsReport(oai_generate_shelfs_statistics_request, format);
}


void OAIFbyApiRequest::generateShowsSalesReportRequest(){
    qDebug() << "/reports/shows-sales/generate";
    connect(this, &OAIFbyApiRequest::generateShowsSalesReport, handler.data(), &OAIFbyApiHandler::generateShowsSalesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateShowsSalesReportRequest oai_generate_shows_sales_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_shows_sales_report_request, obj);
    

    Q_EMIT generateShowsSalesReport(oai_generate_shows_sales_report_request, format);
}


void OAIFbyApiRequest::generateStocksOnWarehousesReportRequest(){
    qDebug() << "/reports/stocks-on-warehouses/generate";
    connect(this, &OAIFbyApiRequest::generateStocksOnWarehousesReport, handler.data(), &OAIFbyApiHandler::generateStocksOnWarehousesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateStocksOnWarehousesReportRequest oai_generate_stocks_on_warehouses_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_stocks_on_warehouses_report_request, obj);
    

    Q_EMIT generateStocksOnWarehousesReport(oai_generate_stocks_on_warehouses_report_request, format);
}


void OAIFbyApiRequest::generateUnitedMarketplaceServicesReportRequest(){
    qDebug() << "/reports/united-marketplace-services/generate";
    connect(this, &OAIFbyApiRequest::generateUnitedMarketplaceServicesReport, handler.data(), &OAIFbyApiHandler::generateUnitedMarketplaceServicesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateUnitedMarketplaceServicesReportRequest oai_generate_united_marketplace_services_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_united_marketplace_services_report_request, obj);
    

    Q_EMIT generateUnitedMarketplaceServicesReport(oai_generate_united_marketplace_services_report_request, format);
}


void OAIFbyApiRequest::generateUnitedNettingReportRequest(){
    qDebug() << "/reports/united-netting/generate";
    connect(this, &OAIFbyApiRequest::generateUnitedNettingReport, handler.data(), &OAIFbyApiHandler::generateUnitedNettingReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateUnitedNettingReportRequest oai_generate_united_netting_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_united_netting_report_request, obj);
    

    Q_EMIT generateUnitedNettingReport(oai_generate_united_netting_report_request, format);
}


void OAIFbyApiRequest::generateUnitedOrdersReportRequest(){
    qDebug() << "/reports/united-orders/generate";
    connect(this, &OAIFbyApiRequest::generateUnitedOrdersReport, handler.data(), &OAIFbyApiHandler::generateUnitedOrdersReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateUnitedOrdersRequest oai_generate_united_orders_request;
    ::OpenAPI::fromJsonValue(oai_generate_united_orders_request, obj);
    

    Q_EMIT generateUnitedOrdersReport(oai_generate_united_orders_request, format);
}


void OAIFbyApiRequest::getAllOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/all";
    connect(this, &OAIFbyApiRequest::getAllOffers, handler.data(), &OAIFbyApiHandler::getAllOffers);

    
    qint64 feed_id;
    if(socket->queryString().keys().contains("feed_id")){
        fromStringValue(socket->queryString().value("feed_id"), feed_id);
    }
    
    qint32 chunk;
    if(socket->queryString().keys().contains("chunk")){
        fromStringValue(socket->queryString().value("chunk"), chunk);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getAllOffers(campaign_id, feed_id, chunk);
}


void OAIFbyApiRequest::getBidsInfoForBusinessRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/bids/info";
    connect(this, &OAIFbyApiRequest::getBidsInfoForBusiness, handler.data(), &OAIFbyApiHandler::getBidsInfoForBusiness);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetBidsInfoRequest oai_get_bids_info_request;
    ::OpenAPI::fromJsonValue(oai_get_bids_info_request, obj);
    

    Q_EMIT getBidsInfoForBusiness(business_id, page_token, limit, oai_get_bids_info_request);
}


void OAIFbyApiRequest::getBidsRecommendationsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/bids/recommendations";
    connect(this, &OAIFbyApiRequest::getBidsRecommendations, handler.data(), &OAIFbyApiHandler::getBidsRecommendations);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetBidsRecommendationsRequest oai_get_bids_recommendations_request;
    ::OpenAPI::fromJsonValue(oai_get_bids_recommendations_request, obj);
    

    Q_EMIT getBidsRecommendations(business_id, oai_get_bids_recommendations_request);
}


void OAIFbyApiRequest::getBusinessQuarantineOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/price-quarantine";
    connect(this, &OAIFbyApiRequest::getBusinessQuarantineOffers, handler.data(), &OAIFbyApiHandler::getBusinessQuarantineOffers);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetQuarantineOffersRequest oai_get_quarantine_offers_request;
    ::OpenAPI::fromJsonValue(oai_get_quarantine_offers_request, obj);
    

    Q_EMIT getBusinessQuarantineOffers(business_id, oai_get_quarantine_offers_request, page_token, limit);
}


void OAIFbyApiRequest::getBusinessSettingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/settings";
    connect(this, &OAIFbyApiRequest::getBusinessSettings, handler.data(), &OAIFbyApiHandler::getBusinessSettings);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
    

    Q_EMIT getBusinessSettings(business_id);
}


void OAIFbyApiRequest::getCampaignRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}";
    connect(this, &OAIFbyApiRequest::getCampaign, handler.data(), &OAIFbyApiHandler::getCampaign);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaign(campaign_id);
}


void OAIFbyApiRequest::getCampaignLoginsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/logins";
    connect(this, &OAIFbyApiRequest::getCampaignLogins, handler.data(), &OAIFbyApiHandler::getCampaignLogins);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaignLogins(campaign_id);
}


void OAIFbyApiRequest::getCampaignOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers";
    connect(this, &OAIFbyApiRequest::getCampaignOffers, handler.data(), &OAIFbyApiHandler::getCampaignOffers);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetCampaignOffersRequest oai_get_campaign_offers_request;
    ::OpenAPI::fromJsonValue(oai_get_campaign_offers_request, obj);
    

    Q_EMIT getCampaignOffers(campaign_id, oai_get_campaign_offers_request, page_token, limit);
}


void OAIFbyApiRequest::getCampaignQuarantineOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/price-quarantine";
    connect(this, &OAIFbyApiRequest::getCampaignQuarantineOffers, handler.data(), &OAIFbyApiHandler::getCampaignQuarantineOffers);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetQuarantineOffersRequest oai_get_quarantine_offers_request;
    ::OpenAPI::fromJsonValue(oai_get_quarantine_offers_request, obj);
    

    Q_EMIT getCampaignQuarantineOffers(campaign_id, oai_get_quarantine_offers_request, page_token, limit);
}


void OAIFbyApiRequest::getCampaignRegionRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/region";
    connect(this, &OAIFbyApiRequest::getCampaignRegion, handler.data(), &OAIFbyApiHandler::getCampaignRegion);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaignRegion(campaign_id);
}


void OAIFbyApiRequest::getCampaignSettingsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/settings";
    connect(this, &OAIFbyApiRequest::getCampaignSettings, handler.data(), &OAIFbyApiHandler::getCampaignSettings);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaignSettings(campaign_id);
}


void OAIFbyApiRequest::getCampaignsRequest(){
    qDebug() << "/campaigns";
    connect(this, &OAIFbyApiRequest::getCampaigns, handler.data(), &OAIFbyApiHandler::getCampaigns);

    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    


    Q_EMIT getCampaigns(page, page_size);
}


void OAIFbyApiRequest::getCampaignsByLoginRequest(const QString& loginstr){
    qDebug() << "/campaigns/by_login/{login}";
    connect(this, &OAIFbyApiRequest::getCampaignsByLogin, handler.data(), &OAIFbyApiHandler::getCampaignsByLogin);

    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString login;
    fromStringValue(loginstr, login);
    

    Q_EMIT getCampaignsByLogin(login, page, page_size);
}


void OAIFbyApiRequest::getCategoriesMaxSaleQuantumRequest(){
    qDebug() << "/categories/max-sale-quantum";
    connect(this, &OAIFbyApiRequest::getCategoriesMaxSaleQuantum, handler.data(), &OAIFbyApiHandler::getCategoriesMaxSaleQuantum);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetCategoriesMaxSaleQuantumRequest oai_get_categories_max_sale_quantum_request;
    ::OpenAPI::fromJsonValue(oai_get_categories_max_sale_quantum_request, obj);
    

    Q_EMIT getCategoriesMaxSaleQuantum(oai_get_categories_max_sale_quantum_request);
}


void OAIFbyApiRequest::getCategoriesTreeRequest(){
    qDebug() << "/categories/tree";
    connect(this, &OAIFbyApiRequest::getCategoriesTree, handler.data(), &OAIFbyApiHandler::getCategoriesTree);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetCategoriesRequest oai_get_categories_request;
    ::OpenAPI::fromJsonValue(oai_get_categories_request, obj);
    

    Q_EMIT getCategoriesTree(oai_get_categories_request);
}


void OAIFbyApiRequest::getCategoryContentParametersRequest(const QString& category_idstr){
    qDebug() << "/category/{categoryId}/parameters";
    connect(this, &OAIFbyApiRequest::getCategoryContentParameters, handler.data(), &OAIFbyApiHandler::getCategoryContentParameters);

    
    qint64 category_id;
    fromStringValue(category_idstr, category_id);
    

    Q_EMIT getCategoryContentParameters(category_id);
}


void OAIFbyApiRequest::getChatHistoryRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/history";
    connect(this, &OAIFbyApiRequest::getChatHistory, handler.data(), &OAIFbyApiHandler::getChatHistory);

    
    qint64 chat_id;
    if(socket->queryString().keys().contains("chat_id")){
        fromStringValue(socket->queryString().value("chat_id"), chat_id);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetChatHistoryRequest oai_get_chat_history_request;
    ::OpenAPI::fromJsonValue(oai_get_chat_history_request, obj);
    

    Q_EMIT getChatHistory(business_id, chat_id, oai_get_chat_history_request, page_token, limit);
}


void OAIFbyApiRequest::getChatsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats";
    connect(this, &OAIFbyApiRequest::getChats, handler.data(), &OAIFbyApiHandler::getChats);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetChatsRequest oai_get_chats_request;
    ::OpenAPI::fromJsonValue(oai_get_chats_request, obj);
    

    Q_EMIT getChats(business_id, oai_get_chats_request, page_token, limit);
}


void OAIFbyApiRequest::getFeedRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}";
    connect(this, &OAIFbyApiRequest::getFeed, handler.data(), &OAIFbyApiHandler::getFeed);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    Q_EMIT getFeed(campaign_id, feed_id);
}


void OAIFbyApiRequest::getFeedIndexLogsRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}/index-logs";
    connect(this, &OAIFbyApiRequest::getFeedIndexLogs, handler.data(), &OAIFbyApiHandler::getFeedIndexLogs);

    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    QDateTime published_time_from;
    if(socket->queryString().keys().contains("published_time_from")){
        fromStringValue(socket->queryString().value("published_time_from"), published_time_from);
    }
    
    QDateTime published_time_to;
    if(socket->queryString().keys().contains("published_time_to")){
        fromStringValue(socket->queryString().value("published_time_to"), published_time_to);
    }
    
    OAIFeedIndexLogsStatusType status;
    if(socket->queryString().keys().contains("status")){
        fromStringValue(socket->queryString().value("status"), status);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    Q_EMIT getFeedIndexLogs(campaign_id, feed_id, limit, published_time_from, published_time_to, status);
}


void OAIFbyApiRequest::getFeedbackAndCommentUpdatesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/feedback/updates";
    connect(this, &OAIFbyApiRequest::getFeedbackAndCommentUpdates, handler.data(), &OAIFbyApiHandler::getFeedbackAndCommentUpdates);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    QDate from_date;
    if(socket->queryString().keys().contains("from_date")){
        fromStringValue(socket->queryString().value("from_date"), from_date);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getFeedbackAndCommentUpdates(campaign_id, page_token, limit, from_date);
}


void OAIFbyApiRequest::getFeedsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds";
    connect(this, &OAIFbyApiRequest::getFeeds, handler.data(), &OAIFbyApiHandler::getFeeds);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getFeeds(campaign_id);
}


void OAIFbyApiRequest::getFulfillmentWarehousesRequest(){
    qDebug() << "/warehouses";
    connect(this, &OAIFbyApiRequest::getFulfillmentWarehouses, handler.data(), &OAIFbyApiHandler::getFulfillmentWarehouses);

    


    Q_EMIT getFulfillmentWarehouses();
}


void OAIFbyApiRequest::getGoodsFeedbackCommentsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/comments";
    connect(this, &OAIFbyApiRequest::getGoodsFeedbackComments, handler.data(), &OAIFbyApiHandler::getGoodsFeedbackComments);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetGoodsFeedbackCommentsRequest oai_get_goods_feedback_comments_request;
    ::OpenAPI::fromJsonValue(oai_get_goods_feedback_comments_request, obj);
    

    Q_EMIT getGoodsFeedbackComments(business_id, oai_get_goods_feedback_comments_request, page_token, limit);
}


void OAIFbyApiRequest::getGoodsFeedbacksRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback";
    connect(this, &OAIFbyApiRequest::getGoodsFeedbacks, handler.data(), &OAIFbyApiHandler::getGoodsFeedbacks);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetGoodsFeedbackRequest oai_get_goods_feedback_request;
    ::OpenAPI::fromJsonValue(oai_get_goods_feedback_request, obj);
    

    Q_EMIT getGoodsFeedbacks(business_id, page_token, limit, oai_get_goods_feedback_request);
}


void OAIFbyApiRequest::getGoodsStatsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/stats/skus";
    connect(this, &OAIFbyApiRequest::getGoodsStats, handler.data(), &OAIFbyApiHandler::getGoodsStats);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetGoodsStatsRequest oai_get_goods_stats_request;
    ::OpenAPI::fromJsonValue(oai_get_goods_stats_request, obj);
    

    Q_EMIT getGoodsStats(campaign_id, oai_get_goods_stats_request);
}


void OAIFbyApiRequest::getHiddenOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/hidden-offers";
    connect(this, &OAIFbyApiRequest::getHiddenOffers, handler.data(), &OAIFbyApiHandler::getHiddenOffers);

    
    QList<QString> offer_id;
    if(socket->queryString().keys().contains("offer_id")){
        fromStringValue(socket->queryString().values("offer_id"), offer_id);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint32 offset;
    if(socket->queryString().keys().contains("offset")){
        fromStringValue(socket->queryString().value("offset"), offset);
    }
    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getHiddenOffers(campaign_id, offer_id, page_token, limit, offset, page, page_size);
}


void OAIFbyApiRequest::getOfferCardsContentStatusRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-cards";
    connect(this, &OAIFbyApiRequest::getOfferCardsContentStatus, handler.data(), &OAIFbyApiHandler::getOfferCardsContentStatus);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetOfferCardsContentStatusRequest oai_get_offer_cards_content_status_request;
    ::OpenAPI::fromJsonValue(oai_get_offer_cards_content_status_request, obj);
    

    Q_EMIT getOfferCardsContentStatus(business_id, page_token, limit, oai_get_offer_cards_content_status_request);
}


void OAIFbyApiRequest::getOfferMappingEntriesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-mapping-entries";
    connect(this, &OAIFbyApiRequest::getOfferMappingEntries, handler.data(), &OAIFbyApiHandler::getOfferMappingEntries);

    
    QList<QString> offer_id;
    if(socket->queryString().keys().contains("offer_id")){
        fromStringValue(socket->queryString().values("offer_id"), offer_id);
    }
    
    QList<QString> shop_sku;
    if(socket->queryString().keys().contains("shop_sku")){
        fromStringValue(socket->queryString().values("shop_sku"), shop_sku);
    }
    
    OAIOfferMappingKindType mapping_kind;
    if(socket->queryString().keys().contains("mapping_kind")){
        fromStringValue(socket->queryString().value("mapping_kind"), mapping_kind);
    }
    
    QList<OAIOfferProcessingStatusType> status;
    if(socket->queryString().keys().contains("status")){
        fromStringValue(socket->queryString().values("status"), status);
    }
    
    QList<OAIOfferAvailabilityStatusType> availability;
    if(socket->queryString().keys().contains("availability")){
        fromStringValue(socket->queryString().values("availability"), availability);
    }
    
    QList<qint32> category_id;
    if(socket->queryString().keys().contains("category_id")){
        fromStringValue(socket->queryString().values("category_id"), category_id);
    }
    
    QList<QString> vendor;
    if(socket->queryString().keys().contains("vendor")){
        fromStringValue(socket->queryString().values("vendor"), vendor);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getOfferMappingEntries(campaign_id, offer_id, shop_sku, mapping_kind, status, availability, category_id, vendor, page_token, limit);
}


void OAIFbyApiRequest::getOfferMappingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings";
    connect(this, &OAIFbyApiRequest::getOfferMappings, handler.data(), &OAIFbyApiHandler::getOfferMappings);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetOfferMappingsRequest oai_get_offer_mappings_request;
    ::OpenAPI::fromJsonValue(oai_get_offer_mappings_request, obj);
    

    Q_EMIT getOfferMappings(business_id, page_token, limit, oai_get_offer_mappings_request);
}


void OAIFbyApiRequest::getOfferRecommendationsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offers/recommendations";
    connect(this, &OAIFbyApiRequest::getOfferRecommendations, handler.data(), &OAIFbyApiHandler::getOfferRecommendations);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetOfferRecommendationsRequest oai_get_offer_recommendations_request;
    ::OpenAPI::fromJsonValue(oai_get_offer_recommendations_request, obj);
    

    Q_EMIT getOfferRecommendations(business_id, oai_get_offer_recommendations_request, page_token, limit);
}


void OAIFbyApiRequest::getOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers";
    connect(this, &OAIFbyApiRequest::getOffers, handler.data(), &OAIFbyApiHandler::getOffers);

    
    QString query;
    if(socket->queryString().keys().contains("query")){
        fromStringValue(socket->queryString().value("query"), query);
    }
    
    qint64 feed_id;
    if(socket->queryString().keys().contains("feed_id")){
        fromStringValue(socket->queryString().value("feed_id"), feed_id);
    }
    
    QString shop_category_id;
    if(socket->queryString().keys().contains("shop_category_id")){
        fromStringValue(socket->queryString().value("shop_category_id"), shop_category_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
    bool matched;
    if(socket->queryString().keys().contains("matched")){
        fromStringValue(socket->queryString().value("matched"), matched);
    }
    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getOffers(campaign_id, query, feed_id, shop_category_id, currency, matched, page, page_size);
}


void OAIFbyApiRequest::getOrderRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}";
    connect(this, &OAIFbyApiRequest::getOrder, handler.data(), &OAIFbyApiHandler::getOrder);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrder(campaign_id, order_id);
}


void OAIFbyApiRequest::getOrderBusinessBuyerInfoRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/business-buyer";
    connect(this, &OAIFbyApiRequest::getOrderBusinessBuyerInfo, handler.data(), &OAIFbyApiHandler::getOrderBusinessBuyerInfo);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrderBusinessBuyerInfo(campaign_id, order_id);
}


void OAIFbyApiRequest::getOrderBusinessDocumentsInfoRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/documents";
    connect(this, &OAIFbyApiRequest::getOrderBusinessDocumentsInfo, handler.data(), &OAIFbyApiHandler::getOrderBusinessDocumentsInfo);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrderBusinessDocumentsInfo(campaign_id, order_id);
}


void OAIFbyApiRequest::getOrdersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/orders";
    connect(this, &OAIFbyApiRequest::getOrders, handler.data(), &OAIFbyApiHandler::getOrders);

    
    QList<qint64> order_ids;
    if(socket->queryString().keys().contains("order_ids")){
        fromStringValue(socket->queryString().values("order_ids"), order_ids);
    }
    
    QSet<OAIOrderStatusType> status;
    if(socket->queryString().keys().contains("status")){
        fromStringValue(socket->queryString().values("status"), status);
    }
    
    QSet<OAIOrderSubstatusType> substatus;
    if(socket->queryString().keys().contains("substatus")){
        fromStringValue(socket->queryString().values("substatus"), substatus);
    }
    
    QDate from_date;
    if(socket->queryString().keys().contains("from_date")){
        fromStringValue(socket->queryString().value("from_date"), from_date);
    }
    
    QDate to_date;
    if(socket->queryString().keys().contains("to_date")){
        fromStringValue(socket->queryString().value("to_date"), to_date);
    }
    
    QDate supplier_shipment_date_from;
    if(socket->queryString().keys().contains("supplier_shipment_date_from")){
        fromStringValue(socket->queryString().value("supplier_shipment_date_from"), supplier_shipment_date_from);
    }
    
    QDate supplier_shipment_date_to;
    if(socket->queryString().keys().contains("supplier_shipment_date_to")){
        fromStringValue(socket->queryString().value("supplier_shipment_date_to"), supplier_shipment_date_to);
    }
    
    QDateTime updated_at_from;
    if(socket->queryString().keys().contains("updated_at_from")){
        fromStringValue(socket->queryString().value("updated_at_from"), updated_at_from);
    }
    
    QDateTime updated_at_to;
    if(socket->queryString().keys().contains("updated_at_to")){
        fromStringValue(socket->queryString().value("updated_at_to"), updated_at_to);
    }
    
    OAIOrderDeliveryDispatchType dispatch_type;
    if(socket->queryString().keys().contains("dispatch_type")){
        fromStringValue(socket->queryString().value("dispatch_type"), dispatch_type);
    }
    
    bool fake;
    if(socket->queryString().keys().contains("fake")){
        fromStringValue(socket->queryString().value("fake"), fake);
    }
    
    bool has_cis;
    if(socket->queryString().keys().contains("has_cis")){
        fromStringValue(socket->queryString().value("has_cis"), has_cis);
    }
    
    bool only_waiting_for_cancellation_approve;
    if(socket->queryString().keys().contains("only_waiting_for_cancellation_approve")){
        fromStringValue(socket->queryString().value("only_waiting_for_cancellation_approve"), only_waiting_for_cancellation_approve);
    }
    
    bool only_estimated_delivery;
    if(socket->queryString().keys().contains("only_estimated_delivery")){
        fromStringValue(socket->queryString().value("only_estimated_delivery"), only_estimated_delivery);
    }
    
    OAIOrderBuyerType buyer_type;
    if(socket->queryString().keys().contains("buyer_type")){
        fromStringValue(socket->queryString().value("buyer_type"), buyer_type);
    }
    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getOrders(campaign_id, order_ids, status, substatus, from_date, to_date, supplier_shipment_date_from, supplier_shipment_date_to, updated_at_from, updated_at_to, dispatch_type, fake, has_cis, only_waiting_for_cancellation_approve, only_estimated_delivery, buyer_type, page, page_size, page_token, limit);
}


void OAIFbyApiRequest::getOrdersStatsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/stats/orders";
    connect(this, &OAIFbyApiRequest::getOrdersStats, handler.data(), &OAIFbyApiHandler::getOrdersStats);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetOrdersStatsRequest oai_get_orders_stats_request;
    ::OpenAPI::fromJsonValue(oai_get_orders_stats_request, obj);
    

    Q_EMIT getOrdersStats(campaign_id, page_token, limit, oai_get_orders_stats_request);
}


void OAIFbyApiRequest::getPricesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices";
    connect(this, &OAIFbyApiRequest::getPrices, handler.data(), &OAIFbyApiHandler::getPrices);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    bool archived;
    if(socket->queryString().keys().contains("archived")){
        fromStringValue(socket->queryString().value("archived"), archived);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getPrices(campaign_id, page_token, limit, archived);
}


void OAIFbyApiRequest::getPricesByOfferIdsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices";
    connect(this, &OAIFbyApiRequest::getPricesByOfferIds, handler.data(), &OAIFbyApiHandler::getPricesByOfferIds);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetPricesByOfferIdsRequest oai_get_prices_by_offer_ids_request;
    ::OpenAPI::fromJsonValue(oai_get_prices_by_offer_ids_request, obj);
    

    Q_EMIT getPricesByOfferIds(campaign_id, page_token, limit, oai_get_prices_by_offer_ids_request);
}


void OAIFbyApiRequest::getPromoOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos/offers";
    connect(this, &OAIFbyApiRequest::getPromoOffers, handler.data(), &OAIFbyApiHandler::getPromoOffers);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetPromoOffersRequest oai_get_promo_offers_request;
    ::OpenAPI::fromJsonValue(oai_get_promo_offers_request, obj);
    

    Q_EMIT getPromoOffers(business_id, oai_get_promo_offers_request, page_token, limit);
}


void OAIFbyApiRequest::getPromosRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos";
    connect(this, &OAIFbyApiRequest::getPromos, handler.data(), &OAIFbyApiHandler::getPromos);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetPromosRequest oai_get_promos_request;
    ::OpenAPI::fromJsonValue(oai_get_promos_request, obj);
    

    Q_EMIT getPromos(business_id, oai_get_promos_request);
}


void OAIFbyApiRequest::getQualityRatingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/ratings/quality";
    connect(this, &OAIFbyApiRequest::getQualityRatings, handler.data(), &OAIFbyApiHandler::getQualityRatings);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetQualityRatingRequest oai_get_quality_rating_request;
    ::OpenAPI::fromJsonValue(oai_get_quality_rating_request, obj);
    

    Q_EMIT getQualityRatings(business_id, oai_get_quality_rating_request);
}


void OAIFbyApiRequest::getReportInfoRequest(const QString& report_idstr){
    qDebug() << "/reports/info/{reportId}";
    connect(this, &OAIFbyApiRequest::getReportInfo, handler.data(), &OAIFbyApiHandler::getReportInfo);

    
    QString report_id;
    fromStringValue(report_idstr, report_id);
    

    Q_EMIT getReportInfo(report_id);
}


void OAIFbyApiRequest::getReturnRequest(const QString& campaign_idstr, const QString& order_idstr, const QString& return_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}";
    connect(this, &OAIFbyApiRequest::getReturn, handler.data(), &OAIFbyApiHandler::getReturn);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
        qint64 return_id;
    fromStringValue(return_idstr, return_id);
    

    Q_EMIT getReturn(campaign_id, order_id, return_id);
}


void OAIFbyApiRequest::getReturnPhotoRequest(const QString& campaign_idstr, const QString& order_idstr, const QString& return_idstr, const QString& item_idstr, const QString& image_hashstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}";
    connect(this, &OAIFbyApiRequest::getReturnPhoto, handler.data(), &OAIFbyApiHandler::getReturnPhoto);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
        qint64 return_id;
    fromStringValue(return_idstr, return_id);
        qint64 item_id;
    fromStringValue(item_idstr, item_id);
        QString image_hash;
    fromStringValue(image_hashstr, image_hash);
    

    Q_EMIT getReturnPhoto(campaign_id, order_id, return_id, item_id, image_hash);
}


void OAIFbyApiRequest::getReturnsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/returns";
    connect(this, &OAIFbyApiRequest::getReturns, handler.data(), &OAIFbyApiHandler::getReturns);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    QList<qint64> order_ids;
    if(socket->queryString().keys().contains("order_ids")){
        fromStringValue(socket->queryString().values("order_ids"), order_ids);
    }
    
    QList<OAIRefundStatusType> statuses;
    if(socket->queryString().keys().contains("statuses")){
        fromStringValue(socket->queryString().values("statuses"), statuses);
    }
    
    OAIReturnType type;
    if(socket->queryString().keys().contains("type")){
        fromStringValue(socket->queryString().value("type"), type);
    }
    
    QDate from_date;
    if(socket->queryString().keys().contains("from_date")){
        fromStringValue(socket->queryString().value("from_date"), from_date);
    }
    
    QDate to_date;
    if(socket->queryString().keys().contains("to_date")){
        fromStringValue(socket->queryString().value("to_date"), to_date);
    }
    
    QDate from_date2;
    if(socket->queryString().keys().contains("from_date2")){
        fromStringValue(socket->queryString().value("from_date2"), from_date2);
    }
    
    QDate to_date2;
    if(socket->queryString().keys().contains("to_date2")){
        fromStringValue(socket->queryString().value("to_date2"), to_date2);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getReturns(campaign_id, page_token, limit, order_ids, statuses, type, from_date, to_date, from_date2, to_date2);
}


void OAIFbyApiRequest::getStocksRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/stocks";
    connect(this, &OAIFbyApiRequest::getStocks, handler.data(), &OAIFbyApiHandler::getStocks);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetWarehouseStocksRequest oai_get_warehouse_stocks_request;
    ::OpenAPI::fromJsonValue(oai_get_warehouse_stocks_request, obj);
    

    Q_EMIT getStocks(campaign_id, page_token, limit, oai_get_warehouse_stocks_request);
}


void OAIFbyApiRequest::getSuggestedOfferMappingEntriesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-mapping-entries/suggestions";
    connect(this, &OAIFbyApiRequest::getSuggestedOfferMappingEntries, handler.data(), &OAIFbyApiHandler::getSuggestedOfferMappingEntries);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetSuggestedOfferMappingEntriesRequest oai_get_suggested_offer_mapping_entries_request;
    ::OpenAPI::fromJsonValue(oai_get_suggested_offer_mapping_entries_request, obj);
    

    Q_EMIT getSuggestedOfferMappingEntries(campaign_id, oai_get_suggested_offer_mapping_entries_request);
}


void OAIFbyApiRequest::getSuggestedOfferMappingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/suggestions";
    connect(this, &OAIFbyApiRequest::getSuggestedOfferMappings, handler.data(), &OAIFbyApiHandler::getSuggestedOfferMappings);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetSuggestedOfferMappingsRequest oai_get_suggested_offer_mappings_request;
    ::OpenAPI::fromJsonValue(oai_get_suggested_offer_mappings_request, obj);
    

    Q_EMIT getSuggestedOfferMappings(business_id, oai_get_suggested_offer_mappings_request);
}


void OAIFbyApiRequest::getSuggestedPricesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices/suggestions";
    connect(this, &OAIFbyApiRequest::getSuggestedPrices, handler.data(), &OAIFbyApiHandler::getSuggestedPrices);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISuggestPricesRequest oai_suggest_prices_request;
    ::OpenAPI::fromJsonValue(oai_suggest_prices_request, obj);
    

    Q_EMIT getSuggestedPrices(campaign_id, oai_suggest_prices_request);
}


void OAIFbyApiRequest::putBidsForBusinessRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/bids";
    connect(this, &OAIFbyApiRequest::putBidsForBusiness, handler.data(), &OAIFbyApiHandler::putBidsForBusiness);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIPutSkuBidsRequest oai_put_sku_bids_request;
    ::OpenAPI::fromJsonValue(oai_put_sku_bids_request, obj);
    

    Q_EMIT putBidsForBusiness(business_id, oai_put_sku_bids_request);
}


void OAIFbyApiRequest::putBidsForCampaignRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/bids";
    connect(this, &OAIFbyApiRequest::putBidsForCampaign, handler.data(), &OAIFbyApiHandler::putBidsForCampaign);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIPutSkuBidsRequest oai_put_sku_bids_request;
    ::OpenAPI::fromJsonValue(oai_put_sku_bids_request, obj);
    

    Q_EMIT putBidsForCampaign(campaign_id, oai_put_sku_bids_request);
}


void OAIFbyApiRequest::refreshFeedRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}/refresh";
    connect(this, &OAIFbyApiRequest::refreshFeed, handler.data(), &OAIFbyApiHandler::refreshFeed);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    Q_EMIT refreshFeed(campaign_id, feed_id);
}


void OAIFbyApiRequest::searchRegionChildrenRequest(const QString& region_idstr){
    qDebug() << "/regions/{regionId}/children";
    connect(this, &OAIFbyApiRequest::searchRegionChildren, handler.data(), &OAIFbyApiHandler::searchRegionChildren);

    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    qint64 region_id;
    fromStringValue(region_idstr, region_id);
    

    Q_EMIT searchRegionChildren(region_id, page, page_size);
}


void OAIFbyApiRequest::searchRegionsByIdRequest(const QString& region_idstr){
    qDebug() << "/regions/{regionId}";
    connect(this, &OAIFbyApiRequest::searchRegionsById, handler.data(), &OAIFbyApiHandler::searchRegionsById);

    
    qint64 region_id;
    fromStringValue(region_idstr, region_id);
    

    Q_EMIT searchRegionsById(region_id);
}


void OAIFbyApiRequest::searchRegionsByNameRequest(){
    qDebug() << "/regions";
    connect(this, &OAIFbyApiRequest::searchRegionsByName, handler.data(), &OAIFbyApiHandler::searchRegionsByName);

    
    QString name;
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    


    Q_EMIT searchRegionsByName(name, page_token, limit);
}


void OAIFbyApiRequest::sendFileToChatRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/file/send";
    connect(this, &OAIFbyApiRequest::sendFileToChat, handler.data(), &OAIFbyApiHandler::sendFileToChat);

    
    qint64 chat_id;
    if(socket->queryString().keys().contains("chat_id")){
        fromStringValue(socket->queryString().value("chat_id"), chat_id);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
    
    OAIHttpFileElement file;

    Q_EMIT sendFileToChat(business_id, chat_id, file);
}


void OAIFbyApiRequest::sendMessageToChatRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/message";
    connect(this, &OAIFbyApiRequest::sendMessageToChat, handler.data(), &OAIFbyApiHandler::sendMessageToChat);

    
    qint64 chat_id;
    if(socket->queryString().keys().contains("chat_id")){
        fromStringValue(socket->queryString().value("chat_id"), chat_id);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISendMessageToChatRequest oai_send_message_to_chat_request;
    ::OpenAPI::fromJsonValue(oai_send_message_to_chat_request, obj);
    

    Q_EMIT sendMessageToChat(business_id, chat_id, oai_send_message_to_chat_request);
}


void OAIFbyApiRequest::setFeedParamsRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}/params";
    connect(this, &OAIFbyApiRequest::setFeedParams, handler.data(), &OAIFbyApiHandler::setFeedParams);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISetFeedParamsRequest oai_set_feed_params_request;
    ::OpenAPI::fromJsonValue(oai_set_feed_params_request, obj);
    

    Q_EMIT setFeedParams(campaign_id, feed_id, oai_set_feed_params_request);
}


void OAIFbyApiRequest::skipGoodsFeedbacksReactionRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/skip-reaction";
    connect(this, &OAIFbyApiRequest::skipGoodsFeedbacksReaction, handler.data(), &OAIFbyApiHandler::skipGoodsFeedbacksReaction);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISkipGoodsFeedbackReactionRequest oai_skip_goods_feedback_reaction_request;
    ::OpenAPI::fromJsonValue(oai_skip_goods_feedback_reaction_request, obj);
    

    Q_EMIT skipGoodsFeedbacksReaction(business_id, oai_skip_goods_feedback_reaction_request);
}


void OAIFbyApiRequest::updateBusinessPricesRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-prices/updates";
    connect(this, &OAIFbyApiRequest::updateBusinessPrices, handler.data(), &OAIFbyApiHandler::updateBusinessPrices);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateBusinessPricesRequest oai_update_business_prices_request;
    ::OpenAPI::fromJsonValue(oai_update_business_prices_request, obj);
    

    Q_EMIT updateBusinessPrices(business_id, oai_update_business_prices_request);
}


void OAIFbyApiRequest::updateCampaignOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/update";
    connect(this, &OAIFbyApiRequest::updateCampaignOffers, handler.data(), &OAIFbyApiHandler::updateCampaignOffers);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateCampaignOffersRequest oai_update_campaign_offers_request;
    ::OpenAPI::fromJsonValue(oai_update_campaign_offers_request, obj);
    

    Q_EMIT updateCampaignOffers(campaign_id, oai_update_campaign_offers_request);
}


void OAIFbyApiRequest::updateGoodsFeedbackCommentRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/comments/update";
    connect(this, &OAIFbyApiRequest::updateGoodsFeedbackComment, handler.data(), &OAIFbyApiHandler::updateGoodsFeedbackComment);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateGoodsFeedbackCommentRequest oai_update_goods_feedback_comment_request;
    ::OpenAPI::fromJsonValue(oai_update_goods_feedback_comment_request, obj);
    

    Q_EMIT updateGoodsFeedbackComment(business_id, oai_update_goods_feedback_comment_request);
}


void OAIFbyApiRequest::updateOfferContentRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-cards/update";
    connect(this, &OAIFbyApiRequest::updateOfferContent, handler.data(), &OAIFbyApiHandler::updateOfferContent);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOfferContentRequest oai_update_offer_content_request;
    ::OpenAPI::fromJsonValue(oai_update_offer_content_request, obj);
    

    Q_EMIT updateOfferContent(business_id, oai_update_offer_content_request);
}


void OAIFbyApiRequest::updateOfferMappingEntriesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-mapping-entries/updates";
    connect(this, &OAIFbyApiRequest::updateOfferMappingEntries, handler.data(), &OAIFbyApiHandler::updateOfferMappingEntries);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOfferMappingEntryRequest oai_update_offer_mapping_entry_request;
    ::OpenAPI::fromJsonValue(oai_update_offer_mapping_entry_request, obj);
    

    Q_EMIT updateOfferMappingEntries(campaign_id, oai_update_offer_mapping_entry_request);
}


void OAIFbyApiRequest::updateOfferMappingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/update";
    connect(this, &OAIFbyApiRequest::updateOfferMappings, handler.data(), &OAIFbyApiHandler::updateOfferMappings);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOfferMappingsRequest oai_update_offer_mappings_request;
    ::OpenAPI::fromJsonValue(oai_update_offer_mappings_request, obj);
    

    Q_EMIT updateOfferMappings(business_id, oai_update_offer_mappings_request);
}


void OAIFbyApiRequest::updatePricesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices/updates";
    connect(this, &OAIFbyApiRequest::updatePrices, handler.data(), &OAIFbyApiHandler::updatePrices);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdatePricesRequest oai_update_prices_request;
    ::OpenAPI::fromJsonValue(oai_update_prices_request, obj);
    

    Q_EMIT updatePrices(campaign_id, oai_update_prices_request);
}


void OAIFbyApiRequest::updatePromoOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos/offers/update";
    connect(this, &OAIFbyApiRequest::updatePromoOffers, handler.data(), &OAIFbyApiHandler::updatePromoOffers);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdatePromoOffersRequest oai_update_promo_offers_request;
    ::OpenAPI::fromJsonValue(oai_update_promo_offers_request, obj);
    

    Q_EMIT updatePromoOffers(business_id, oai_update_promo_offers_request);
}



void OAIFbyApiRequest::addHiddenOffersResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::addOffersToArchiveResponse(const OAIAddOffersToArchiveResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::calculateTariffsResponse(const OAICalculateTariffsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::confirmBusinessPricesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::confirmCampaignPricesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::createChatResponse(const OAICreateChatResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deleteCampaignOffersResponse(const OAIDeleteCampaignOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deleteGoodsFeedbackCommentResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deleteHiddenOffersResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deleteOffersResponse(const OAIDeleteOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deleteOffersFromArchiveResponse(const OAIDeleteOffersFromArchiveResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deletePromoOffersResponse(const OAIDeletePromoOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateBoostConsolidatedReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateCompetitorsPositionReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateGoodsFeedbackReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateGoodsMovementReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateGoodsRealizationReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateGoodsTurnoverReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generatePricesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateShelfsStatisticsReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateShowsSalesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateStocksOnWarehousesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateUnitedMarketplaceServicesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateUnitedNettingReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateUnitedOrdersReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getAllOffersResponse(const OAIGetAllOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getBidsInfoForBusinessResponse(const OAIGetBidsInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getBidsRecommendationsResponse(const OAIGetBidsRecommendationsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getBusinessQuarantineOffersResponse(const OAIGetQuarantineOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getBusinessSettingsResponse(const OAIGetBusinessSettingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignResponse(const OAIGetCampaignResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignLoginsResponse(const OAIGetCampaignLoginsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignOffersResponse(const OAIGetCampaignOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignQuarantineOffersResponse(const OAIGetQuarantineOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignRegionResponse(const OAIGetCampaignRegionResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignSettingsResponse(const OAIGetCampaignSettingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignsResponse(const OAIGetCampaignsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignsByLoginResponse(const OAIGetCampaignsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCategoriesMaxSaleQuantumResponse(const OAIGetCategoriesMaxSaleQuantumResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCategoriesTreeResponse(const OAIGetCategoriesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCategoryContentParametersResponse(const OAIGetCategoryContentParametersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getChatHistoryResponse(const OAIGetChatHistoryResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getChatsResponse(const OAIGetChatsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getFeedResponse(const OAIGetFeedResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getFeedIndexLogsResponse(const OAIGetFeedIndexLogsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getFeedbackAndCommentUpdatesResponse(const OAIGetFeedbackListResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getFeedsResponse(const OAIGetFeedsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getFulfillmentWarehousesResponse(const OAIGetFulfillmentWarehousesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getGoodsFeedbackCommentsResponse(const OAIGetGoodsFeedbackCommentsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getGoodsFeedbacksResponse(const OAIGetGoodsFeedbackResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getGoodsStatsResponse(const OAIGetGoodsStatsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getHiddenOffersResponse(const OAIGetHiddenOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOfferCardsContentStatusResponse(const OAIGetOfferCardsContentStatusResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOfferMappingEntriesResponse(const OAIGetOfferMappingEntriesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOfferMappingsResponse(const OAIGetOfferMappingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOfferRecommendationsResponse(const OAIGetOfferRecommendationsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOffersResponse(const OAIGetOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOrderResponse(const OAIGetOrderResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOrderBusinessBuyerInfoResponse(const OAIGetBusinessBuyerInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOrderBusinessDocumentsInfoResponse(const OAIGetBusinessDocumentsInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOrdersResponse(const OAIGetOrdersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOrdersStatsResponse(const OAIGetOrdersStatsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getPricesResponse(const OAIGetPricesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getPricesByOfferIdsResponse(const OAIGetPricesByOfferIdsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getPromoOffersResponse(const OAIGetPromoOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getPromosResponse(const OAIGetPromosResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getQualityRatingsResponse(const OAIGetQualityRatingResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getReportInfoResponse(const OAIGetReportInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getReturnResponse(const OAIGetReturnResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getReturnPhotoResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getReturnsResponse(const OAIGetReturnsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getStocksResponse(const OAIGetWarehouseStocksResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getSuggestedOfferMappingEntriesResponse(const OAIGetSuggestedOfferMappingEntriesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getSuggestedOfferMappingsResponse(const OAIGetSuggestedOfferMappingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getSuggestedPricesResponse(const OAISuggestPricesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::putBidsForBusinessResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::putBidsForCampaignResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::refreshFeedResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::searchRegionChildrenResponse(const OAIGetRegionWithChildrenResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::searchRegionsByIdResponse(const OAIGetRegionsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::searchRegionsByNameResponse(const OAIGetRegionsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::sendFileToChatResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::sendMessageToChatResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::setFeedParamsResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::skipGoodsFeedbacksReactionResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateBusinessPricesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateCampaignOffersResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateGoodsFeedbackCommentResponse(const OAIUpdateGoodsFeedbackCommentResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateOfferContentResponse(const OAIUpdateOfferContentResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateOfferMappingEntriesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateOfferMappingsResponse(const OAIUpdateOfferMappingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updatePricesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updatePromoOffersResponse(const OAIUpdatePromoOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIFbyApiRequest::addHiddenOffersError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::addOffersToArchiveError(const OAIAddOffersToArchiveResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::calculateTariffsError(const OAICalculateTariffsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::confirmBusinessPricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::confirmCampaignPricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::createChatError(const OAICreateChatResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deleteCampaignOffersError(const OAIDeleteCampaignOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deleteGoodsFeedbackCommentError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deleteHiddenOffersError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deleteOffersError(const OAIDeleteOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deleteOffersFromArchiveError(const OAIDeleteOffersFromArchiveResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::deletePromoOffersError(const OAIDeletePromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateBoostConsolidatedReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateCompetitorsPositionReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateGoodsFeedbackReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateGoodsMovementReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateGoodsRealizationReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateGoodsTurnoverReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generatePricesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateShelfsStatisticsReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateShowsSalesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateStocksOnWarehousesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateUnitedMarketplaceServicesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateUnitedNettingReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::generateUnitedOrdersReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getAllOffersError(const OAIGetAllOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getBidsInfoForBusinessError(const OAIGetBidsInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getBidsRecommendationsError(const OAIGetBidsRecommendationsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getBusinessQuarantineOffersError(const OAIGetQuarantineOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getBusinessSettingsError(const OAIGetBusinessSettingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignError(const OAIGetCampaignResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignLoginsError(const OAIGetCampaignLoginsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignOffersError(const OAIGetCampaignOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignQuarantineOffersError(const OAIGetQuarantineOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignRegionError(const OAIGetCampaignRegionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignSettingsError(const OAIGetCampaignSettingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignsError(const OAIGetCampaignsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCampaignsByLoginError(const OAIGetCampaignsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCategoriesMaxSaleQuantumError(const OAIGetCategoriesMaxSaleQuantumResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCategoriesTreeError(const OAIGetCategoriesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getCategoryContentParametersError(const OAIGetCategoryContentParametersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getChatHistoryError(const OAIGetChatHistoryResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getChatsError(const OAIGetChatsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getFeedError(const OAIGetFeedResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getFeedIndexLogsError(const OAIGetFeedIndexLogsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getFeedbackAndCommentUpdatesError(const OAIGetFeedbackListResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getFeedsError(const OAIGetFeedsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getFulfillmentWarehousesError(const OAIGetFulfillmentWarehousesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getGoodsFeedbackCommentsError(const OAIGetGoodsFeedbackCommentsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getGoodsFeedbacksError(const OAIGetGoodsFeedbackResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getGoodsStatsError(const OAIGetGoodsStatsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getHiddenOffersError(const OAIGetHiddenOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOfferCardsContentStatusError(const OAIGetOfferCardsContentStatusResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOfferMappingEntriesError(const OAIGetOfferMappingEntriesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOfferMappingsError(const OAIGetOfferMappingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOfferRecommendationsError(const OAIGetOfferRecommendationsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOffersError(const OAIGetOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOrderError(const OAIGetOrderResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOrderBusinessBuyerInfoError(const OAIGetBusinessBuyerInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOrderBusinessDocumentsInfoError(const OAIGetBusinessDocumentsInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOrdersError(const OAIGetOrdersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getOrdersStatsError(const OAIGetOrdersStatsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getPricesError(const OAIGetPricesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getPricesByOfferIdsError(const OAIGetPricesByOfferIdsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getPromoOffersError(const OAIGetPromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getPromosError(const OAIGetPromosResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getQualityRatingsError(const OAIGetQualityRatingResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getReportInfoError(const OAIGetReportInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getReturnError(const OAIGetReturnResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getReturnPhotoError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getReturnsError(const OAIGetReturnsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getStocksError(const OAIGetWarehouseStocksResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getSuggestedOfferMappingEntriesError(const OAIGetSuggestedOfferMappingEntriesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getSuggestedOfferMappingsError(const OAIGetSuggestedOfferMappingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::getSuggestedPricesError(const OAISuggestPricesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::putBidsForBusinessError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::putBidsForCampaignError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::refreshFeedError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::searchRegionChildrenError(const OAIGetRegionWithChildrenResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::searchRegionsByIdError(const OAIGetRegionsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::searchRegionsByNameError(const OAIGetRegionsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::sendFileToChatError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::sendMessageToChatError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::setFeedParamsError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::skipGoodsFeedbacksReactionError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateBusinessPricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateCampaignOffersError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateGoodsFeedbackCommentError(const OAIUpdateGoodsFeedbackCommentResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateOfferContentError(const OAIUpdateOfferContentResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateOfferMappingEntriesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updateOfferMappingsError(const OAIUpdateOfferMappingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updatePricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::updatePromoOffersError(const OAIUpdatePromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIFbyApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFbyApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
