/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOfferMappingsApiRequest_H
#define OAI_OAIOfferMappingsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiLockedErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetOfferMappingEntriesResponse.h"
#include "OAIGetSuggestedOfferMappingEntriesRequest.h"
#include "OAIGetSuggestedOfferMappingEntriesResponse.h"
#include "OAIOfferAvailabilityStatusType.h"
#include "OAIOfferMappingKindType.h"
#include "OAIOfferProcessingStatusType.h"
#include "OAIUpdateOfferMappingEntryRequest.h"
#include <QList>
#include <QString>
#include "OAIOfferMappingsApiHandler.h"

namespace OpenAPI {

class OAIOfferMappingsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIOfferMappingsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOfferMappingsApiHandler> handler);
    virtual ~OAIOfferMappingsApiRequest();

    void getOfferMappingEntriesRequest(const QString& campaign_id);
    void getSuggestedOfferMappingEntriesRequest(const QString& campaign_id);
    void updateOfferMappingEntriesRequest(const QString& campaign_id);
    

    void getOfferMappingEntriesResponse(const OAIGetOfferMappingEntriesResponse& res);
    void getSuggestedOfferMappingEntriesResponse(const OAIGetSuggestedOfferMappingEntriesResponse& res);
    void updateOfferMappingEntriesResponse(const OAIEmptyApiResponse& res);
    

    void getOfferMappingEntriesError(const OAIGetOfferMappingEntriesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSuggestedOfferMappingEntriesError(const OAIGetSuggestedOfferMappingEntriesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateOfferMappingEntriesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void getOfferMappingEntries(qint64 campaign_id, QList<QString> offer_id, QList<QString> shop_sku, OAIOfferMappingKindType mapping_kind, QList<OAIOfferProcessingStatusType> status, QList<OAIOfferAvailabilityStatusType> availability, QList<qint32> category_id, QList<QString> vendor, QString page_token, qint32 limit);
    void getSuggestedOfferMappingEntries(qint64 campaign_id, OAIGetSuggestedOfferMappingEntriesRequest oai_get_suggested_offer_mapping_entries_request);
    void updateOfferMappingEntries(qint64 campaign_id, OAIUpdateOfferMappingEntryRequest oai_update_offer_mapping_entry_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIOfferMappingsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIOfferMappingsApiRequest_H
