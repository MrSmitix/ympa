/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIPromosApiRequest.h"

namespace OpenAPI {

OAIPromosApiRequest::OAIPromosApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIPromosApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIPromosApiRequest::~OAIPromosApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIPromosApiRequest::~OAIPromosApiRequest()";
}

QMap<QString, QString>
OAIPromosApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIPromosApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIPromosApiRequest::getRawSocket(){
    return socket;
}


void OAIPromosApiRequest::deletePromoOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos/offers/delete";
    connect(this, &OAIPromosApiRequest::deletePromoOffers, handler.data(), &OAIPromosApiHandler::deletePromoOffers);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeletePromoOffersRequest oai_delete_promo_offers_request;
    ::OpenAPI::fromJsonValue(oai_delete_promo_offers_request, obj);
    

    Q_EMIT deletePromoOffers(business_id, oai_delete_promo_offers_request);
}


void OAIPromosApiRequest::getPromoOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos/offers";
    connect(this, &OAIPromosApiRequest::getPromoOffers, handler.data(), &OAIPromosApiHandler::getPromoOffers);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetPromoOffersRequest oai_get_promo_offers_request;
    ::OpenAPI::fromJsonValue(oai_get_promo_offers_request, obj);
    

    Q_EMIT getPromoOffers(business_id, oai_get_promo_offers_request, page_token, limit);
}


void OAIPromosApiRequest::getPromosRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos";
    connect(this, &OAIPromosApiRequest::getPromos, handler.data(), &OAIPromosApiHandler::getPromos);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetPromosRequest oai_get_promos_request;
    ::OpenAPI::fromJsonValue(oai_get_promos_request, obj);
    

    Q_EMIT getPromos(business_id, oai_get_promos_request);
}


void OAIPromosApiRequest::updatePromoOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos/offers/update";
    connect(this, &OAIPromosApiRequest::updatePromoOffers, handler.data(), &OAIPromosApiHandler::updatePromoOffers);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdatePromoOffersRequest oai_update_promo_offers_request;
    ::OpenAPI::fromJsonValue(oai_update_promo_offers_request, obj);
    

    Q_EMIT updatePromoOffers(business_id, oai_update_promo_offers_request);
}



void OAIPromosApiRequest::deletePromoOffersResponse(const OAIDeletePromoOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPromosApiRequest::getPromoOffersResponse(const OAIGetPromoOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPromosApiRequest::getPromosResponse(const OAIGetPromosResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPromosApiRequest::updatePromoOffersResponse(const OAIUpdatePromoOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIPromosApiRequest::deletePromoOffersError(const OAIDeletePromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPromosApiRequest::getPromoOffersError(const OAIGetPromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPromosApiRequest::getPromosError(const OAIGetPromosResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPromosApiRequest::updatePromoOffersError(const OAIUpdatePromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIPromosApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPromosApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
