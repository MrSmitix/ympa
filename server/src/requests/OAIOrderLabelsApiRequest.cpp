/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIOrderLabelsApiRequest.h"

namespace OpenAPI {

OAIOrderLabelsApiRequest::OAIOrderLabelsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOrderLabelsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIOrderLabelsApiRequest::~OAIOrderLabelsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIOrderLabelsApiRequest::~OAIOrderLabelsApiRequest()";
}

QMap<QString, QString>
OAIOrderLabelsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIOrderLabelsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIOrderLabelsApiRequest::getRawSocket(){
    return socket;
}


void OAIOrderLabelsApiRequest::generateOrderLabelRequest(const QString& campaign_idstr, const QString& order_idstr, const QString& shipment_idstr, const QString& box_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label";
    connect(this, &OAIOrderLabelsApiRequest::generateOrderLabel, handler.data(), &OAIOrderLabelsApiHandler::generateOrderLabel);

    
    OAIPageFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
        qint64 box_id;
    fromStringValue(box_idstr, box_id);
    

    Q_EMIT generateOrderLabel(campaign_id, order_id, shipment_id, box_id, format);
}


void OAIOrderLabelsApiRequest::generateOrderLabelsRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/labels";
    connect(this, &OAIOrderLabelsApiRequest::generateOrderLabels, handler.data(), &OAIOrderLabelsApiHandler::generateOrderLabels);

    
    OAIPageFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT generateOrderLabels(campaign_id, order_id, format);
}


void OAIOrderLabelsApiRequest::getOrderLabelsDataRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data";
    connect(this, &OAIOrderLabelsApiRequest::getOrderLabelsData, handler.data(), &OAIOrderLabelsApiHandler::getOrderLabelsData);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrderLabelsData(campaign_id, order_id);
}



void OAIOrderLabelsApiRequest::generateOrderLabelResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderLabelsApiRequest::generateOrderLabelsResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderLabelsApiRequest::getOrderLabelsDataResponse(const OAIGetOrderLabelsDataResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOrderLabelsApiRequest::generateOrderLabelError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderLabelsApiRequest::generateOrderLabelsError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderLabelsApiRequest::getOrderLabelsDataError(const OAIGetOrderLabelsDataResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOrderLabelsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderLabelsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
