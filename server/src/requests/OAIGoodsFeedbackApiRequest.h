/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGoodsFeedbackApiRequest_H
#define OAI_OAIGoodsFeedbackApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIDeleteGoodsFeedbackCommentRequest.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetGoodsFeedbackCommentsRequest.h"
#include "OAIGetGoodsFeedbackCommentsResponse.h"
#include "OAIGetGoodsFeedbackRequest.h"
#include "OAIGetGoodsFeedbackResponse.h"
#include "OAISkipGoodsFeedbackReactionRequest.h"
#include "OAIUpdateGoodsFeedbackCommentRequest.h"
#include "OAIUpdateGoodsFeedbackCommentResponse.h"
#include <QString>
#include "OAIGoodsFeedbackApiHandler.h"

namespace OpenAPI {

class OAIGoodsFeedbackApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIGoodsFeedbackApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIGoodsFeedbackApiHandler> handler);
    virtual ~OAIGoodsFeedbackApiRequest();

    void deleteGoodsFeedbackCommentRequest(const QString& business_id);
    void getGoodsFeedbackCommentsRequest(const QString& business_id);
    void getGoodsFeedbacksRequest(const QString& business_id);
    void skipGoodsFeedbacksReactionRequest(const QString& business_id);
    void updateGoodsFeedbackCommentRequest(const QString& business_id);
    

    void deleteGoodsFeedbackCommentResponse(const OAIEmptyApiResponse& res);
    void getGoodsFeedbackCommentsResponse(const OAIGetGoodsFeedbackCommentsResponse& res);
    void getGoodsFeedbacksResponse(const OAIGetGoodsFeedbackResponse& res);
    void skipGoodsFeedbacksReactionResponse(const OAIEmptyApiResponse& res);
    void updateGoodsFeedbackCommentResponse(const OAIUpdateGoodsFeedbackCommentResponse& res);
    

    void deleteGoodsFeedbackCommentError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getGoodsFeedbackCommentsError(const OAIGetGoodsFeedbackCommentsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getGoodsFeedbacksError(const OAIGetGoodsFeedbackResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void skipGoodsFeedbacksReactionError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateGoodsFeedbackCommentError(const OAIUpdateGoodsFeedbackCommentResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void deleteGoodsFeedbackComment(qint64 business_id, OAIDeleteGoodsFeedbackCommentRequest oai_delete_goods_feedback_comment_request);
    void getGoodsFeedbackComments(qint64 business_id, OAIGetGoodsFeedbackCommentsRequest oai_get_goods_feedback_comments_request, QString page_token, qint32 limit);
    void getGoodsFeedbacks(qint64 business_id, QString page_token, qint32 limit, OAIGetGoodsFeedbackRequest oai_get_goods_feedback_request);
    void skipGoodsFeedbacksReaction(qint64 business_id, OAISkipGoodsFeedbackReactionRequest oai_skip_goods_feedback_reaction_request);
    void updateGoodsFeedbackComment(qint64 business_id, OAIUpdateGoodsFeedbackCommentRequest oai_update_goods_feedback_comment_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIGoodsFeedbackApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIGoodsFeedbackApiRequest_H
