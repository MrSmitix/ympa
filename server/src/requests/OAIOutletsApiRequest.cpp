/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIOutletsApiRequest.h"

namespace OpenAPI {

OAIOutletsApiRequest::OAIOutletsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOutletsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIOutletsApiRequest::~OAIOutletsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIOutletsApiRequest::~OAIOutletsApiRequest()";
}

QMap<QString, QString>
OAIOutletsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIOutletsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIOutletsApiRequest::getRawSocket(){
    return socket;
}


void OAIOutletsApiRequest::createOutletRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets";
    connect(this, &OAIOutletsApiRequest::createOutlet, handler.data(), &OAIOutletsApiHandler::createOutlet);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIChangeOutletRequest oai_change_outlet_request;
    ::OpenAPI::fromJsonValue(oai_change_outlet_request, obj);
    

    Q_EMIT createOutlet(campaign_id, oai_change_outlet_request);
}


void OAIOutletsApiRequest::deleteOutletRequest(const QString& campaign_idstr, const QString& outlet_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets/{outletId}";
    connect(this, &OAIOutletsApiRequest::deleteOutlet, handler.data(), &OAIOutletsApiHandler::deleteOutlet);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 outlet_id;
    fromStringValue(outlet_idstr, outlet_id);
    

    Q_EMIT deleteOutlet(campaign_id, outlet_id);
}


void OAIOutletsApiRequest::getOutletRequest(const QString& campaign_idstr, const QString& outlet_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets/{outletId}";
    connect(this, &OAIOutletsApiRequest::getOutlet, handler.data(), &OAIOutletsApiHandler::getOutlet);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 outlet_id;
    fromStringValue(outlet_idstr, outlet_id);
    

    Q_EMIT getOutlet(campaign_id, outlet_id);
}


void OAIOutletsApiRequest::getOutletsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets";
    connect(this, &OAIOutletsApiRequest::getOutlets, handler.data(), &OAIOutletsApiHandler::getOutlets);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    QString shop_outlet_code;
    if(socket->queryString().keys().contains("shop_outlet_code")){
        fromStringValue(socket->queryString().value("shop_outlet_code"), shop_outlet_code);
    }
    
    qint64 region_id2;
    if(socket->queryString().keys().contains("region_id2")){
        fromStringValue(socket->queryString().value("region_id2"), region_id2);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getOutlets(campaign_id, page_token, region_id, shop_outlet_code, region_id2);
}


void OAIOutletsApiRequest::updateOutletRequest(const QString& campaign_idstr, const QString& outlet_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets/{outletId}";
    connect(this, &OAIOutletsApiRequest::updateOutlet, handler.data(), &OAIOutletsApiHandler::updateOutlet);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 outlet_id;
    fromStringValue(outlet_idstr, outlet_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIChangeOutletRequest oai_change_outlet_request;
    ::OpenAPI::fromJsonValue(oai_change_outlet_request, obj);
    

    Q_EMIT updateOutlet(campaign_id, outlet_id, oai_change_outlet_request);
}



void OAIOutletsApiRequest::createOutletResponse(const OAICreateOutletResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOutletsApiRequest::deleteOutletResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOutletsApiRequest::getOutletResponse(const OAIGetOutletResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOutletsApiRequest::getOutletsResponse(const OAIGetOutletsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOutletsApiRequest::updateOutletResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOutletsApiRequest::createOutletError(const OAICreateOutletResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOutletsApiRequest::deleteOutletError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOutletsApiRequest::getOutletError(const OAIGetOutletResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOutletsApiRequest::getOutletsError(const OAIGetOutletsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOutletsApiRequest::updateOutletError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOutletsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOutletsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
