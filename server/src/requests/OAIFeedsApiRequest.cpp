/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIFeedsApiRequest.h"

namespace OpenAPI {

OAIFeedsApiRequest::OAIFeedsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIFeedsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIFeedsApiRequest::~OAIFeedsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIFeedsApiRequest::~OAIFeedsApiRequest()";
}

QMap<QString, QString>
OAIFeedsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIFeedsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIFeedsApiRequest::getRawSocket(){
    return socket;
}


void OAIFeedsApiRequest::getFeedRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}";
    connect(this, &OAIFeedsApiRequest::getFeed, handler.data(), &OAIFeedsApiHandler::getFeed);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    Q_EMIT getFeed(campaign_id, feed_id);
}


void OAIFeedsApiRequest::getFeedIndexLogsRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}/index-logs";
    connect(this, &OAIFeedsApiRequest::getFeedIndexLogs, handler.data(), &OAIFeedsApiHandler::getFeedIndexLogs);

    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    QDateTime published_time_from;
    if(socket->queryString().keys().contains("published_time_from")){
        fromStringValue(socket->queryString().value("published_time_from"), published_time_from);
    }
    
    QDateTime published_time_to;
    if(socket->queryString().keys().contains("published_time_to")){
        fromStringValue(socket->queryString().value("published_time_to"), published_time_to);
    }
    
    OAIFeedIndexLogsStatusType status;
    if(socket->queryString().keys().contains("status")){
        fromStringValue(socket->queryString().value("status"), status);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    Q_EMIT getFeedIndexLogs(campaign_id, feed_id, limit, published_time_from, published_time_to, status);
}


void OAIFeedsApiRequest::getFeedsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds";
    connect(this, &OAIFeedsApiRequest::getFeeds, handler.data(), &OAIFeedsApiHandler::getFeeds);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getFeeds(campaign_id);
}


void OAIFeedsApiRequest::refreshFeedRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}/refresh";
    connect(this, &OAIFeedsApiRequest::refreshFeed, handler.data(), &OAIFeedsApiHandler::refreshFeed);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    Q_EMIT refreshFeed(campaign_id, feed_id);
}


void OAIFeedsApiRequest::setFeedParamsRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}/params";
    connect(this, &OAIFeedsApiRequest::setFeedParams, handler.data(), &OAIFeedsApiHandler::setFeedParams);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISetFeedParamsRequest oai_set_feed_params_request;
    ::OpenAPI::fromJsonValue(oai_set_feed_params_request, obj);
    

    Q_EMIT setFeedParams(campaign_id, feed_id, oai_set_feed_params_request);
}



void OAIFeedsApiRequest::getFeedResponse(const OAIGetFeedResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFeedsApiRequest::getFeedIndexLogsResponse(const OAIGetFeedIndexLogsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFeedsApiRequest::getFeedsResponse(const OAIGetFeedsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFeedsApiRequest::refreshFeedResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFeedsApiRequest::setFeedParamsResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIFeedsApiRequest::getFeedError(const OAIGetFeedResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFeedsApiRequest::getFeedIndexLogsError(const OAIGetFeedIndexLogsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFeedsApiRequest::getFeedsError(const OAIGetFeedsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFeedsApiRequest::refreshFeedError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFeedsApiRequest::setFeedParamsError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIFeedsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFeedsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
