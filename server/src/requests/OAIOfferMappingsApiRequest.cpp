/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIOfferMappingsApiRequest.h"

namespace OpenAPI {

OAIOfferMappingsApiRequest::OAIOfferMappingsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOfferMappingsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIOfferMappingsApiRequest::~OAIOfferMappingsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIOfferMappingsApiRequest::~OAIOfferMappingsApiRequest()";
}

QMap<QString, QString>
OAIOfferMappingsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIOfferMappingsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIOfferMappingsApiRequest::getRawSocket(){
    return socket;
}


void OAIOfferMappingsApiRequest::getOfferMappingEntriesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-mapping-entries";
    connect(this, &OAIOfferMappingsApiRequest::getOfferMappingEntries, handler.data(), &OAIOfferMappingsApiHandler::getOfferMappingEntries);

    
    QList<QString> offer_id;
    if(socket->queryString().keys().contains("offer_id")){
        fromStringValue(socket->queryString().values("offer_id"), offer_id);
    }
    
    QList<QString> shop_sku;
    if(socket->queryString().keys().contains("shop_sku")){
        fromStringValue(socket->queryString().values("shop_sku"), shop_sku);
    }
    
    OAIOfferMappingKindType mapping_kind;
    if(socket->queryString().keys().contains("mapping_kind")){
        fromStringValue(socket->queryString().value("mapping_kind"), mapping_kind);
    }
    
    QList<OAIOfferProcessingStatusType> status;
    if(socket->queryString().keys().contains("status")){
        fromStringValue(socket->queryString().values("status"), status);
    }
    
    QList<OAIOfferAvailabilityStatusType> availability;
    if(socket->queryString().keys().contains("availability")){
        fromStringValue(socket->queryString().values("availability"), availability);
    }
    
    QList<qint32> category_id;
    if(socket->queryString().keys().contains("category_id")){
        fromStringValue(socket->queryString().values("category_id"), category_id);
    }
    
    QList<QString> vendor;
    if(socket->queryString().keys().contains("vendor")){
        fromStringValue(socket->queryString().values("vendor"), vendor);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getOfferMappingEntries(campaign_id, offer_id, shop_sku, mapping_kind, status, availability, category_id, vendor, page_token, limit);
}


void OAIOfferMappingsApiRequest::getSuggestedOfferMappingEntriesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-mapping-entries/suggestions";
    connect(this, &OAIOfferMappingsApiRequest::getSuggestedOfferMappingEntries, handler.data(), &OAIOfferMappingsApiHandler::getSuggestedOfferMappingEntries);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetSuggestedOfferMappingEntriesRequest oai_get_suggested_offer_mapping_entries_request;
    ::OpenAPI::fromJsonValue(oai_get_suggested_offer_mapping_entries_request, obj);
    

    Q_EMIT getSuggestedOfferMappingEntries(campaign_id, oai_get_suggested_offer_mapping_entries_request);
}


void OAIOfferMappingsApiRequest::updateOfferMappingEntriesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-mapping-entries/updates";
    connect(this, &OAIOfferMappingsApiRequest::updateOfferMappingEntries, handler.data(), &OAIOfferMappingsApiHandler::updateOfferMappingEntries);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOfferMappingEntryRequest oai_update_offer_mapping_entry_request;
    ::OpenAPI::fromJsonValue(oai_update_offer_mapping_entry_request, obj);
    

    Q_EMIT updateOfferMappingEntries(campaign_id, oai_update_offer_mapping_entry_request);
}



void OAIOfferMappingsApiRequest::getOfferMappingEntriesResponse(const OAIGetOfferMappingEntriesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOfferMappingsApiRequest::getSuggestedOfferMappingEntriesResponse(const OAIGetSuggestedOfferMappingEntriesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOfferMappingsApiRequest::updateOfferMappingEntriesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOfferMappingsApiRequest::getOfferMappingEntriesError(const OAIGetOfferMappingEntriesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOfferMappingsApiRequest::getSuggestedOfferMappingEntriesError(const OAIGetSuggestedOfferMappingEntriesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOfferMappingsApiRequest::updateOfferMappingEntriesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOfferMappingsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOfferMappingsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
