/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIPricesApiRequest.h"

namespace OpenAPI {

OAIPricesApiRequest::OAIPricesApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIPricesApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIPricesApiRequest::~OAIPricesApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIPricesApiRequest::~OAIPricesApiRequest()";
}

QMap<QString, QString>
OAIPricesApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIPricesApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIPricesApiRequest::getRawSocket(){
    return socket;
}


void OAIPricesApiRequest::getPricesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices";
    connect(this, &OAIPricesApiRequest::getPrices, handler.data(), &OAIPricesApiHandler::getPrices);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    bool archived;
    if(socket->queryString().keys().contains("archived")){
        fromStringValue(socket->queryString().value("archived"), archived);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getPrices(campaign_id, page_token, limit, archived);
}


void OAIPricesApiRequest::getPricesByOfferIdsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices";
    connect(this, &OAIPricesApiRequest::getPricesByOfferIds, handler.data(), &OAIPricesApiHandler::getPricesByOfferIds);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetPricesByOfferIdsRequest oai_get_prices_by_offer_ids_request;
    ::OpenAPI::fromJsonValue(oai_get_prices_by_offer_ids_request, obj);
    

    Q_EMIT getPricesByOfferIds(campaign_id, page_token, limit, oai_get_prices_by_offer_ids_request);
}


void OAIPricesApiRequest::getSuggestedPricesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices/suggestions";
    connect(this, &OAIPricesApiRequest::getSuggestedPrices, handler.data(), &OAIPricesApiHandler::getSuggestedPrices);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISuggestPricesRequest oai_suggest_prices_request;
    ::OpenAPI::fromJsonValue(oai_suggest_prices_request, obj);
    

    Q_EMIT getSuggestedPrices(campaign_id, oai_suggest_prices_request);
}


void OAIPricesApiRequest::updateBusinessPricesRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-prices/updates";
    connect(this, &OAIPricesApiRequest::updateBusinessPrices, handler.data(), &OAIPricesApiHandler::updateBusinessPrices);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateBusinessPricesRequest oai_update_business_prices_request;
    ::OpenAPI::fromJsonValue(oai_update_business_prices_request, obj);
    

    Q_EMIT updateBusinessPrices(business_id, oai_update_business_prices_request);
}


void OAIPricesApiRequest::updatePricesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices/updates";
    connect(this, &OAIPricesApiRequest::updatePrices, handler.data(), &OAIPricesApiHandler::updatePrices);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdatePricesRequest oai_update_prices_request;
    ::OpenAPI::fromJsonValue(oai_update_prices_request, obj);
    

    Q_EMIT updatePrices(campaign_id, oai_update_prices_request);
}



void OAIPricesApiRequest::getPricesResponse(const OAIGetPricesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPricesApiRequest::getPricesByOfferIdsResponse(const OAIGetPricesByOfferIdsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPricesApiRequest::getSuggestedPricesResponse(const OAISuggestPricesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPricesApiRequest::updateBusinessPricesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPricesApiRequest::updatePricesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIPricesApiRequest::getPricesError(const OAIGetPricesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPricesApiRequest::getPricesByOfferIdsError(const OAIGetPricesByOfferIdsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPricesApiRequest::getSuggestedPricesError(const OAISuggestPricesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPricesApiRequest::updateBusinessPricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPricesApiRequest::updatePricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIPricesApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPricesApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
