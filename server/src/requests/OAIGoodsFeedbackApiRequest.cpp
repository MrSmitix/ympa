/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIGoodsFeedbackApiRequest.h"

namespace OpenAPI {

OAIGoodsFeedbackApiRequest::OAIGoodsFeedbackApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIGoodsFeedbackApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIGoodsFeedbackApiRequest::~OAIGoodsFeedbackApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIGoodsFeedbackApiRequest::~OAIGoodsFeedbackApiRequest()";
}

QMap<QString, QString>
OAIGoodsFeedbackApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIGoodsFeedbackApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIGoodsFeedbackApiRequest::getRawSocket(){
    return socket;
}


void OAIGoodsFeedbackApiRequest::deleteGoodsFeedbackCommentRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/comments/delete";
    connect(this, &OAIGoodsFeedbackApiRequest::deleteGoodsFeedbackComment, handler.data(), &OAIGoodsFeedbackApiHandler::deleteGoodsFeedbackComment);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteGoodsFeedbackCommentRequest oai_delete_goods_feedback_comment_request;
    ::OpenAPI::fromJsonValue(oai_delete_goods_feedback_comment_request, obj);
    

    Q_EMIT deleteGoodsFeedbackComment(business_id, oai_delete_goods_feedback_comment_request);
}


void OAIGoodsFeedbackApiRequest::getGoodsFeedbackCommentsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/comments";
    connect(this, &OAIGoodsFeedbackApiRequest::getGoodsFeedbackComments, handler.data(), &OAIGoodsFeedbackApiHandler::getGoodsFeedbackComments);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetGoodsFeedbackCommentsRequest oai_get_goods_feedback_comments_request;
    ::OpenAPI::fromJsonValue(oai_get_goods_feedback_comments_request, obj);
    

    Q_EMIT getGoodsFeedbackComments(business_id, oai_get_goods_feedback_comments_request, page_token, limit);
}


void OAIGoodsFeedbackApiRequest::getGoodsFeedbacksRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback";
    connect(this, &OAIGoodsFeedbackApiRequest::getGoodsFeedbacks, handler.data(), &OAIGoodsFeedbackApiHandler::getGoodsFeedbacks);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetGoodsFeedbackRequest oai_get_goods_feedback_request;
    ::OpenAPI::fromJsonValue(oai_get_goods_feedback_request, obj);
    

    Q_EMIT getGoodsFeedbacks(business_id, page_token, limit, oai_get_goods_feedback_request);
}


void OAIGoodsFeedbackApiRequest::skipGoodsFeedbacksReactionRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/skip-reaction";
    connect(this, &OAIGoodsFeedbackApiRequest::skipGoodsFeedbacksReaction, handler.data(), &OAIGoodsFeedbackApiHandler::skipGoodsFeedbacksReaction);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISkipGoodsFeedbackReactionRequest oai_skip_goods_feedback_reaction_request;
    ::OpenAPI::fromJsonValue(oai_skip_goods_feedback_reaction_request, obj);
    

    Q_EMIT skipGoodsFeedbacksReaction(business_id, oai_skip_goods_feedback_reaction_request);
}


void OAIGoodsFeedbackApiRequest::updateGoodsFeedbackCommentRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/comments/update";
    connect(this, &OAIGoodsFeedbackApiRequest::updateGoodsFeedbackComment, handler.data(), &OAIGoodsFeedbackApiHandler::updateGoodsFeedbackComment);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateGoodsFeedbackCommentRequest oai_update_goods_feedback_comment_request;
    ::OpenAPI::fromJsonValue(oai_update_goods_feedback_comment_request, obj);
    

    Q_EMIT updateGoodsFeedbackComment(business_id, oai_update_goods_feedback_comment_request);
}



void OAIGoodsFeedbackApiRequest::deleteGoodsFeedbackCommentResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIGoodsFeedbackApiRequest::getGoodsFeedbackCommentsResponse(const OAIGetGoodsFeedbackCommentsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIGoodsFeedbackApiRequest::getGoodsFeedbacksResponse(const OAIGetGoodsFeedbackResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIGoodsFeedbackApiRequest::skipGoodsFeedbacksReactionResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIGoodsFeedbackApiRequest::updateGoodsFeedbackCommentResponse(const OAIUpdateGoodsFeedbackCommentResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIGoodsFeedbackApiRequest::deleteGoodsFeedbackCommentError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIGoodsFeedbackApiRequest::getGoodsFeedbackCommentsError(const OAIGetGoodsFeedbackCommentsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIGoodsFeedbackApiRequest::getGoodsFeedbacksError(const OAIGetGoodsFeedbackResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIGoodsFeedbackApiRequest::skipGoodsFeedbacksReactionError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIGoodsFeedbackApiRequest::updateGoodsFeedbackCommentError(const OAIUpdateGoodsFeedbackCommentResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIGoodsFeedbackApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIGoodsFeedbackApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
