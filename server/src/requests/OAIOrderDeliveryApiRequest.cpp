/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIOrderDeliveryApiRequest.h"

namespace OpenAPI {

OAIOrderDeliveryApiRequest::OAIOrderDeliveryApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOrderDeliveryApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIOrderDeliveryApiRequest::~OAIOrderDeliveryApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIOrderDeliveryApiRequest::~OAIOrderDeliveryApiRequest()";
}

QMap<QString, QString>
OAIOrderDeliveryApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIOrderDeliveryApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIOrderDeliveryApiRequest::getRawSocket(){
    return socket;
}


void OAIOrderDeliveryApiRequest::getOrderBuyerInfoRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/buyer";
    connect(this, &OAIOrderDeliveryApiRequest::getOrderBuyerInfo, handler.data(), &OAIOrderDeliveryApiHandler::getOrderBuyerInfo);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrderBuyerInfo(campaign_id, order_id);
}


void OAIOrderDeliveryApiRequest::setOrderDeliveryDateRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/date";
    connect(this, &OAIOrderDeliveryApiRequest::setOrderDeliveryDate, handler.data(), &OAIOrderDeliveryApiHandler::setOrderDeliveryDate);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISetOrderDeliveryDateRequest oai_set_order_delivery_date_request;
    ::OpenAPI::fromJsonValue(oai_set_order_delivery_date_request, obj);
    

    Q_EMIT setOrderDeliveryDate(campaign_id, order_id, oai_set_order_delivery_date_request);
}


void OAIOrderDeliveryApiRequest::setOrderDeliveryTrackCodeRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/track";
    connect(this, &OAIOrderDeliveryApiRequest::setOrderDeliveryTrackCode, handler.data(), &OAIOrderDeliveryApiHandler::setOrderDeliveryTrackCode);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISetOrderDeliveryTrackCodeRequest oai_set_order_delivery_track_code_request;
    ::OpenAPI::fromJsonValue(oai_set_order_delivery_track_code_request, obj);
    

    Q_EMIT setOrderDeliveryTrackCode(campaign_id, order_id, oai_set_order_delivery_track_code_request);
}


void OAIOrderDeliveryApiRequest::updateOrderStorageLimitRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit";
    connect(this, &OAIOrderDeliveryApiRequest::updateOrderStorageLimit, handler.data(), &OAIOrderDeliveryApiHandler::updateOrderStorageLimit);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOrderStorageLimitRequest oai_update_order_storage_limit_request;
    ::OpenAPI::fromJsonValue(oai_update_order_storage_limit_request, obj);
    

    Q_EMIT updateOrderStorageLimit(campaign_id, order_id, oai_update_order_storage_limit_request);
}


void OAIOrderDeliveryApiRequest::verifyOrderEacRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/verifyEac";
    connect(this, &OAIOrderDeliveryApiRequest::verifyOrderEac, handler.data(), &OAIOrderDeliveryApiHandler::verifyOrderEac);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIVerifyOrderEacRequest oai_verify_order_eac_request;
    ::OpenAPI::fromJsonValue(oai_verify_order_eac_request, obj);
    

    Q_EMIT verifyOrderEac(campaign_id, order_id, oai_verify_order_eac_request);
}



void OAIOrderDeliveryApiRequest::getOrderBuyerInfoResponse(const OAIGetOrderBuyerInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderDeliveryApiRequest::setOrderDeliveryDateResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderDeliveryApiRequest::setOrderDeliveryTrackCodeResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderDeliveryApiRequest::updateOrderStorageLimitResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderDeliveryApiRequest::verifyOrderEacResponse(const OAIVerifyOrderEacResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOrderDeliveryApiRequest::getOrderBuyerInfoError(const OAIGetOrderBuyerInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderDeliveryApiRequest::setOrderDeliveryDateError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderDeliveryApiRequest::setOrderDeliveryTrackCodeError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderDeliveryApiRequest::updateOrderStorageLimitError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderDeliveryApiRequest::verifyOrderEacError(const OAIVerifyOrderEacResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOrderDeliveryApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderDeliveryApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
