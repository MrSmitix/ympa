/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOffersApiRequest_H
#define OAI_OAIOffersApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiLockedErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAICurrencyType.h"
#include "OAIDeleteCampaignOffersRequest.h"
#include "OAIDeleteCampaignOffersResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetAllOffersResponse.h"
#include "OAIGetCampaignOffersRequest.h"
#include "OAIGetCampaignOffersResponse.h"
#include "OAIGetOfferRecommendationsRequest.h"
#include "OAIGetOfferRecommendationsResponse.h"
#include "OAIGetOffersResponse.h"
#include "OAIUpdateCampaignOffersRequest.h"
#include <QString>
#include "OAIOffersApiHandler.h"

namespace OpenAPI {

class OAIOffersApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIOffersApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOffersApiHandler> handler);
    virtual ~OAIOffersApiRequest();

    void deleteCampaignOffersRequest(const QString& campaign_id);
    void getAllOffersRequest(const QString& campaign_id);
    void getCampaignOffersRequest(const QString& campaign_id);
    void getOfferRecommendationsRequest(const QString& business_id);
    void getOffersRequest(const QString& campaign_id);
    void updateCampaignOffersRequest(const QString& campaign_id);
    

    void deleteCampaignOffersResponse(const OAIDeleteCampaignOffersResponse& res);
    void getAllOffersResponse(const OAIGetAllOffersResponse& res);
    void getCampaignOffersResponse(const OAIGetCampaignOffersResponse& res);
    void getOfferRecommendationsResponse(const OAIGetOfferRecommendationsResponse& res);
    void getOffersResponse(const OAIGetOffersResponse& res);
    void updateCampaignOffersResponse(const OAIEmptyApiResponse& res);
    

    void deleteCampaignOffersError(const OAIDeleteCampaignOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAllOffersError(const OAIGetAllOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCampaignOffersError(const OAIGetCampaignOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOfferRecommendationsError(const OAIGetOfferRecommendationsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOffersError(const OAIGetOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateCampaignOffersError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void deleteCampaignOffers(qint64 campaign_id, OAIDeleteCampaignOffersRequest oai_delete_campaign_offers_request);
    void getAllOffers(qint64 campaign_id, qint64 feed_id, qint32 chunk);
    void getCampaignOffers(qint64 campaign_id, OAIGetCampaignOffersRequest oai_get_campaign_offers_request, QString page_token, qint32 limit);
    void getOfferRecommendations(qint64 business_id, OAIGetOfferRecommendationsRequest oai_get_offer_recommendations_request, QString page_token, qint32 limit);
    void getOffers(qint64 campaign_id, QString query, qint64 feed_id, QString shop_category_id, OAICurrencyType currency, bool matched, qint32 page, qint32 page_size);
    void updateCampaignOffers(qint64 campaign_id, OAIUpdateCampaignOffersRequest oai_update_campaign_offers_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIOffersApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIOffersApiRequest_H
