/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIDbsApiRequest.h"

namespace OpenAPI {

OAIDbsApiRequest::OAIDbsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIDbsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIDbsApiRequest::~OAIDbsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIDbsApiRequest::~OAIDbsApiRequest()";
}

QMap<QString, QString>
OAIDbsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIDbsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIDbsApiRequest::getRawSocket(){
    return socket;
}


void OAIDbsApiRequest::acceptOrderCancellationRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/cancellation/accept";
    connect(this, &OAIDbsApiRequest::acceptOrderCancellation, handler.data(), &OAIDbsApiHandler::acceptOrderCancellation);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAcceptOrderCancellationRequest oai_accept_order_cancellation_request;
    ::OpenAPI::fromJsonValue(oai_accept_order_cancellation_request, obj);
    

    Q_EMIT acceptOrderCancellation(campaign_id, order_id, oai_accept_order_cancellation_request);
}


void OAIDbsApiRequest::addHiddenOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/hidden-offers";
    connect(this, &OAIDbsApiRequest::addHiddenOffers, handler.data(), &OAIDbsApiHandler::addHiddenOffers);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAddHiddenOffersRequest oai_add_hidden_offers_request;
    ::OpenAPI::fromJsonValue(oai_add_hidden_offers_request, obj);
    

    Q_EMIT addHiddenOffers(campaign_id, oai_add_hidden_offers_request);
}


void OAIDbsApiRequest::addOffersToArchiveRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/archive";
    connect(this, &OAIDbsApiRequest::addOffersToArchive, handler.data(), &OAIDbsApiHandler::addOffersToArchive);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAddOffersToArchiveRequest oai_add_offers_to_archive_request;
    ::OpenAPI::fromJsonValue(oai_add_offers_to_archive_request, obj);
    

    Q_EMIT addOffersToArchive(business_id, oai_add_offers_to_archive_request);
}


void OAIDbsApiRequest::calculateTariffsRequest(){
    qDebug() << "/tariffs/calculate";
    connect(this, &OAIDbsApiRequest::calculateTariffs, handler.data(), &OAIDbsApiHandler::calculateTariffs);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICalculateTariffsRequest oai_calculate_tariffs_request;
    ::OpenAPI::fromJsonValue(oai_calculate_tariffs_request, obj);
    

    Q_EMIT calculateTariffs(oai_calculate_tariffs_request);
}


void OAIDbsApiRequest::confirmBusinessPricesRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/price-quarantine/confirm";
    connect(this, &OAIDbsApiRequest::confirmBusinessPrices, handler.data(), &OAIDbsApiHandler::confirmBusinessPrices);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIConfirmPricesRequest oai_confirm_prices_request;
    ::OpenAPI::fromJsonValue(oai_confirm_prices_request, obj);
    

    Q_EMIT confirmBusinessPrices(business_id, oai_confirm_prices_request);
}


void OAIDbsApiRequest::confirmCampaignPricesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/price-quarantine/confirm";
    connect(this, &OAIDbsApiRequest::confirmCampaignPrices, handler.data(), &OAIDbsApiHandler::confirmCampaignPrices);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIConfirmPricesRequest oai_confirm_prices_request;
    ::OpenAPI::fromJsonValue(oai_confirm_prices_request, obj);
    

    Q_EMIT confirmCampaignPrices(campaign_id, oai_confirm_prices_request);
}


void OAIDbsApiRequest::createChatRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/new";
    connect(this, &OAIDbsApiRequest::createChat, handler.data(), &OAIDbsApiHandler::createChat);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateChatRequest oai_create_chat_request;
    ::OpenAPI::fromJsonValue(oai_create_chat_request, obj);
    

    Q_EMIT createChat(business_id, oai_create_chat_request);
}


void OAIDbsApiRequest::createOutletRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets";
    connect(this, &OAIDbsApiRequest::createOutlet, handler.data(), &OAIDbsApiHandler::createOutlet);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIChangeOutletRequest oai_change_outlet_request;
    ::OpenAPI::fromJsonValue(oai_change_outlet_request, obj);
    

    Q_EMIT createOutlet(campaign_id, oai_change_outlet_request);
}


void OAIDbsApiRequest::deleteCampaignOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/delete";
    connect(this, &OAIDbsApiRequest::deleteCampaignOffers, handler.data(), &OAIDbsApiHandler::deleteCampaignOffers);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteCampaignOffersRequest oai_delete_campaign_offers_request;
    ::OpenAPI::fromJsonValue(oai_delete_campaign_offers_request, obj);
    

    Q_EMIT deleteCampaignOffers(campaign_id, oai_delete_campaign_offers_request);
}


void OAIDbsApiRequest::deleteGoodsFeedbackCommentRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/comments/delete";
    connect(this, &OAIDbsApiRequest::deleteGoodsFeedbackComment, handler.data(), &OAIDbsApiHandler::deleteGoodsFeedbackComment);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteGoodsFeedbackCommentRequest oai_delete_goods_feedback_comment_request;
    ::OpenAPI::fromJsonValue(oai_delete_goods_feedback_comment_request, obj);
    

    Q_EMIT deleteGoodsFeedbackComment(business_id, oai_delete_goods_feedback_comment_request);
}


void OAIDbsApiRequest::deleteHiddenOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/hidden-offers/delete";
    connect(this, &OAIDbsApiRequest::deleteHiddenOffers, handler.data(), &OAIDbsApiHandler::deleteHiddenOffers);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteHiddenOffersRequest oai_delete_hidden_offers_request;
    ::OpenAPI::fromJsonValue(oai_delete_hidden_offers_request, obj);
    

    Q_EMIT deleteHiddenOffers(campaign_id, oai_delete_hidden_offers_request);
}


void OAIDbsApiRequest::deleteOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/delete";
    connect(this, &OAIDbsApiRequest::deleteOffers, handler.data(), &OAIDbsApiHandler::deleteOffers);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteOffersRequest oai_delete_offers_request;
    ::OpenAPI::fromJsonValue(oai_delete_offers_request, obj);
    

    Q_EMIT deleteOffers(business_id, oai_delete_offers_request);
}


void OAIDbsApiRequest::deleteOffersFromArchiveRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/unarchive";
    connect(this, &OAIDbsApiRequest::deleteOffersFromArchive, handler.data(), &OAIDbsApiHandler::deleteOffersFromArchive);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteOffersFromArchiveRequest oai_delete_offers_from_archive_request;
    ::OpenAPI::fromJsonValue(oai_delete_offers_from_archive_request, obj);
    

    Q_EMIT deleteOffersFromArchive(business_id, oai_delete_offers_from_archive_request);
}


void OAIDbsApiRequest::deleteOutletRequest(const QString& campaign_idstr, const QString& outlet_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets/{outletId}";
    connect(this, &OAIDbsApiRequest::deleteOutlet, handler.data(), &OAIDbsApiHandler::deleteOutlet);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 outlet_id;
    fromStringValue(outlet_idstr, outlet_id);
    

    Q_EMIT deleteOutlet(campaign_id, outlet_id);
}


void OAIDbsApiRequest::deleteOutletLicensesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets/licenses";
    connect(this, &OAIDbsApiRequest::deleteOutletLicenses, handler.data(), &OAIDbsApiHandler::deleteOutletLicenses);

    
    QSet<qint64> ids;
    if(socket->queryString().keys().contains("ids")){
        fromStringValue(socket->queryString().values("ids"), ids);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT deleteOutletLicenses(campaign_id, ids);
}


void OAIDbsApiRequest::deletePromoOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos/offers/delete";
    connect(this, &OAIDbsApiRequest::deletePromoOffers, handler.data(), &OAIDbsApiHandler::deletePromoOffers);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeletePromoOffersRequest oai_delete_promo_offers_request;
    ::OpenAPI::fromJsonValue(oai_delete_promo_offers_request, obj);
    

    Q_EMIT deletePromoOffers(business_id, oai_delete_promo_offers_request);
}


void OAIDbsApiRequest::generateBoostConsolidatedReportRequest(){
    qDebug() << "/reports/boost-consolidated/generate";
    connect(this, &OAIDbsApiRequest::generateBoostConsolidatedReport, handler.data(), &OAIDbsApiHandler::generateBoostConsolidatedReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateBoostConsolidatedRequest oai_generate_boost_consolidated_request;
    ::OpenAPI::fromJsonValue(oai_generate_boost_consolidated_request, obj);
    

    Q_EMIT generateBoostConsolidatedReport(oai_generate_boost_consolidated_request, format);
}


void OAIDbsApiRequest::generateCompetitorsPositionReportRequest(){
    qDebug() << "/reports/competitors-position/generate";
    connect(this, &OAIDbsApiRequest::generateCompetitorsPositionReport, handler.data(), &OAIDbsApiHandler::generateCompetitorsPositionReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateCompetitorsPositionReportRequest oai_generate_competitors_position_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_competitors_position_report_request, obj);
    

    Q_EMIT generateCompetitorsPositionReport(oai_generate_competitors_position_report_request, format);
}


void OAIDbsApiRequest::generateGoodsFeedbackReportRequest(){
    qDebug() << "/reports/goods-feedback/generate";
    connect(this, &OAIDbsApiRequest::generateGoodsFeedbackReport, handler.data(), &OAIDbsApiHandler::generateGoodsFeedbackReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateGoodsFeedbackRequest oai_generate_goods_feedback_request;
    ::OpenAPI::fromJsonValue(oai_generate_goods_feedback_request, obj);
    

    Q_EMIT generateGoodsFeedbackReport(oai_generate_goods_feedback_request, format);
}


void OAIDbsApiRequest::generateMassOrderLabelsReportRequest(){
    qDebug() << "/reports/documents/labels/generate";
    connect(this, &OAIDbsApiRequest::generateMassOrderLabelsReport, handler.data(), &OAIDbsApiHandler::generateMassOrderLabelsReport);

    
    OAIPageFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateMassOrderLabelsRequest oai_generate_mass_order_labels_request;
    ::OpenAPI::fromJsonValue(oai_generate_mass_order_labels_request, obj);
    

    Q_EMIT generateMassOrderLabelsReport(oai_generate_mass_order_labels_request, format);
}


void OAIDbsApiRequest::generateOrderLabelRequest(const QString& campaign_idstr, const QString& order_idstr, const QString& shipment_idstr, const QString& box_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label";
    connect(this, &OAIDbsApiRequest::generateOrderLabel, handler.data(), &OAIDbsApiHandler::generateOrderLabel);

    
    OAIPageFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
        qint64 box_id;
    fromStringValue(box_idstr, box_id);
    

    Q_EMIT generateOrderLabel(campaign_id, order_id, shipment_id, box_id, format);
}


void OAIDbsApiRequest::generateOrderLabelsRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/labels";
    connect(this, &OAIDbsApiRequest::generateOrderLabels, handler.data(), &OAIDbsApiHandler::generateOrderLabels);

    
    OAIPageFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT generateOrderLabels(campaign_id, order_id, format);
}


void OAIDbsApiRequest::generatePricesReportRequest(){
    qDebug() << "/reports/prices/generate";
    connect(this, &OAIDbsApiRequest::generatePricesReport, handler.data(), &OAIDbsApiHandler::generatePricesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGeneratePricesReportRequest oai_generate_prices_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_prices_report_request, obj);
    

    Q_EMIT generatePricesReport(oai_generate_prices_report_request, format);
}


void OAIDbsApiRequest::generateShelfsStatisticsReportRequest(){
    qDebug() << "/reports/shelf-statistics/generate";
    connect(this, &OAIDbsApiRequest::generateShelfsStatisticsReport, handler.data(), &OAIDbsApiHandler::generateShelfsStatisticsReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateShelfsStatisticsRequest oai_generate_shelfs_statistics_request;
    ::OpenAPI::fromJsonValue(oai_generate_shelfs_statistics_request, obj);
    

    Q_EMIT generateShelfsStatisticsReport(oai_generate_shelfs_statistics_request, format);
}


void OAIDbsApiRequest::generateShowsSalesReportRequest(){
    qDebug() << "/reports/shows-sales/generate";
    connect(this, &OAIDbsApiRequest::generateShowsSalesReport, handler.data(), &OAIDbsApiHandler::generateShowsSalesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateShowsSalesReportRequest oai_generate_shows_sales_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_shows_sales_report_request, obj);
    

    Q_EMIT generateShowsSalesReport(oai_generate_shows_sales_report_request, format);
}


void OAIDbsApiRequest::generateStocksOnWarehousesReportRequest(){
    qDebug() << "/reports/stocks-on-warehouses/generate";
    connect(this, &OAIDbsApiRequest::generateStocksOnWarehousesReport, handler.data(), &OAIDbsApiHandler::generateStocksOnWarehousesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateStocksOnWarehousesReportRequest oai_generate_stocks_on_warehouses_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_stocks_on_warehouses_report_request, obj);
    

    Q_EMIT generateStocksOnWarehousesReport(oai_generate_stocks_on_warehouses_report_request, format);
}


void OAIDbsApiRequest::generateUnitedMarketplaceServicesReportRequest(){
    qDebug() << "/reports/united-marketplace-services/generate";
    connect(this, &OAIDbsApiRequest::generateUnitedMarketplaceServicesReport, handler.data(), &OAIDbsApiHandler::generateUnitedMarketplaceServicesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateUnitedMarketplaceServicesReportRequest oai_generate_united_marketplace_services_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_united_marketplace_services_report_request, obj);
    

    Q_EMIT generateUnitedMarketplaceServicesReport(oai_generate_united_marketplace_services_report_request, format);
}


void OAIDbsApiRequest::generateUnitedNettingReportRequest(){
    qDebug() << "/reports/united-netting/generate";
    connect(this, &OAIDbsApiRequest::generateUnitedNettingReport, handler.data(), &OAIDbsApiHandler::generateUnitedNettingReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateUnitedNettingReportRequest oai_generate_united_netting_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_united_netting_report_request, obj);
    

    Q_EMIT generateUnitedNettingReport(oai_generate_united_netting_report_request, format);
}


void OAIDbsApiRequest::generateUnitedOrdersReportRequest(){
    qDebug() << "/reports/united-orders/generate";
    connect(this, &OAIDbsApiRequest::generateUnitedOrdersReport, handler.data(), &OAIDbsApiHandler::generateUnitedOrdersReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateUnitedOrdersRequest oai_generate_united_orders_request;
    ::OpenAPI::fromJsonValue(oai_generate_united_orders_request, obj);
    

    Q_EMIT generateUnitedOrdersReport(oai_generate_united_orders_request, format);
}


void OAIDbsApiRequest::getAllOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/all";
    connect(this, &OAIDbsApiRequest::getAllOffers, handler.data(), &OAIDbsApiHandler::getAllOffers);

    
    qint64 feed_id;
    if(socket->queryString().keys().contains("feed_id")){
        fromStringValue(socket->queryString().value("feed_id"), feed_id);
    }
    
    qint32 chunk;
    if(socket->queryString().keys().contains("chunk")){
        fromStringValue(socket->queryString().value("chunk"), chunk);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getAllOffers(campaign_id, feed_id, chunk);
}


void OAIDbsApiRequest::getBidsInfoForBusinessRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/bids/info";
    connect(this, &OAIDbsApiRequest::getBidsInfoForBusiness, handler.data(), &OAIDbsApiHandler::getBidsInfoForBusiness);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetBidsInfoRequest oai_get_bids_info_request;
    ::OpenAPI::fromJsonValue(oai_get_bids_info_request, obj);
    

    Q_EMIT getBidsInfoForBusiness(business_id, page_token, limit, oai_get_bids_info_request);
}


void OAIDbsApiRequest::getBidsRecommendationsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/bids/recommendations";
    connect(this, &OAIDbsApiRequest::getBidsRecommendations, handler.data(), &OAIDbsApiHandler::getBidsRecommendations);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetBidsRecommendationsRequest oai_get_bids_recommendations_request;
    ::OpenAPI::fromJsonValue(oai_get_bids_recommendations_request, obj);
    

    Q_EMIT getBidsRecommendations(business_id, oai_get_bids_recommendations_request);
}


void OAIDbsApiRequest::getBusinessQuarantineOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/price-quarantine";
    connect(this, &OAIDbsApiRequest::getBusinessQuarantineOffers, handler.data(), &OAIDbsApiHandler::getBusinessQuarantineOffers);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetQuarantineOffersRequest oai_get_quarantine_offers_request;
    ::OpenAPI::fromJsonValue(oai_get_quarantine_offers_request, obj);
    

    Q_EMIT getBusinessQuarantineOffers(business_id, oai_get_quarantine_offers_request, page_token, limit);
}


void OAIDbsApiRequest::getBusinessSettingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/settings";
    connect(this, &OAIDbsApiRequest::getBusinessSettings, handler.data(), &OAIDbsApiHandler::getBusinessSettings);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
    

    Q_EMIT getBusinessSettings(business_id);
}


void OAIDbsApiRequest::getCampaignRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}";
    connect(this, &OAIDbsApiRequest::getCampaign, handler.data(), &OAIDbsApiHandler::getCampaign);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaign(campaign_id);
}


void OAIDbsApiRequest::getCampaignLoginsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/logins";
    connect(this, &OAIDbsApiRequest::getCampaignLogins, handler.data(), &OAIDbsApiHandler::getCampaignLogins);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaignLogins(campaign_id);
}


void OAIDbsApiRequest::getCampaignOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers";
    connect(this, &OAIDbsApiRequest::getCampaignOffers, handler.data(), &OAIDbsApiHandler::getCampaignOffers);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetCampaignOffersRequest oai_get_campaign_offers_request;
    ::OpenAPI::fromJsonValue(oai_get_campaign_offers_request, obj);
    

    Q_EMIT getCampaignOffers(campaign_id, oai_get_campaign_offers_request, page_token, limit);
}


void OAIDbsApiRequest::getCampaignQuarantineOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/price-quarantine";
    connect(this, &OAIDbsApiRequest::getCampaignQuarantineOffers, handler.data(), &OAIDbsApiHandler::getCampaignQuarantineOffers);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetQuarantineOffersRequest oai_get_quarantine_offers_request;
    ::OpenAPI::fromJsonValue(oai_get_quarantine_offers_request, obj);
    

    Q_EMIT getCampaignQuarantineOffers(campaign_id, oai_get_quarantine_offers_request, page_token, limit);
}


void OAIDbsApiRequest::getCampaignRegionRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/region";
    connect(this, &OAIDbsApiRequest::getCampaignRegion, handler.data(), &OAIDbsApiHandler::getCampaignRegion);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaignRegion(campaign_id);
}


void OAIDbsApiRequest::getCampaignSettingsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/settings";
    connect(this, &OAIDbsApiRequest::getCampaignSettings, handler.data(), &OAIDbsApiHandler::getCampaignSettings);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaignSettings(campaign_id);
}


void OAIDbsApiRequest::getCampaignsRequest(){
    qDebug() << "/campaigns";
    connect(this, &OAIDbsApiRequest::getCampaigns, handler.data(), &OAIDbsApiHandler::getCampaigns);

    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    


    Q_EMIT getCampaigns(page, page_size);
}


void OAIDbsApiRequest::getCampaignsByLoginRequest(const QString& loginstr){
    qDebug() << "/campaigns/by_login/{login}";
    connect(this, &OAIDbsApiRequest::getCampaignsByLogin, handler.data(), &OAIDbsApiHandler::getCampaignsByLogin);

    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString login;
    fromStringValue(loginstr, login);
    

    Q_EMIT getCampaignsByLogin(login, page, page_size);
}


void OAIDbsApiRequest::getCategoriesMaxSaleQuantumRequest(){
    qDebug() << "/categories/max-sale-quantum";
    connect(this, &OAIDbsApiRequest::getCategoriesMaxSaleQuantum, handler.data(), &OAIDbsApiHandler::getCategoriesMaxSaleQuantum);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetCategoriesMaxSaleQuantumRequest oai_get_categories_max_sale_quantum_request;
    ::OpenAPI::fromJsonValue(oai_get_categories_max_sale_quantum_request, obj);
    

    Q_EMIT getCategoriesMaxSaleQuantum(oai_get_categories_max_sale_quantum_request);
}


void OAIDbsApiRequest::getCategoriesTreeRequest(){
    qDebug() << "/categories/tree";
    connect(this, &OAIDbsApiRequest::getCategoriesTree, handler.data(), &OAIDbsApiHandler::getCategoriesTree);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetCategoriesRequest oai_get_categories_request;
    ::OpenAPI::fromJsonValue(oai_get_categories_request, obj);
    

    Q_EMIT getCategoriesTree(oai_get_categories_request);
}


void OAIDbsApiRequest::getCategoryContentParametersRequest(const QString& category_idstr){
    qDebug() << "/category/{categoryId}/parameters";
    connect(this, &OAIDbsApiRequest::getCategoryContentParameters, handler.data(), &OAIDbsApiHandler::getCategoryContentParameters);

    
    qint64 category_id;
    fromStringValue(category_idstr, category_id);
    

    Q_EMIT getCategoryContentParameters(category_id);
}


void OAIDbsApiRequest::getChatHistoryRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/history";
    connect(this, &OAIDbsApiRequest::getChatHistory, handler.data(), &OAIDbsApiHandler::getChatHistory);

    
    qint64 chat_id;
    if(socket->queryString().keys().contains("chat_id")){
        fromStringValue(socket->queryString().value("chat_id"), chat_id);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetChatHistoryRequest oai_get_chat_history_request;
    ::OpenAPI::fromJsonValue(oai_get_chat_history_request, obj);
    

    Q_EMIT getChatHistory(business_id, chat_id, oai_get_chat_history_request, page_token, limit);
}


void OAIDbsApiRequest::getChatsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats";
    connect(this, &OAIDbsApiRequest::getChats, handler.data(), &OAIDbsApiHandler::getChats);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetChatsRequest oai_get_chats_request;
    ::OpenAPI::fromJsonValue(oai_get_chats_request, obj);
    

    Q_EMIT getChats(business_id, oai_get_chats_request, page_token, limit);
}


void OAIDbsApiRequest::getDeliveryServicesRequest(){
    qDebug() << "/delivery/services";
    connect(this, &OAIDbsApiRequest::getDeliveryServices, handler.data(), &OAIDbsApiHandler::getDeliveryServices);

    


    Q_EMIT getDeliveryServices();
}


void OAIDbsApiRequest::getFeedRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}";
    connect(this, &OAIDbsApiRequest::getFeed, handler.data(), &OAIDbsApiHandler::getFeed);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    Q_EMIT getFeed(campaign_id, feed_id);
}


void OAIDbsApiRequest::getFeedIndexLogsRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}/index-logs";
    connect(this, &OAIDbsApiRequest::getFeedIndexLogs, handler.data(), &OAIDbsApiHandler::getFeedIndexLogs);

    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    QDateTime published_time_from;
    if(socket->queryString().keys().contains("published_time_from")){
        fromStringValue(socket->queryString().value("published_time_from"), published_time_from);
    }
    
    QDateTime published_time_to;
    if(socket->queryString().keys().contains("published_time_to")){
        fromStringValue(socket->queryString().value("published_time_to"), published_time_to);
    }
    
    OAIFeedIndexLogsStatusType status;
    if(socket->queryString().keys().contains("status")){
        fromStringValue(socket->queryString().value("status"), status);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    Q_EMIT getFeedIndexLogs(campaign_id, feed_id, limit, published_time_from, published_time_to, status);
}


void OAIDbsApiRequest::getFeedbackAndCommentUpdatesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/feedback/updates";
    connect(this, &OAIDbsApiRequest::getFeedbackAndCommentUpdates, handler.data(), &OAIDbsApiHandler::getFeedbackAndCommentUpdates);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    QDate from_date;
    if(socket->queryString().keys().contains("from_date")){
        fromStringValue(socket->queryString().value("from_date"), from_date);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getFeedbackAndCommentUpdates(campaign_id, page_token, limit, from_date);
}


void OAIDbsApiRequest::getFeedsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds";
    connect(this, &OAIDbsApiRequest::getFeeds, handler.data(), &OAIDbsApiHandler::getFeeds);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getFeeds(campaign_id);
}


void OAIDbsApiRequest::getGoodsFeedbackCommentsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/comments";
    connect(this, &OAIDbsApiRequest::getGoodsFeedbackComments, handler.data(), &OAIDbsApiHandler::getGoodsFeedbackComments);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetGoodsFeedbackCommentsRequest oai_get_goods_feedback_comments_request;
    ::OpenAPI::fromJsonValue(oai_get_goods_feedback_comments_request, obj);
    

    Q_EMIT getGoodsFeedbackComments(business_id, oai_get_goods_feedback_comments_request, page_token, limit);
}


void OAIDbsApiRequest::getGoodsFeedbacksRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback";
    connect(this, &OAIDbsApiRequest::getGoodsFeedbacks, handler.data(), &OAIDbsApiHandler::getGoodsFeedbacks);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetGoodsFeedbackRequest oai_get_goods_feedback_request;
    ::OpenAPI::fromJsonValue(oai_get_goods_feedback_request, obj);
    

    Q_EMIT getGoodsFeedbacks(business_id, page_token, limit, oai_get_goods_feedback_request);
}


void OAIDbsApiRequest::getGoodsStatsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/stats/skus";
    connect(this, &OAIDbsApiRequest::getGoodsStats, handler.data(), &OAIDbsApiHandler::getGoodsStats);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetGoodsStatsRequest oai_get_goods_stats_request;
    ::OpenAPI::fromJsonValue(oai_get_goods_stats_request, obj);
    

    Q_EMIT getGoodsStats(campaign_id, oai_get_goods_stats_request);
}


void OAIDbsApiRequest::getHiddenOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/hidden-offers";
    connect(this, &OAIDbsApiRequest::getHiddenOffers, handler.data(), &OAIDbsApiHandler::getHiddenOffers);

    
    QList<QString> offer_id;
    if(socket->queryString().keys().contains("offer_id")){
        fromStringValue(socket->queryString().values("offer_id"), offer_id);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint32 offset;
    if(socket->queryString().keys().contains("offset")){
        fromStringValue(socket->queryString().value("offset"), offset);
    }
    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getHiddenOffers(campaign_id, offer_id, page_token, limit, offset, page, page_size);
}


void OAIDbsApiRequest::getModelRequest(const QString& model_idstr){
    qDebug() << "/models/{modelId}";
    connect(this, &OAIDbsApiRequest::getModel, handler.data(), &OAIDbsApiHandler::getModel);

    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
    qint64 model_id;
    fromStringValue(model_idstr, model_id);
    

    Q_EMIT getModel(model_id, region_id, currency);
}


void OAIDbsApiRequest::getModelOffersRequest(const QString& model_idstr){
    qDebug() << "/models/{modelId}/offers";
    connect(this, &OAIDbsApiRequest::getModelOffers, handler.data(), &OAIDbsApiHandler::getModelOffers);

    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
    OAISortOrderType order_by_price;
    if(socket->queryString().keys().contains("order_by_price")){
        fromStringValue(socket->queryString().value("order_by_price"), order_by_price);
    }
    
    qint32 count;
    if(socket->queryString().keys().contains("count")){
        fromStringValue(socket->queryString().value("count"), count);
    }
    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint64 model_id;
    fromStringValue(model_idstr, model_id);
    

    Q_EMIT getModelOffers(model_id, region_id, currency, order_by_price, count, page);
}


void OAIDbsApiRequest::getModelsRequest(){
    qDebug() << "/models";
    connect(this, &OAIDbsApiRequest::getModels, handler.data(), &OAIDbsApiHandler::getModels);

    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetModelsRequest oai_get_models_request;
    ::OpenAPI::fromJsonValue(oai_get_models_request, obj);
    

    Q_EMIT getModels(region_id, oai_get_models_request, currency);
}


void OAIDbsApiRequest::getModelsOffersRequest(){
    qDebug() << "/models/offers";
    connect(this, &OAIDbsApiRequest::getModelsOffers, handler.data(), &OAIDbsApiHandler::getModelsOffers);

    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
    OAISortOrderType order_by_price;
    if(socket->queryString().keys().contains("order_by_price")){
        fromStringValue(socket->queryString().value("order_by_price"), order_by_price);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetModelsRequest oai_get_models_request;
    ::OpenAPI::fromJsonValue(oai_get_models_request, obj);
    

    Q_EMIT getModelsOffers(region_id, oai_get_models_request, currency, order_by_price);
}


void OAIDbsApiRequest::getOfferCardsContentStatusRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-cards";
    connect(this, &OAIDbsApiRequest::getOfferCardsContentStatus, handler.data(), &OAIDbsApiHandler::getOfferCardsContentStatus);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetOfferCardsContentStatusRequest oai_get_offer_cards_content_status_request;
    ::OpenAPI::fromJsonValue(oai_get_offer_cards_content_status_request, obj);
    

    Q_EMIT getOfferCardsContentStatus(business_id, page_token, limit, oai_get_offer_cards_content_status_request);
}


void OAIDbsApiRequest::getOfferMappingEntriesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-mapping-entries";
    connect(this, &OAIDbsApiRequest::getOfferMappingEntries, handler.data(), &OAIDbsApiHandler::getOfferMappingEntries);

    
    QList<QString> offer_id;
    if(socket->queryString().keys().contains("offer_id")){
        fromStringValue(socket->queryString().values("offer_id"), offer_id);
    }
    
    QList<QString> shop_sku;
    if(socket->queryString().keys().contains("shop_sku")){
        fromStringValue(socket->queryString().values("shop_sku"), shop_sku);
    }
    
    OAIOfferMappingKindType mapping_kind;
    if(socket->queryString().keys().contains("mapping_kind")){
        fromStringValue(socket->queryString().value("mapping_kind"), mapping_kind);
    }
    
    QList<OAIOfferProcessingStatusType> status;
    if(socket->queryString().keys().contains("status")){
        fromStringValue(socket->queryString().values("status"), status);
    }
    
    QList<OAIOfferAvailabilityStatusType> availability;
    if(socket->queryString().keys().contains("availability")){
        fromStringValue(socket->queryString().values("availability"), availability);
    }
    
    QList<qint32> category_id;
    if(socket->queryString().keys().contains("category_id")){
        fromStringValue(socket->queryString().values("category_id"), category_id);
    }
    
    QList<QString> vendor;
    if(socket->queryString().keys().contains("vendor")){
        fromStringValue(socket->queryString().values("vendor"), vendor);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getOfferMappingEntries(campaign_id, offer_id, shop_sku, mapping_kind, status, availability, category_id, vendor, page_token, limit);
}


void OAIDbsApiRequest::getOfferMappingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings";
    connect(this, &OAIDbsApiRequest::getOfferMappings, handler.data(), &OAIDbsApiHandler::getOfferMappings);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetOfferMappingsRequest oai_get_offer_mappings_request;
    ::OpenAPI::fromJsonValue(oai_get_offer_mappings_request, obj);
    

    Q_EMIT getOfferMappings(business_id, page_token, limit, oai_get_offer_mappings_request);
}


void OAIDbsApiRequest::getOfferRecommendationsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offers/recommendations";
    connect(this, &OAIDbsApiRequest::getOfferRecommendations, handler.data(), &OAIDbsApiHandler::getOfferRecommendations);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetOfferRecommendationsRequest oai_get_offer_recommendations_request;
    ::OpenAPI::fromJsonValue(oai_get_offer_recommendations_request, obj);
    

    Q_EMIT getOfferRecommendations(business_id, oai_get_offer_recommendations_request, page_token, limit);
}


void OAIDbsApiRequest::getOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers";
    connect(this, &OAIDbsApiRequest::getOffers, handler.data(), &OAIDbsApiHandler::getOffers);

    
    QString query;
    if(socket->queryString().keys().contains("query")){
        fromStringValue(socket->queryString().value("query"), query);
    }
    
    qint64 feed_id;
    if(socket->queryString().keys().contains("feed_id")){
        fromStringValue(socket->queryString().value("feed_id"), feed_id);
    }
    
    QString shop_category_id;
    if(socket->queryString().keys().contains("shop_category_id")){
        fromStringValue(socket->queryString().value("shop_category_id"), shop_category_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
    bool matched;
    if(socket->queryString().keys().contains("matched")){
        fromStringValue(socket->queryString().value("matched"), matched);
    }
    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getOffers(campaign_id, query, feed_id, shop_category_id, currency, matched, page, page_size);
}


void OAIDbsApiRequest::getOrderRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}";
    connect(this, &OAIDbsApiRequest::getOrder, handler.data(), &OAIDbsApiHandler::getOrder);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrder(campaign_id, order_id);
}


void OAIDbsApiRequest::getOrderBusinessBuyerInfoRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/business-buyer";
    connect(this, &OAIDbsApiRequest::getOrderBusinessBuyerInfo, handler.data(), &OAIDbsApiHandler::getOrderBusinessBuyerInfo);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrderBusinessBuyerInfo(campaign_id, order_id);
}


void OAIDbsApiRequest::getOrderBusinessDocumentsInfoRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/documents";
    connect(this, &OAIDbsApiRequest::getOrderBusinessDocumentsInfo, handler.data(), &OAIDbsApiHandler::getOrderBusinessDocumentsInfo);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrderBusinessDocumentsInfo(campaign_id, order_id);
}


void OAIDbsApiRequest::getOrderBuyerInfoRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/buyer";
    connect(this, &OAIDbsApiRequest::getOrderBuyerInfo, handler.data(), &OAIDbsApiHandler::getOrderBuyerInfo);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrderBuyerInfo(campaign_id, order_id);
}


void OAIDbsApiRequest::getOrderLabelsDataRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data";
    connect(this, &OAIDbsApiRequest::getOrderLabelsData, handler.data(), &OAIDbsApiHandler::getOrderLabelsData);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrderLabelsData(campaign_id, order_id);
}


void OAIDbsApiRequest::getOrdersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/orders";
    connect(this, &OAIDbsApiRequest::getOrders, handler.data(), &OAIDbsApiHandler::getOrders);

    
    QList<qint64> order_ids;
    if(socket->queryString().keys().contains("order_ids")){
        fromStringValue(socket->queryString().values("order_ids"), order_ids);
    }
    
    QSet<OAIOrderStatusType> status;
    if(socket->queryString().keys().contains("status")){
        fromStringValue(socket->queryString().values("status"), status);
    }
    
    QSet<OAIOrderSubstatusType> substatus;
    if(socket->queryString().keys().contains("substatus")){
        fromStringValue(socket->queryString().values("substatus"), substatus);
    }
    
    QDate from_date;
    if(socket->queryString().keys().contains("from_date")){
        fromStringValue(socket->queryString().value("from_date"), from_date);
    }
    
    QDate to_date;
    if(socket->queryString().keys().contains("to_date")){
        fromStringValue(socket->queryString().value("to_date"), to_date);
    }
    
    QDate supplier_shipment_date_from;
    if(socket->queryString().keys().contains("supplier_shipment_date_from")){
        fromStringValue(socket->queryString().value("supplier_shipment_date_from"), supplier_shipment_date_from);
    }
    
    QDate supplier_shipment_date_to;
    if(socket->queryString().keys().contains("supplier_shipment_date_to")){
        fromStringValue(socket->queryString().value("supplier_shipment_date_to"), supplier_shipment_date_to);
    }
    
    QDateTime updated_at_from;
    if(socket->queryString().keys().contains("updated_at_from")){
        fromStringValue(socket->queryString().value("updated_at_from"), updated_at_from);
    }
    
    QDateTime updated_at_to;
    if(socket->queryString().keys().contains("updated_at_to")){
        fromStringValue(socket->queryString().value("updated_at_to"), updated_at_to);
    }
    
    OAIOrderDeliveryDispatchType dispatch_type;
    if(socket->queryString().keys().contains("dispatch_type")){
        fromStringValue(socket->queryString().value("dispatch_type"), dispatch_type);
    }
    
    bool fake;
    if(socket->queryString().keys().contains("fake")){
        fromStringValue(socket->queryString().value("fake"), fake);
    }
    
    bool has_cis;
    if(socket->queryString().keys().contains("has_cis")){
        fromStringValue(socket->queryString().value("has_cis"), has_cis);
    }
    
    bool only_waiting_for_cancellation_approve;
    if(socket->queryString().keys().contains("only_waiting_for_cancellation_approve")){
        fromStringValue(socket->queryString().value("only_waiting_for_cancellation_approve"), only_waiting_for_cancellation_approve);
    }
    
    bool only_estimated_delivery;
    if(socket->queryString().keys().contains("only_estimated_delivery")){
        fromStringValue(socket->queryString().value("only_estimated_delivery"), only_estimated_delivery);
    }
    
    OAIOrderBuyerType buyer_type;
    if(socket->queryString().keys().contains("buyer_type")){
        fromStringValue(socket->queryString().value("buyer_type"), buyer_type);
    }
    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getOrders(campaign_id, order_ids, status, substatus, from_date, to_date, supplier_shipment_date_from, supplier_shipment_date_to, updated_at_from, updated_at_to, dispatch_type, fake, has_cis, only_waiting_for_cancellation_approve, only_estimated_delivery, buyer_type, page, page_size, page_token, limit);
}


void OAIDbsApiRequest::getOrdersStatsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/stats/orders";
    connect(this, &OAIDbsApiRequest::getOrdersStats, handler.data(), &OAIDbsApiHandler::getOrdersStats);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetOrdersStatsRequest oai_get_orders_stats_request;
    ::OpenAPI::fromJsonValue(oai_get_orders_stats_request, obj);
    

    Q_EMIT getOrdersStats(campaign_id, page_token, limit, oai_get_orders_stats_request);
}


void OAIDbsApiRequest::getOutletRequest(const QString& campaign_idstr, const QString& outlet_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets/{outletId}";
    connect(this, &OAIDbsApiRequest::getOutlet, handler.data(), &OAIDbsApiHandler::getOutlet);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 outlet_id;
    fromStringValue(outlet_idstr, outlet_id);
    

    Q_EMIT getOutlet(campaign_id, outlet_id);
}


void OAIDbsApiRequest::getOutletLicensesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets/licenses";
    connect(this, &OAIDbsApiRequest::getOutletLicenses, handler.data(), &OAIDbsApiHandler::getOutletLicenses);

    
    QSet<qint64> outlet_ids;
    if(socket->queryString().keys().contains("outlet_ids")){
        fromStringValue(socket->queryString().values("outlet_ids"), outlet_ids);
    }
    
    QSet<qint64> ids;
    if(socket->queryString().keys().contains("ids")){
        fromStringValue(socket->queryString().values("ids"), ids);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getOutletLicenses(campaign_id, outlet_ids, ids);
}


void OAIDbsApiRequest::getOutletsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets";
    connect(this, &OAIDbsApiRequest::getOutlets, handler.data(), &OAIDbsApiHandler::getOutlets);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    QString shop_outlet_code;
    if(socket->queryString().keys().contains("shop_outlet_code")){
        fromStringValue(socket->queryString().value("shop_outlet_code"), shop_outlet_code);
    }
    
    qint64 region_id2;
    if(socket->queryString().keys().contains("region_id2")){
        fromStringValue(socket->queryString().value("region_id2"), region_id2);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getOutlets(campaign_id, page_token, region_id, shop_outlet_code, region_id2);
}


void OAIDbsApiRequest::getPricesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices";
    connect(this, &OAIDbsApiRequest::getPrices, handler.data(), &OAIDbsApiHandler::getPrices);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    bool archived;
    if(socket->queryString().keys().contains("archived")){
        fromStringValue(socket->queryString().value("archived"), archived);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getPrices(campaign_id, page_token, limit, archived);
}


void OAIDbsApiRequest::getPricesByOfferIdsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices";
    connect(this, &OAIDbsApiRequest::getPricesByOfferIds, handler.data(), &OAIDbsApiHandler::getPricesByOfferIds);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetPricesByOfferIdsRequest oai_get_prices_by_offer_ids_request;
    ::OpenAPI::fromJsonValue(oai_get_prices_by_offer_ids_request, obj);
    

    Q_EMIT getPricesByOfferIds(campaign_id, page_token, limit, oai_get_prices_by_offer_ids_request);
}


void OAIDbsApiRequest::getPromoOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos/offers";
    connect(this, &OAIDbsApiRequest::getPromoOffers, handler.data(), &OAIDbsApiHandler::getPromoOffers);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetPromoOffersRequest oai_get_promo_offers_request;
    ::OpenAPI::fromJsonValue(oai_get_promo_offers_request, obj);
    

    Q_EMIT getPromoOffers(business_id, oai_get_promo_offers_request, page_token, limit);
}


void OAIDbsApiRequest::getPromosRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos";
    connect(this, &OAIDbsApiRequest::getPromos, handler.data(), &OAIDbsApiHandler::getPromos);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetPromosRequest oai_get_promos_request;
    ::OpenAPI::fromJsonValue(oai_get_promos_request, obj);
    

    Q_EMIT getPromos(business_id, oai_get_promos_request);
}


void OAIDbsApiRequest::getQualityRatingDetailsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/ratings/quality/details";
    connect(this, &OAIDbsApiRequest::getQualityRatingDetails, handler.data(), &OAIDbsApiHandler::getQualityRatingDetails);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getQualityRatingDetails(campaign_id);
}


void OAIDbsApiRequest::getQualityRatingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/ratings/quality";
    connect(this, &OAIDbsApiRequest::getQualityRatings, handler.data(), &OAIDbsApiHandler::getQualityRatings);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetQualityRatingRequest oai_get_quality_rating_request;
    ::OpenAPI::fromJsonValue(oai_get_quality_rating_request, obj);
    

    Q_EMIT getQualityRatings(business_id, oai_get_quality_rating_request);
}


void OAIDbsApiRequest::getReportInfoRequest(const QString& report_idstr){
    qDebug() << "/reports/info/{reportId}";
    connect(this, &OAIDbsApiRequest::getReportInfo, handler.data(), &OAIDbsApiHandler::getReportInfo);

    
    QString report_id;
    fromStringValue(report_idstr, report_id);
    

    Q_EMIT getReportInfo(report_id);
}


void OAIDbsApiRequest::getReturnRequest(const QString& campaign_idstr, const QString& order_idstr, const QString& return_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}";
    connect(this, &OAIDbsApiRequest::getReturn, handler.data(), &OAIDbsApiHandler::getReturn);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
        qint64 return_id;
    fromStringValue(return_idstr, return_id);
    

    Q_EMIT getReturn(campaign_id, order_id, return_id);
}


void OAIDbsApiRequest::getReturnApplicationRequest(const QString& campaign_idstr, const QString& order_idstr, const QString& return_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application";
    connect(this, &OAIDbsApiRequest::getReturnApplication, handler.data(), &OAIDbsApiHandler::getReturnApplication);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
        qint64 return_id;
    fromStringValue(return_idstr, return_id);
    

    Q_EMIT getReturnApplication(campaign_id, order_id, return_id);
}


void OAIDbsApiRequest::getReturnPhotoRequest(const QString& campaign_idstr, const QString& order_idstr, const QString& return_idstr, const QString& item_idstr, const QString& image_hashstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}";
    connect(this, &OAIDbsApiRequest::getReturnPhoto, handler.data(), &OAIDbsApiHandler::getReturnPhoto);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
        qint64 return_id;
    fromStringValue(return_idstr, return_id);
        qint64 item_id;
    fromStringValue(item_idstr, item_id);
        QString image_hash;
    fromStringValue(image_hashstr, image_hash);
    

    Q_EMIT getReturnPhoto(campaign_id, order_id, return_id, item_id, image_hash);
}


void OAIDbsApiRequest::getReturnsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/returns";
    connect(this, &OAIDbsApiRequest::getReturns, handler.data(), &OAIDbsApiHandler::getReturns);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    QList<qint64> order_ids;
    if(socket->queryString().keys().contains("order_ids")){
        fromStringValue(socket->queryString().values("order_ids"), order_ids);
    }
    
    QList<OAIRefundStatusType> statuses;
    if(socket->queryString().keys().contains("statuses")){
        fromStringValue(socket->queryString().values("statuses"), statuses);
    }
    
    OAIReturnType type;
    if(socket->queryString().keys().contains("type")){
        fromStringValue(socket->queryString().value("type"), type);
    }
    
    QDate from_date;
    if(socket->queryString().keys().contains("from_date")){
        fromStringValue(socket->queryString().value("from_date"), from_date);
    }
    
    QDate to_date;
    if(socket->queryString().keys().contains("to_date")){
        fromStringValue(socket->queryString().value("to_date"), to_date);
    }
    
    QDate from_date2;
    if(socket->queryString().keys().contains("from_date2")){
        fromStringValue(socket->queryString().value("from_date2"), from_date2);
    }
    
    QDate to_date2;
    if(socket->queryString().keys().contains("to_date2")){
        fromStringValue(socket->queryString().value("to_date2"), to_date2);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getReturns(campaign_id, page_token, limit, order_ids, statuses, type, from_date, to_date, from_date2, to_date2);
}


void OAIDbsApiRequest::getStocksRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/stocks";
    connect(this, &OAIDbsApiRequest::getStocks, handler.data(), &OAIDbsApiHandler::getStocks);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetWarehouseStocksRequest oai_get_warehouse_stocks_request;
    ::OpenAPI::fromJsonValue(oai_get_warehouse_stocks_request, obj);
    

    Q_EMIT getStocks(campaign_id, page_token, limit, oai_get_warehouse_stocks_request);
}


void OAIDbsApiRequest::getSuggestedOfferMappingEntriesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-mapping-entries/suggestions";
    connect(this, &OAIDbsApiRequest::getSuggestedOfferMappingEntries, handler.data(), &OAIDbsApiHandler::getSuggestedOfferMappingEntries);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetSuggestedOfferMappingEntriesRequest oai_get_suggested_offer_mapping_entries_request;
    ::OpenAPI::fromJsonValue(oai_get_suggested_offer_mapping_entries_request, obj);
    

    Q_EMIT getSuggestedOfferMappingEntries(campaign_id, oai_get_suggested_offer_mapping_entries_request);
}


void OAIDbsApiRequest::getSuggestedOfferMappingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/suggestions";
    connect(this, &OAIDbsApiRequest::getSuggestedOfferMappings, handler.data(), &OAIDbsApiHandler::getSuggestedOfferMappings);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetSuggestedOfferMappingsRequest oai_get_suggested_offer_mappings_request;
    ::OpenAPI::fromJsonValue(oai_get_suggested_offer_mappings_request, obj);
    

    Q_EMIT getSuggestedOfferMappings(business_id, oai_get_suggested_offer_mappings_request);
}


void OAIDbsApiRequest::getSuggestedPricesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices/suggestions";
    connect(this, &OAIDbsApiRequest::getSuggestedPrices, handler.data(), &OAIDbsApiHandler::getSuggestedPrices);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISuggestPricesRequest oai_suggest_prices_request;
    ::OpenAPI::fromJsonValue(oai_suggest_prices_request, obj);
    

    Q_EMIT getSuggestedPrices(campaign_id, oai_suggest_prices_request);
}


void OAIDbsApiRequest::getWarehousesRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/warehouses";
    connect(this, &OAIDbsApiRequest::getWarehouses, handler.data(), &OAIDbsApiHandler::getWarehouses);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
    

    Q_EMIT getWarehouses(business_id);
}


void OAIDbsApiRequest::provideOrderDigitalCodesRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods";
    connect(this, &OAIDbsApiRequest::provideOrderDigitalCodes, handler.data(), &OAIDbsApiHandler::provideOrderDigitalCodes);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIProvideOrderDigitalCodesRequest oai_provide_order_digital_codes_request;
    ::OpenAPI::fromJsonValue(oai_provide_order_digital_codes_request, obj);
    

    Q_EMIT provideOrderDigitalCodes(campaign_id, order_id, oai_provide_order_digital_codes_request);
}


void OAIDbsApiRequest::provideOrderItemIdentifiersRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/identifiers";
    connect(this, &OAIDbsApiRequest::provideOrderItemIdentifiers, handler.data(), &OAIDbsApiHandler::provideOrderItemIdentifiers);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIProvideOrderItemIdentifiersRequest oai_provide_order_item_identifiers_request;
    ::OpenAPI::fromJsonValue(oai_provide_order_item_identifiers_request, obj);
    

    Q_EMIT provideOrderItemIdentifiers(campaign_id, order_id, oai_provide_order_item_identifiers_request);
}


void OAIDbsApiRequest::putBidsForBusinessRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/bids";
    connect(this, &OAIDbsApiRequest::putBidsForBusiness, handler.data(), &OAIDbsApiHandler::putBidsForBusiness);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIPutSkuBidsRequest oai_put_sku_bids_request;
    ::OpenAPI::fromJsonValue(oai_put_sku_bids_request, obj);
    

    Q_EMIT putBidsForBusiness(business_id, oai_put_sku_bids_request);
}


void OAIDbsApiRequest::putBidsForCampaignRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/bids";
    connect(this, &OAIDbsApiRequest::putBidsForCampaign, handler.data(), &OAIDbsApiHandler::putBidsForCampaign);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIPutSkuBidsRequest oai_put_sku_bids_request;
    ::OpenAPI::fromJsonValue(oai_put_sku_bids_request, obj);
    

    Q_EMIT putBidsForCampaign(campaign_id, oai_put_sku_bids_request);
}


void OAIDbsApiRequest::refreshFeedRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}/refresh";
    connect(this, &OAIDbsApiRequest::refreshFeed, handler.data(), &OAIDbsApiHandler::refreshFeed);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    Q_EMIT refreshFeed(campaign_id, feed_id);
}


void OAIDbsApiRequest::searchModelsRequest(){
    qDebug() << "/models";
    connect(this, &OAIDbsApiRequest::searchModels, handler.data(), &OAIDbsApiHandler::searchModels);

    
    QString query;
    if(socket->queryString().keys().contains("query")){
        fromStringValue(socket->queryString().value("query"), query);
    }
    
    qint64 region_id;
    if(socket->queryString().keys().contains("region_id")){
        fromStringValue(socket->queryString().value("region_id"), region_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    


    Q_EMIT searchModels(query, region_id, currency, page, page_size);
}


void OAIDbsApiRequest::searchRegionChildrenRequest(const QString& region_idstr){
    qDebug() << "/regions/{regionId}/children";
    connect(this, &OAIDbsApiRequest::searchRegionChildren, handler.data(), &OAIDbsApiHandler::searchRegionChildren);

    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    qint64 region_id;
    fromStringValue(region_idstr, region_id);
    

    Q_EMIT searchRegionChildren(region_id, page, page_size);
}


void OAIDbsApiRequest::searchRegionsByIdRequest(const QString& region_idstr){
    qDebug() << "/regions/{regionId}";
    connect(this, &OAIDbsApiRequest::searchRegionsById, handler.data(), &OAIDbsApiHandler::searchRegionsById);

    
    qint64 region_id;
    fromStringValue(region_idstr, region_id);
    

    Q_EMIT searchRegionsById(region_id);
}


void OAIDbsApiRequest::searchRegionsByNameRequest(){
    qDebug() << "/regions";
    connect(this, &OAIDbsApiRequest::searchRegionsByName, handler.data(), &OAIDbsApiHandler::searchRegionsByName);

    
    QString name;
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    


    Q_EMIT searchRegionsByName(name, page_token, limit);
}


void OAIDbsApiRequest::sendFileToChatRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/file/send";
    connect(this, &OAIDbsApiRequest::sendFileToChat, handler.data(), &OAIDbsApiHandler::sendFileToChat);

    
    qint64 chat_id;
    if(socket->queryString().keys().contains("chat_id")){
        fromStringValue(socket->queryString().value("chat_id"), chat_id);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
    
    OAIHttpFileElement file;

    Q_EMIT sendFileToChat(business_id, chat_id, file);
}


void OAIDbsApiRequest::sendMessageToChatRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/chats/message";
    connect(this, &OAIDbsApiRequest::sendMessageToChat, handler.data(), &OAIDbsApiHandler::sendMessageToChat);

    
    qint64 chat_id;
    if(socket->queryString().keys().contains("chat_id")){
        fromStringValue(socket->queryString().value("chat_id"), chat_id);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISendMessageToChatRequest oai_send_message_to_chat_request;
    ::OpenAPI::fromJsonValue(oai_send_message_to_chat_request, obj);
    

    Q_EMIT sendMessageToChat(business_id, chat_id, oai_send_message_to_chat_request);
}


void OAIDbsApiRequest::setFeedParamsRequest(const QString& campaign_idstr, const QString& feed_idstr){
    qDebug() << "/campaigns/{campaignId}/feeds/{feedId}/params";
    connect(this, &OAIDbsApiRequest::setFeedParams, handler.data(), &OAIDbsApiHandler::setFeedParams);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 feed_id;
    fromStringValue(feed_idstr, feed_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISetFeedParamsRequest oai_set_feed_params_request;
    ::OpenAPI::fromJsonValue(oai_set_feed_params_request, obj);
    

    Q_EMIT setFeedParams(campaign_id, feed_id, oai_set_feed_params_request);
}


void OAIDbsApiRequest::setOrderBoxLayoutRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/boxes";
    connect(this, &OAIDbsApiRequest::setOrderBoxLayout, handler.data(), &OAIDbsApiHandler::setOrderBoxLayout);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISetOrderBoxLayoutRequest oai_set_order_box_layout_request;
    ::OpenAPI::fromJsonValue(oai_set_order_box_layout_request, obj);
    

    Q_EMIT setOrderBoxLayout(campaign_id, order_id, oai_set_order_box_layout_request);
}


void OAIDbsApiRequest::setOrderDeliveryDateRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/date";
    connect(this, &OAIDbsApiRequest::setOrderDeliveryDate, handler.data(), &OAIDbsApiHandler::setOrderDeliveryDate);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISetOrderDeliveryDateRequest oai_set_order_delivery_date_request;
    ::OpenAPI::fromJsonValue(oai_set_order_delivery_date_request, obj);
    

    Q_EMIT setOrderDeliveryDate(campaign_id, order_id, oai_set_order_delivery_date_request);
}


void OAIDbsApiRequest::setOrderDeliveryTrackCodeRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/track";
    connect(this, &OAIDbsApiRequest::setOrderDeliveryTrackCode, handler.data(), &OAIDbsApiHandler::setOrderDeliveryTrackCode);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISetOrderDeliveryTrackCodeRequest oai_set_order_delivery_track_code_request;
    ::OpenAPI::fromJsonValue(oai_set_order_delivery_track_code_request, obj);
    

    Q_EMIT setOrderDeliveryTrackCode(campaign_id, order_id, oai_set_order_delivery_track_code_request);
}


void OAIDbsApiRequest::setOrderShipmentBoxesRequest(const QString& campaign_idstr, const QString& order_idstr, const QString& shipment_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes";
    connect(this, &OAIDbsApiRequest::setOrderShipmentBoxes, handler.data(), &OAIDbsApiHandler::setOrderShipmentBoxes);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
        qint64 shipment_id;
    fromStringValue(shipment_idstr, shipment_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISetOrderShipmentBoxesRequest oai_set_order_shipment_boxes_request;
    ::OpenAPI::fromJsonValue(oai_set_order_shipment_boxes_request, obj);
    

    Q_EMIT setOrderShipmentBoxes(campaign_id, order_id, shipment_id, oai_set_order_shipment_boxes_request);
}


void OAIDbsApiRequest::setReturnDecisionRequest(const QString& campaign_idstr, const QString& order_idstr, const QString& return_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision";
    connect(this, &OAIDbsApiRequest::setReturnDecision, handler.data(), &OAIDbsApiHandler::setReturnDecision);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
        qint64 return_id;
    fromStringValue(return_idstr, return_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISetReturnDecisionRequest oai_set_return_decision_request;
    ::OpenAPI::fromJsonValue(oai_set_return_decision_request, obj);
    

    Q_EMIT setReturnDecision(campaign_id, order_id, return_id, oai_set_return_decision_request);
}


void OAIDbsApiRequest::skipGoodsFeedbacksReactionRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/skip-reaction";
    connect(this, &OAIDbsApiRequest::skipGoodsFeedbacksReaction, handler.data(), &OAIDbsApiHandler::skipGoodsFeedbacksReaction);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISkipGoodsFeedbackReactionRequest oai_skip_goods_feedback_reaction_request;
    ::OpenAPI::fromJsonValue(oai_skip_goods_feedback_reaction_request, obj);
    

    Q_EMIT skipGoodsFeedbacksReaction(business_id, oai_skip_goods_feedback_reaction_request);
}


void OAIDbsApiRequest::submitReturnDecisionRequest(const QString& campaign_idstr, const QString& order_idstr, const QString& return_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit";
    connect(this, &OAIDbsApiRequest::submitReturnDecision, handler.data(), &OAIDbsApiHandler::submitReturnDecision);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
        qint64 return_id;
    fromStringValue(return_idstr, return_id);
    

    Q_EMIT submitReturnDecision(campaign_id, order_id, return_id);
}


void OAIDbsApiRequest::updateBusinessPricesRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-prices/updates";
    connect(this, &OAIDbsApiRequest::updateBusinessPrices, handler.data(), &OAIDbsApiHandler::updateBusinessPrices);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateBusinessPricesRequest oai_update_business_prices_request;
    ::OpenAPI::fromJsonValue(oai_update_business_prices_request, obj);
    

    Q_EMIT updateBusinessPrices(business_id, oai_update_business_prices_request);
}


void OAIDbsApiRequest::updateCampaignOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/update";
    connect(this, &OAIDbsApiRequest::updateCampaignOffers, handler.data(), &OAIDbsApiHandler::updateCampaignOffers);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateCampaignOffersRequest oai_update_campaign_offers_request;
    ::OpenAPI::fromJsonValue(oai_update_campaign_offers_request, obj);
    

    Q_EMIT updateCampaignOffers(campaign_id, oai_update_campaign_offers_request);
}


void OAIDbsApiRequest::updateGoodsFeedbackCommentRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/goods-feedback/comments/update";
    connect(this, &OAIDbsApiRequest::updateGoodsFeedbackComment, handler.data(), &OAIDbsApiHandler::updateGoodsFeedbackComment);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateGoodsFeedbackCommentRequest oai_update_goods_feedback_comment_request;
    ::OpenAPI::fromJsonValue(oai_update_goods_feedback_comment_request, obj);
    

    Q_EMIT updateGoodsFeedbackComment(business_id, oai_update_goods_feedback_comment_request);
}


void OAIDbsApiRequest::updateOfferContentRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-cards/update";
    connect(this, &OAIDbsApiRequest::updateOfferContent, handler.data(), &OAIDbsApiHandler::updateOfferContent);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOfferContentRequest oai_update_offer_content_request;
    ::OpenAPI::fromJsonValue(oai_update_offer_content_request, obj);
    

    Q_EMIT updateOfferContent(business_id, oai_update_offer_content_request);
}


void OAIDbsApiRequest::updateOfferMappingEntriesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-mapping-entries/updates";
    connect(this, &OAIDbsApiRequest::updateOfferMappingEntries, handler.data(), &OAIDbsApiHandler::updateOfferMappingEntries);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOfferMappingEntryRequest oai_update_offer_mapping_entry_request;
    ::OpenAPI::fromJsonValue(oai_update_offer_mapping_entry_request, obj);
    

    Q_EMIT updateOfferMappingEntries(campaign_id, oai_update_offer_mapping_entry_request);
}


void OAIDbsApiRequest::updateOfferMappingsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offer-mappings/update";
    connect(this, &OAIDbsApiRequest::updateOfferMappings, handler.data(), &OAIDbsApiHandler::updateOfferMappings);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOfferMappingsRequest oai_update_offer_mappings_request;
    ::OpenAPI::fromJsonValue(oai_update_offer_mappings_request, obj);
    

    Q_EMIT updateOfferMappings(business_id, oai_update_offer_mappings_request);
}


void OAIDbsApiRequest::updateOrderItemsRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/items";
    connect(this, &OAIDbsApiRequest::updateOrderItems, handler.data(), &OAIDbsApiHandler::updateOrderItems);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOrderItemRequest oai_update_order_item_request;
    ::OpenAPI::fromJsonValue(oai_update_order_item_request, obj);
    

    Q_EMIT updateOrderItems(campaign_id, order_id, oai_update_order_item_request);
}


void OAIDbsApiRequest::updateOrderStatusRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/status";
    connect(this, &OAIDbsApiRequest::updateOrderStatus, handler.data(), &OAIDbsApiHandler::updateOrderStatus);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOrderStatusRequest oai_update_order_status_request;
    ::OpenAPI::fromJsonValue(oai_update_order_status_request, obj);
    

    Q_EMIT updateOrderStatus(campaign_id, order_id, oai_update_order_status_request);
}


void OAIDbsApiRequest::updateOrderStatusesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/status-update";
    connect(this, &OAIDbsApiRequest::updateOrderStatuses, handler.data(), &OAIDbsApiHandler::updateOrderStatuses);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOrderStatusesRequest oai_update_order_statuses_request;
    ::OpenAPI::fromJsonValue(oai_update_order_statuses_request, obj);
    

    Q_EMIT updateOrderStatuses(campaign_id, oai_update_order_statuses_request);
}


void OAIDbsApiRequest::updateOrderStorageLimitRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit";
    connect(this, &OAIDbsApiRequest::updateOrderStorageLimit, handler.data(), &OAIDbsApiHandler::updateOrderStorageLimit);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOrderStorageLimitRequest oai_update_order_storage_limit_request;
    ::OpenAPI::fromJsonValue(oai_update_order_storage_limit_request, obj);
    

    Q_EMIT updateOrderStorageLimit(campaign_id, order_id, oai_update_order_storage_limit_request);
}


void OAIDbsApiRequest::updateOutletRequest(const QString& campaign_idstr, const QString& outlet_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets/{outletId}";
    connect(this, &OAIDbsApiRequest::updateOutlet, handler.data(), &OAIDbsApiHandler::updateOutlet);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 outlet_id;
    fromStringValue(outlet_idstr, outlet_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIChangeOutletRequest oai_change_outlet_request;
    ::OpenAPI::fromJsonValue(oai_change_outlet_request, obj);
    

    Q_EMIT updateOutlet(campaign_id, outlet_id, oai_change_outlet_request);
}


void OAIDbsApiRequest::updateOutletLicensesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/outlets/licenses";
    connect(this, &OAIDbsApiRequest::updateOutletLicenses, handler.data(), &OAIDbsApiHandler::updateOutletLicenses);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateOutletLicenseRequest oai_update_outlet_license_request;
    ::OpenAPI::fromJsonValue(oai_update_outlet_license_request, obj);
    

    Q_EMIT updateOutletLicenses(campaign_id, oai_update_outlet_license_request);
}


void OAIDbsApiRequest::updatePricesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offer-prices/updates";
    connect(this, &OAIDbsApiRequest::updatePrices, handler.data(), &OAIDbsApiHandler::updatePrices);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdatePricesRequest oai_update_prices_request;
    ::OpenAPI::fromJsonValue(oai_update_prices_request, obj);
    

    Q_EMIT updatePrices(campaign_id, oai_update_prices_request);
}


void OAIDbsApiRequest::updatePromoOffersRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/promos/offers/update";
    connect(this, &OAIDbsApiRequest::updatePromoOffers, handler.data(), &OAIDbsApiHandler::updatePromoOffers);

    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdatePromoOffersRequest oai_update_promo_offers_request;
    ::OpenAPI::fromJsonValue(oai_update_promo_offers_request, obj);
    

    Q_EMIT updatePromoOffers(business_id, oai_update_promo_offers_request);
}


void OAIDbsApiRequest::updateStocksRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/stocks";
    connect(this, &OAIDbsApiRequest::updateStocks, handler.data(), &OAIDbsApiHandler::updateStocks);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateStocksRequest oai_update_stocks_request;
    ::OpenAPI::fromJsonValue(oai_update_stocks_request, obj);
    

    Q_EMIT updateStocks(campaign_id, oai_update_stocks_request);
}



void OAIDbsApiRequest::acceptOrderCancellationResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::addHiddenOffersResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::addOffersToArchiveResponse(const OAIAddOffersToArchiveResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::calculateTariffsResponse(const OAICalculateTariffsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::confirmBusinessPricesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::confirmCampaignPricesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::createChatResponse(const OAICreateChatResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::createOutletResponse(const OAICreateOutletResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteCampaignOffersResponse(const OAIDeleteCampaignOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteGoodsFeedbackCommentResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteHiddenOffersResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteOffersResponse(const OAIDeleteOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteOffersFromArchiveResponse(const OAIDeleteOffersFromArchiveResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteOutletResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteOutletLicensesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deletePromoOffersResponse(const OAIDeletePromoOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateBoostConsolidatedReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateCompetitorsPositionReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateGoodsFeedbackReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateMassOrderLabelsReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateOrderLabelResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateOrderLabelsResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generatePricesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateShelfsStatisticsReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateShowsSalesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateStocksOnWarehousesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateUnitedMarketplaceServicesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateUnitedNettingReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateUnitedOrdersReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getAllOffersResponse(const OAIGetAllOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getBidsInfoForBusinessResponse(const OAIGetBidsInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getBidsRecommendationsResponse(const OAIGetBidsRecommendationsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getBusinessQuarantineOffersResponse(const OAIGetQuarantineOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getBusinessSettingsResponse(const OAIGetBusinessSettingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignResponse(const OAIGetCampaignResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignLoginsResponse(const OAIGetCampaignLoginsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignOffersResponse(const OAIGetCampaignOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignQuarantineOffersResponse(const OAIGetQuarantineOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignRegionResponse(const OAIGetCampaignRegionResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignSettingsResponse(const OAIGetCampaignSettingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignsResponse(const OAIGetCampaignsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignsByLoginResponse(const OAIGetCampaignsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCategoriesMaxSaleQuantumResponse(const OAIGetCategoriesMaxSaleQuantumResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCategoriesTreeResponse(const OAIGetCategoriesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCategoryContentParametersResponse(const OAIGetCategoryContentParametersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getChatHistoryResponse(const OAIGetChatHistoryResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getChatsResponse(const OAIGetChatsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getDeliveryServicesResponse(const OAIGetDeliveryServicesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getFeedResponse(const OAIGetFeedResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getFeedIndexLogsResponse(const OAIGetFeedIndexLogsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getFeedbackAndCommentUpdatesResponse(const OAIGetFeedbackListResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getFeedsResponse(const OAIGetFeedsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getGoodsFeedbackCommentsResponse(const OAIGetGoodsFeedbackCommentsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getGoodsFeedbacksResponse(const OAIGetGoodsFeedbackResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getGoodsStatsResponse(const OAIGetGoodsStatsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getHiddenOffersResponse(const OAIGetHiddenOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getModelResponse(const OAIGetModelsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getModelOffersResponse(const OAIGetModelsOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getModelsResponse(const OAIGetModelsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getModelsOffersResponse(const OAIGetModelsOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOfferCardsContentStatusResponse(const OAIGetOfferCardsContentStatusResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOfferMappingEntriesResponse(const OAIGetOfferMappingEntriesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOfferMappingsResponse(const OAIGetOfferMappingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOfferRecommendationsResponse(const OAIGetOfferRecommendationsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOffersResponse(const OAIGetOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrderResponse(const OAIGetOrderResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrderBusinessBuyerInfoResponse(const OAIGetBusinessBuyerInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrderBusinessDocumentsInfoResponse(const OAIGetBusinessDocumentsInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrderBuyerInfoResponse(const OAIGetOrderBuyerInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrderLabelsDataResponse(const OAIGetOrderLabelsDataResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrdersResponse(const OAIGetOrdersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrdersStatsResponse(const OAIGetOrdersStatsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOutletResponse(const OAIGetOutletResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOutletLicensesResponse(const OAIGetOutletLicensesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOutletsResponse(const OAIGetOutletsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getPricesResponse(const OAIGetPricesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getPricesByOfferIdsResponse(const OAIGetPricesByOfferIdsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getPromoOffersResponse(const OAIGetPromoOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getPromosResponse(const OAIGetPromosResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getQualityRatingDetailsResponse(const OAIGetQualityRatingDetailsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getQualityRatingsResponse(const OAIGetQualityRatingResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getReportInfoResponse(const OAIGetReportInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getReturnResponse(const OAIGetReturnResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getReturnApplicationResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getReturnPhotoResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getReturnsResponse(const OAIGetReturnsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getStocksResponse(const OAIGetWarehouseStocksResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getSuggestedOfferMappingEntriesResponse(const OAIGetSuggestedOfferMappingEntriesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getSuggestedOfferMappingsResponse(const OAIGetSuggestedOfferMappingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getSuggestedPricesResponse(const OAISuggestPricesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getWarehousesResponse(const OAIGetWarehousesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::provideOrderDigitalCodesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::provideOrderItemIdentifiersResponse(const OAIProvideOrderItemIdentifiersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::putBidsForBusinessResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::putBidsForCampaignResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::refreshFeedResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::searchModelsResponse(const OAISearchModelsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::searchRegionChildrenResponse(const OAIGetRegionWithChildrenResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::searchRegionsByIdResponse(const OAIGetRegionsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::searchRegionsByNameResponse(const OAIGetRegionsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::sendFileToChatResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::sendMessageToChatResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setFeedParamsResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setOrderBoxLayoutResponse(const OAISetOrderBoxLayoutResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setOrderDeliveryDateResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setOrderDeliveryTrackCodeResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setOrderShipmentBoxesResponse(const OAISetOrderShipmentBoxesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setReturnDecisionResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::skipGoodsFeedbacksReactionResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::submitReturnDecisionResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateBusinessPricesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateCampaignOffersResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateGoodsFeedbackCommentResponse(const OAIUpdateGoodsFeedbackCommentResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOfferContentResponse(const OAIUpdateOfferContentResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOfferMappingEntriesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOfferMappingsResponse(const OAIUpdateOfferMappingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOrderItemsResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOrderStatusResponse(const OAIUpdateOrderStatusResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOrderStatusesResponse(const OAIUpdateOrderStatusesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOrderStorageLimitResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOutletResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOutletLicensesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updatePricesResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updatePromoOffersResponse(const OAIUpdatePromoOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateStocksResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIDbsApiRequest::acceptOrderCancellationError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::addHiddenOffersError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::addOffersToArchiveError(const OAIAddOffersToArchiveResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::calculateTariffsError(const OAICalculateTariffsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::confirmBusinessPricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::confirmCampaignPricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::createChatError(const OAICreateChatResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::createOutletError(const OAICreateOutletResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteCampaignOffersError(const OAIDeleteCampaignOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteGoodsFeedbackCommentError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteHiddenOffersError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteOffersError(const OAIDeleteOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteOffersFromArchiveError(const OAIDeleteOffersFromArchiveResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteOutletError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deleteOutletLicensesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::deletePromoOffersError(const OAIDeletePromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateBoostConsolidatedReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateCompetitorsPositionReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateGoodsFeedbackReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateMassOrderLabelsReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateOrderLabelError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateOrderLabelsError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generatePricesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateShelfsStatisticsReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateShowsSalesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateStocksOnWarehousesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateUnitedMarketplaceServicesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateUnitedNettingReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::generateUnitedOrdersReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getAllOffersError(const OAIGetAllOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getBidsInfoForBusinessError(const OAIGetBidsInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getBidsRecommendationsError(const OAIGetBidsRecommendationsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getBusinessQuarantineOffersError(const OAIGetQuarantineOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getBusinessSettingsError(const OAIGetBusinessSettingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignError(const OAIGetCampaignResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignLoginsError(const OAIGetCampaignLoginsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignOffersError(const OAIGetCampaignOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignQuarantineOffersError(const OAIGetQuarantineOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignRegionError(const OAIGetCampaignRegionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignSettingsError(const OAIGetCampaignSettingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignsError(const OAIGetCampaignsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCampaignsByLoginError(const OAIGetCampaignsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCategoriesMaxSaleQuantumError(const OAIGetCategoriesMaxSaleQuantumResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCategoriesTreeError(const OAIGetCategoriesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getCategoryContentParametersError(const OAIGetCategoryContentParametersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getChatHistoryError(const OAIGetChatHistoryResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getChatsError(const OAIGetChatsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getDeliveryServicesError(const OAIGetDeliveryServicesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getFeedError(const OAIGetFeedResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getFeedIndexLogsError(const OAIGetFeedIndexLogsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getFeedbackAndCommentUpdatesError(const OAIGetFeedbackListResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getFeedsError(const OAIGetFeedsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getGoodsFeedbackCommentsError(const OAIGetGoodsFeedbackCommentsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getGoodsFeedbacksError(const OAIGetGoodsFeedbackResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getGoodsStatsError(const OAIGetGoodsStatsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getHiddenOffersError(const OAIGetHiddenOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getModelError(const OAIGetModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getModelOffersError(const OAIGetModelsOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getModelsError(const OAIGetModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getModelsOffersError(const OAIGetModelsOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOfferCardsContentStatusError(const OAIGetOfferCardsContentStatusResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOfferMappingEntriesError(const OAIGetOfferMappingEntriesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOfferMappingsError(const OAIGetOfferMappingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOfferRecommendationsError(const OAIGetOfferRecommendationsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOffersError(const OAIGetOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrderError(const OAIGetOrderResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrderBusinessBuyerInfoError(const OAIGetBusinessBuyerInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrderBusinessDocumentsInfoError(const OAIGetBusinessDocumentsInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrderBuyerInfoError(const OAIGetOrderBuyerInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrderLabelsDataError(const OAIGetOrderLabelsDataResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrdersError(const OAIGetOrdersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOrdersStatsError(const OAIGetOrdersStatsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOutletError(const OAIGetOutletResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOutletLicensesError(const OAIGetOutletLicensesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getOutletsError(const OAIGetOutletsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getPricesError(const OAIGetPricesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getPricesByOfferIdsError(const OAIGetPricesByOfferIdsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getPromoOffersError(const OAIGetPromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getPromosError(const OAIGetPromosResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getQualityRatingDetailsError(const OAIGetQualityRatingDetailsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getQualityRatingsError(const OAIGetQualityRatingResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getReportInfoError(const OAIGetReportInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getReturnError(const OAIGetReturnResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getReturnApplicationError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getReturnPhotoError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getReturnsError(const OAIGetReturnsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getStocksError(const OAIGetWarehouseStocksResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getSuggestedOfferMappingEntriesError(const OAIGetSuggestedOfferMappingEntriesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getSuggestedOfferMappingsError(const OAIGetSuggestedOfferMappingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getSuggestedPricesError(const OAISuggestPricesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::getWarehousesError(const OAIGetWarehousesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::provideOrderDigitalCodesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::provideOrderItemIdentifiersError(const OAIProvideOrderItemIdentifiersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::putBidsForBusinessError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::putBidsForCampaignError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::refreshFeedError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::searchModelsError(const OAISearchModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::searchRegionChildrenError(const OAIGetRegionWithChildrenResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::searchRegionsByIdError(const OAIGetRegionsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::searchRegionsByNameError(const OAIGetRegionsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::sendFileToChatError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::sendMessageToChatError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setFeedParamsError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setOrderBoxLayoutError(const OAISetOrderBoxLayoutResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setOrderDeliveryDateError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setOrderDeliveryTrackCodeError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setOrderShipmentBoxesError(const OAISetOrderShipmentBoxesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::setReturnDecisionError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::skipGoodsFeedbacksReactionError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::submitReturnDecisionError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateBusinessPricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateCampaignOffersError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateGoodsFeedbackCommentError(const OAIUpdateGoodsFeedbackCommentResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOfferContentError(const OAIUpdateOfferContentResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOfferMappingEntriesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOfferMappingsError(const OAIUpdateOfferMappingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOrderItemsError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOrderStatusError(const OAIUpdateOrderStatusResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOrderStatusesError(const OAIUpdateOrderStatusesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOrderStorageLimitError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOutletError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateOutletLicensesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updatePricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updatePromoOffersError(const OAIUpdatePromoOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::updateStocksError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIDbsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDbsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
