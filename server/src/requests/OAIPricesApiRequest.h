/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPricesApiRequest_H
#define OAI_OAIPricesApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiLockedErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetPricesByOfferIdsRequest.h"
#include "OAIGetPricesByOfferIdsResponse.h"
#include "OAIGetPricesResponse.h"
#include "OAISuggestPricesRequest.h"
#include "OAISuggestPricesResponse.h"
#include "OAIUpdateBusinessPricesRequest.h"
#include "OAIUpdatePricesRequest.h"
#include <QString>
#include "OAIPricesApiHandler.h"

namespace OpenAPI {

class OAIPricesApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIPricesApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIPricesApiHandler> handler);
    virtual ~OAIPricesApiRequest();

    void getPricesRequest(const QString& campaign_id);
    void getPricesByOfferIdsRequest(const QString& campaign_id);
    void getSuggestedPricesRequest(const QString& campaign_id);
    void updateBusinessPricesRequest(const QString& business_id);
    void updatePricesRequest(const QString& campaign_id);
    

    void getPricesResponse(const OAIGetPricesResponse& res);
    void getPricesByOfferIdsResponse(const OAIGetPricesByOfferIdsResponse& res);
    void getSuggestedPricesResponse(const OAISuggestPricesResponse& res);
    void updateBusinessPricesResponse(const OAIEmptyApiResponse& res);
    void updatePricesResponse(const OAIEmptyApiResponse& res);
    

    void getPricesError(const OAIGetPricesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPricesByOfferIdsError(const OAIGetPricesByOfferIdsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSuggestedPricesError(const OAISuggestPricesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateBusinessPricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePricesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void getPrices(qint64 campaign_id, QString page_token, qint32 limit, bool archived);
    void getPricesByOfferIds(qint64 campaign_id, QString page_token, qint32 limit, OAIGetPricesByOfferIdsRequest oai_get_prices_by_offer_ids_request);
    void getSuggestedPrices(qint64 campaign_id, OAISuggestPricesRequest oai_suggest_prices_request);
    void updateBusinessPrices(qint64 business_id, OAIUpdateBusinessPricesRequest oai_update_business_prices_request);
    void updatePrices(qint64 campaign_id, OAIUpdatePricesRequest oai_update_prices_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIPricesApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIPricesApiRequest_H
