/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIOffersApiRequest.h"

namespace OpenAPI {

OAIOffersApiRequest::OAIOffersApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOffersApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIOffersApiRequest::~OAIOffersApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIOffersApiRequest::~OAIOffersApiRequest()";
}

QMap<QString, QString>
OAIOffersApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIOffersApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIOffersApiRequest::getRawSocket(){
    return socket;
}


void OAIOffersApiRequest::deleteCampaignOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/delete";
    connect(this, &OAIOffersApiRequest::deleteCampaignOffers, handler.data(), &OAIOffersApiHandler::deleteCampaignOffers);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteCampaignOffersRequest oai_delete_campaign_offers_request;
    ::OpenAPI::fromJsonValue(oai_delete_campaign_offers_request, obj);
    

    Q_EMIT deleteCampaignOffers(campaign_id, oai_delete_campaign_offers_request);
}


void OAIOffersApiRequest::getAllOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/all";
    connect(this, &OAIOffersApiRequest::getAllOffers, handler.data(), &OAIOffersApiHandler::getAllOffers);

    
    qint64 feed_id;
    if(socket->queryString().keys().contains("feed_id")){
        fromStringValue(socket->queryString().value("feed_id"), feed_id);
    }
    
    qint32 chunk;
    if(socket->queryString().keys().contains("chunk")){
        fromStringValue(socket->queryString().value("chunk"), chunk);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getAllOffers(campaign_id, feed_id, chunk);
}


void OAIOffersApiRequest::getCampaignOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers";
    connect(this, &OAIOffersApiRequest::getCampaignOffers, handler.data(), &OAIOffersApiHandler::getCampaignOffers);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetCampaignOffersRequest oai_get_campaign_offers_request;
    ::OpenAPI::fromJsonValue(oai_get_campaign_offers_request, obj);
    

    Q_EMIT getCampaignOffers(campaign_id, oai_get_campaign_offers_request, page_token, limit);
}


void OAIOffersApiRequest::getOfferRecommendationsRequest(const QString& business_idstr){
    qDebug() << "/businesses/{businessId}/offers/recommendations";
    connect(this, &OAIOffersApiRequest::getOfferRecommendations, handler.data(), &OAIOffersApiHandler::getOfferRecommendations);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    qint64 business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetOfferRecommendationsRequest oai_get_offer_recommendations_request;
    ::OpenAPI::fromJsonValue(oai_get_offer_recommendations_request, obj);
    

    Q_EMIT getOfferRecommendations(business_id, oai_get_offer_recommendations_request, page_token, limit);
}


void OAIOffersApiRequest::getOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers";
    connect(this, &OAIOffersApiRequest::getOffers, handler.data(), &OAIOffersApiHandler::getOffers);

    
    QString query;
    if(socket->queryString().keys().contains("query")){
        fromStringValue(socket->queryString().value("query"), query);
    }
    
    qint64 feed_id;
    if(socket->queryString().keys().contains("feed_id")){
        fromStringValue(socket->queryString().value("feed_id"), feed_id);
    }
    
    QString shop_category_id;
    if(socket->queryString().keys().contains("shop_category_id")){
        fromStringValue(socket->queryString().value("shop_category_id"), shop_category_id);
    }
    
    OAICurrencyType currency;
    if(socket->queryString().keys().contains("currency")){
        fromStringValue(socket->queryString().value("currency"), currency);
    }
    
    bool matched;
    if(socket->queryString().keys().contains("matched")){
        fromStringValue(socket->queryString().value("matched"), matched);
    }
    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getOffers(campaign_id, query, feed_id, shop_category_id, currency, matched, page, page_size);
}


void OAIOffersApiRequest::updateCampaignOffersRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/offers/update";
    connect(this, &OAIOffersApiRequest::updateCampaignOffers, handler.data(), &OAIOffersApiHandler::updateCampaignOffers);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateCampaignOffersRequest oai_update_campaign_offers_request;
    ::OpenAPI::fromJsonValue(oai_update_campaign_offers_request, obj);
    

    Q_EMIT updateCampaignOffers(campaign_id, oai_update_campaign_offers_request);
}



void OAIOffersApiRequest::deleteCampaignOffersResponse(const OAIDeleteCampaignOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOffersApiRequest::getAllOffersResponse(const OAIGetAllOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOffersApiRequest::getCampaignOffersResponse(const OAIGetCampaignOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOffersApiRequest::getOfferRecommendationsResponse(const OAIGetOfferRecommendationsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOffersApiRequest::getOffersResponse(const OAIGetOffersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOffersApiRequest::updateCampaignOffersResponse(const OAIEmptyApiResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOffersApiRequest::deleteCampaignOffersError(const OAIDeleteCampaignOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOffersApiRequest::getAllOffersError(const OAIGetAllOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOffersApiRequest::getCampaignOffersError(const OAIGetCampaignOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOffersApiRequest::getOfferRecommendationsError(const OAIGetOfferRecommendationsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOffersApiRequest::getOffersError(const OAIGetOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOffersApiRequest::updateCampaignOffersError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOffersApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOffersApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
