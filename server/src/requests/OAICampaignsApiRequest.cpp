/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAICampaignsApiRequest.h"

namespace OpenAPI {

OAICampaignsApiRequest::OAICampaignsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAICampaignsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAICampaignsApiRequest::~OAICampaignsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAICampaignsApiRequest::~OAICampaignsApiRequest()";
}

QMap<QString, QString>
OAICampaignsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAICampaignsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAICampaignsApiRequest::getRawSocket(){
    return socket;
}


void OAICampaignsApiRequest::getCampaignRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}";
    connect(this, &OAICampaignsApiRequest::getCampaign, handler.data(), &OAICampaignsApiHandler::getCampaign);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaign(campaign_id);
}


void OAICampaignsApiRequest::getCampaignLoginsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/logins";
    connect(this, &OAICampaignsApiRequest::getCampaignLogins, handler.data(), &OAICampaignsApiHandler::getCampaignLogins);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaignLogins(campaign_id);
}


void OAICampaignsApiRequest::getCampaignRegionRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/region";
    connect(this, &OAICampaignsApiRequest::getCampaignRegion, handler.data(), &OAICampaignsApiHandler::getCampaignRegion);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaignRegion(campaign_id);
}


void OAICampaignsApiRequest::getCampaignSettingsRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/settings";
    connect(this, &OAICampaignsApiRequest::getCampaignSettings, handler.data(), &OAICampaignsApiHandler::getCampaignSettings);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getCampaignSettings(campaign_id);
}


void OAICampaignsApiRequest::getCampaignsRequest(){
    qDebug() << "/campaigns";
    connect(this, &OAICampaignsApiRequest::getCampaigns, handler.data(), &OAICampaignsApiHandler::getCampaigns);

    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    


    Q_EMIT getCampaigns(page, page_size);
}


void OAICampaignsApiRequest::getCampaignsByLoginRequest(const QString& loginstr){
    qDebug() << "/campaigns/by_login/{login}";
    connect(this, &OAICampaignsApiRequest::getCampaignsByLogin, handler.data(), &OAICampaignsApiHandler::getCampaignsByLogin);

    
    qint32 page;
    if(socket->queryString().keys().contains("page")){
        fromStringValue(socket->queryString().value("page"), page);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString login;
    fromStringValue(loginstr, login);
    

    Q_EMIT getCampaignsByLogin(login, page, page_size);
}



void OAICampaignsApiRequest::getCampaignResponse(const OAIGetCampaignResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::getCampaignLoginsResponse(const OAIGetCampaignLoginsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::getCampaignRegionResponse(const OAIGetCampaignRegionResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::getCampaignSettingsResponse(const OAIGetCampaignSettingsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::getCampaignsResponse(const OAIGetCampaignsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::getCampaignsByLoginResponse(const OAIGetCampaignsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICampaignsApiRequest::getCampaignError(const OAIGetCampaignResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::getCampaignLoginsError(const OAIGetCampaignLoginsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::getCampaignRegionError(const OAIGetCampaignRegionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::getCampaignSettingsError(const OAIGetCampaignSettingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::getCampaignsError(const OAIGetCampaignsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::getCampaignsByLoginError(const OAIGetCampaignsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICampaignsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
