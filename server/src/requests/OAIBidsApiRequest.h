/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBidsApiRequest_H
#define OAI_OAIBidsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetBidsInfoRequest.h"
#include "OAIGetBidsInfoResponse.h"
#include "OAIGetBidsRecommendationsRequest.h"
#include "OAIGetBidsRecommendationsResponse.h"
#include "OAIPutSkuBidsRequest.h"
#include <QString>
#include "OAIBidsApiHandler.h"

namespace OpenAPI {

class OAIBidsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIBidsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIBidsApiHandler> handler);
    virtual ~OAIBidsApiRequest();

    void getBidsInfoForBusinessRequest(const QString& business_id);
    void getBidsRecommendationsRequest(const QString& business_id);
    void putBidsForBusinessRequest(const QString& business_id);
    void putBidsForCampaignRequest(const QString& campaign_id);
    

    void getBidsInfoForBusinessResponse(const OAIGetBidsInfoResponse& res);
    void getBidsRecommendationsResponse(const OAIGetBidsRecommendationsResponse& res);
    void putBidsForBusinessResponse(const OAIEmptyApiResponse& res);
    void putBidsForCampaignResponse(const OAIEmptyApiResponse& res);
    

    void getBidsInfoForBusinessError(const OAIGetBidsInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getBidsRecommendationsError(const OAIGetBidsRecommendationsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void putBidsForBusinessError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void putBidsForCampaignError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void getBidsInfoForBusiness(qint64 business_id, QString page_token, qint32 limit, OAIGetBidsInfoRequest oai_get_bids_info_request);
    void getBidsRecommendations(qint64 business_id, OAIGetBidsRecommendationsRequest oai_get_bids_recommendations_request);
    void putBidsForBusiness(qint64 business_id, OAIPutSkuBidsRequest oai_put_sku_bids_request);
    void putBidsForCampaign(qint64 campaign_id, OAIPutSkuBidsRequest oai_put_sku_bids_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIBidsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIBidsApiRequest_H
