/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOutletsApiRequest_H
#define OAI_OAIOutletsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIChangeOutletRequest.h"
#include "OAICreateOutletResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetOutletResponse.h"
#include "OAIGetOutletsResponse.h"
#include <QString>
#include "OAIOutletsApiHandler.h"

namespace OpenAPI {

class OAIOutletsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIOutletsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOutletsApiHandler> handler);
    virtual ~OAIOutletsApiRequest();

    void createOutletRequest(const QString& campaign_id);
    void deleteOutletRequest(const QString& campaign_id, const QString& outlet_id);
    void getOutletRequest(const QString& campaign_id, const QString& outlet_id);
    void getOutletsRequest(const QString& campaign_id);
    void updateOutletRequest(const QString& campaign_id, const QString& outlet_id);
    

    void createOutletResponse(const OAICreateOutletResponse& res);
    void deleteOutletResponse(const OAIEmptyApiResponse& res);
    void getOutletResponse(const OAIGetOutletResponse& res);
    void getOutletsResponse(const OAIGetOutletsResponse& res);
    void updateOutletResponse(const OAIEmptyApiResponse& res);
    

    void createOutletError(const OAICreateOutletResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteOutletError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOutletError(const OAIGetOutletResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOutletsError(const OAIGetOutletsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateOutletError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void createOutlet(qint64 campaign_id, OAIChangeOutletRequest oai_change_outlet_request);
    void deleteOutlet(qint64 campaign_id, qint64 outlet_id);
    void getOutlet(qint64 campaign_id, qint64 outlet_id);
    void getOutlets(qint64 campaign_id, QString page_token, qint64 region_id, QString shop_outlet_code, qint64 region_id2);
    void updateOutlet(qint64 campaign_id, qint64 outlet_id, OAIChangeOutletRequest oai_change_outlet_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIOutletsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIOutletsApiRequest_H
