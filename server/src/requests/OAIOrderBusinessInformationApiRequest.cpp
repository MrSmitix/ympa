/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIOrderBusinessInformationApiRequest.h"

namespace OpenAPI {

OAIOrderBusinessInformationApiRequest::OAIOrderBusinessInformationApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOrderBusinessInformationApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIOrderBusinessInformationApiRequest::~OAIOrderBusinessInformationApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIOrderBusinessInformationApiRequest::~OAIOrderBusinessInformationApiRequest()";
}

QMap<QString, QString>
OAIOrderBusinessInformationApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIOrderBusinessInformationApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIOrderBusinessInformationApiRequest::getRawSocket(){
    return socket;
}


void OAIOrderBusinessInformationApiRequest::getOrderBusinessBuyerInfoRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/business-buyer";
    connect(this, &OAIOrderBusinessInformationApiRequest::getOrderBusinessBuyerInfo, handler.data(), &OAIOrderBusinessInformationApiHandler::getOrderBusinessBuyerInfo);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrderBusinessBuyerInfo(campaign_id, order_id);
}


void OAIOrderBusinessInformationApiRequest::getOrderBusinessDocumentsInfoRequest(const QString& campaign_idstr, const QString& order_idstr){
    qDebug() << "/campaigns/{campaignId}/orders/{orderId}/documents";
    connect(this, &OAIOrderBusinessInformationApiRequest::getOrderBusinessDocumentsInfo, handler.data(), &OAIOrderBusinessInformationApiHandler::getOrderBusinessDocumentsInfo);

    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
        qint64 order_id;
    fromStringValue(order_idstr, order_id);
    

    Q_EMIT getOrderBusinessDocumentsInfo(campaign_id, order_id);
}



void OAIOrderBusinessInformationApiRequest::getOrderBusinessBuyerInfoResponse(const OAIGetBusinessBuyerInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderBusinessInformationApiRequest::getOrderBusinessDocumentsInfoResponse(const OAIGetBusinessDocumentsInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOrderBusinessInformationApiRequest::getOrderBusinessBuyerInfoError(const OAIGetBusinessBuyerInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderBusinessInformationApiRequest::getOrderBusinessDocumentsInfoError(const OAIGetBusinessDocumentsInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOrderBusinessInformationApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOrderBusinessInformationApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
