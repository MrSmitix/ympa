/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAICategoriesApiRequest.h"

namespace OpenAPI {

OAICategoriesApiRequest::OAICategoriesApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAICategoriesApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAICategoriesApiRequest::~OAICategoriesApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAICategoriesApiRequest::~OAICategoriesApiRequest()";
}

QMap<QString, QString>
OAICategoriesApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAICategoriesApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAICategoriesApiRequest::getRawSocket(){
    return socket;
}


void OAICategoriesApiRequest::getCategoriesMaxSaleQuantumRequest(){
    qDebug() << "/categories/max-sale-quantum";
    connect(this, &OAICategoriesApiRequest::getCategoriesMaxSaleQuantum, handler.data(), &OAICategoriesApiHandler::getCategoriesMaxSaleQuantum);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetCategoriesMaxSaleQuantumRequest oai_get_categories_max_sale_quantum_request;
    ::OpenAPI::fromJsonValue(oai_get_categories_max_sale_quantum_request, obj);
    

    Q_EMIT getCategoriesMaxSaleQuantum(oai_get_categories_max_sale_quantum_request);
}


void OAICategoriesApiRequest::getCategoriesTreeRequest(){
    qDebug() << "/categories/tree";
    connect(this, &OAICategoriesApiRequest::getCategoriesTree, handler.data(), &OAICategoriesApiHandler::getCategoriesTree);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGetCategoriesRequest oai_get_categories_request;
    ::OpenAPI::fromJsonValue(oai_get_categories_request, obj);
    

    Q_EMIT getCategoriesTree(oai_get_categories_request);
}



void OAICategoriesApiRequest::getCategoriesMaxSaleQuantumResponse(const OAIGetCategoriesMaxSaleQuantumResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICategoriesApiRequest::getCategoriesTreeResponse(const OAIGetCategoriesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICategoriesApiRequest::getCategoriesMaxSaleQuantumError(const OAIGetCategoriesMaxSaleQuantumResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICategoriesApiRequest::getCategoriesTreeError(const OAIGetCategoriesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICategoriesApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICategoriesApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
