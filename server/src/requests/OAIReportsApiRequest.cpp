/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIReportsApiRequest.h"

namespace OpenAPI {

OAIReportsApiRequest::OAIReportsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIReportsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIReportsApiRequest::~OAIReportsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIReportsApiRequest::~OAIReportsApiRequest()";
}

QMap<QString, QString>
OAIReportsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIReportsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIReportsApiRequest::getRawSocket(){
    return socket;
}


void OAIReportsApiRequest::generateBoostConsolidatedReportRequest(){
    qDebug() << "/reports/boost-consolidated/generate";
    connect(this, &OAIReportsApiRequest::generateBoostConsolidatedReport, handler.data(), &OAIReportsApiHandler::generateBoostConsolidatedReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateBoostConsolidatedRequest oai_generate_boost_consolidated_request;
    ::OpenAPI::fromJsonValue(oai_generate_boost_consolidated_request, obj);
    

    Q_EMIT generateBoostConsolidatedReport(oai_generate_boost_consolidated_request, format);
}


void OAIReportsApiRequest::generateCompetitorsPositionReportRequest(){
    qDebug() << "/reports/competitors-position/generate";
    connect(this, &OAIReportsApiRequest::generateCompetitorsPositionReport, handler.data(), &OAIReportsApiHandler::generateCompetitorsPositionReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateCompetitorsPositionReportRequest oai_generate_competitors_position_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_competitors_position_report_request, obj);
    

    Q_EMIT generateCompetitorsPositionReport(oai_generate_competitors_position_report_request, format);
}


void OAIReportsApiRequest::generateGoodsFeedbackReportRequest(){
    qDebug() << "/reports/goods-feedback/generate";
    connect(this, &OAIReportsApiRequest::generateGoodsFeedbackReport, handler.data(), &OAIReportsApiHandler::generateGoodsFeedbackReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateGoodsFeedbackRequest oai_generate_goods_feedback_request;
    ::OpenAPI::fromJsonValue(oai_generate_goods_feedback_request, obj);
    

    Q_EMIT generateGoodsFeedbackReport(oai_generate_goods_feedback_request, format);
}


void OAIReportsApiRequest::generateGoodsMovementReportRequest(){
    qDebug() << "/reports/goods-movement/generate";
    connect(this, &OAIReportsApiRequest::generateGoodsMovementReport, handler.data(), &OAIReportsApiHandler::generateGoodsMovementReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateGoodsMovementReportRequest oai_generate_goods_movement_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_goods_movement_report_request, obj);
    

    Q_EMIT generateGoodsMovementReport(oai_generate_goods_movement_report_request, format);
}


void OAIReportsApiRequest::generateGoodsRealizationReportRequest(){
    qDebug() << "/reports/goods-realization/generate";
    connect(this, &OAIReportsApiRequest::generateGoodsRealizationReport, handler.data(), &OAIReportsApiHandler::generateGoodsRealizationReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateGoodsRealizationReportRequest oai_generate_goods_realization_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_goods_realization_report_request, obj);
    

    Q_EMIT generateGoodsRealizationReport(oai_generate_goods_realization_report_request, format);
}


void OAIReportsApiRequest::generateGoodsTurnoverReportRequest(){
    qDebug() << "/reports/goods-turnover/generate";
    connect(this, &OAIReportsApiRequest::generateGoodsTurnoverReport, handler.data(), &OAIReportsApiHandler::generateGoodsTurnoverReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateGoodsTurnoverRequest oai_generate_goods_turnover_request;
    ::OpenAPI::fromJsonValue(oai_generate_goods_turnover_request, obj);
    

    Q_EMIT generateGoodsTurnoverReport(oai_generate_goods_turnover_request, format);
}


void OAIReportsApiRequest::generateMassOrderLabelsReportRequest(){
    qDebug() << "/reports/documents/labels/generate";
    connect(this, &OAIReportsApiRequest::generateMassOrderLabelsReport, handler.data(), &OAIReportsApiHandler::generateMassOrderLabelsReport);

    
    OAIPageFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateMassOrderLabelsRequest oai_generate_mass_order_labels_request;
    ::OpenAPI::fromJsonValue(oai_generate_mass_order_labels_request, obj);
    

    Q_EMIT generateMassOrderLabelsReport(oai_generate_mass_order_labels_request, format);
}


void OAIReportsApiRequest::generatePricesReportRequest(){
    qDebug() << "/reports/prices/generate";
    connect(this, &OAIReportsApiRequest::generatePricesReport, handler.data(), &OAIReportsApiHandler::generatePricesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGeneratePricesReportRequest oai_generate_prices_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_prices_report_request, obj);
    

    Q_EMIT generatePricesReport(oai_generate_prices_report_request, format);
}


void OAIReportsApiRequest::generateShelfsStatisticsReportRequest(){
    qDebug() << "/reports/shelf-statistics/generate";
    connect(this, &OAIReportsApiRequest::generateShelfsStatisticsReport, handler.data(), &OAIReportsApiHandler::generateShelfsStatisticsReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateShelfsStatisticsRequest oai_generate_shelfs_statistics_request;
    ::OpenAPI::fromJsonValue(oai_generate_shelfs_statistics_request, obj);
    

    Q_EMIT generateShelfsStatisticsReport(oai_generate_shelfs_statistics_request, format);
}


void OAIReportsApiRequest::generateShipmentListDocumentReportRequest(){
    qDebug() << "/reports/documents/shipment-list/generate";
    connect(this, &OAIReportsApiRequest::generateShipmentListDocumentReport, handler.data(), &OAIReportsApiHandler::generateShipmentListDocumentReport);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateShipmentListDocumentReportRequest oai_generate_shipment_list_document_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_shipment_list_document_report_request, obj);
    

    Q_EMIT generateShipmentListDocumentReport(oai_generate_shipment_list_document_report_request);
}


void OAIReportsApiRequest::generateShowsSalesReportRequest(){
    qDebug() << "/reports/shows-sales/generate";
    connect(this, &OAIReportsApiRequest::generateShowsSalesReport, handler.data(), &OAIReportsApiHandler::generateShowsSalesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateShowsSalesReportRequest oai_generate_shows_sales_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_shows_sales_report_request, obj);
    

    Q_EMIT generateShowsSalesReport(oai_generate_shows_sales_report_request, format);
}


void OAIReportsApiRequest::generateStocksOnWarehousesReportRequest(){
    qDebug() << "/reports/stocks-on-warehouses/generate";
    connect(this, &OAIReportsApiRequest::generateStocksOnWarehousesReport, handler.data(), &OAIReportsApiHandler::generateStocksOnWarehousesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateStocksOnWarehousesReportRequest oai_generate_stocks_on_warehouses_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_stocks_on_warehouses_report_request, obj);
    

    Q_EMIT generateStocksOnWarehousesReport(oai_generate_stocks_on_warehouses_report_request, format);
}


void OAIReportsApiRequest::generateUnitedMarketplaceServicesReportRequest(){
    qDebug() << "/reports/united-marketplace-services/generate";
    connect(this, &OAIReportsApiRequest::generateUnitedMarketplaceServicesReport, handler.data(), &OAIReportsApiHandler::generateUnitedMarketplaceServicesReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateUnitedMarketplaceServicesReportRequest oai_generate_united_marketplace_services_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_united_marketplace_services_report_request, obj);
    

    Q_EMIT generateUnitedMarketplaceServicesReport(oai_generate_united_marketplace_services_report_request, format);
}


void OAIReportsApiRequest::generateUnitedNettingReportRequest(){
    qDebug() << "/reports/united-netting/generate";
    connect(this, &OAIReportsApiRequest::generateUnitedNettingReport, handler.data(), &OAIReportsApiHandler::generateUnitedNettingReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateUnitedNettingReportRequest oai_generate_united_netting_report_request;
    ::OpenAPI::fromJsonValue(oai_generate_united_netting_report_request, obj);
    

    Q_EMIT generateUnitedNettingReport(oai_generate_united_netting_report_request, format);
}


void OAIReportsApiRequest::generateUnitedOrdersReportRequest(){
    qDebug() << "/reports/united-orders/generate";
    connect(this, &OAIReportsApiRequest::generateUnitedOrdersReport, handler.data(), &OAIReportsApiHandler::generateUnitedOrdersReport);

    
    OAIReportFormatType format;
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIGenerateUnitedOrdersRequest oai_generate_united_orders_request;
    ::OpenAPI::fromJsonValue(oai_generate_united_orders_request, obj);
    

    Q_EMIT generateUnitedOrdersReport(oai_generate_united_orders_request, format);
}


void OAIReportsApiRequest::getReportInfoRequest(const QString& report_idstr){
    qDebug() << "/reports/info/{reportId}";
    connect(this, &OAIReportsApiRequest::getReportInfo, handler.data(), &OAIReportsApiHandler::getReportInfo);

    
    QString report_id;
    fromStringValue(report_idstr, report_id);
    

    Q_EMIT getReportInfo(report_id);
}



void OAIReportsApiRequest::generateBoostConsolidatedReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateCompetitorsPositionReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateGoodsFeedbackReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateGoodsMovementReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateGoodsRealizationReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateGoodsTurnoverReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateMassOrderLabelsReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generatePricesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateShelfsStatisticsReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateShipmentListDocumentReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateShowsSalesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateStocksOnWarehousesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateUnitedMarketplaceServicesReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateUnitedNettingReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateUnitedOrdersReportResponse(const OAIGenerateReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::getReportInfoResponse(const OAIGetReportInfoResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIReportsApiRequest::generateBoostConsolidatedReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateCompetitorsPositionReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateGoodsFeedbackReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateGoodsMovementReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateGoodsRealizationReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateGoodsTurnoverReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateMassOrderLabelsReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generatePricesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateShelfsStatisticsReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateShipmentListDocumentReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateShowsSalesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateStocksOnWarehousesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateUnitedMarketplaceServicesReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateUnitedNettingReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::generateUnitedOrdersReportError(const OAIGenerateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::getReportInfoError(const OAIGetReportInfoResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIReportsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIReportsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
