/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReturnsApiRequest_H
#define OAI_OAIReturnsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetReturnResponse.h"
#include "OAIGetReturnsResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIRefundStatusType.h"
#include "OAIReturnType.h"
#include "OAISetReturnDecisionRequest.h"
#include <QList>
#include <QString>
#include "OAIReturnsApiHandler.h"

namespace OpenAPI {

class OAIReturnsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIReturnsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIReturnsApiHandler> handler);
    virtual ~OAIReturnsApiRequest();

    void getReturnRequest(const QString& campaign_id, const QString& order_id, const QString& return_id);
    void getReturnApplicationRequest(const QString& campaign_id, const QString& order_id, const QString& return_id);
    void getReturnPhotoRequest(const QString& campaign_id, const QString& order_id, const QString& return_id, const QString& item_id, const QString& image_hash);
    void getReturnsRequest(const QString& campaign_id);
    void setReturnDecisionRequest(const QString& campaign_id, const QString& order_id, const QString& return_id);
    void submitReturnDecisionRequest(const QString& campaign_id, const QString& order_id, const QString& return_id);
    

    void getReturnResponse(const OAIGetReturnResponse& res);
    void getReturnApplicationResponse(const OAIHttpFileElement& res);
    void getReturnPhotoResponse(const OAIHttpFileElement& res);
    void getReturnsResponse(const OAIGetReturnsResponse& res);
    void setReturnDecisionResponse(const OAIEmptyApiResponse& res);
    void submitReturnDecisionResponse(const OAIEmptyApiResponse& res);
    

    void getReturnError(const OAIGetReturnResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getReturnApplicationError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getReturnPhotoError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getReturnsError(const OAIGetReturnsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void setReturnDecisionError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void submitReturnDecisionError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void getReturn(qint64 campaign_id, qint64 order_id, qint64 return_id);
    void getReturnApplication(qint64 campaign_id, qint64 order_id, qint64 return_id);
    void getReturnPhoto(qint64 campaign_id, qint64 order_id, qint64 return_id, qint64 item_id, QString image_hash);
    void getReturns(qint64 campaign_id, QString page_token, qint32 limit, QList<qint64> order_ids, QList<OAIRefundStatusType> statuses, OAIReturnType type, QDate from_date, QDate to_date, QDate from_date2, QDate to_date2);
    void setReturnDecision(qint64 campaign_id, qint64 order_id, qint64 return_id, OAISetReturnDecisionRequest oai_set_return_decision_request);
    void submitReturnDecision(qint64 campaign_id, qint64 order_id, qint64 return_id);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIReturnsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIReturnsApiRequest_H
