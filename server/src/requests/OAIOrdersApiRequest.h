/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApiRequest_H
#define OAI_OAIOrdersApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIAcceptOrderCancellationRequest.h"
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetOrderResponse.h"
#include "OAIGetOrdersResponse.h"
#include "OAIOrderBuyerType.h"
#include "OAIOrderDeliveryDispatchType.h"
#include "OAIOrderStatusType.h"
#include "OAIOrderSubstatusType.h"
#include "OAIProvideOrderDigitalCodesRequest.h"
#include "OAIProvideOrderItemIdentifiersRequest.h"
#include "OAIProvideOrderItemIdentifiersResponse.h"
#include "OAISetOrderBoxLayoutRequest.h"
#include "OAISetOrderBoxLayoutResponse.h"
#include "OAISetOrderShipmentBoxesRequest.h"
#include "OAISetOrderShipmentBoxesResponse.h"
#include "OAIUpdateOrderItemRequest.h"
#include "OAIUpdateOrderStatusRequest.h"
#include "OAIUpdateOrderStatusResponse.h"
#include "OAIUpdateOrderStatusesRequest.h"
#include "OAIUpdateOrderStatusesResponse.h"
#include <QList>
#include <QSet>
#include <QString>
#include "OAIOrdersApiHandler.h"

namespace OpenAPI {

class OAIOrdersApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIOrdersApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOrdersApiHandler> handler);
    virtual ~OAIOrdersApiRequest();

    void acceptOrderCancellationRequest(const QString& campaign_id, const QString& order_id);
    void getOrderRequest(const QString& campaign_id, const QString& order_id);
    void getOrdersRequest(const QString& campaign_id);
    void provideOrderDigitalCodesRequest(const QString& campaign_id, const QString& order_id);
    void provideOrderItemIdentifiersRequest(const QString& campaign_id, const QString& order_id);
    void setOrderBoxLayoutRequest(const QString& campaign_id, const QString& order_id);
    void setOrderShipmentBoxesRequest(const QString& campaign_id, const QString& order_id, const QString& shipment_id);
    void updateOrderItemsRequest(const QString& campaign_id, const QString& order_id);
    void updateOrderStatusRequest(const QString& campaign_id, const QString& order_id);
    void updateOrderStatusesRequest(const QString& campaign_id);
    

    void acceptOrderCancellationResponse(const OAIEmptyApiResponse& res);
    void getOrderResponse(const OAIGetOrderResponse& res);
    void getOrdersResponse(const OAIGetOrdersResponse& res);
    void provideOrderDigitalCodesResponse(const OAIEmptyApiResponse& res);
    void provideOrderItemIdentifiersResponse(const OAIProvideOrderItemIdentifiersResponse& res);
    void setOrderBoxLayoutResponse(const OAISetOrderBoxLayoutResponse& res);
    void setOrderShipmentBoxesResponse(const OAISetOrderShipmentBoxesResponse& res);
    void updateOrderItemsResponse();
    void updateOrderStatusResponse(const OAIUpdateOrderStatusResponse& res);
    void updateOrderStatusesResponse(const OAIUpdateOrderStatusesResponse& res);
    

    void acceptOrderCancellationError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrderError(const OAIGetOrderResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrdersError(const OAIGetOrdersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void provideOrderDigitalCodesError(const OAIEmptyApiResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void provideOrderItemIdentifiersError(const OAIProvideOrderItemIdentifiersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void setOrderBoxLayoutError(const OAISetOrderBoxLayoutResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void setOrderShipmentBoxesError(const OAISetOrderShipmentBoxesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateOrderItemsError(QNetworkReply::NetworkError error_type, QString& error_str);
    void updateOrderStatusError(const OAIUpdateOrderStatusResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateOrderStatusesError(const OAIUpdateOrderStatusesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void acceptOrderCancellation(qint64 campaign_id, qint64 order_id, OAIAcceptOrderCancellationRequest oai_accept_order_cancellation_request);
    void getOrder(qint64 campaign_id, qint64 order_id);
    void getOrders(qint64 campaign_id, QList<qint64> order_ids, QSet<OAIOrderStatusType> status, QSet<OAIOrderSubstatusType> substatus, QDate from_date, QDate to_date, QDate supplier_shipment_date_from, QDate supplier_shipment_date_to, QDateTime updated_at_from, QDateTime updated_at_to, OAIOrderDeliveryDispatchType dispatch_type, bool fake, bool has_cis, bool only_waiting_for_cancellation_approve, bool only_estimated_delivery, OAIOrderBuyerType buyer_type, qint32 page, qint32 page_size, QString page_token, qint32 limit);
    void provideOrderDigitalCodes(qint64 campaign_id, qint64 order_id, OAIProvideOrderDigitalCodesRequest oai_provide_order_digital_codes_request);
    void provideOrderItemIdentifiers(qint64 campaign_id, qint64 order_id, OAIProvideOrderItemIdentifiersRequest oai_provide_order_item_identifiers_request);
    void setOrderBoxLayout(qint64 campaign_id, qint64 order_id, OAISetOrderBoxLayoutRequest oai_set_order_box_layout_request);
    void setOrderShipmentBoxes(qint64 campaign_id, qint64 order_id, qint64 shipment_id, OAISetOrderShipmentBoxesRequest oai_set_order_shipment_boxes_request);
    void updateOrderItems(qint64 campaign_id, qint64 order_id, OAIUpdateOrderItemRequest oai_update_order_item_request);
    void updateOrderStatus(qint64 campaign_id, qint64 order_id, OAIUpdateOrderStatusRequest oai_update_order_status_request);
    void updateOrderStatuses(qint64 campaign_id, OAIUpdateOrderStatusesRequest oai_update_order_statuses_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIOrdersApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIOrdersApiRequest_H
