/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIModelsApiRequest_H
#define OAI_OAIModelsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAICurrencyType.h"
#include "OAIGetModelsOffersResponse.h"
#include "OAIGetModelsRequest.h"
#include "OAIGetModelsResponse.h"
#include "OAISearchModelsResponse.h"
#include "OAISortOrderType.h"
#include <QString>
#include "OAIModelsApiHandler.h"

namespace OpenAPI {

class OAIModelsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIModelsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIModelsApiHandler> handler);
    virtual ~OAIModelsApiRequest();

    void getModelRequest(const QString& model_id);
    void getModelOffersRequest(const QString& model_id);
    void getModelsRequest();
    void getModelsOffersRequest();
    void searchModelsRequest();
    

    void getModelResponse(const OAIGetModelsResponse& res);
    void getModelOffersResponse(const OAIGetModelsOffersResponse& res);
    void getModelsResponse(const OAIGetModelsResponse& res);
    void getModelsOffersResponse(const OAIGetModelsOffersResponse& res);
    void searchModelsResponse(const OAISearchModelsResponse& res);
    

    void getModelError(const OAIGetModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getModelOffersError(const OAIGetModelsOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getModelsError(const OAIGetModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getModelsOffersError(const OAIGetModelsOffersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchModelsError(const OAISearchModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void getModel(qint64 model_id, qint64 region_id, OAICurrencyType currency);
    void getModelOffers(qint64 model_id, qint64 region_id, OAICurrencyType currency, OAISortOrderType order_by_price, qint32 count, qint32 page);
    void getModels(qint64 region_id, OAIGetModelsRequest oai_get_models_request, OAICurrencyType currency);
    void getModelsOffers(qint64 region_id, OAIGetModelsRequest oai_get_models_request, OAICurrencyType currency, OAISortOrderType order_by_price);
    void searchModels(QString query, qint64 region_id, OAICurrencyType currency, qint32 page, qint32 page_size);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIModelsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIModelsApiRequest_H
