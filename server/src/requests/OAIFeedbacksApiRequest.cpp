/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIFeedbacksApiRequest.h"

namespace OpenAPI {

OAIFeedbacksApiRequest::OAIFeedbacksApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIFeedbacksApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIFeedbacksApiRequest::~OAIFeedbacksApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIFeedbacksApiRequest::~OAIFeedbacksApiRequest()";
}

QMap<QString, QString>
OAIFeedbacksApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIFeedbacksApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIFeedbacksApiRequest::getRawSocket(){
    return socket;
}


void OAIFeedbacksApiRequest::getFeedbackAndCommentUpdatesRequest(const QString& campaign_idstr){
    qDebug() << "/campaigns/{campaignId}/feedback/updates";
    connect(this, &OAIFeedbacksApiRequest::getFeedbackAndCommentUpdates, handler.data(), &OAIFeedbacksApiHandler::getFeedbackAndCommentUpdates);

    
    QString page_token;
    if(socket->queryString().keys().contains("page_token")){
        fromStringValue(socket->queryString().value("page_token"), page_token);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    QDate from_date;
    if(socket->queryString().keys().contains("from_date")){
        fromStringValue(socket->queryString().value("from_date"), from_date);
    }
    
    qint64 campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    Q_EMIT getFeedbackAndCommentUpdates(campaign_id, page_token, limit, from_date);
}



void OAIFeedbacksApiRequest::getFeedbackAndCommentUpdatesResponse(const OAIGetFeedbackListResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIFeedbacksApiRequest::getFeedbackAndCommentUpdatesError(const OAIGetFeedbackListResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIFeedbacksApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFeedbacksApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
