/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICampaignsApiRequest_H
#define OAI_OAICampaignsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIGetCampaignLoginsResponse.h"
#include "OAIGetCampaignRegionResponse.h"
#include "OAIGetCampaignResponse.h"
#include "OAIGetCampaignSettingsResponse.h"
#include "OAIGetCampaignsResponse.h"
#include <QString>
#include "OAICampaignsApiHandler.h"

namespace OpenAPI {

class OAICampaignsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAICampaignsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAICampaignsApiHandler> handler);
    virtual ~OAICampaignsApiRequest();

    void getCampaignRequest(const QString& campaign_id);
    void getCampaignLoginsRequest(const QString& campaign_id);
    void getCampaignRegionRequest(const QString& campaign_id);
    void getCampaignSettingsRequest(const QString& campaign_id);
    void getCampaignsRequest();
    void getCampaignsByLoginRequest(const QString& login);
    

    void getCampaignResponse(const OAIGetCampaignResponse& res);
    void getCampaignLoginsResponse(const OAIGetCampaignLoginsResponse& res);
    void getCampaignRegionResponse(const OAIGetCampaignRegionResponse& res);
    void getCampaignSettingsResponse(const OAIGetCampaignSettingsResponse& res);
    void getCampaignsResponse(const OAIGetCampaignsResponse& res);
    void getCampaignsByLoginResponse(const OAIGetCampaignsResponse& res);
    

    void getCampaignError(const OAIGetCampaignResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCampaignLoginsError(const OAIGetCampaignLoginsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCampaignRegionError(const OAIGetCampaignRegionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCampaignSettingsError(const OAIGetCampaignSettingsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCampaignsError(const OAIGetCampaignsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCampaignsByLoginError(const OAIGetCampaignsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void getCampaign(qint64 campaign_id);
    void getCampaignLogins(qint64 campaign_id);
    void getCampaignRegion(qint64 campaign_id);
    void getCampaignSettings(qint64 campaign_id);
    void getCampaigns(qint32 page, qint32 page_size);
    void getCampaignsByLogin(QString login, qint32 page, qint32 page_size);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAICampaignsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAICampaignsApiRequest_H
