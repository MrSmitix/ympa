/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIChatsApiHandler.h"
#include "OAIChatsApiRequest.h"

namespace OpenAPI {

OAIChatsApiHandler::OAIChatsApiHandler(){

}

OAIChatsApiHandler::~OAIChatsApiHandler(){

}

void OAIChatsApiHandler::createChat(qint64 business_id, OAICreateChatRequest oai_create_chat_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_create_chat_request);
    auto reqObj = qobject_cast<OAIChatsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateChatResponse res;
        reqObj->createChatResponse(res);
    }
}
void OAIChatsApiHandler::getChatHistory(qint64 business_id, qint64 chat_id, OAIGetChatHistoryRequest oai_get_chat_history_request, QString page_token, qint32 limit) {
    Q_UNUSED(business_id);
    Q_UNUSED(chat_id);
    Q_UNUSED(oai_get_chat_history_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIChatsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetChatHistoryResponse res;
        reqObj->getChatHistoryResponse(res);
    }
}
void OAIChatsApiHandler::getChats(qint64 business_id, OAIGetChatsRequest oai_get_chats_request, QString page_token, qint32 limit) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_chats_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIChatsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetChatsResponse res;
        reqObj->getChatsResponse(res);
    }
}
void OAIChatsApiHandler::sendFileToChat(qint64 business_id, qint64 chat_id, OAIHttpFileElement file) {
    Q_UNUSED(business_id);
    Q_UNUSED(chat_id);
    Q_UNUSED(file);
    auto reqObj = qobject_cast<OAIChatsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->sendFileToChatResponse(res);
    }
}
void OAIChatsApiHandler::sendMessageToChat(qint64 business_id, qint64 chat_id, OAISendMessageToChatRequest oai_send_message_to_chat_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(chat_id);
    Q_UNUSED(oai_send_message_to_chat_request);
    auto reqObj = qobject_cast<OAIChatsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->sendMessageToChatResponse(res);
    }
}


}
