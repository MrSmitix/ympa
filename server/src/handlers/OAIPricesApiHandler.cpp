/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIPricesApiHandler.h"
#include "OAIPricesApiRequest.h"

namespace OpenAPI {

OAIPricesApiHandler::OAIPricesApiHandler(){

}

OAIPricesApiHandler::~OAIPricesApiHandler(){

}

void OAIPricesApiHandler::getPrices(qint64 campaign_id, QString page_token, qint32 limit, bool archived) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(archived);
    auto reqObj = qobject_cast<OAIPricesApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetPricesResponse res;
        reqObj->getPricesResponse(res);
    }
}
void OAIPricesApiHandler::getPricesByOfferIds(qint64 campaign_id, QString page_token, qint32 limit, OAIGetPricesByOfferIdsRequest oai_get_prices_by_offer_ids_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(oai_get_prices_by_offer_ids_request);
    auto reqObj = qobject_cast<OAIPricesApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetPricesByOfferIdsResponse res;
        reqObj->getPricesByOfferIdsResponse(res);
    }
}
void OAIPricesApiHandler::getSuggestedPrices(qint64 campaign_id, OAISuggestPricesRequest oai_suggest_prices_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_suggest_prices_request);
    auto reqObj = qobject_cast<OAIPricesApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAISuggestPricesResponse res;
        reqObj->getSuggestedPricesResponse(res);
    }
}
void OAIPricesApiHandler::updateBusinessPrices(qint64 business_id, OAIUpdateBusinessPricesRequest oai_update_business_prices_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_update_business_prices_request);
    auto reqObj = qobject_cast<OAIPricesApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->updateBusinessPricesResponse(res);
    }
}
void OAIPricesApiHandler::updatePrices(qint64 campaign_id, OAIUpdatePricesRequest oai_update_prices_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_update_prices_request);
    auto reqObj = qobject_cast<OAIPricesApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->updatePricesResponse(res);
    }
}


}
