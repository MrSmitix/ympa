/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIShipmentsApiHandler.h"
#include "OAIShipmentsApiRequest.h"

namespace OpenAPI {

OAIShipmentsApiHandler::OAIShipmentsApiHandler(){

}

OAIShipmentsApiHandler::~OAIShipmentsApiHandler(){

}

void OAIShipmentsApiHandler::confirmShipment(qint64 campaign_id, qint64 shipment_id, OAIConfirmShipmentRequest oai_confirm_shipment_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(oai_confirm_shipment_request);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->confirmShipmentResponse(res);
    }
}
void OAIShipmentsApiHandler::downloadShipmentAct(qint64 campaign_id, qint64 shipment_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentActResponse(res);
    }
}
void OAIShipmentsApiHandler::downloadShipmentDiscrepancyAct(qint64 campaign_id, qint64 shipment_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentDiscrepancyActResponse(res);
    }
}
void OAIShipmentsApiHandler::downloadShipmentInboundAct(qint64 campaign_id, qint64 shipment_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentInboundActResponse(res);
    }
}
void OAIShipmentsApiHandler::downloadShipmentPalletLabels(qint64 campaign_id, qint64 shipment_id, OAIShipmentPalletLabelPageFormatType format) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentPalletLabelsResponse(res);
    }
}
void OAIShipmentsApiHandler::downloadShipmentReceptionTransferAct(qint64 campaign_id, qint32 warehouse_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(warehouse_id);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentReceptionTransferActResponse(res);
    }
}
void OAIShipmentsApiHandler::downloadShipmentTransportationWaybill(qint64 campaign_id, qint64 shipment_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentTransportationWaybillResponse(res);
    }
}
void OAIShipmentsApiHandler::getShipment(qint64 campaign_id, qint64 shipment_id, bool cancelled_orders) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(cancelled_orders);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetShipmentResponse res;
        reqObj->getShipmentResponse(res);
    }
}
void OAIShipmentsApiHandler::getShipmentOrdersInfo(qint64 campaign_id, qint64 shipment_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetShipmentOrdersInfoResponse res;
        reqObj->getShipmentOrdersInfoResponse(res);
    }
}
void OAIShipmentsApiHandler::searchShipments(qint64 campaign_id, OAISearchShipmentsRequest oai_search_shipments_request, QString page_token, qint32 limit) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_search_shipments_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAISearchShipmentsResponse res;
        reqObj->searchShipmentsResponse(res);
    }
}
void OAIShipmentsApiHandler::setShipmentPalletsCount(qint64 campaign_id, qint64 shipment_id, OAISetShipmentPalletsCountRequest oai_set_shipment_pallets_count_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(oai_set_shipment_pallets_count_request);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->setShipmentPalletsCountResponse(res);
    }
}
void OAIShipmentsApiHandler::transferOrdersFromShipment(qint64 campaign_id, qint64 shipment_id, OAITransferOrdersFromShipmentRequest oai_transfer_orders_from_shipment_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(oai_transfer_orders_from_shipment_request);
    auto reqObj = qobject_cast<OAIShipmentsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->transferOrdersFromShipmentResponse(res);
    }
}


}
