/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIGoodsFeedbackApiHandler.h"
#include "OAIGoodsFeedbackApiRequest.h"

namespace OpenAPI {

OAIGoodsFeedbackApiHandler::OAIGoodsFeedbackApiHandler(){

}

OAIGoodsFeedbackApiHandler::~OAIGoodsFeedbackApiHandler(){

}

void OAIGoodsFeedbackApiHandler::deleteGoodsFeedbackComment(qint64 business_id, OAIDeleteGoodsFeedbackCommentRequest oai_delete_goods_feedback_comment_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_delete_goods_feedback_comment_request);
    auto reqObj = qobject_cast<OAIGoodsFeedbackApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->deleteGoodsFeedbackCommentResponse(res);
    }
}
void OAIGoodsFeedbackApiHandler::getGoodsFeedbackComments(qint64 business_id, OAIGetGoodsFeedbackCommentsRequest oai_get_goods_feedback_comments_request, QString page_token, qint32 limit) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_goods_feedback_comments_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIGoodsFeedbackApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetGoodsFeedbackCommentsResponse res;
        reqObj->getGoodsFeedbackCommentsResponse(res);
    }
}
void OAIGoodsFeedbackApiHandler::getGoodsFeedbacks(qint64 business_id, QString page_token, qint32 limit, OAIGetGoodsFeedbackRequest oai_get_goods_feedback_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(oai_get_goods_feedback_request);
    auto reqObj = qobject_cast<OAIGoodsFeedbackApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetGoodsFeedbackResponse res;
        reqObj->getGoodsFeedbacksResponse(res);
    }
}
void OAIGoodsFeedbackApiHandler::skipGoodsFeedbacksReaction(qint64 business_id, OAISkipGoodsFeedbackReactionRequest oai_skip_goods_feedback_reaction_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_skip_goods_feedback_reaction_request);
    auto reqObj = qobject_cast<OAIGoodsFeedbackApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->skipGoodsFeedbacksReactionResponse(res);
    }
}
void OAIGoodsFeedbackApiHandler::updateGoodsFeedbackComment(qint64 business_id, OAIUpdateGoodsFeedbackCommentRequest oai_update_goods_feedback_comment_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_update_goods_feedback_comment_request);
    auto reqObj = qobject_cast<OAIGoodsFeedbackApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUpdateGoodsFeedbackCommentResponse res;
        reqObj->updateGoodsFeedbackCommentResponse(res);
    }
}


}
