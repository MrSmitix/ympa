/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_APIROUTER_H
#define OAI_APIROUTER_H

#include <functional>
#include <QObject>
#include <QStringList>
#include <QSharedPointer>
#include <QList>
#include <QMultiMap>
#include <QRegularExpression>

#include <qhttpengine/socket.h>
#include <qhttpengine/handler.h>
#include <qhttpengine/qobjecthandler.h>

#include "OAIBidsApiHandler.h"
#include "OAIBusinessOfferMappingsApiHandler.h"
#include "OAIBusinessesApiHandler.h"
#include "OAICampaignsApiHandler.h"
#include "OAICategoriesApiHandler.h"
#include "OAIChatsApiHandler.h"
#include "OAIContentApiHandler.h"
#include "OAIDbsApiHandler.h"
#include "OAIDeliveryServicesApiHandler.h"
#include "OAIExpressApiHandler.h"
#include "OAIFbsApiHandler.h"
#include "OAIFbyApiHandler.h"
#include "OAIFeedbacksApiHandler.h"
#include "OAIFeedsApiHandler.h"
#include "OAIGoodsFeedbackApiHandler.h"
#include "OAIGoodsStatsApiHandler.h"
#include "OAIHiddenOffersApiHandler.h"
#include "OAIModelsApiHandler.h"
#include "OAIOfferMappingsApiHandler.h"
#include "OAIOffersApiHandler.h"
#include "OAIOrderBusinessInformationApiHandler.h"
#include "OAIOrderDeliveryApiHandler.h"
#include "OAIOrderLabelsApiHandler.h"
#include "OAIOrdersApiHandler.h"
#include "OAIOrdersStatsApiHandler.h"
#include "OAIOutletLicensesApiHandler.h"
#include "OAIOutletsApiHandler.h"
#include "OAIPriceQuarantineApiHandler.h"
#include "OAIPricesApiHandler.h"
#include "OAIPromosApiHandler.h"
#include "OAIRatingsApiHandler.h"
#include "OAIRegionsApiHandler.h"
#include "OAIReportsApiHandler.h"
#include "OAIReturnsApiHandler.h"
#include "OAIShipmentsApiHandler.h"
#include "OAIStocksApiHandler.h"
#include "OAITariffsApiHandler.h"
#include "OAIWarehousesApiHandler.h"


namespace OpenAPI {

class OAIApiRequestHandler : public  QHttpEngine::QObjectHandler
{
    Q_OBJECT
Q_SIGNALS:
    void requestReceived(QHttpEngine::Socket *socket);

protected:
    virtual void process(QHttpEngine::Socket *socket, const QString &path){
        Q_UNUSED(path);

        // If the slot requires all data to be received, check to see if this is
        // already the case, otherwise, wait until the rest of it arrives
        if (socket->bytesAvailable() >= socket->contentLength()) {
            Q_EMIT requestReceived(socket);
        } else {
            connect(socket, &QHttpEngine::Socket::readChannelFinished, [this, socket]() {
                Q_EMIT requestReceived(socket);
            });
        }
    }
};

class OAIApiRouter : public QObject
{
    Q_OBJECT
public:
    OAIApiRouter();
    virtual ~OAIApiRouter();

    void setUpRoutes();
    void processRequest(QHttpEngine::Socket *socket);
    
    void setOAIBidsApiHandler(QSharedPointer<OAIBidsApiHandler> handler);
    void setOAIBusinessOfferMappingsApiHandler(QSharedPointer<OAIBusinessOfferMappingsApiHandler> handler);
    void setOAIBusinessesApiHandler(QSharedPointer<OAIBusinessesApiHandler> handler);
    void setOAICampaignsApiHandler(QSharedPointer<OAICampaignsApiHandler> handler);
    void setOAICategoriesApiHandler(QSharedPointer<OAICategoriesApiHandler> handler);
    void setOAIChatsApiHandler(QSharedPointer<OAIChatsApiHandler> handler);
    void setOAIContentApiHandler(QSharedPointer<OAIContentApiHandler> handler);
    void setOAIDbsApiHandler(QSharedPointer<OAIDbsApiHandler> handler);
    void setOAIDeliveryServicesApiHandler(QSharedPointer<OAIDeliveryServicesApiHandler> handler);
    void setOAIExpressApiHandler(QSharedPointer<OAIExpressApiHandler> handler);
    void setOAIFbsApiHandler(QSharedPointer<OAIFbsApiHandler> handler);
    void setOAIFbyApiHandler(QSharedPointer<OAIFbyApiHandler> handler);
    void setOAIFeedbacksApiHandler(QSharedPointer<OAIFeedbacksApiHandler> handler);
    void setOAIFeedsApiHandler(QSharedPointer<OAIFeedsApiHandler> handler);
    void setOAIGoodsFeedbackApiHandler(QSharedPointer<OAIGoodsFeedbackApiHandler> handler);
    void setOAIGoodsStatsApiHandler(QSharedPointer<OAIGoodsStatsApiHandler> handler);
    void setOAIHiddenOffersApiHandler(QSharedPointer<OAIHiddenOffersApiHandler> handler);
    void setOAIModelsApiHandler(QSharedPointer<OAIModelsApiHandler> handler);
    void setOAIOfferMappingsApiHandler(QSharedPointer<OAIOfferMappingsApiHandler> handler);
    void setOAIOffersApiHandler(QSharedPointer<OAIOffersApiHandler> handler);
    void setOAIOrderBusinessInformationApiHandler(QSharedPointer<OAIOrderBusinessInformationApiHandler> handler);
    void setOAIOrderDeliveryApiHandler(QSharedPointer<OAIOrderDeliveryApiHandler> handler);
    void setOAIOrderLabelsApiHandler(QSharedPointer<OAIOrderLabelsApiHandler> handler);
    void setOAIOrdersApiHandler(QSharedPointer<OAIOrdersApiHandler> handler);
    void setOAIOrdersStatsApiHandler(QSharedPointer<OAIOrdersStatsApiHandler> handler);
    void setOAIOutletLicensesApiHandler(QSharedPointer<OAIOutletLicensesApiHandler> handler);
    void setOAIOutletsApiHandler(QSharedPointer<OAIOutletsApiHandler> handler);
    void setOAIPriceQuarantineApiHandler(QSharedPointer<OAIPriceQuarantineApiHandler> handler);
    void setOAIPricesApiHandler(QSharedPointer<OAIPricesApiHandler> handler);
    void setOAIPromosApiHandler(QSharedPointer<OAIPromosApiHandler> handler);
    void setOAIRatingsApiHandler(QSharedPointer<OAIRatingsApiHandler> handler);
    void setOAIRegionsApiHandler(QSharedPointer<OAIRegionsApiHandler> handler);
    void setOAIReportsApiHandler(QSharedPointer<OAIReportsApiHandler> handler);
    void setOAIReturnsApiHandler(QSharedPointer<OAIReturnsApiHandler> handler);
    void setOAIShipmentsApiHandler(QSharedPointer<OAIShipmentsApiHandler> handler);
    void setOAIStocksApiHandler(QSharedPointer<OAIStocksApiHandler> handler);
    void setOAITariffsApiHandler(QSharedPointer<OAITariffsApiHandler> handler);
    void setOAIWarehousesApiHandler(QSharedPointer<OAIWarehousesApiHandler> handler);
private:
    QMap<QString, std::function<void(QHttpEngine::Socket *)>> Routes;
    QMultiMap<QString, std::function<void(QHttpEngine::Socket *)>> RoutesWithPathParam;

    bool handleRequest(QHttpEngine::Socket *socket);
    bool handleRequestAndExtractPathParam(QHttpEngine::Socket *socket);

    
    QSharedPointer<OAIBidsApiHandler> mOAIBidsApiHandler;
    QSharedPointer<OAIBusinessOfferMappingsApiHandler> mOAIBusinessOfferMappingsApiHandler;
    QSharedPointer<OAIBusinessesApiHandler> mOAIBusinessesApiHandler;
    QSharedPointer<OAICampaignsApiHandler> mOAICampaignsApiHandler;
    QSharedPointer<OAICategoriesApiHandler> mOAICategoriesApiHandler;
    QSharedPointer<OAIChatsApiHandler> mOAIChatsApiHandler;
    QSharedPointer<OAIContentApiHandler> mOAIContentApiHandler;
    QSharedPointer<OAIDbsApiHandler> mOAIDbsApiHandler;
    QSharedPointer<OAIDeliveryServicesApiHandler> mOAIDeliveryServicesApiHandler;
    QSharedPointer<OAIExpressApiHandler> mOAIExpressApiHandler;
    QSharedPointer<OAIFbsApiHandler> mOAIFbsApiHandler;
    QSharedPointer<OAIFbyApiHandler> mOAIFbyApiHandler;
    QSharedPointer<OAIFeedbacksApiHandler> mOAIFeedbacksApiHandler;
    QSharedPointer<OAIFeedsApiHandler> mOAIFeedsApiHandler;
    QSharedPointer<OAIGoodsFeedbackApiHandler> mOAIGoodsFeedbackApiHandler;
    QSharedPointer<OAIGoodsStatsApiHandler> mOAIGoodsStatsApiHandler;
    QSharedPointer<OAIHiddenOffersApiHandler> mOAIHiddenOffersApiHandler;
    QSharedPointer<OAIModelsApiHandler> mOAIModelsApiHandler;
    QSharedPointer<OAIOfferMappingsApiHandler> mOAIOfferMappingsApiHandler;
    QSharedPointer<OAIOffersApiHandler> mOAIOffersApiHandler;
    QSharedPointer<OAIOrderBusinessInformationApiHandler> mOAIOrderBusinessInformationApiHandler;
    QSharedPointer<OAIOrderDeliveryApiHandler> mOAIOrderDeliveryApiHandler;
    QSharedPointer<OAIOrderLabelsApiHandler> mOAIOrderLabelsApiHandler;
    QSharedPointer<OAIOrdersApiHandler> mOAIOrdersApiHandler;
    QSharedPointer<OAIOrdersStatsApiHandler> mOAIOrdersStatsApiHandler;
    QSharedPointer<OAIOutletLicensesApiHandler> mOAIOutletLicensesApiHandler;
    QSharedPointer<OAIOutletsApiHandler> mOAIOutletsApiHandler;
    QSharedPointer<OAIPriceQuarantineApiHandler> mOAIPriceQuarantineApiHandler;
    QSharedPointer<OAIPricesApiHandler> mOAIPricesApiHandler;
    QSharedPointer<OAIPromosApiHandler> mOAIPromosApiHandler;
    QSharedPointer<OAIRatingsApiHandler> mOAIRatingsApiHandler;
    QSharedPointer<OAIRegionsApiHandler> mOAIRegionsApiHandler;
    QSharedPointer<OAIReportsApiHandler> mOAIReportsApiHandler;
    QSharedPointer<OAIReturnsApiHandler> mOAIReturnsApiHandler;
    QSharedPointer<OAIShipmentsApiHandler> mOAIShipmentsApiHandler;
    QSharedPointer<OAIStocksApiHandler> mOAIStocksApiHandler;
    QSharedPointer<OAITariffsApiHandler> mOAITariffsApiHandler;
    QSharedPointer<OAIWarehousesApiHandler> mOAIWarehousesApiHandler;
protected:
    // override this method to provide custom class derived from ApiHandler classes
    virtual void createApiHandlers();

private :
    inline QString fromQHttpEngineMethod(QHttpEngine::Socket::Method method){
        switch( method ){
            case QHttpEngine::Socket::Method::OPTIONS:
                return QStringLiteral("OPTIONS");
            case QHttpEngine::Socket::Method::GET:
                return QStringLiteral("GET");
            case QHttpEngine::Socket::Method::HEAD:
                return QStringLiteral("HEAD");
            case QHttpEngine::Socket::Method::POST:
                return QStringLiteral("POST");
            case QHttpEngine::Socket::Method::PUT:
                return QStringLiteral("PUT");
            case QHttpEngine::Socket::Method::DELETE:
                return QStringLiteral("DELETE");
            case QHttpEngine::Socket::Method::TRACE:
                return QStringLiteral("TRACE");
            case QHttpEngine::Socket::Method::CONNECT:
                return QStringLiteral("CONNECT");
        }
        return QStringLiteral("");
    }

    inline QRegularExpressionMatch getRequestMatch(QString serverTemplatePath, QString requestPath){
        QRegularExpression parExpr( R"(\{([^\/\s]+)\})" );
        serverTemplatePath.replace( parExpr, R"((?<\1>[^\/\s]+))" );
        serverTemplatePath.append("[\\/]?$");
        QRegularExpression pathExpr( serverTemplatePath );
        return pathExpr.match( requestPath );
    }

};


}

#endif // OAI_APIROUTER_H
