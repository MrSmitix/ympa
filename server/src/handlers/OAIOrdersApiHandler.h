/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApiHandler_H
#define OAI_OAIOrdersApiHandler_H

#include <QObject>

#include "OAIAcceptOrderCancellationRequest.h"
#include "OAIApiClientDataErrorResponse.h"
#include "OAIApiForbiddenErrorResponse.h"
#include "OAIApiLimitErrorResponse.h"
#include "OAIApiNotFoundErrorResponse.h"
#include "OAIApiServerErrorResponse.h"
#include "OAIApiUnauthorizedErrorResponse.h"
#include "OAIEmptyApiResponse.h"
#include "OAIGetOrderResponse.h"
#include "OAIGetOrdersResponse.h"
#include "OAIOrderBuyerType.h"
#include "OAIOrderDeliveryDispatchType.h"
#include "OAIOrderStatusType.h"
#include "OAIOrderSubstatusType.h"
#include "OAIProvideOrderDigitalCodesRequest.h"
#include "OAIProvideOrderItemIdentifiersRequest.h"
#include "OAIProvideOrderItemIdentifiersResponse.h"
#include "OAISetOrderBoxLayoutRequest.h"
#include "OAISetOrderBoxLayoutResponse.h"
#include "OAISetOrderShipmentBoxesRequest.h"
#include "OAISetOrderShipmentBoxesResponse.h"
#include "OAIUpdateOrderItemRequest.h"
#include "OAIUpdateOrderStatusRequest.h"
#include "OAIUpdateOrderStatusResponse.h"
#include "OAIUpdateOrderStatusesRequest.h"
#include "OAIUpdateOrderStatusesResponse.h"
#include <QList>
#include <QSet>
#include <QString>

namespace OpenAPI {

class OAIOrdersApiHandler : public QObject
{
    Q_OBJECT

public:
    OAIOrdersApiHandler();
    virtual ~OAIOrdersApiHandler();


public Q_SLOTS:
    virtual void acceptOrderCancellation(qint64 campaign_id, qint64 order_id, OAIAcceptOrderCancellationRequest oai_accept_order_cancellation_request);
    virtual void getOrder(qint64 campaign_id, qint64 order_id);
    virtual void getOrders(qint64 campaign_id, QList<qint64> order_ids, QSet<OAIOrderStatusType> status, QSet<OAIOrderSubstatusType> substatus, QDate from_date, QDate to_date, QDate supplier_shipment_date_from, QDate supplier_shipment_date_to, QDateTime updated_at_from, QDateTime updated_at_to, OAIOrderDeliveryDispatchType dispatch_type, bool fake, bool has_cis, bool only_waiting_for_cancellation_approve, bool only_estimated_delivery, OAIOrderBuyerType buyer_type, qint32 page, qint32 page_size, QString page_token, qint32 limit);
    virtual void provideOrderDigitalCodes(qint64 campaign_id, qint64 order_id, OAIProvideOrderDigitalCodesRequest oai_provide_order_digital_codes_request);
    virtual void provideOrderItemIdentifiers(qint64 campaign_id, qint64 order_id, OAIProvideOrderItemIdentifiersRequest oai_provide_order_item_identifiers_request);
    virtual void setOrderBoxLayout(qint64 campaign_id, qint64 order_id, OAISetOrderBoxLayoutRequest oai_set_order_box_layout_request);
    virtual void setOrderShipmentBoxes(qint64 campaign_id, qint64 order_id, qint64 shipment_id, OAISetOrderShipmentBoxesRequest oai_set_order_shipment_boxes_request);
    virtual void updateOrderItems(qint64 campaign_id, qint64 order_id, OAIUpdateOrderItemRequest oai_update_order_item_request);
    virtual void updateOrderStatus(qint64 campaign_id, qint64 order_id, OAIUpdateOrderStatusRequest oai_update_order_status_request);
    virtual void updateOrderStatuses(qint64 campaign_id, OAIUpdateOrderStatusesRequest oai_update_order_statuses_request);
    

};

}

#endif // OAI_OAIOrdersApiHandler_H
