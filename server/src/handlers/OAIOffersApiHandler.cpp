/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIOffersApiHandler.h"
#include "OAIOffersApiRequest.h"

namespace OpenAPI {

OAIOffersApiHandler::OAIOffersApiHandler(){

}

OAIOffersApiHandler::~OAIOffersApiHandler(){

}

void OAIOffersApiHandler::deleteCampaignOffers(qint64 campaign_id, OAIDeleteCampaignOffersRequest oai_delete_campaign_offers_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_delete_campaign_offers_request);
    auto reqObj = qobject_cast<OAIOffersApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeleteCampaignOffersResponse res;
        reqObj->deleteCampaignOffersResponse(res);
    }
}
void OAIOffersApiHandler::getAllOffers(qint64 campaign_id, qint64 feed_id, qint32 chunk) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(feed_id);
    Q_UNUSED(chunk);
    auto reqObj = qobject_cast<OAIOffersApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetAllOffersResponse res;
        reqObj->getAllOffersResponse(res);
    }
}
void OAIOffersApiHandler::getCampaignOffers(qint64 campaign_id, OAIGetCampaignOffersRequest oai_get_campaign_offers_request, QString page_token, qint32 limit) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_get_campaign_offers_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIOffersApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetCampaignOffersResponse res;
        reqObj->getCampaignOffersResponse(res);
    }
}
void OAIOffersApiHandler::getOfferRecommendations(qint64 business_id, OAIGetOfferRecommendationsRequest oai_get_offer_recommendations_request, QString page_token, qint32 limit) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_offer_recommendations_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIOffersApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOfferRecommendationsResponse res;
        reqObj->getOfferRecommendationsResponse(res);
    }
}
void OAIOffersApiHandler::getOffers(qint64 campaign_id, QString query, qint64 feed_id, QString shop_category_id, OAICurrencyType currency, bool matched, qint32 page, qint32 page_size) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(query);
    Q_UNUSED(feed_id);
    Q_UNUSED(shop_category_id);
    Q_UNUSED(currency);
    Q_UNUSED(matched);
    Q_UNUSED(page);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIOffersApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOffersResponse res;
        reqObj->getOffersResponse(res);
    }
}
void OAIOffersApiHandler::updateCampaignOffers(qint64 campaign_id, OAIUpdateCampaignOffersRequest oai_update_campaign_offers_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_update_campaign_offers_request);
    auto reqObj = qobject_cast<OAIOffersApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->updateCampaignOffersResponse(res);
    }
}


}
