/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIOutletsApiHandler.h"
#include "OAIOutletsApiRequest.h"

namespace OpenAPI {

OAIOutletsApiHandler::OAIOutletsApiHandler(){

}

OAIOutletsApiHandler::~OAIOutletsApiHandler(){

}

void OAIOutletsApiHandler::createOutlet(qint64 campaign_id, OAIChangeOutletRequest oai_change_outlet_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_change_outlet_request);
    auto reqObj = qobject_cast<OAIOutletsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateOutletResponse res;
        reqObj->createOutletResponse(res);
    }
}
void OAIOutletsApiHandler::deleteOutlet(qint64 campaign_id, qint64 outlet_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(outlet_id);
    auto reqObj = qobject_cast<OAIOutletsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->deleteOutletResponse(res);
    }
}
void OAIOutletsApiHandler::getOutlet(qint64 campaign_id, qint64 outlet_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(outlet_id);
    auto reqObj = qobject_cast<OAIOutletsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOutletResponse res;
        reqObj->getOutletResponse(res);
    }
}
void OAIOutletsApiHandler::getOutlets(qint64 campaign_id, QString page_token, qint64 region_id, QString shop_outlet_code, qint64 region_id2) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(page_token);
    Q_UNUSED(region_id);
    Q_UNUSED(shop_outlet_code);
    Q_UNUSED(region_id2);
    auto reqObj = qobject_cast<OAIOutletsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOutletsResponse res;
        reqObj->getOutletsResponse(res);
    }
}
void OAIOutletsApiHandler::updateOutlet(qint64 campaign_id, qint64 outlet_id, OAIChangeOutletRequest oai_change_outlet_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(outlet_id);
    Q_UNUSED(oai_change_outlet_request);
    auto reqObj = qobject_cast<OAIOutletsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->updateOutletResponse(res);
    }
}


}
