/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIFbsApiHandler.h"
#include "OAIFbsApiRequest.h"

namespace OpenAPI {

OAIFbsApiHandler::OAIFbsApiHandler(){

}

OAIFbsApiHandler::~OAIFbsApiHandler(){

}

void OAIFbsApiHandler::addHiddenOffers(qint64 campaign_id, OAIAddHiddenOffersRequest oai_add_hidden_offers_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_add_hidden_offers_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->addHiddenOffersResponse(res);
    }
}
void OAIFbsApiHandler::addOffersToArchive(qint64 business_id, OAIAddOffersToArchiveRequest oai_add_offers_to_archive_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_add_offers_to_archive_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAddOffersToArchiveResponse res;
        reqObj->addOffersToArchiveResponse(res);
    }
}
void OAIFbsApiHandler::calculateTariffs(OAICalculateTariffsRequest oai_calculate_tariffs_request) {
    Q_UNUSED(oai_calculate_tariffs_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICalculateTariffsResponse res;
        reqObj->calculateTariffsResponse(res);
    }
}
void OAIFbsApiHandler::confirmBusinessPrices(qint64 business_id, OAIConfirmPricesRequest oai_confirm_prices_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_confirm_prices_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->confirmBusinessPricesResponse(res);
    }
}
void OAIFbsApiHandler::confirmCampaignPrices(qint64 campaign_id, OAIConfirmPricesRequest oai_confirm_prices_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_confirm_prices_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->confirmCampaignPricesResponse(res);
    }
}
void OAIFbsApiHandler::confirmShipment(qint64 campaign_id, qint64 shipment_id, OAIConfirmShipmentRequest oai_confirm_shipment_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(oai_confirm_shipment_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->confirmShipmentResponse(res);
    }
}
void OAIFbsApiHandler::createChat(qint64 business_id, OAICreateChatRequest oai_create_chat_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_create_chat_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateChatResponse res;
        reqObj->createChatResponse(res);
    }
}
void OAIFbsApiHandler::deleteCampaignOffers(qint64 campaign_id, OAIDeleteCampaignOffersRequest oai_delete_campaign_offers_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_delete_campaign_offers_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeleteCampaignOffersResponse res;
        reqObj->deleteCampaignOffersResponse(res);
    }
}
void OAIFbsApiHandler::deleteGoodsFeedbackComment(qint64 business_id, OAIDeleteGoodsFeedbackCommentRequest oai_delete_goods_feedback_comment_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_delete_goods_feedback_comment_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->deleteGoodsFeedbackCommentResponse(res);
    }
}
void OAIFbsApiHandler::deleteHiddenOffers(qint64 campaign_id, OAIDeleteHiddenOffersRequest oai_delete_hidden_offers_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_delete_hidden_offers_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->deleteHiddenOffersResponse(res);
    }
}
void OAIFbsApiHandler::deleteOffers(qint64 business_id, OAIDeleteOffersRequest oai_delete_offers_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_delete_offers_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeleteOffersResponse res;
        reqObj->deleteOffersResponse(res);
    }
}
void OAIFbsApiHandler::deleteOffersFromArchive(qint64 business_id, OAIDeleteOffersFromArchiveRequest oai_delete_offers_from_archive_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_delete_offers_from_archive_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeleteOffersFromArchiveResponse res;
        reqObj->deleteOffersFromArchiveResponse(res);
    }
}
void OAIFbsApiHandler::deletePromoOffers(qint64 business_id, OAIDeletePromoOffersRequest oai_delete_promo_offers_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_delete_promo_offers_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeletePromoOffersResponse res;
        reqObj->deletePromoOffersResponse(res);
    }
}
void OAIFbsApiHandler::downloadShipmentAct(qint64 campaign_id, qint64 shipment_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentActResponse(res);
    }
}
void OAIFbsApiHandler::downloadShipmentDiscrepancyAct(qint64 campaign_id, qint64 shipment_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentDiscrepancyActResponse(res);
    }
}
void OAIFbsApiHandler::downloadShipmentInboundAct(qint64 campaign_id, qint64 shipment_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentInboundActResponse(res);
    }
}
void OAIFbsApiHandler::downloadShipmentPalletLabels(qint64 campaign_id, qint64 shipment_id, OAIShipmentPalletLabelPageFormatType format) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentPalletLabelsResponse(res);
    }
}
void OAIFbsApiHandler::downloadShipmentReceptionTransferAct(qint64 campaign_id, qint32 warehouse_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(warehouse_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentReceptionTransferActResponse(res);
    }
}
void OAIFbsApiHandler::downloadShipmentTransportationWaybill(qint64 campaign_id, qint64 shipment_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->downloadShipmentTransportationWaybillResponse(res);
    }
}
void OAIFbsApiHandler::generateBoostConsolidatedReport(OAIGenerateBoostConsolidatedRequest oai_generate_boost_consolidated_request, OAIReportFormatType format) {
    Q_UNUSED(oai_generate_boost_consolidated_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateBoostConsolidatedReportResponse(res);
    }
}
void OAIFbsApiHandler::generateCompetitorsPositionReport(OAIGenerateCompetitorsPositionReportRequest oai_generate_competitors_position_report_request, OAIReportFormatType format) {
    Q_UNUSED(oai_generate_competitors_position_report_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateCompetitorsPositionReportResponse(res);
    }
}
void OAIFbsApiHandler::generateGoodsFeedbackReport(OAIGenerateGoodsFeedbackRequest oai_generate_goods_feedback_request, OAIReportFormatType format) {
    Q_UNUSED(oai_generate_goods_feedback_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateGoodsFeedbackReportResponse(res);
    }
}
void OAIFbsApiHandler::generateGoodsRealizationReport(OAIGenerateGoodsRealizationReportRequest oai_generate_goods_realization_report_request, OAIReportFormatType format) {
    Q_UNUSED(oai_generate_goods_realization_report_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateGoodsRealizationReportResponse(res);
    }
}
void OAIFbsApiHandler::generateMassOrderLabelsReport(OAIGenerateMassOrderLabelsRequest oai_generate_mass_order_labels_request, OAIPageFormatType format) {
    Q_UNUSED(oai_generate_mass_order_labels_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateMassOrderLabelsReportResponse(res);
    }
}
void OAIFbsApiHandler::generateOrderLabel(qint64 campaign_id, qint64 order_id, qint64 shipment_id, qint64 box_id, OAIPageFormatType format) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(box_id);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->generateOrderLabelResponse(res);
    }
}
void OAIFbsApiHandler::generateOrderLabels(qint64 campaign_id, qint64 order_id, OAIPageFormatType format) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->generateOrderLabelsResponse(res);
    }
}
void OAIFbsApiHandler::generatePricesReport(OAIGeneratePricesReportRequest oai_generate_prices_report_request, OAIReportFormatType format) {
    Q_UNUSED(oai_generate_prices_report_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generatePricesReportResponse(res);
    }
}
void OAIFbsApiHandler::generateShelfsStatisticsReport(OAIGenerateShelfsStatisticsRequest oai_generate_shelfs_statistics_request, OAIReportFormatType format) {
    Q_UNUSED(oai_generate_shelfs_statistics_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateShelfsStatisticsReportResponse(res);
    }
}
void OAIFbsApiHandler::generateShipmentListDocumentReport(OAIGenerateShipmentListDocumentReportRequest oai_generate_shipment_list_document_report_request) {
    Q_UNUSED(oai_generate_shipment_list_document_report_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateShipmentListDocumentReportResponse(res);
    }
}
void OAIFbsApiHandler::generateShowsSalesReport(OAIGenerateShowsSalesReportRequest oai_generate_shows_sales_report_request, OAIReportFormatType format) {
    Q_UNUSED(oai_generate_shows_sales_report_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateShowsSalesReportResponse(res);
    }
}
void OAIFbsApiHandler::generateStocksOnWarehousesReport(OAIGenerateStocksOnWarehousesReportRequest oai_generate_stocks_on_warehouses_report_request, OAIReportFormatType format) {
    Q_UNUSED(oai_generate_stocks_on_warehouses_report_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateStocksOnWarehousesReportResponse(res);
    }
}
void OAIFbsApiHandler::generateUnitedMarketplaceServicesReport(OAIGenerateUnitedMarketplaceServicesReportRequest oai_generate_united_marketplace_services_report_request, OAIReportFormatType format) {
    Q_UNUSED(oai_generate_united_marketplace_services_report_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateUnitedMarketplaceServicesReportResponse(res);
    }
}
void OAIFbsApiHandler::generateUnitedNettingReport(OAIGenerateUnitedNettingReportRequest oai_generate_united_netting_report_request, OAIReportFormatType format) {
    Q_UNUSED(oai_generate_united_netting_report_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateUnitedNettingReportResponse(res);
    }
}
void OAIFbsApiHandler::generateUnitedOrdersReport(OAIGenerateUnitedOrdersRequest oai_generate_united_orders_request, OAIReportFormatType format) {
    Q_UNUSED(oai_generate_united_orders_request);
    Q_UNUSED(format);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGenerateReportResponse res;
        reqObj->generateUnitedOrdersReportResponse(res);
    }
}
void OAIFbsApiHandler::getAllOffers(qint64 campaign_id, qint64 feed_id, qint32 chunk) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(feed_id);
    Q_UNUSED(chunk);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetAllOffersResponse res;
        reqObj->getAllOffersResponse(res);
    }
}
void OAIFbsApiHandler::getBidsInfoForBusiness(qint64 business_id, QString page_token, qint32 limit, OAIGetBidsInfoRequest oai_get_bids_info_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(oai_get_bids_info_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetBidsInfoResponse res;
        reqObj->getBidsInfoForBusinessResponse(res);
    }
}
void OAIFbsApiHandler::getBidsRecommendations(qint64 business_id, OAIGetBidsRecommendationsRequest oai_get_bids_recommendations_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_bids_recommendations_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetBidsRecommendationsResponse res;
        reqObj->getBidsRecommendationsResponse(res);
    }
}
void OAIFbsApiHandler::getBusinessQuarantineOffers(qint64 business_id, OAIGetQuarantineOffersRequest oai_get_quarantine_offers_request, QString page_token, qint32 limit) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_quarantine_offers_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetQuarantineOffersResponse res;
        reqObj->getBusinessQuarantineOffersResponse(res);
    }
}
void OAIFbsApiHandler::getBusinessSettings(qint64 business_id) {
    Q_UNUSED(business_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetBusinessSettingsResponse res;
        reqObj->getBusinessSettingsResponse(res);
    }
}
void OAIFbsApiHandler::getCampaign(qint64 campaign_id) {
    Q_UNUSED(campaign_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetCampaignResponse res;
        reqObj->getCampaignResponse(res);
    }
}
void OAIFbsApiHandler::getCampaignLogins(qint64 campaign_id) {
    Q_UNUSED(campaign_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetCampaignLoginsResponse res;
        reqObj->getCampaignLoginsResponse(res);
    }
}
void OAIFbsApiHandler::getCampaignOffers(qint64 campaign_id, OAIGetCampaignOffersRequest oai_get_campaign_offers_request, QString page_token, qint32 limit) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_get_campaign_offers_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetCampaignOffersResponse res;
        reqObj->getCampaignOffersResponse(res);
    }
}
void OAIFbsApiHandler::getCampaignQuarantineOffers(qint64 campaign_id, OAIGetQuarantineOffersRequest oai_get_quarantine_offers_request, QString page_token, qint32 limit) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_get_quarantine_offers_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetQuarantineOffersResponse res;
        reqObj->getCampaignQuarantineOffersResponse(res);
    }
}
void OAIFbsApiHandler::getCampaignRegion(qint64 campaign_id) {
    Q_UNUSED(campaign_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetCampaignRegionResponse res;
        reqObj->getCampaignRegionResponse(res);
    }
}
void OAIFbsApiHandler::getCampaignSettings(qint64 campaign_id) {
    Q_UNUSED(campaign_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetCampaignSettingsResponse res;
        reqObj->getCampaignSettingsResponse(res);
    }
}
void OAIFbsApiHandler::getCampaigns(qint32 page, qint32 page_size) {
    Q_UNUSED(page);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetCampaignsResponse res;
        reqObj->getCampaignsResponse(res);
    }
}
void OAIFbsApiHandler::getCampaignsByLogin(QString login, qint32 page, qint32 page_size) {
    Q_UNUSED(login);
    Q_UNUSED(page);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetCampaignsResponse res;
        reqObj->getCampaignsByLoginResponse(res);
    }
}
void OAIFbsApiHandler::getCategoriesMaxSaleQuantum(OAIGetCategoriesMaxSaleQuantumRequest oai_get_categories_max_sale_quantum_request) {
    Q_UNUSED(oai_get_categories_max_sale_quantum_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetCategoriesMaxSaleQuantumResponse res;
        reqObj->getCategoriesMaxSaleQuantumResponse(res);
    }
}
void OAIFbsApiHandler::getCategoriesTree(OAIGetCategoriesRequest oai_get_categories_request) {
    Q_UNUSED(oai_get_categories_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetCategoriesResponse res;
        reqObj->getCategoriesTreeResponse(res);
    }
}
void OAIFbsApiHandler::getCategoryContentParameters(qint64 category_id) {
    Q_UNUSED(category_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetCategoryContentParametersResponse res;
        reqObj->getCategoryContentParametersResponse(res);
    }
}
void OAIFbsApiHandler::getChatHistory(qint64 business_id, qint64 chat_id, OAIGetChatHistoryRequest oai_get_chat_history_request, QString page_token, qint32 limit) {
    Q_UNUSED(business_id);
    Q_UNUSED(chat_id);
    Q_UNUSED(oai_get_chat_history_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetChatHistoryResponse res;
        reqObj->getChatHistoryResponse(res);
    }
}
void OAIFbsApiHandler::getChats(qint64 business_id, OAIGetChatsRequest oai_get_chats_request, QString page_token, qint32 limit) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_chats_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetChatsResponse res;
        reqObj->getChatsResponse(res);
    }
}
void OAIFbsApiHandler::getDeliveryServices() {
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetDeliveryServicesResponse res;
        reqObj->getDeliveryServicesResponse(res);
    }
}
void OAIFbsApiHandler::getFeed(qint64 campaign_id, qint64 feed_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(feed_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetFeedResponse res;
        reqObj->getFeedResponse(res);
    }
}
void OAIFbsApiHandler::getFeedIndexLogs(qint64 campaign_id, qint64 feed_id, qint32 limit, QDateTime published_time_from, QDateTime published_time_to, OAIFeedIndexLogsStatusType status) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(feed_id);
    Q_UNUSED(limit);
    Q_UNUSED(published_time_from);
    Q_UNUSED(published_time_to);
    Q_UNUSED(status);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetFeedIndexLogsResponse res;
        reqObj->getFeedIndexLogsResponse(res);
    }
}
void OAIFbsApiHandler::getFeedbackAndCommentUpdates(qint64 campaign_id, QString page_token, qint32 limit, QDate from_date) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(from_date);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetFeedbackListResponse res;
        reqObj->getFeedbackAndCommentUpdatesResponse(res);
    }
}
void OAIFbsApiHandler::getFeeds(qint64 campaign_id) {
    Q_UNUSED(campaign_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetFeedsResponse res;
        reqObj->getFeedsResponse(res);
    }
}
void OAIFbsApiHandler::getGoodsFeedbackComments(qint64 business_id, OAIGetGoodsFeedbackCommentsRequest oai_get_goods_feedback_comments_request, QString page_token, qint32 limit) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_goods_feedback_comments_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetGoodsFeedbackCommentsResponse res;
        reqObj->getGoodsFeedbackCommentsResponse(res);
    }
}
void OAIFbsApiHandler::getGoodsFeedbacks(qint64 business_id, QString page_token, qint32 limit, OAIGetGoodsFeedbackRequest oai_get_goods_feedback_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(oai_get_goods_feedback_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetGoodsFeedbackResponse res;
        reqObj->getGoodsFeedbacksResponse(res);
    }
}
void OAIFbsApiHandler::getGoodsStats(qint64 campaign_id, OAIGetGoodsStatsRequest oai_get_goods_stats_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_get_goods_stats_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetGoodsStatsResponse res;
        reqObj->getGoodsStatsResponse(res);
    }
}
void OAIFbsApiHandler::getHiddenOffers(qint64 campaign_id, QList<QString> offer_id, QString page_token, qint32 limit, qint32 offset, qint32 page, qint32 page_size) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(offer_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(offset);
    Q_UNUSED(page);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetHiddenOffersResponse res;
        reqObj->getHiddenOffersResponse(res);
    }
}
void OAIFbsApiHandler::getOfferCardsContentStatus(qint64 business_id, QString page_token, qint32 limit, OAIGetOfferCardsContentStatusRequest oai_get_offer_cards_content_status_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(oai_get_offer_cards_content_status_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOfferCardsContentStatusResponse res;
        reqObj->getOfferCardsContentStatusResponse(res);
    }
}
void OAIFbsApiHandler::getOfferMappingEntries(qint64 campaign_id, QList<QString> offer_id, QList<QString> shop_sku, OAIOfferMappingKindType mapping_kind, QList<OAIOfferProcessingStatusType> status, QList<OAIOfferAvailabilityStatusType> availability, QList<qint32> category_id, QList<QString> vendor, QString page_token, qint32 limit) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(offer_id);
    Q_UNUSED(shop_sku);
    Q_UNUSED(mapping_kind);
    Q_UNUSED(status);
    Q_UNUSED(availability);
    Q_UNUSED(category_id);
    Q_UNUSED(vendor);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOfferMappingEntriesResponse res;
        reqObj->getOfferMappingEntriesResponse(res);
    }
}
void OAIFbsApiHandler::getOfferMappings(qint64 business_id, QString page_token, qint32 limit, OAIGetOfferMappingsRequest oai_get_offer_mappings_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(oai_get_offer_mappings_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOfferMappingsResponse res;
        reqObj->getOfferMappingsResponse(res);
    }
}
void OAIFbsApiHandler::getOfferRecommendations(qint64 business_id, OAIGetOfferRecommendationsRequest oai_get_offer_recommendations_request, QString page_token, qint32 limit) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_offer_recommendations_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOfferRecommendationsResponse res;
        reqObj->getOfferRecommendationsResponse(res);
    }
}
void OAIFbsApiHandler::getOffers(qint64 campaign_id, QString query, qint64 feed_id, QString shop_category_id, OAICurrencyType currency, bool matched, qint32 page, qint32 page_size) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(query);
    Q_UNUSED(feed_id);
    Q_UNUSED(shop_category_id);
    Q_UNUSED(currency);
    Q_UNUSED(matched);
    Q_UNUSED(page);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOffersResponse res;
        reqObj->getOffersResponse(res);
    }
}
void OAIFbsApiHandler::getOrder(qint64 campaign_id, qint64 order_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOrderResponse res;
        reqObj->getOrderResponse(res);
    }
}
void OAIFbsApiHandler::getOrderBusinessBuyerInfo(qint64 campaign_id, qint64 order_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetBusinessBuyerInfoResponse res;
        reqObj->getOrderBusinessBuyerInfoResponse(res);
    }
}
void OAIFbsApiHandler::getOrderBusinessDocumentsInfo(qint64 campaign_id, qint64 order_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetBusinessDocumentsInfoResponse res;
        reqObj->getOrderBusinessDocumentsInfoResponse(res);
    }
}
void OAIFbsApiHandler::getOrderLabelsData(qint64 campaign_id, qint64 order_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOrderLabelsDataResponse res;
        reqObj->getOrderLabelsDataResponse(res);
    }
}
void OAIFbsApiHandler::getOrders(qint64 campaign_id, QList<qint64> order_ids, QSet<OAIOrderStatusType> status, QSet<OAIOrderSubstatusType> substatus, QDate from_date, QDate to_date, QDate supplier_shipment_date_from, QDate supplier_shipment_date_to, QDateTime updated_at_from, QDateTime updated_at_to, OAIOrderDeliveryDispatchType dispatch_type, bool fake, bool has_cis, bool only_waiting_for_cancellation_approve, bool only_estimated_delivery, OAIOrderBuyerType buyer_type, qint32 page, qint32 page_size, QString page_token, qint32 limit) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_ids);
    Q_UNUSED(status);
    Q_UNUSED(substatus);
    Q_UNUSED(from_date);
    Q_UNUSED(to_date);
    Q_UNUSED(supplier_shipment_date_from);
    Q_UNUSED(supplier_shipment_date_to);
    Q_UNUSED(updated_at_from);
    Q_UNUSED(updated_at_to);
    Q_UNUSED(dispatch_type);
    Q_UNUSED(fake);
    Q_UNUSED(has_cis);
    Q_UNUSED(only_waiting_for_cancellation_approve);
    Q_UNUSED(only_estimated_delivery);
    Q_UNUSED(buyer_type);
    Q_UNUSED(page);
    Q_UNUSED(page_size);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOrdersResponse res;
        reqObj->getOrdersResponse(res);
    }
}
void OAIFbsApiHandler::getOrdersStats(qint64 campaign_id, QString page_token, qint32 limit, OAIGetOrdersStatsRequest oai_get_orders_stats_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(oai_get_orders_stats_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOrdersStatsResponse res;
        reqObj->getOrdersStatsResponse(res);
    }
}
void OAIFbsApiHandler::getPrices(qint64 campaign_id, QString page_token, qint32 limit, bool archived) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(archived);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetPricesResponse res;
        reqObj->getPricesResponse(res);
    }
}
void OAIFbsApiHandler::getPricesByOfferIds(qint64 campaign_id, QString page_token, qint32 limit, OAIGetPricesByOfferIdsRequest oai_get_prices_by_offer_ids_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(oai_get_prices_by_offer_ids_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetPricesByOfferIdsResponse res;
        reqObj->getPricesByOfferIdsResponse(res);
    }
}
void OAIFbsApiHandler::getPromoOffers(qint64 business_id, OAIGetPromoOffersRequest oai_get_promo_offers_request, QString page_token, qint32 limit) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_promo_offers_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetPromoOffersResponse res;
        reqObj->getPromoOffersResponse(res);
    }
}
void OAIFbsApiHandler::getPromos(qint64 business_id, OAIGetPromosRequest oai_get_promos_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_promos_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetPromosResponse res;
        reqObj->getPromosResponse(res);
    }
}
void OAIFbsApiHandler::getQualityRatingDetails(qint64 campaign_id) {
    Q_UNUSED(campaign_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetQualityRatingDetailsResponse res;
        reqObj->getQualityRatingDetailsResponse(res);
    }
}
void OAIFbsApiHandler::getQualityRatings(qint64 business_id, OAIGetQualityRatingRequest oai_get_quality_rating_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_quality_rating_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetQualityRatingResponse res;
        reqObj->getQualityRatingsResponse(res);
    }
}
void OAIFbsApiHandler::getReportInfo(QString report_id) {
    Q_UNUSED(report_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetReportInfoResponse res;
        reqObj->getReportInfoResponse(res);
    }
}
void OAIFbsApiHandler::getReturn(qint64 campaign_id, qint64 order_id, qint64 return_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    Q_UNUSED(return_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetReturnResponse res;
        reqObj->getReturnResponse(res);
    }
}
void OAIFbsApiHandler::getReturnApplication(qint64 campaign_id, qint64 order_id, qint64 return_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    Q_UNUSED(return_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->getReturnApplicationResponse(res);
    }
}
void OAIFbsApiHandler::getReturnPhoto(qint64 campaign_id, qint64 order_id, qint64 return_id, qint64 item_id, QString image_hash) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    Q_UNUSED(return_id);
    Q_UNUSED(item_id);
    Q_UNUSED(image_hash);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIHttpFileElement res;
        reqObj->getReturnPhotoResponse(res);
    }
}
void OAIFbsApiHandler::getReturns(qint64 campaign_id, QString page_token, qint32 limit, QList<qint64> order_ids, QList<OAIRefundStatusType> statuses, OAIReturnType type, QDate from_date, QDate to_date, QDate from_date2, QDate to_date2) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(order_ids);
    Q_UNUSED(statuses);
    Q_UNUSED(type);
    Q_UNUSED(from_date);
    Q_UNUSED(to_date);
    Q_UNUSED(from_date2);
    Q_UNUSED(to_date2);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetReturnsResponse res;
        reqObj->getReturnsResponse(res);
    }
}
void OAIFbsApiHandler::getShipment(qint64 campaign_id, qint64 shipment_id, bool cancelled_orders) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(cancelled_orders);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetShipmentResponse res;
        reqObj->getShipmentResponse(res);
    }
}
void OAIFbsApiHandler::getShipmentOrdersInfo(qint64 campaign_id, qint64 shipment_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetShipmentOrdersInfoResponse res;
        reqObj->getShipmentOrdersInfoResponse(res);
    }
}
void OAIFbsApiHandler::getStocks(qint64 campaign_id, QString page_token, qint32 limit, OAIGetWarehouseStocksRequest oai_get_warehouse_stocks_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    Q_UNUSED(oai_get_warehouse_stocks_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetWarehouseStocksResponse res;
        reqObj->getStocksResponse(res);
    }
}
void OAIFbsApiHandler::getSuggestedOfferMappingEntries(qint64 campaign_id, OAIGetSuggestedOfferMappingEntriesRequest oai_get_suggested_offer_mapping_entries_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_get_suggested_offer_mapping_entries_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetSuggestedOfferMappingEntriesResponse res;
        reqObj->getSuggestedOfferMappingEntriesResponse(res);
    }
}
void OAIFbsApiHandler::getSuggestedOfferMappings(qint64 business_id, OAIGetSuggestedOfferMappingsRequest oai_get_suggested_offer_mappings_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_get_suggested_offer_mappings_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetSuggestedOfferMappingsResponse res;
        reqObj->getSuggestedOfferMappingsResponse(res);
    }
}
void OAIFbsApiHandler::getSuggestedPrices(qint64 campaign_id, OAISuggestPricesRequest oai_suggest_prices_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_suggest_prices_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAISuggestPricesResponse res;
        reqObj->getSuggestedPricesResponse(res);
    }
}
void OAIFbsApiHandler::getWarehouses(qint64 business_id) {
    Q_UNUSED(business_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetWarehousesResponse res;
        reqObj->getWarehousesResponse(res);
    }
}
void OAIFbsApiHandler::provideOrderItemIdentifiers(qint64 campaign_id, qint64 order_id, OAIProvideOrderItemIdentifiersRequest oai_provide_order_item_identifiers_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    Q_UNUSED(oai_provide_order_item_identifiers_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIProvideOrderItemIdentifiersResponse res;
        reqObj->provideOrderItemIdentifiersResponse(res);
    }
}
void OAIFbsApiHandler::putBidsForBusiness(qint64 business_id, OAIPutSkuBidsRequest oai_put_sku_bids_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_put_sku_bids_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->putBidsForBusinessResponse(res);
    }
}
void OAIFbsApiHandler::putBidsForCampaign(qint64 campaign_id, OAIPutSkuBidsRequest oai_put_sku_bids_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_put_sku_bids_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->putBidsForCampaignResponse(res);
    }
}
void OAIFbsApiHandler::refreshFeed(qint64 campaign_id, qint64 feed_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(feed_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->refreshFeedResponse(res);
    }
}
void OAIFbsApiHandler::searchRegionChildren(qint64 region_id, qint32 page, qint32 page_size) {
    Q_UNUSED(region_id);
    Q_UNUSED(page);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetRegionWithChildrenResponse res;
        reqObj->searchRegionChildrenResponse(res);
    }
}
void OAIFbsApiHandler::searchRegionsById(qint64 region_id) {
    Q_UNUSED(region_id);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetRegionsResponse res;
        reqObj->searchRegionsByIdResponse(res);
    }
}
void OAIFbsApiHandler::searchRegionsByName(QString name, QString page_token, qint32 limit) {
    Q_UNUSED(name);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetRegionsResponse res;
        reqObj->searchRegionsByNameResponse(res);
    }
}
void OAIFbsApiHandler::searchShipments(qint64 campaign_id, OAISearchShipmentsRequest oai_search_shipments_request, QString page_token, qint32 limit) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_search_shipments_request);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAISearchShipmentsResponse res;
        reqObj->searchShipmentsResponse(res);
    }
}
void OAIFbsApiHandler::sendFileToChat(qint64 business_id, qint64 chat_id, OAIHttpFileElement file) {
    Q_UNUSED(business_id);
    Q_UNUSED(chat_id);
    Q_UNUSED(file);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->sendFileToChatResponse(res);
    }
}
void OAIFbsApiHandler::sendMessageToChat(qint64 business_id, qint64 chat_id, OAISendMessageToChatRequest oai_send_message_to_chat_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(chat_id);
    Q_UNUSED(oai_send_message_to_chat_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->sendMessageToChatResponse(res);
    }
}
void OAIFbsApiHandler::setFeedParams(qint64 campaign_id, qint64 feed_id, OAISetFeedParamsRequest oai_set_feed_params_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(feed_id);
    Q_UNUSED(oai_set_feed_params_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->setFeedParamsResponse(res);
    }
}
void OAIFbsApiHandler::setOrderBoxLayout(qint64 campaign_id, qint64 order_id, OAISetOrderBoxLayoutRequest oai_set_order_box_layout_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    Q_UNUSED(oai_set_order_box_layout_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAISetOrderBoxLayoutResponse res;
        reqObj->setOrderBoxLayoutResponse(res);
    }
}
void OAIFbsApiHandler::setOrderShipmentBoxes(qint64 campaign_id, qint64 order_id, qint64 shipment_id, OAISetOrderShipmentBoxesRequest oai_set_order_shipment_boxes_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(oai_set_order_shipment_boxes_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAISetOrderShipmentBoxesResponse res;
        reqObj->setOrderShipmentBoxesResponse(res);
    }
}
void OAIFbsApiHandler::setShipmentPalletsCount(qint64 campaign_id, qint64 shipment_id, OAISetShipmentPalletsCountRequest oai_set_shipment_pallets_count_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(oai_set_shipment_pallets_count_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->setShipmentPalletsCountResponse(res);
    }
}
void OAIFbsApiHandler::skipGoodsFeedbacksReaction(qint64 business_id, OAISkipGoodsFeedbackReactionRequest oai_skip_goods_feedback_reaction_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_skip_goods_feedback_reaction_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->skipGoodsFeedbacksReactionResponse(res);
    }
}
void OAIFbsApiHandler::transferOrdersFromShipment(qint64 campaign_id, qint64 shipment_id, OAITransferOrdersFromShipmentRequest oai_transfer_orders_from_shipment_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(shipment_id);
    Q_UNUSED(oai_transfer_orders_from_shipment_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->transferOrdersFromShipmentResponse(res);
    }
}
void OAIFbsApiHandler::updateBusinessPrices(qint64 business_id, OAIUpdateBusinessPricesRequest oai_update_business_prices_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_update_business_prices_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->updateBusinessPricesResponse(res);
    }
}
void OAIFbsApiHandler::updateCampaignOffers(qint64 campaign_id, OAIUpdateCampaignOffersRequest oai_update_campaign_offers_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_update_campaign_offers_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->updateCampaignOffersResponse(res);
    }
}
void OAIFbsApiHandler::updateGoodsFeedbackComment(qint64 business_id, OAIUpdateGoodsFeedbackCommentRequest oai_update_goods_feedback_comment_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_update_goods_feedback_comment_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUpdateGoodsFeedbackCommentResponse res;
        reqObj->updateGoodsFeedbackCommentResponse(res);
    }
}
void OAIFbsApiHandler::updateOfferContent(qint64 business_id, OAIUpdateOfferContentRequest oai_update_offer_content_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_update_offer_content_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUpdateOfferContentResponse res;
        reqObj->updateOfferContentResponse(res);
    }
}
void OAIFbsApiHandler::updateOfferMappingEntries(qint64 campaign_id, OAIUpdateOfferMappingEntryRequest oai_update_offer_mapping_entry_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_update_offer_mapping_entry_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->updateOfferMappingEntriesResponse(res);
    }
}
void OAIFbsApiHandler::updateOfferMappings(qint64 business_id, OAIUpdateOfferMappingsRequest oai_update_offer_mappings_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_update_offer_mappings_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUpdateOfferMappingsResponse res;
        reqObj->updateOfferMappingsResponse(res);
    }
}
void OAIFbsApiHandler::updateOrderItems(qint64 campaign_id, qint64 order_id, OAIUpdateOrderItemRequest oai_update_order_item_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    Q_UNUSED(oai_update_order_item_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->updateOrderItemsResponse();
    }
}
void OAIFbsApiHandler::updateOrderStatus(qint64 campaign_id, qint64 order_id, OAIUpdateOrderStatusRequest oai_update_order_status_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(order_id);
    Q_UNUSED(oai_update_order_status_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUpdateOrderStatusResponse res;
        reqObj->updateOrderStatusResponse(res);
    }
}
void OAIFbsApiHandler::updateOrderStatuses(qint64 campaign_id, OAIUpdateOrderStatusesRequest oai_update_order_statuses_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_update_order_statuses_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUpdateOrderStatusesResponse res;
        reqObj->updateOrderStatusesResponse(res);
    }
}
void OAIFbsApiHandler::updatePrices(qint64 campaign_id, OAIUpdatePricesRequest oai_update_prices_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_update_prices_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->updatePricesResponse(res);
    }
}
void OAIFbsApiHandler::updatePromoOffers(qint64 business_id, OAIUpdatePromoOffersRequest oai_update_promo_offers_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_update_promo_offers_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUpdatePromoOffersResponse res;
        reqObj->updatePromoOffersResponse(res);
    }
}
void OAIFbsApiHandler::updateStocks(qint64 campaign_id, OAIUpdateStocksRequest oai_update_stocks_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_update_stocks_request);
    auto reqObj = qobject_cast<OAIFbsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->updateStocksResponse(res);
    }
}


}
