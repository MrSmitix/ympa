/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIOfferMappingsApiHandler.h"
#include "OAIOfferMappingsApiRequest.h"

namespace OpenAPI {

OAIOfferMappingsApiHandler::OAIOfferMappingsApiHandler(){

}

OAIOfferMappingsApiHandler::~OAIOfferMappingsApiHandler(){

}

void OAIOfferMappingsApiHandler::getOfferMappingEntries(qint64 campaign_id, QList<QString> offer_id, QList<QString> shop_sku, OAIOfferMappingKindType mapping_kind, QList<OAIOfferProcessingStatusType> status, QList<OAIOfferAvailabilityStatusType> availability, QList<qint32> category_id, QList<QString> vendor, QString page_token, qint32 limit) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(offer_id);
    Q_UNUSED(shop_sku);
    Q_UNUSED(mapping_kind);
    Q_UNUSED(status);
    Q_UNUSED(availability);
    Q_UNUSED(category_id);
    Q_UNUSED(vendor);
    Q_UNUSED(page_token);
    Q_UNUSED(limit);
    auto reqObj = qobject_cast<OAIOfferMappingsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetOfferMappingEntriesResponse res;
        reqObj->getOfferMappingEntriesResponse(res);
    }
}
void OAIOfferMappingsApiHandler::getSuggestedOfferMappingEntries(qint64 campaign_id, OAIGetSuggestedOfferMappingEntriesRequest oai_get_suggested_offer_mapping_entries_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_get_suggested_offer_mapping_entries_request);
    auto reqObj = qobject_cast<OAIOfferMappingsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetSuggestedOfferMappingEntriesResponse res;
        reqObj->getSuggestedOfferMappingEntriesResponse(res);
    }
}
void OAIOfferMappingsApiHandler::updateOfferMappingEntries(qint64 campaign_id, OAIUpdateOfferMappingEntryRequest oai_update_offer_mapping_entry_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(oai_update_offer_mapping_entry_request);
    auto reqObj = qobject_cast<OAIOfferMappingsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->updateOfferMappingEntriesResponse(res);
    }
}


}
