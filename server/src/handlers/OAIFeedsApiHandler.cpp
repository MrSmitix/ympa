/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIFeedsApiHandler.h"
#include "OAIFeedsApiRequest.h"

namespace OpenAPI {

OAIFeedsApiHandler::OAIFeedsApiHandler(){

}

OAIFeedsApiHandler::~OAIFeedsApiHandler(){

}

void OAIFeedsApiHandler::getFeed(qint64 campaign_id, qint64 feed_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(feed_id);
    auto reqObj = qobject_cast<OAIFeedsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetFeedResponse res;
        reqObj->getFeedResponse(res);
    }
}
void OAIFeedsApiHandler::getFeedIndexLogs(qint64 campaign_id, qint64 feed_id, qint32 limit, QDateTime published_time_from, QDateTime published_time_to, OAIFeedIndexLogsStatusType status) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(feed_id);
    Q_UNUSED(limit);
    Q_UNUSED(published_time_from);
    Q_UNUSED(published_time_to);
    Q_UNUSED(status);
    auto reqObj = qobject_cast<OAIFeedsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetFeedIndexLogsResponse res;
        reqObj->getFeedIndexLogsResponse(res);
    }
}
void OAIFeedsApiHandler::getFeeds(qint64 campaign_id) {
    Q_UNUSED(campaign_id);
    auto reqObj = qobject_cast<OAIFeedsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGetFeedsResponse res;
        reqObj->getFeedsResponse(res);
    }
}
void OAIFeedsApiHandler::refreshFeed(qint64 campaign_id, qint64 feed_id) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(feed_id);
    auto reqObj = qobject_cast<OAIFeedsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->refreshFeedResponse(res);
    }
}
void OAIFeedsApiHandler::setFeedParams(qint64 campaign_id, qint64 feed_id, OAISetFeedParamsRequest oai_set_feed_params_request) {
    Q_UNUSED(campaign_id);
    Q_UNUSED(feed_id);
    Q_UNUSED(oai_set_feed_params_request);
    auto reqObj = qobject_cast<OAIFeedsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIEmptyApiResponse res;
        reqObj->setFeedParamsResponse(res);
    }
}


}
