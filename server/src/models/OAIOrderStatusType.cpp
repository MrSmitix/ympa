/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderStatusType::OAIOrderStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderStatusType::OAIOrderStatusType() {
    this->initializeModel();
}

OAIOrderStatusType::~OAIOrderStatusType() {}

void OAIOrderStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrderStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrderStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PLACING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::PLACING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESERVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::RESERVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPAID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::UNPAID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::PICKUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::DELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARTIALLY_RETURNED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::PARTIALLY_RETURNED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETURNED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::RETURNED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderStatusType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrderStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrderStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrderStatusType::PLACING:
            val = "PLACING";
            break;
        case eOAIOrderStatusType::RESERVED:
            val = "RESERVED";
            break;
        case eOAIOrderStatusType::UNPAID:
            val = "UNPAID";
            break;
        case eOAIOrderStatusType::PROCESSING:
            val = "PROCESSING";
            break;
        case eOAIOrderStatusType::DELIVERY:
            val = "DELIVERY";
            break;
        case eOAIOrderStatusType::PICKUP:
            val = "PICKUP";
            break;
        case eOAIOrderStatusType::DELIVERED:
            val = "DELIVERED";
            break;
        case eOAIOrderStatusType::CANCELLED:
            val = "CANCELLED";
            break;
        case eOAIOrderStatusType::PENDING:
            val = "PENDING";
            break;
        case eOAIOrderStatusType::PARTIALLY_RETURNED:
            val = "PARTIALLY_RETURNED";
            break;
        case eOAIOrderStatusType::RETURNED:
            val = "RETURNED";
            break;
        case eOAIOrderStatusType::UNKNOWN:
            val = "UNKNOWN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrderStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrderStatusType::eOAIOrderStatusType OAIOrderStatusType::getValue() const {
    return m_value;
}

void OAIOrderStatusType::setValue(const OAIOrderStatusType::eOAIOrderStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrderStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrderStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
