/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnInstanceStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnInstanceStatusType::OAIReturnInstanceStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnInstanceStatusType::OAIReturnInstanceStatusType() {
    this->initializeModel();
}

OAIReturnInstanceStatusType::~OAIReturnInstanceStatusType() {}

void OAIReturnInstanceStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReturnInstanceStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReturnInstanceStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_TRANSIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::IN_TRANSIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_PICKUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::READY_FOR_PICKUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::PICKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RECEIVED_ON_FULFILLMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::RECEIVED_ON_FULFILLMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::LOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UTILIZED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::UTILIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PREPARED_FOR_UTILIZATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::PREPARED_FOR_UTILIZATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPROPRIATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::EXPROPRIATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_IN_DEMAND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnInstanceStatusType::NOT_IN_DEMAND;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReturnInstanceStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReturnInstanceStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReturnInstanceStatusType::CREATED:
            val = "CREATED";
            break;
        case eOAIReturnInstanceStatusType::RECEIVED:
            val = "RECEIVED";
            break;
        case eOAIReturnInstanceStatusType::IN_TRANSIT:
            val = "IN_TRANSIT";
            break;
        case eOAIReturnInstanceStatusType::READY_FOR_PICKUP:
            val = "READY_FOR_PICKUP";
            break;
        case eOAIReturnInstanceStatusType::PICKED:
            val = "PICKED";
            break;
        case eOAIReturnInstanceStatusType::RECEIVED_ON_FULFILLMENT:
            val = "RECEIVED_ON_FULFILLMENT";
            break;
        case eOAIReturnInstanceStatusType::CANCELLED:
            val = "CANCELLED";
            break;
        case eOAIReturnInstanceStatusType::LOST:
            val = "LOST";
            break;
        case eOAIReturnInstanceStatusType::UTILIZED:
            val = "UTILIZED";
            break;
        case eOAIReturnInstanceStatusType::PREPARED_FOR_UTILIZATION:
            val = "PREPARED_FOR_UTILIZATION";
            break;
        case eOAIReturnInstanceStatusType::EXPROPRIATED:
            val = "EXPROPRIATED";
            break;
        case eOAIReturnInstanceStatusType::NOT_IN_DEMAND:
            val = "NOT_IN_DEMAND";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReturnInstanceStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReturnInstanceStatusType::eOAIReturnInstanceStatusType OAIReturnInstanceStatusType::getValue() const {
    return m_value;
}

void OAIReturnInstanceStatusType::setValue(const OAIReturnInstanceStatusType::eOAIReturnInstanceStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReturnInstanceStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIReturnInstanceStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
