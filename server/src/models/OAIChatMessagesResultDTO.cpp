/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChatMessagesResultDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChatMessagesResultDTO::OAIChatMessagesResultDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChatMessagesResultDTO::OAIChatMessagesResultDTO() {
    this->initializeModel();
}

OAIChatMessagesResultDTO::~OAIChatMessagesResultDTO() {}

void OAIChatMessagesResultDTO::initializeModel() {

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_paging_isSet = false;
    m_paging_isValid = false;
}

void OAIChatMessagesResultDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChatMessagesResultDTO::fromJsonObject(QJsonObject json) {

    m_order_id_isValid = ::OpenAPI::fromJsonValue(order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_paging_isValid = ::OpenAPI::fromJsonValue(paging, json[QString("paging")]);
    m_paging_isSet = !json[QString("paging")].isNull() && m_paging_isValid;
}

QString OAIChatMessagesResultDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChatMessagesResultDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(order_id));
    }
    if (messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(messages));
    }
    if (paging.isSet()) {
        obj.insert(QString("paging"), ::OpenAPI::toJsonValue(paging));
    }
    return obj;
}

qint64 OAIChatMessagesResultDTO::getOrderId() const {
    return order_id;
}
void OAIChatMessagesResultDTO::setOrderId(const qint64 &order_id) {
    this->order_id = order_id;
    this->m_order_id_isSet = true;
}

bool OAIChatMessagesResultDTO::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIChatMessagesResultDTO::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QList<OAIChatMessageDTO> OAIChatMessagesResultDTO::getMessages() const {
    return messages;
}
void OAIChatMessagesResultDTO::setMessages(const QList<OAIChatMessageDTO> &messages) {
    this->messages = messages;
    this->m_messages_isSet = true;
}

bool OAIChatMessagesResultDTO::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIChatMessagesResultDTO::is_messages_Valid() const{
    return m_messages_isValid;
}

OAIForwardScrollingPagerDTO OAIChatMessagesResultDTO::getPaging() const {
    return paging;
}
void OAIChatMessagesResultDTO::setPaging(const OAIForwardScrollingPagerDTO &paging) {
    this->paging = paging;
    this->m_paging_isSet = true;
}

bool OAIChatMessagesResultDTO::is_paging_Set() const{
    return m_paging_isSet;
}

bool OAIChatMessagesResultDTO::is_paging_Valid() const{
    return m_paging_isValid;
}

bool OAIChatMessagesResultDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (paging.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChatMessagesResultDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_order_id_isValid && m_messages_isValid && true;
}

} // namespace OpenAPI
