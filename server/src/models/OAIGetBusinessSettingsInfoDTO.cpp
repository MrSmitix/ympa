/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBusinessSettingsInfoDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBusinessSettingsInfoDTO::OAIGetBusinessSettingsInfoDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBusinessSettingsInfoDTO::OAIGetBusinessSettingsInfoDTO() {
    this->initializeModel();
}

OAIGetBusinessSettingsInfoDTO::~OAIGetBusinessSettingsInfoDTO() {}

void OAIGetBusinessSettingsInfoDTO::initializeModel() {

    m_info_isSet = false;
    m_info_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAIGetBusinessSettingsInfoDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBusinessSettingsInfoDTO::fromJsonObject(QJsonObject json) {

    m_info_isValid = ::OpenAPI::fromJsonValue(info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;
}

QString OAIGetBusinessSettingsInfoDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBusinessSettingsInfoDTO::asJsonObject() const {
    QJsonObject obj;
    if (info.isSet()) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(info));
    }
    if (settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(settings));
    }
    return obj;
}

OAIBusinessDTO OAIGetBusinessSettingsInfoDTO::getInfo() const {
    return info;
}
void OAIGetBusinessSettingsInfoDTO::setInfo(const OAIBusinessDTO &info) {
    this->info = info;
    this->m_info_isSet = true;
}

bool OAIGetBusinessSettingsInfoDTO::is_info_Set() const{
    return m_info_isSet;
}

bool OAIGetBusinessSettingsInfoDTO::is_info_Valid() const{
    return m_info_isValid;
}

OAIBusinessSettingsDTO OAIGetBusinessSettingsInfoDTO::getSettings() const {
    return settings;
}
void OAIGetBusinessSettingsInfoDTO::setSettings(const OAIBusinessSettingsDTO &settings) {
    this->settings = settings;
    this->m_settings_isSet = true;
}

bool OAIGetBusinessSettingsInfoDTO::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIGetBusinessSettingsInfoDTO::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAIGetBusinessSettingsInfoDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBusinessSettingsInfoDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
