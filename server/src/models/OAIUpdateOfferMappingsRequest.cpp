/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateOfferMappingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateOfferMappingsRequest::OAIUpdateOfferMappingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateOfferMappingsRequest::OAIUpdateOfferMappingsRequest() {
    this->initializeModel();
}

OAIUpdateOfferMappingsRequest::~OAIUpdateOfferMappingsRequest() {}

void OAIUpdateOfferMappingsRequest::initializeModel() {

    m_offer_mappings_isSet = false;
    m_offer_mappings_isValid = false;

    m_only_partner_media_content_isSet = false;
    m_only_partner_media_content_isValid = false;
}

void OAIUpdateOfferMappingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateOfferMappingsRequest::fromJsonObject(QJsonObject json) {

    m_offer_mappings_isValid = ::OpenAPI::fromJsonValue(offer_mappings, json[QString("offerMappings")]);
    m_offer_mappings_isSet = !json[QString("offerMappings")].isNull() && m_offer_mappings_isValid;

    m_only_partner_media_content_isValid = ::OpenAPI::fromJsonValue(only_partner_media_content, json[QString("onlyPartnerMediaContent")]);
    m_only_partner_media_content_isSet = !json[QString("onlyPartnerMediaContent")].isNull() && m_only_partner_media_content_isValid;
}

QString OAIUpdateOfferMappingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateOfferMappingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (offer_mappings.size() > 0) {
        obj.insert(QString("offerMappings"), ::OpenAPI::toJsonValue(offer_mappings));
    }
    if (m_only_partner_media_content_isSet) {
        obj.insert(QString("onlyPartnerMediaContent"), ::OpenAPI::toJsonValue(only_partner_media_content));
    }
    return obj;
}

QList<OAIUpdateOfferMappingDTO> OAIUpdateOfferMappingsRequest::getOfferMappings() const {
    return offer_mappings;
}
void OAIUpdateOfferMappingsRequest::setOfferMappings(const QList<OAIUpdateOfferMappingDTO> &offer_mappings) {
    this->offer_mappings = offer_mappings;
    this->m_offer_mappings_isSet = true;
}

bool OAIUpdateOfferMappingsRequest::is_offer_mappings_Set() const{
    return m_offer_mappings_isSet;
}

bool OAIUpdateOfferMappingsRequest::is_offer_mappings_Valid() const{
    return m_offer_mappings_isValid;
}

bool OAIUpdateOfferMappingsRequest::isOnlyPartnerMediaContent() const {
    return only_partner_media_content;
}
void OAIUpdateOfferMappingsRequest::setOnlyPartnerMediaContent(const bool &only_partner_media_content) {
    this->only_partner_media_content = only_partner_media_content;
    this->m_only_partner_media_content_isSet = true;
}

bool OAIUpdateOfferMappingsRequest::is_only_partner_media_content_Set() const{
    return m_only_partner_media_content_isSet;
}

bool OAIUpdateOfferMappingsRequest::is_only_partner_media_content_Valid() const{
    return m_only_partner_media_content_isValid;
}

bool OAIUpdateOfferMappingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (offer_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_partner_media_content_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateOfferMappingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_offer_mappings_isValid && true;
}

} // namespace OpenAPI
