/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPromoAssortmentInfoDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPromoAssortmentInfoDTO::OAIGetPromoAssortmentInfoDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPromoAssortmentInfoDTO::OAIGetPromoAssortmentInfoDTO() {
    this->initializeModel();
}

OAIGetPromoAssortmentInfoDTO::~OAIGetPromoAssortmentInfoDTO() {}

void OAIGetPromoAssortmentInfoDTO::initializeModel() {

    m_active_offers_isSet = false;
    m_active_offers_isValid = false;

    m_potential_offers_isSet = false;
    m_potential_offers_isValid = false;

    m_processing_isSet = false;
    m_processing_isValid = false;
}

void OAIGetPromoAssortmentInfoDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPromoAssortmentInfoDTO::fromJsonObject(QJsonObject json) {

    m_active_offers_isValid = ::OpenAPI::fromJsonValue(active_offers, json[QString("activeOffers")]);
    m_active_offers_isSet = !json[QString("activeOffers")].isNull() && m_active_offers_isValid;

    m_potential_offers_isValid = ::OpenAPI::fromJsonValue(potential_offers, json[QString("potentialOffers")]);
    m_potential_offers_isSet = !json[QString("potentialOffers")].isNull() && m_potential_offers_isValid;

    m_processing_isValid = ::OpenAPI::fromJsonValue(processing, json[QString("processing")]);
    m_processing_isSet = !json[QString("processing")].isNull() && m_processing_isValid;
}

QString OAIGetPromoAssortmentInfoDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPromoAssortmentInfoDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_active_offers_isSet) {
        obj.insert(QString("activeOffers"), ::OpenAPI::toJsonValue(active_offers));
    }
    if (m_potential_offers_isSet) {
        obj.insert(QString("potentialOffers"), ::OpenAPI::toJsonValue(potential_offers));
    }
    if (m_processing_isSet) {
        obj.insert(QString("processing"), ::OpenAPI::toJsonValue(processing));
    }
    return obj;
}

qint32 OAIGetPromoAssortmentInfoDTO::getActiveOffers() const {
    return active_offers;
}
void OAIGetPromoAssortmentInfoDTO::setActiveOffers(const qint32 &active_offers) {
    this->active_offers = active_offers;
    this->m_active_offers_isSet = true;
}

bool OAIGetPromoAssortmentInfoDTO::is_active_offers_Set() const{
    return m_active_offers_isSet;
}

bool OAIGetPromoAssortmentInfoDTO::is_active_offers_Valid() const{
    return m_active_offers_isValid;
}

qint32 OAIGetPromoAssortmentInfoDTO::getPotentialOffers() const {
    return potential_offers;
}
void OAIGetPromoAssortmentInfoDTO::setPotentialOffers(const qint32 &potential_offers) {
    this->potential_offers = potential_offers;
    this->m_potential_offers_isSet = true;
}

bool OAIGetPromoAssortmentInfoDTO::is_potential_offers_Set() const{
    return m_potential_offers_isSet;
}

bool OAIGetPromoAssortmentInfoDTO::is_potential_offers_Valid() const{
    return m_potential_offers_isValid;
}

bool OAIGetPromoAssortmentInfoDTO::isProcessing() const {
    return processing;
}
void OAIGetPromoAssortmentInfoDTO::setProcessing(const bool &processing) {
    this->processing = processing;
    this->m_processing_isSet = true;
}

bool OAIGetPromoAssortmentInfoDTO::is_processing_Set() const{
    return m_processing_isSet;
}

bool OAIGetPromoAssortmentInfoDTO::is_processing_Valid() const{
    return m_processing_isValid;
}

bool OAIGetPromoAssortmentInfoDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_offers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_potential_offers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPromoAssortmentInfoDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_offers_isValid && true;
}

} // namespace OpenAPI
