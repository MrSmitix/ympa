/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateStockItemDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateStockItemDTO::OAIUpdateStockItemDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateStockItemDTO::OAIUpdateStockItemDTO() {
    this->initializeModel();
}

OAIUpdateStockItemDTO::~OAIUpdateStockItemDTO() {}

void OAIUpdateStockItemDTO::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIUpdateStockItemDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateStockItemDTO::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIUpdateStockItemDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateStockItemDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(count));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(updated_at));
    }
    return obj;
}

qint64 OAIUpdateStockItemDTO::getCount() const {
    return count;
}
void OAIUpdateStockItemDTO::setCount(const qint64 &count) {
    this->count = count;
    this->m_count_isSet = true;
}

bool OAIUpdateStockItemDTO::is_count_Set() const{
    return m_count_isSet;
}

bool OAIUpdateStockItemDTO::is_count_Valid() const{
    return m_count_isValid;
}

QDateTime OAIUpdateStockItemDTO::getUpdatedAt() const {
    return updated_at;
}
void OAIUpdateStockItemDTO::setUpdatedAt(const QDateTime &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool OAIUpdateStockItemDTO::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIUpdateStockItemDTO::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIUpdateStockItemDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateStockItemDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && true;
}

} // namespace OpenAPI
