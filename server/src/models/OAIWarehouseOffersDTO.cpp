/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseOffersDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseOffersDTO::OAIWarehouseOffersDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseOffersDTO::OAIWarehouseOffersDTO() {
    this->initializeModel();
}

OAIWarehouseOffersDTO::~OAIWarehouseOffersDTO() {}

void OAIWarehouseOffersDTO::initializeModel() {

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;

    m_offers_isSet = false;
    m_offers_isValid = false;
}

void OAIWarehouseOffersDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseOffersDTO::fromJsonObject(QJsonObject json) {

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(warehouse_id, json[QString("warehouseId")]);
    m_warehouse_id_isSet = !json[QString("warehouseId")].isNull() && m_warehouse_id_isValid;

    m_offers_isValid = ::OpenAPI::fromJsonValue(offers, json[QString("offers")]);
    m_offers_isSet = !json[QString("offers")].isNull() && m_offers_isValid;
}

QString OAIWarehouseOffersDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseOffersDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouseId"), ::OpenAPI::toJsonValue(warehouse_id));
    }
    if (offers.size() > 0) {
        obj.insert(QString("offers"), ::OpenAPI::toJsonValue(offers));
    }
    return obj;
}

qint64 OAIWarehouseOffersDTO::getWarehouseId() const {
    return warehouse_id;
}
void OAIWarehouseOffersDTO::setWarehouseId(const qint64 &warehouse_id) {
    this->warehouse_id = warehouse_id;
    this->m_warehouse_id_isSet = true;
}

bool OAIWarehouseOffersDTO::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIWarehouseOffersDTO::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

QList<OAIWarehouseOfferDTO> OAIWarehouseOffersDTO::getOffers() const {
    return offers;
}
void OAIWarehouseOffersDTO::setOffers(const QList<OAIWarehouseOfferDTO> &offers) {
    this->offers = offers;
    this->m_offers_isSet = true;
}

bool OAIWarehouseOffersDTO::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAIWarehouseOffersDTO::is_offers_Valid() const{
    return m_offers_isValid;
}

bool OAIWarehouseOffersDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseOffersDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_warehouse_id_isValid && m_offers_isValid && true;
}

} // namespace OpenAPI
