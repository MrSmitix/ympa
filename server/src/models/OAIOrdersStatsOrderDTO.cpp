/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrdersStatsOrderDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrdersStatsOrderDTO::OAIOrdersStatsOrderDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrdersStatsOrderDTO::OAIOrdersStatsOrderDTO() {
    this->initializeModel();
}

OAIOrdersStatsOrderDTO::~OAIOrdersStatsOrderDTO() {}

void OAIOrdersStatsOrderDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_status_update_date_isSet = false;
    m_status_update_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_partner_order_id_isSet = false;
    m_partner_order_id_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_fake_isSet = false;
    m_fake_isValid = false;

    m_delivery_region_isSet = false;
    m_delivery_region_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_initial_items_isSet = false;
    m_initial_items_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_commissions_isSet = false;
    m_commissions_isValid = false;
}

void OAIOrdersStatsOrderDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrdersStatsOrderDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_status_update_date_isValid = ::OpenAPI::fromJsonValue(status_update_date, json[QString("statusUpdateDate")]);
    m_status_update_date_isSet = !json[QString("statusUpdateDate")].isNull() && m_status_update_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_partner_order_id_isValid = ::OpenAPI::fromJsonValue(partner_order_id, json[QString("partnerOrderId")]);
    m_partner_order_id_isSet = !json[QString("partnerOrderId")].isNull() && m_partner_order_id_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(payment_type, json[QString("paymentType")]);
    m_payment_type_isSet = !json[QString("paymentType")].isNull() && m_payment_type_isValid;

    m_fake_isValid = ::OpenAPI::fromJsonValue(fake, json[QString("fake")]);
    m_fake_isSet = !json[QString("fake")].isNull() && m_fake_isValid;

    m_delivery_region_isValid = ::OpenAPI::fromJsonValue(delivery_region, json[QString("deliveryRegion")]);
    m_delivery_region_isSet = !json[QString("deliveryRegion")].isNull() && m_delivery_region_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_initial_items_isValid = ::OpenAPI::fromJsonValue(initial_items, json[QString("initialItems")]);
    m_initial_items_isSet = !json[QString("initialItems")].isNull() && m_initial_items_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(payments, json[QString("payments")]);
    m_payments_isSet = !json[QString("payments")].isNull() && m_payments_isValid;

    m_commissions_isValid = ::OpenAPI::fromJsonValue(commissions, json[QString("commissions")]);
    m_commissions_isSet = !json[QString("commissions")].isNull() && m_commissions_isValid;
}

QString OAIOrdersStatsOrderDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrdersStatsOrderDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(creation_date));
    }
    if (m_status_update_date_isSet) {
        obj.insert(QString("statusUpdateDate"), ::OpenAPI::toJsonValue(status_update_date));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_partner_order_id_isSet) {
        obj.insert(QString("partnerOrderId"), ::OpenAPI::toJsonValue(partner_order_id));
    }
    if (payment_type.isSet()) {
        obj.insert(QString("paymentType"), ::OpenAPI::toJsonValue(payment_type));
    }
    if (m_fake_isSet) {
        obj.insert(QString("fake"), ::OpenAPI::toJsonValue(fake));
    }
    if (delivery_region.isSet()) {
        obj.insert(QString("deliveryRegion"), ::OpenAPI::toJsonValue(delivery_region));
    }
    if (items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(items));
    }
    if (initial_items.size() > 0) {
        obj.insert(QString("initialItems"), ::OpenAPI::toJsonValue(initial_items));
    }
    if (payments.size() > 0) {
        obj.insert(QString("payments"), ::OpenAPI::toJsonValue(payments));
    }
    if (commissions.size() > 0) {
        obj.insert(QString("commissions"), ::OpenAPI::toJsonValue(commissions));
    }
    return obj;
}

qint64 OAIOrdersStatsOrderDTO::getId() const {
    return id;
}
void OAIOrdersStatsOrderDTO::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrdersStatsOrderDTO::is_id_Valid() const{
    return m_id_isValid;
}

QDate OAIOrdersStatsOrderDTO::getCreationDate() const {
    return creation_date;
}
void OAIOrdersStatsOrderDTO::setCreationDate(const QDate &creation_date) {
    this->creation_date = creation_date;
    this->m_creation_date_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIOrdersStatsOrderDTO::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIOrdersStatsOrderDTO::getStatusUpdateDate() const {
    return status_update_date;
}
void OAIOrdersStatsOrderDTO::setStatusUpdateDate(const QDateTime &status_update_date) {
    this->status_update_date = status_update_date;
    this->m_status_update_date_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_status_update_date_Set() const{
    return m_status_update_date_isSet;
}

bool OAIOrdersStatsOrderDTO::is_status_update_date_Valid() const{
    return m_status_update_date_isValid;
}

OAIOrderStatsStatusType OAIOrdersStatsOrderDTO::getStatus() const {
    return status;
}
void OAIOrdersStatsOrderDTO::setStatus(const OAIOrderStatsStatusType &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrdersStatsOrderDTO::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOrdersStatsOrderDTO::getPartnerOrderId() const {
    return partner_order_id;
}
void OAIOrdersStatsOrderDTO::setPartnerOrderId(const QString &partner_order_id) {
    this->partner_order_id = partner_order_id;
    this->m_partner_order_id_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_partner_order_id_Set() const{
    return m_partner_order_id_isSet;
}

bool OAIOrdersStatsOrderDTO::is_partner_order_id_Valid() const{
    return m_partner_order_id_isValid;
}

OAIOrdersStatsOrderPaymentType OAIOrdersStatsOrderDTO::getPaymentType() const {
    return payment_type;
}
void OAIOrdersStatsOrderDTO::setPaymentType(const OAIOrdersStatsOrderPaymentType &payment_type) {
    this->payment_type = payment_type;
    this->m_payment_type_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIOrdersStatsOrderDTO::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

bool OAIOrdersStatsOrderDTO::isFake() const {
    return fake;
}
void OAIOrdersStatsOrderDTO::setFake(const bool &fake) {
    this->fake = fake;
    this->m_fake_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_fake_Set() const{
    return m_fake_isSet;
}

bool OAIOrdersStatsOrderDTO::is_fake_Valid() const{
    return m_fake_isValid;
}

OAIOrdersStatsDeliveryRegionDTO OAIOrdersStatsOrderDTO::getDeliveryRegion() const {
    return delivery_region;
}
void OAIOrdersStatsOrderDTO::setDeliveryRegion(const OAIOrdersStatsDeliveryRegionDTO &delivery_region) {
    this->delivery_region = delivery_region;
    this->m_delivery_region_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_delivery_region_Set() const{
    return m_delivery_region_isSet;
}

bool OAIOrdersStatsOrderDTO::is_delivery_region_Valid() const{
    return m_delivery_region_isValid;
}

QList<OAIOrdersStatsItemDTO> OAIOrdersStatsOrderDTO::getItems() const {
    return items;
}
void OAIOrdersStatsOrderDTO::setItems(const QList<OAIOrdersStatsItemDTO> &items) {
    this->items = items;
    this->m_items_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOrdersStatsOrderDTO::is_items_Valid() const{
    return m_items_isValid;
}

QList<OAIOrdersStatsItemDTO> OAIOrdersStatsOrderDTO::getInitialItems() const {
    return initial_items;
}
void OAIOrdersStatsOrderDTO::setInitialItems(const QList<OAIOrdersStatsItemDTO> &initial_items) {
    this->initial_items = initial_items;
    this->m_initial_items_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_initial_items_Set() const{
    return m_initial_items_isSet;
}

bool OAIOrdersStatsOrderDTO::is_initial_items_Valid() const{
    return m_initial_items_isValid;
}

QList<OAIOrdersStatsPaymentDTO> OAIOrdersStatsOrderDTO::getPayments() const {
    return payments;
}
void OAIOrdersStatsOrderDTO::setPayments(const QList<OAIOrdersStatsPaymentDTO> &payments) {
    this->payments = payments;
    this->m_payments_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIOrdersStatsOrderDTO::is_payments_Valid() const{
    return m_payments_isValid;
}

QList<OAIOrdersStatsCommissionDTO> OAIOrdersStatsOrderDTO::getCommissions() const {
    return commissions;
}
void OAIOrdersStatsOrderDTO::setCommissions(const QList<OAIOrdersStatsCommissionDTO> &commissions) {
    this->commissions = commissions;
    this->m_commissions_isSet = true;
}

bool OAIOrdersStatsOrderDTO::is_commissions_Set() const{
    return m_commissions_isSet;
}

bool OAIOrdersStatsOrderDTO::is_commissions_Valid() const{
    return m_commissions_isValid;
}

bool OAIOrdersStatsOrderDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (payment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fake_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (delivery_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (initial_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (commissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrdersStatsOrderDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_items_isValid && m_payments_isValid && m_commissions_isValid && true;
}

} // namespace OpenAPI
