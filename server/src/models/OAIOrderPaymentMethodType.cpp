/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderPaymentMethodType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderPaymentMethodType::OAIOrderPaymentMethodType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderPaymentMethodType::OAIOrderPaymentMethodType() {
    this->initializeModel();
}

OAIOrderPaymentMethodType::~OAIOrderPaymentMethodType() {}

void OAIOrderPaymentMethodType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrderPaymentMethodType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrderPaymentMethodType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CASH_ON_DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::CASH_ON_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARD_ON_DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::CARD_ON_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BOUND_CARD_ON_DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::BOUND_CARD_ON_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("YANDEX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::YANDEX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPLE_PAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::APPLE_PAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXTERNAL_CERTIFICATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::EXTERNAL_CERTIFICATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREDIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::CREDIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GOOGLE_PAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::GOOGLE_PAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TINKOFF_CREDIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::TINKOFF_CREDIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SBP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::SBP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TINKOFF_INSTALLMENTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::TINKOFF_INSTALLMENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("B2B_ACCOUNT_PREPAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::B2B_ACCOUNT_PREPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("B2B_ACCOUNT_POSTPAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::B2B_ACCOUNT_POSTPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderPaymentMethodType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrderPaymentMethodType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrderPaymentMethodType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrderPaymentMethodType::CASH_ON_DELIVERY:
            val = "CASH_ON_DELIVERY";
            break;
        case eOAIOrderPaymentMethodType::CARD_ON_DELIVERY:
            val = "CARD_ON_DELIVERY";
            break;
        case eOAIOrderPaymentMethodType::BOUND_CARD_ON_DELIVERY:
            val = "BOUND_CARD_ON_DELIVERY";
            break;
        case eOAIOrderPaymentMethodType::YANDEX:
            val = "YANDEX";
            break;
        case eOAIOrderPaymentMethodType::APPLE_PAY:
            val = "APPLE_PAY";
            break;
        case eOAIOrderPaymentMethodType::EXTERNAL_CERTIFICATE:
            val = "EXTERNAL_CERTIFICATE";
            break;
        case eOAIOrderPaymentMethodType::CREDIT:
            val = "CREDIT";
            break;
        case eOAIOrderPaymentMethodType::GOOGLE_PAY:
            val = "GOOGLE_PAY";
            break;
        case eOAIOrderPaymentMethodType::TINKOFF_CREDIT:
            val = "TINKOFF_CREDIT";
            break;
        case eOAIOrderPaymentMethodType::SBP:
            val = "SBP";
            break;
        case eOAIOrderPaymentMethodType::TINKOFF_INSTALLMENTS:
            val = "TINKOFF_INSTALLMENTS";
            break;
        case eOAIOrderPaymentMethodType::B2B_ACCOUNT_PREPAYMENT:
            val = "B2B_ACCOUNT_PREPAYMENT";
            break;
        case eOAIOrderPaymentMethodType::B2B_ACCOUNT_POSTPAYMENT:
            val = "B2B_ACCOUNT_POSTPAYMENT";
            break;
        case eOAIOrderPaymentMethodType::UNKNOWN:
            val = "UNKNOWN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrderPaymentMethodType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrderPaymentMethodType::eOAIOrderPaymentMethodType OAIOrderPaymentMethodType::getValue() const {
    return m_value;
}

void OAIOrderPaymentMethodType::setValue(const OAIOrderPaymentMethodType::eOAIOrderPaymentMethodType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrderPaymentMethodType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrderPaymentMethodType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
