/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateTariffsParametersDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateTariffsParametersDTO::OAICalculateTariffsParametersDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateTariffsParametersDTO::OAICalculateTariffsParametersDTO() {
    this->initializeModel();
}

OAICalculateTariffsParametersDTO::~OAICalculateTariffsParametersDTO() {}

void OAICalculateTariffsParametersDTO::initializeModel() {

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_selling_program_isSet = false;
    m_selling_program_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;
}

void OAICalculateTariffsParametersDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateTariffsParametersDTO::fromJsonObject(QJsonObject json) {

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_selling_program_isValid = ::OpenAPI::fromJsonValue(selling_program, json[QString("sellingProgram")]);
    m_selling_program_isSet = !json[QString("sellingProgram")].isNull() && m_selling_program_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;
}

QString OAICalculateTariffsParametersDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateTariffsParametersDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(campaign_id));
    }
    if (selling_program.isSet()) {
        obj.insert(QString("sellingProgram"), ::OpenAPI::toJsonValue(selling_program));
    }
    if (frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(frequency));
    }
    return obj;
}

qint64 OAICalculateTariffsParametersDTO::getCampaignId() const {
    return campaign_id;
}
void OAICalculateTariffsParametersDTO::setCampaignId(const qint64 &campaign_id) {
    this->campaign_id = campaign_id;
    this->m_campaign_id_isSet = true;
}

bool OAICalculateTariffsParametersDTO::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAICalculateTariffsParametersDTO::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

OAISellingProgramType OAICalculateTariffsParametersDTO::getSellingProgram() const {
    return selling_program;
}
void OAICalculateTariffsParametersDTO::setSellingProgram(const OAISellingProgramType &selling_program) {
    this->selling_program = selling_program;
    this->m_selling_program_isSet = true;
}

bool OAICalculateTariffsParametersDTO::is_selling_program_Set() const{
    return m_selling_program_isSet;
}

bool OAICalculateTariffsParametersDTO::is_selling_program_Valid() const{
    return m_selling_program_isValid;
}

OAIPaymentFrequencyType OAICalculateTariffsParametersDTO::getFrequency() const {
    return frequency;
}
void OAICalculateTariffsParametersDTO::setFrequency(const OAIPaymentFrequencyType &frequency) {
    this->frequency = frequency;
    this->m_frequency_isSet = true;
}

bool OAICalculateTariffsParametersDTO::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAICalculateTariffsParametersDTO::is_frequency_Valid() const{
    return m_frequency_isValid;
}

bool OAICalculateTariffsParametersDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (selling_program.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateTariffsParametersDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
