/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceCompetitivenessThresholdsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceCompetitivenessThresholdsDTO::OAIPriceCompetitivenessThresholdsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceCompetitivenessThresholdsDTO::OAIPriceCompetitivenessThresholdsDTO() {
    this->initializeModel();
}

OAIPriceCompetitivenessThresholdsDTO::~OAIPriceCompetitivenessThresholdsDTO() {}

void OAIPriceCompetitivenessThresholdsDTO::initializeModel() {

    m_optimal_price_isSet = false;
    m_optimal_price_isValid = false;

    m_average_price_isSet = false;
    m_average_price_isValid = false;
}

void OAIPriceCompetitivenessThresholdsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceCompetitivenessThresholdsDTO::fromJsonObject(QJsonObject json) {

    m_optimal_price_isValid = ::OpenAPI::fromJsonValue(optimal_price, json[QString("optimalPrice")]);
    m_optimal_price_isSet = !json[QString("optimalPrice")].isNull() && m_optimal_price_isValid;

    m_average_price_isValid = ::OpenAPI::fromJsonValue(average_price, json[QString("averagePrice")]);
    m_average_price_isSet = !json[QString("averagePrice")].isNull() && m_average_price_isValid;
}

QString OAIPriceCompetitivenessThresholdsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceCompetitivenessThresholdsDTO::asJsonObject() const {
    QJsonObject obj;
    if (optimal_price.isSet()) {
        obj.insert(QString("optimalPrice"), ::OpenAPI::toJsonValue(optimal_price));
    }
    if (average_price.isSet()) {
        obj.insert(QString("averagePrice"), ::OpenAPI::toJsonValue(average_price));
    }
    return obj;
}

OAIBasePriceDTO OAIPriceCompetitivenessThresholdsDTO::getOptimalPrice() const {
    return optimal_price;
}
void OAIPriceCompetitivenessThresholdsDTO::setOptimalPrice(const OAIBasePriceDTO &optimal_price) {
    this->optimal_price = optimal_price;
    this->m_optimal_price_isSet = true;
}

bool OAIPriceCompetitivenessThresholdsDTO::is_optimal_price_Set() const{
    return m_optimal_price_isSet;
}

bool OAIPriceCompetitivenessThresholdsDTO::is_optimal_price_Valid() const{
    return m_optimal_price_isValid;
}

OAIBasePriceDTO OAIPriceCompetitivenessThresholdsDTO::getAveragePrice() const {
    return average_price;
}
void OAIPriceCompetitivenessThresholdsDTO::setAveragePrice(const OAIBasePriceDTO &average_price) {
    this->average_price = average_price;
    this->m_average_price_isSet = true;
}

bool OAIPriceCompetitivenessThresholdsDTO::is_average_price_Set() const{
    return m_average_price_isSet;
}

bool OAIPriceCompetitivenessThresholdsDTO::is_average_price_Valid() const{
    return m_average_price_isValid;
}

bool OAIPriceCompetitivenessThresholdsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (optimal_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (average_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceCompetitivenessThresholdsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
