/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnDecisionReasonType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnDecisionReasonType::OAIReturnDecisionReasonType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnDecisionReasonType::OAIReturnDecisionReasonType() {
    this->initializeModel();
}

OAIReturnDecisionReasonType::~OAIReturnDecisionReasonType() {}

void OAIReturnDecisionReasonType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReturnDecisionReasonType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReturnDecisionReasonType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BAD_QUALITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionReasonType::BAD_QUALITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOES_NOT_FIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionReasonType::DOES_NOT_FIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WRONG_ITEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionReasonType::WRONG_ITEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DAMAGE_DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionReasonType::DAMAGE_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOYALTY_FAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionReasonType::LOYALTY_FAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTENT_FAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionReasonType::CONTENT_FAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnDecisionReasonType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReturnDecisionReasonType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReturnDecisionReasonType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReturnDecisionReasonType::BAD_QUALITY:
            val = "BAD_QUALITY";
            break;
        case eOAIReturnDecisionReasonType::DOES_NOT_FIT:
            val = "DOES_NOT_FIT";
            break;
        case eOAIReturnDecisionReasonType::WRONG_ITEM:
            val = "WRONG_ITEM";
            break;
        case eOAIReturnDecisionReasonType::DAMAGE_DELIVERY:
            val = "DAMAGE_DELIVERY";
            break;
        case eOAIReturnDecisionReasonType::LOYALTY_FAIL:
            val = "LOYALTY_FAIL";
            break;
        case eOAIReturnDecisionReasonType::CONTENT_FAIL:
            val = "CONTENT_FAIL";
            break;
        case eOAIReturnDecisionReasonType::UNKNOWN:
            val = "UNKNOWN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReturnDecisionReasonType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReturnDecisionReasonType::eOAIReturnDecisionReasonType OAIReturnDecisionReasonType::getValue() const {
    return m_value;
}

void OAIReturnDecisionReasonType::setValue(const OAIReturnDecisionReasonType::eOAIReturnDecisionReasonType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReturnDecisionReasonType::isSet() const {
    
    return m_value_isSet;
}

bool OAIReturnDecisionReasonType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
