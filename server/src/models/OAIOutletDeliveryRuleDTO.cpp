/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutletDeliveryRuleDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutletDeliveryRuleDTO::OAIOutletDeliveryRuleDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutletDeliveryRuleDTO::OAIOutletDeliveryRuleDTO() {
    this->initializeModel();
}

OAIOutletDeliveryRuleDTO::~OAIOutletDeliveryRuleDTO() {}

void OAIOutletDeliveryRuleDTO::initializeModel() {

    m_min_delivery_days_isSet = false;
    m_min_delivery_days_isValid = false;

    m_max_delivery_days_isSet = false;
    m_max_delivery_days_isValid = false;

    m_delivery_service_id_isSet = false;
    m_delivery_service_id_isValid = false;

    m_order_before_isSet = false;
    m_order_before_isValid = false;

    m_price_free_pickup_isSet = false;
    m_price_free_pickup_isValid = false;

    m_unspecified_delivery_interval_isSet = false;
    m_unspecified_delivery_interval_isValid = false;
}

void OAIOutletDeliveryRuleDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutletDeliveryRuleDTO::fromJsonObject(QJsonObject json) {

    m_min_delivery_days_isValid = ::OpenAPI::fromJsonValue(min_delivery_days, json[QString("minDeliveryDays")]);
    m_min_delivery_days_isSet = !json[QString("minDeliveryDays")].isNull() && m_min_delivery_days_isValid;

    m_max_delivery_days_isValid = ::OpenAPI::fromJsonValue(max_delivery_days, json[QString("maxDeliveryDays")]);
    m_max_delivery_days_isSet = !json[QString("maxDeliveryDays")].isNull() && m_max_delivery_days_isValid;

    m_delivery_service_id_isValid = ::OpenAPI::fromJsonValue(delivery_service_id, json[QString("deliveryServiceId")]);
    m_delivery_service_id_isSet = !json[QString("deliveryServiceId")].isNull() && m_delivery_service_id_isValid;

    m_order_before_isValid = ::OpenAPI::fromJsonValue(order_before, json[QString("orderBefore")]);
    m_order_before_isSet = !json[QString("orderBefore")].isNull() && m_order_before_isValid;

    m_price_free_pickup_isValid = ::OpenAPI::fromJsonValue(price_free_pickup, json[QString("priceFreePickup")]);
    m_price_free_pickup_isSet = !json[QString("priceFreePickup")].isNull() && m_price_free_pickup_isValid;

    m_unspecified_delivery_interval_isValid = ::OpenAPI::fromJsonValue(unspecified_delivery_interval, json[QString("unspecifiedDeliveryInterval")]);
    m_unspecified_delivery_interval_isSet = !json[QString("unspecifiedDeliveryInterval")].isNull() && m_unspecified_delivery_interval_isValid;
}

QString OAIOutletDeliveryRuleDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutletDeliveryRuleDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_min_delivery_days_isSet) {
        obj.insert(QString("minDeliveryDays"), ::OpenAPI::toJsonValue(min_delivery_days));
    }
    if (m_max_delivery_days_isSet) {
        obj.insert(QString("maxDeliveryDays"), ::OpenAPI::toJsonValue(max_delivery_days));
    }
    if (m_delivery_service_id_isSet) {
        obj.insert(QString("deliveryServiceId"), ::OpenAPI::toJsonValue(delivery_service_id));
    }
    if (m_order_before_isSet) {
        obj.insert(QString("orderBefore"), ::OpenAPI::toJsonValue(order_before));
    }
    if (m_price_free_pickup_isSet) {
        obj.insert(QString("priceFreePickup"), ::OpenAPI::toJsonValue(price_free_pickup));
    }
    if (m_unspecified_delivery_interval_isSet) {
        obj.insert(QString("unspecifiedDeliveryInterval"), ::OpenAPI::toJsonValue(unspecified_delivery_interval));
    }
    return obj;
}

qint32 OAIOutletDeliveryRuleDTO::getMinDeliveryDays() const {
    return min_delivery_days;
}
void OAIOutletDeliveryRuleDTO::setMinDeliveryDays(const qint32 &min_delivery_days) {
    this->min_delivery_days = min_delivery_days;
    this->m_min_delivery_days_isSet = true;
}

bool OAIOutletDeliveryRuleDTO::is_min_delivery_days_Set() const{
    return m_min_delivery_days_isSet;
}

bool OAIOutletDeliveryRuleDTO::is_min_delivery_days_Valid() const{
    return m_min_delivery_days_isValid;
}

qint32 OAIOutletDeliveryRuleDTO::getMaxDeliveryDays() const {
    return max_delivery_days;
}
void OAIOutletDeliveryRuleDTO::setMaxDeliveryDays(const qint32 &max_delivery_days) {
    this->max_delivery_days = max_delivery_days;
    this->m_max_delivery_days_isSet = true;
}

bool OAIOutletDeliveryRuleDTO::is_max_delivery_days_Set() const{
    return m_max_delivery_days_isSet;
}

bool OAIOutletDeliveryRuleDTO::is_max_delivery_days_Valid() const{
    return m_max_delivery_days_isValid;
}

qint64 OAIOutletDeliveryRuleDTO::getDeliveryServiceId() const {
    return delivery_service_id;
}
void OAIOutletDeliveryRuleDTO::setDeliveryServiceId(const qint64 &delivery_service_id) {
    this->delivery_service_id = delivery_service_id;
    this->m_delivery_service_id_isSet = true;
}

bool OAIOutletDeliveryRuleDTO::is_delivery_service_id_Set() const{
    return m_delivery_service_id_isSet;
}

bool OAIOutletDeliveryRuleDTO::is_delivery_service_id_Valid() const{
    return m_delivery_service_id_isValid;
}

qint32 OAIOutletDeliveryRuleDTO::getOrderBefore() const {
    return order_before;
}
void OAIOutletDeliveryRuleDTO::setOrderBefore(const qint32 &order_before) {
    this->order_before = order_before;
    this->m_order_before_isSet = true;
}

bool OAIOutletDeliveryRuleDTO::is_order_before_Set() const{
    return m_order_before_isSet;
}

bool OAIOutletDeliveryRuleDTO::is_order_before_Valid() const{
    return m_order_before_isValid;
}

double OAIOutletDeliveryRuleDTO::getPriceFreePickup() const {
    return price_free_pickup;
}
void OAIOutletDeliveryRuleDTO::setPriceFreePickup(const double &price_free_pickup) {
    this->price_free_pickup = price_free_pickup;
    this->m_price_free_pickup_isSet = true;
}

bool OAIOutletDeliveryRuleDTO::is_price_free_pickup_Set() const{
    return m_price_free_pickup_isSet;
}

bool OAIOutletDeliveryRuleDTO::is_price_free_pickup_Valid() const{
    return m_price_free_pickup_isValid;
}

bool OAIOutletDeliveryRuleDTO::isUnspecifiedDeliveryInterval() const {
    return unspecified_delivery_interval;
}
void OAIOutletDeliveryRuleDTO::setUnspecifiedDeliveryInterval(const bool &unspecified_delivery_interval) {
    this->unspecified_delivery_interval = unspecified_delivery_interval;
    this->m_unspecified_delivery_interval_isSet = true;
}

bool OAIOutletDeliveryRuleDTO::is_unspecified_delivery_interval_Set() const{
    return m_unspecified_delivery_interval_isSet;
}

bool OAIOutletDeliveryRuleDTO::is_unspecified_delivery_interval_Valid() const{
    return m_unspecified_delivery_interval_isValid;
}

bool OAIOutletDeliveryRuleDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_delivery_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_delivery_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_free_pickup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unspecified_delivery_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutletDeliveryRuleDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
