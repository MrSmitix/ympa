/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseGroupDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseGroupDTO::OAIWarehouseGroupDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseGroupDTO::OAIWarehouseGroupDTO() {
    this->initializeModel();
}

OAIWarehouseGroupDTO::~OAIWarehouseGroupDTO() {}

void OAIWarehouseGroupDTO::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_main_warehouse_isSet = false;
    m_main_warehouse_isValid = false;

    m_warehouses_isSet = false;
    m_warehouses_isValid = false;
}

void OAIWarehouseGroupDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseGroupDTO::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_main_warehouse_isValid = ::OpenAPI::fromJsonValue(main_warehouse, json[QString("mainWarehouse")]);
    m_main_warehouse_isSet = !json[QString("mainWarehouse")].isNull() && m_main_warehouse_isValid;

    m_warehouses_isValid = ::OpenAPI::fromJsonValue(warehouses, json[QString("warehouses")]);
    m_warehouses_isSet = !json[QString("warehouses")].isNull() && m_warehouses_isValid;
}

QString OAIWarehouseGroupDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseGroupDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (main_warehouse.isSet()) {
        obj.insert(QString("mainWarehouse"), ::OpenAPI::toJsonValue(main_warehouse));
    }
    if (warehouses.size() > 0) {
        obj.insert(QString("warehouses"), ::OpenAPI::toJsonValue(warehouses));
    }
    return obj;
}

QString OAIWarehouseGroupDTO::getName() const {
    return name;
}
void OAIWarehouseGroupDTO::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIWarehouseGroupDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWarehouseGroupDTO::is_name_Valid() const{
    return m_name_isValid;
}

OAIWarehouseDTO OAIWarehouseGroupDTO::getMainWarehouse() const {
    return main_warehouse;
}
void OAIWarehouseGroupDTO::setMainWarehouse(const OAIWarehouseDTO &main_warehouse) {
    this->main_warehouse = main_warehouse;
    this->m_main_warehouse_isSet = true;
}

bool OAIWarehouseGroupDTO::is_main_warehouse_Set() const{
    return m_main_warehouse_isSet;
}

bool OAIWarehouseGroupDTO::is_main_warehouse_Valid() const{
    return m_main_warehouse_isValid;
}

QList<OAIWarehouseDTO> OAIWarehouseGroupDTO::getWarehouses() const {
    return warehouses;
}
void OAIWarehouseGroupDTO::setWarehouses(const QList<OAIWarehouseDTO> &warehouses) {
    this->warehouses = warehouses;
    this->m_warehouses_isSet = true;
}

bool OAIWarehouseGroupDTO::is_warehouses_Set() const{
    return m_warehouses_isSet;
}

bool OAIWarehouseGroupDTO::is_warehouses_Valid() const{
    return m_warehouses_isValid;
}

bool OAIWarehouseGroupDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (main_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (warehouses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseGroupDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_main_warehouse_isValid && m_warehouses_isValid && true;
}

} // namespace OpenAPI
