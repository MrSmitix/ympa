/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderBusinessBuyerDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderBusinessBuyerDTO::OAIOrderBusinessBuyerDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderBusinessBuyerDTO::OAIOrderBusinessBuyerDTO() {
    this->initializeModel();
}

OAIOrderBusinessBuyerDTO::~OAIOrderBusinessBuyerDTO() {}

void OAIOrderBusinessBuyerDTO::initializeModel() {

    m_inn_isSet = false;
    m_inn_isValid = false;

    m_kpp_isSet = false;
    m_kpp_isValid = false;

    m_organization_name_isSet = false;
    m_organization_name_isValid = false;

    m_organization_jur_address_isSet = false;
    m_organization_jur_address_isValid = false;
}

void OAIOrderBusinessBuyerDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderBusinessBuyerDTO::fromJsonObject(QJsonObject json) {

    m_inn_isValid = ::OpenAPI::fromJsonValue(inn, json[QString("inn")]);
    m_inn_isSet = !json[QString("inn")].isNull() && m_inn_isValid;

    m_kpp_isValid = ::OpenAPI::fromJsonValue(kpp, json[QString("kpp")]);
    m_kpp_isSet = !json[QString("kpp")].isNull() && m_kpp_isValid;

    m_organization_name_isValid = ::OpenAPI::fromJsonValue(organization_name, json[QString("organizationName")]);
    m_organization_name_isSet = !json[QString("organizationName")].isNull() && m_organization_name_isValid;

    m_organization_jur_address_isValid = ::OpenAPI::fromJsonValue(organization_jur_address, json[QString("organizationJurAddress")]);
    m_organization_jur_address_isSet = !json[QString("organizationJurAddress")].isNull() && m_organization_jur_address_isValid;
}

QString OAIOrderBusinessBuyerDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderBusinessBuyerDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_inn_isSet) {
        obj.insert(QString("inn"), ::OpenAPI::toJsonValue(inn));
    }
    if (m_kpp_isSet) {
        obj.insert(QString("kpp"), ::OpenAPI::toJsonValue(kpp));
    }
    if (m_organization_name_isSet) {
        obj.insert(QString("organizationName"), ::OpenAPI::toJsonValue(organization_name));
    }
    if (m_organization_jur_address_isSet) {
        obj.insert(QString("organizationJurAddress"), ::OpenAPI::toJsonValue(organization_jur_address));
    }
    return obj;
}

QString OAIOrderBusinessBuyerDTO::getInn() const {
    return inn;
}
void OAIOrderBusinessBuyerDTO::setInn(const QString &inn) {
    this->inn = inn;
    this->m_inn_isSet = true;
}

bool OAIOrderBusinessBuyerDTO::is_inn_Set() const{
    return m_inn_isSet;
}

bool OAIOrderBusinessBuyerDTO::is_inn_Valid() const{
    return m_inn_isValid;
}

QString OAIOrderBusinessBuyerDTO::getKpp() const {
    return kpp;
}
void OAIOrderBusinessBuyerDTO::setKpp(const QString &kpp) {
    this->kpp = kpp;
    this->m_kpp_isSet = true;
}

bool OAIOrderBusinessBuyerDTO::is_kpp_Set() const{
    return m_kpp_isSet;
}

bool OAIOrderBusinessBuyerDTO::is_kpp_Valid() const{
    return m_kpp_isValid;
}

QString OAIOrderBusinessBuyerDTO::getOrganizationName() const {
    return organization_name;
}
void OAIOrderBusinessBuyerDTO::setOrganizationName(const QString &organization_name) {
    this->organization_name = organization_name;
    this->m_organization_name_isSet = true;
}

bool OAIOrderBusinessBuyerDTO::is_organization_name_Set() const{
    return m_organization_name_isSet;
}

bool OAIOrderBusinessBuyerDTO::is_organization_name_Valid() const{
    return m_organization_name_isValid;
}

QString OAIOrderBusinessBuyerDTO::getOrganizationJurAddress() const {
    return organization_jur_address;
}
void OAIOrderBusinessBuyerDTO::setOrganizationJurAddress(const QString &organization_jur_address) {
    this->organization_jur_address = organization_jur_address;
    this->m_organization_jur_address_isSet = true;
}

bool OAIOrderBusinessBuyerDTO::is_organization_jur_address_Set() const{
    return m_organization_jur_address_isSet;
}

bool OAIOrderBusinessBuyerDTO::is_organization_jur_address_Valid() const{
    return m_organization_jur_address_isValid;
}

bool OAIOrderBusinessBuyerDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kpp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_jur_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderBusinessBuyerDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
