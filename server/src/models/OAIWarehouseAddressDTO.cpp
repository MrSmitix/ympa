/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseAddressDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseAddressDTO::OAIWarehouseAddressDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseAddressDTO::OAIWarehouseAddressDTO() {
    this->initializeModel();
}

OAIWarehouseAddressDTO::~OAIWarehouseAddressDTO() {}

void OAIWarehouseAddressDTO::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_building_isSet = false;
    m_building_isValid = false;

    m_block_isSet = false;
    m_block_isValid = false;

    m_gps_isSet = false;
    m_gps_isValid = false;
}

void OAIWarehouseAddressDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseAddressDTO::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_building_isValid = ::OpenAPI::fromJsonValue(building, json[QString("building")]);
    m_building_isSet = !json[QString("building")].isNull() && m_building_isValid;

    m_block_isValid = ::OpenAPI::fromJsonValue(block, json[QString("block")]);
    m_block_isSet = !json[QString("block")].isNull() && m_block_isValid;

    m_gps_isValid = ::OpenAPI::fromJsonValue(gps, json[QString("gps")]);
    m_gps_isSet = !json[QString("gps")].isNull() && m_gps_isValid;
}

QString OAIWarehouseAddressDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseAddressDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(city));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(street));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(number));
    }
    if (m_building_isSet) {
        obj.insert(QString("building"), ::OpenAPI::toJsonValue(building));
    }
    if (m_block_isSet) {
        obj.insert(QString("block"), ::OpenAPI::toJsonValue(block));
    }
    if (gps.isSet()) {
        obj.insert(QString("gps"), ::OpenAPI::toJsonValue(gps));
    }
    return obj;
}

QString OAIWarehouseAddressDTO::getCity() const {
    return city;
}
void OAIWarehouseAddressDTO::setCity(const QString &city) {
    this->city = city;
    this->m_city_isSet = true;
}

bool OAIWarehouseAddressDTO::is_city_Set() const{
    return m_city_isSet;
}

bool OAIWarehouseAddressDTO::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIWarehouseAddressDTO::getStreet() const {
    return street;
}
void OAIWarehouseAddressDTO::setStreet(const QString &street) {
    this->street = street;
    this->m_street_isSet = true;
}

bool OAIWarehouseAddressDTO::is_street_Set() const{
    return m_street_isSet;
}

bool OAIWarehouseAddressDTO::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIWarehouseAddressDTO::getNumber() const {
    return number;
}
void OAIWarehouseAddressDTO::setNumber(const QString &number) {
    this->number = number;
    this->m_number_isSet = true;
}

bool OAIWarehouseAddressDTO::is_number_Set() const{
    return m_number_isSet;
}

bool OAIWarehouseAddressDTO::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIWarehouseAddressDTO::getBuilding() const {
    return building;
}
void OAIWarehouseAddressDTO::setBuilding(const QString &building) {
    this->building = building;
    this->m_building_isSet = true;
}

bool OAIWarehouseAddressDTO::is_building_Set() const{
    return m_building_isSet;
}

bool OAIWarehouseAddressDTO::is_building_Valid() const{
    return m_building_isValid;
}

QString OAIWarehouseAddressDTO::getBlock() const {
    return block;
}
void OAIWarehouseAddressDTO::setBlock(const QString &block) {
    this->block = block;
    this->m_block_isSet = true;
}

bool OAIWarehouseAddressDTO::is_block_Set() const{
    return m_block_isSet;
}

bool OAIWarehouseAddressDTO::is_block_Valid() const{
    return m_block_isValid;
}

OAIGpsDTO OAIWarehouseAddressDTO::getGps() const {
    return gps;
}
void OAIWarehouseAddressDTO::setGps(const OAIGpsDTO &gps) {
    this->gps = gps;
    this->m_gps_isSet = true;
}

bool OAIWarehouseAddressDTO::is_gps_Set() const{
    return m_gps_isSet;
}

bool OAIWarehouseAddressDTO::is_gps_Valid() const{
    return m_gps_isValid;
}

bool OAIWarehouseAddressDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_building_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (gps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseAddressDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_city_isValid && m_gps_isValid && true;
}

} // namespace OpenAPI
