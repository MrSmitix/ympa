/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOutletsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOutletsResponse::OAIGetOutletsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOutletsResponse::OAIGetOutletsResponse() {
    this->initializeModel();
}

OAIGetOutletsResponse::~OAIGetOutletsResponse() {}

void OAIGetOutletsResponse::initializeModel() {

    m_outlets_isSet = false;
    m_outlets_isValid = false;

    m_paging_isSet = false;
    m_paging_isValid = false;

    m_pager_isSet = false;
    m_pager_isValid = false;
}

void OAIGetOutletsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOutletsResponse::fromJsonObject(QJsonObject json) {

    m_outlets_isValid = ::OpenAPI::fromJsonValue(outlets, json[QString("outlets")]);
    m_outlets_isSet = !json[QString("outlets")].isNull() && m_outlets_isValid;

    m_paging_isValid = ::OpenAPI::fromJsonValue(paging, json[QString("paging")]);
    m_paging_isSet = !json[QString("paging")].isNull() && m_paging_isValid;

    m_pager_isValid = ::OpenAPI::fromJsonValue(pager, json[QString("pager")]);
    m_pager_isSet = !json[QString("pager")].isNull() && m_pager_isValid;
}

QString OAIGetOutletsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOutletsResponse::asJsonObject() const {
    QJsonObject obj;
    if (outlets.size() > 0) {
        obj.insert(QString("outlets"), ::OpenAPI::toJsonValue(outlets));
    }
    if (paging.isSet()) {
        obj.insert(QString("paging"), ::OpenAPI::toJsonValue(paging));
    }
    if (pager.isSet()) {
        obj.insert(QString("pager"), ::OpenAPI::toJsonValue(pager));
    }
    return obj;
}

QList<OAIFullOutletDTO> OAIGetOutletsResponse::getOutlets() const {
    return outlets;
}
void OAIGetOutletsResponse::setOutlets(const QList<OAIFullOutletDTO> &outlets) {
    this->outlets = outlets;
    this->m_outlets_isSet = true;
}

bool OAIGetOutletsResponse::is_outlets_Set() const{
    return m_outlets_isSet;
}

bool OAIGetOutletsResponse::is_outlets_Valid() const{
    return m_outlets_isValid;
}

OAIScrollingPagerDTO OAIGetOutletsResponse::getPaging() const {
    return paging;
}
void OAIGetOutletsResponse::setPaging(const OAIScrollingPagerDTO &paging) {
    this->paging = paging;
    this->m_paging_isSet = true;
}

bool OAIGetOutletsResponse::is_paging_Set() const{
    return m_paging_isSet;
}

bool OAIGetOutletsResponse::is_paging_Valid() const{
    return m_paging_isValid;
}

OAIFlippingPagerDTO OAIGetOutletsResponse::getPager() const {
    return pager;
}
void OAIGetOutletsResponse::setPager(const OAIFlippingPagerDTO &pager) {
    this->pager = pager;
    this->m_pager_isSet = true;
}

bool OAIGetOutletsResponse::is_pager_Set() const{
    return m_pager_isSet;
}

bool OAIGetOutletsResponse::is_pager_Valid() const{
    return m_pager_isValid;
}

bool OAIGetOutletsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (outlets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (paging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (pager.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOutletsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_outlets_isValid && true;
}

} // namespace OpenAPI
