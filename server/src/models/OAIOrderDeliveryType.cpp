/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderDeliveryType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderDeliveryType::OAIOrderDeliveryType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderDeliveryType::OAIOrderDeliveryType() {
    this->initializeModel();
}

OAIOrderDeliveryType::~OAIOrderDeliveryType() {}

void OAIOrderDeliveryType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrderDeliveryType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrderDeliveryType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderDeliveryType::DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderDeliveryType::PICKUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderDeliveryType::POST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIGITAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderDeliveryType::DIGITAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderDeliveryType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrderDeliveryType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrderDeliveryType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrderDeliveryType::DELIVERY:
            val = "DELIVERY";
            break;
        case eOAIOrderDeliveryType::PICKUP:
            val = "PICKUP";
            break;
        case eOAIOrderDeliveryType::POST:
            val = "POST";
            break;
        case eOAIOrderDeliveryType::DIGITAL:
            val = "DIGITAL";
            break;
        case eOAIOrderDeliveryType::UNKNOWN:
            val = "UNKNOWN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrderDeliveryType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrderDeliveryType::eOAIOrderDeliveryType OAIOrderDeliveryType::getValue() const {
    return m_value;
}

void OAIOrderDeliveryType::setValue(const OAIOrderDeliveryType::eOAIOrderDeliveryType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrderDeliveryType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrderDeliveryType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
