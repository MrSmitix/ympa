/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaignDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaignDTO::OAICampaignDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaignDTO::OAICampaignDTO() {
    this->initializeModel();
}

OAICampaignDTO::~OAICampaignDTO() {}

void OAICampaignDTO::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_business_isSet = false;
    m_business_isValid = false;

    m_placement_type_isSet = false;
    m_placement_type_isValid = false;
}

void OAICampaignDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICampaignDTO::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_business_isValid = ::OpenAPI::fromJsonValue(business, json[QString("business")]);
    m_business_isSet = !json[QString("business")].isNull() && m_business_isValid;

    m_placement_type_isValid = ::OpenAPI::fromJsonValue(placement_type, json[QString("placementType")]);
    m_placement_type_isSet = !json[QString("placementType")].isNull() && m_placement_type_isValid;
}

QString OAICampaignDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICampaignDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(domain));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(client_id));
    }
    if (business.isSet()) {
        obj.insert(QString("business"), ::OpenAPI::toJsonValue(business));
    }
    if (placement_type.isSet()) {
        obj.insert(QString("placementType"), ::OpenAPI::toJsonValue(placement_type));
    }
    return obj;
}

QString OAICampaignDTO::getDomain() const {
    return domain;
}
void OAICampaignDTO::setDomain(const QString &domain) {
    this->domain = domain;
    this->m_domain_isSet = true;
}

bool OAICampaignDTO::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICampaignDTO::is_domain_Valid() const{
    return m_domain_isValid;
}

qint64 OAICampaignDTO::getId() const {
    return id;
}
void OAICampaignDTO::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAICampaignDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAICampaignDTO::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAICampaignDTO::getClientId() const {
    return client_id;
}
void OAICampaignDTO::setClientId(const qint64 &client_id) {
    this->client_id = client_id;
    this->m_client_id_isSet = true;
}

bool OAICampaignDTO::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAICampaignDTO::is_client_id_Valid() const{
    return m_client_id_isValid;
}

OAIBusinessDTO OAICampaignDTO::getBusiness() const {
    return business;
}
void OAICampaignDTO::setBusiness(const OAIBusinessDTO &business) {
    this->business = business;
    this->m_business_isSet = true;
}

bool OAICampaignDTO::is_business_Set() const{
    return m_business_isSet;
}

bool OAICampaignDTO::is_business_Valid() const{
    return m_business_isValid;
}

OAIPlacementType OAICampaignDTO::getPlacementType() const {
    return placement_type;
}
void OAICampaignDTO::setPlacementType(const OAIPlacementType &placement_type) {
    this->placement_type = placement_type;
    this->m_placement_type_isSet = true;
}

bool OAICampaignDTO::is_placement_type_Set() const{
    return m_placement_type_isSet;
}

bool OAICampaignDTO::is_placement_type_Valid() const{
    return m_placement_type_isValid;
}

bool OAICampaignDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (business.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (placement_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICampaignDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
