/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculatedTariffType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculatedTariffType::OAICalculatedTariffType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculatedTariffType::OAICalculatedTariffType() {
    this->initializeModel();
}

OAICalculatedTariffType::~OAICalculatedTariffType() {}

void OAICalculatedTariffType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICalculatedTariffType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICalculatedTariffType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AGENCY_COMMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICalculatedTariffType::AGENCY_COMMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAYMENT_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAICalculatedTariffType::PAYMENT_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FEE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICalculatedTariffType::FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_TO_CUSTOMER", Qt::CaseInsensitive) == 0) {
        m_value = eOAICalculatedTariffType::DELIVERY_TO_CUSTOMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CROSSREGIONAL_DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICalculatedTariffType::CROSSREGIONAL_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPRESS_DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICalculatedTariffType::EXPRESS_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SORTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAICalculatedTariffType::SORTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MIDDLE_MILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICalculatedTariffType::MIDDLE_MILE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICalculatedTariffType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICalculatedTariffType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICalculatedTariffType::AGENCY_COMMISSION:
            val = "AGENCY_COMMISSION";
            break;
        case eOAICalculatedTariffType::PAYMENT_TRANSFER:
            val = "PAYMENT_TRANSFER";
            break;
        case eOAICalculatedTariffType::FEE:
            val = "FEE";
            break;
        case eOAICalculatedTariffType::DELIVERY_TO_CUSTOMER:
            val = "DELIVERY_TO_CUSTOMER";
            break;
        case eOAICalculatedTariffType::CROSSREGIONAL_DELIVERY:
            val = "CROSSREGIONAL_DELIVERY";
            break;
        case eOAICalculatedTariffType::EXPRESS_DELIVERY:
            val = "EXPRESS_DELIVERY";
            break;
        case eOAICalculatedTariffType::SORTING:
            val = "SORTING";
            break;
        case eOAICalculatedTariffType::MIDDLE_MILE:
            val = "MIDDLE_MILE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICalculatedTariffType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICalculatedTariffType::eOAICalculatedTariffType OAICalculatedTariffType::getValue() const {
    return m_value;
}

void OAICalculatedTariffType::setValue(const OAICalculatedTariffType::eOAICalculatedTariffType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICalculatedTariffType::isSet() const {
    
    return m_value_isSet;
}

bool OAICalculatedTariffType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
