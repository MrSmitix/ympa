/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkuBidItemDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkuBidItemDTO::OAISkuBidItemDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkuBidItemDTO::OAISkuBidItemDTO() {
    this->initializeModel();
}

OAISkuBidItemDTO::~OAISkuBidItemDTO() {}

void OAISkuBidItemDTO::initializeModel() {

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_bid_isSet = false;
    m_bid_isValid = false;
}

void OAISkuBidItemDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkuBidItemDTO::fromJsonObject(QJsonObject json) {

    m_sku_isValid = ::OpenAPI::fromJsonValue(sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_bid_isValid = ::OpenAPI::fromJsonValue(bid, json[QString("bid")]);
    m_bid_isSet = !json[QString("bid")].isNull() && m_bid_isValid;
}

QString OAISkuBidItemDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkuBidItemDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(sku));
    }
    if (m_bid_isSet) {
        obj.insert(QString("bid"), ::OpenAPI::toJsonValue(bid));
    }
    return obj;
}

QString OAISkuBidItemDTO::getSku() const {
    return sku;
}
void OAISkuBidItemDTO::setSku(const QString &sku) {
    this->sku = sku;
    this->m_sku_isSet = true;
}

bool OAISkuBidItemDTO::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAISkuBidItemDTO::is_sku_Valid() const{
    return m_sku_isValid;
}

qint32 OAISkuBidItemDTO::getBid() const {
    return bid;
}
void OAISkuBidItemDTO::setBid(const qint32 &bid) {
    this->bid = bid;
    this->m_bid_isSet = true;
}

bool OAISkuBidItemDTO::is_bid_Set() const{
    return m_bid_isSet;
}

bool OAISkuBidItemDTO::is_bid_Valid() const{
    return m_bid_isValid;
}

bool OAISkuBidItemDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkuBidItemDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sku_isValid && m_bid_isValid && true;
}

} // namespace OpenAPI
