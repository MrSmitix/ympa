/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryParameterDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryParameterDTO::OAICategoryParameterDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryParameterDTO::OAICategoryParameterDTO() {
    this->initializeModel();
}

OAICategoryParameterDTO::~OAICategoryParameterDTO() {}

void OAICategoryParameterDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_recommendation_types_isSet = false;
    m_recommendation_types_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_filtering_isSet = false;
    m_filtering_isValid = false;

    m_distinctive_isSet = false;
    m_distinctive_isValid = false;

    m_multivalue_isSet = false;
    m_multivalue_isValid = false;

    m_allow_custom_values_isSet = false;
    m_allow_custom_values_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_value_restrictions_isSet = false;
    m_value_restrictions_isValid = false;
}

void OAICategoryParameterDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryParameterDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_recommendation_types_isValid = ::OpenAPI::fromJsonValue(recommendation_types, json[QString("recommendationTypes")]);
    m_recommendation_types_isSet = !json[QString("recommendationTypes")].isNull() && m_recommendation_types_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_filtering_isValid = ::OpenAPI::fromJsonValue(filtering, json[QString("filtering")]);
    m_filtering_isSet = !json[QString("filtering")].isNull() && m_filtering_isValid;

    m_distinctive_isValid = ::OpenAPI::fromJsonValue(distinctive, json[QString("distinctive")]);
    m_distinctive_isSet = !json[QString("distinctive")].isNull() && m_distinctive_isValid;

    m_multivalue_isValid = ::OpenAPI::fromJsonValue(multivalue, json[QString("multivalue")]);
    m_multivalue_isSet = !json[QString("multivalue")].isNull() && m_multivalue_isValid;

    m_allow_custom_values_isValid = ::OpenAPI::fromJsonValue(allow_custom_values, json[QString("allowCustomValues")]);
    m_allow_custom_values_isSet = !json[QString("allowCustomValues")].isNull() && m_allow_custom_values_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_value_restrictions_isValid = ::OpenAPI::fromJsonValue(value_restrictions, json[QString("valueRestrictions")]);
    m_value_restrictions_isSet = !json[QString("valueRestrictions")].isNull() && m_value_restrictions_isValid;
}

QString OAICategoryParameterDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryParameterDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (unit.isSet()) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(unit));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (recommendation_types.size() > 0) {
        obj.insert(QString("recommendationTypes"), ::OpenAPI::toJsonValue(recommendation_types));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(required));
    }
    if (m_filtering_isSet) {
        obj.insert(QString("filtering"), ::OpenAPI::toJsonValue(filtering));
    }
    if (m_distinctive_isSet) {
        obj.insert(QString("distinctive"), ::OpenAPI::toJsonValue(distinctive));
    }
    if (m_multivalue_isSet) {
        obj.insert(QString("multivalue"), ::OpenAPI::toJsonValue(multivalue));
    }
    if (m_allow_custom_values_isSet) {
        obj.insert(QString("allowCustomValues"), ::OpenAPI::toJsonValue(allow_custom_values));
    }
    if (values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(values));
    }
    if (constraints.isSet()) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(constraints));
    }
    if (value_restrictions.size() > 0) {
        obj.insert(QString("valueRestrictions"), ::OpenAPI::toJsonValue(value_restrictions));
    }
    return obj;
}

qint64 OAICategoryParameterDTO::getId() const {
    return id;
}
void OAICategoryParameterDTO::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAICategoryParameterDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategoryParameterDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategoryParameterDTO::getName() const {
    return name;
}
void OAICategoryParameterDTO::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAICategoryParameterDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategoryParameterDTO::is_name_Valid() const{
    return m_name_isValid;
}

OAIParameterType OAICategoryParameterDTO::getType() const {
    return type;
}
void OAICategoryParameterDTO::setType(const OAIParameterType &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAICategoryParameterDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAICategoryParameterDTO::is_type_Valid() const{
    return m_type_isValid;
}

OAICategoryParameterUnitDTO OAICategoryParameterDTO::getUnit() const {
    return unit;
}
void OAICategoryParameterDTO::setUnit(const OAICategoryParameterUnitDTO &unit) {
    this->unit = unit;
    this->m_unit_isSet = true;
}

bool OAICategoryParameterDTO::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAICategoryParameterDTO::is_unit_Valid() const{
    return m_unit_isValid;
}

QString OAICategoryParameterDTO::getDescription() const {
    return description;
}
void OAICategoryParameterDTO::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAICategoryParameterDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAICategoryParameterDTO::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIOfferCardRecommendationType> OAICategoryParameterDTO::getRecommendationTypes() const {
    return recommendation_types;
}
void OAICategoryParameterDTO::setRecommendationTypes(const QList<OAIOfferCardRecommendationType> &recommendation_types) {
    this->recommendation_types = recommendation_types;
    this->m_recommendation_types_isSet = true;
}

bool OAICategoryParameterDTO::is_recommendation_types_Set() const{
    return m_recommendation_types_isSet;
}

bool OAICategoryParameterDTO::is_recommendation_types_Valid() const{
    return m_recommendation_types_isValid;
}

bool OAICategoryParameterDTO::isRequired() const {
    return required;
}
void OAICategoryParameterDTO::setRequired(const bool &required) {
    this->required = required;
    this->m_required_isSet = true;
}

bool OAICategoryParameterDTO::is_required_Set() const{
    return m_required_isSet;
}

bool OAICategoryParameterDTO::is_required_Valid() const{
    return m_required_isValid;
}

bool OAICategoryParameterDTO::isFiltering() const {
    return filtering;
}
void OAICategoryParameterDTO::setFiltering(const bool &filtering) {
    this->filtering = filtering;
    this->m_filtering_isSet = true;
}

bool OAICategoryParameterDTO::is_filtering_Set() const{
    return m_filtering_isSet;
}

bool OAICategoryParameterDTO::is_filtering_Valid() const{
    return m_filtering_isValid;
}

bool OAICategoryParameterDTO::isDistinctive() const {
    return distinctive;
}
void OAICategoryParameterDTO::setDistinctive(const bool &distinctive) {
    this->distinctive = distinctive;
    this->m_distinctive_isSet = true;
}

bool OAICategoryParameterDTO::is_distinctive_Set() const{
    return m_distinctive_isSet;
}

bool OAICategoryParameterDTO::is_distinctive_Valid() const{
    return m_distinctive_isValid;
}

bool OAICategoryParameterDTO::isMultivalue() const {
    return multivalue;
}
void OAICategoryParameterDTO::setMultivalue(const bool &multivalue) {
    this->multivalue = multivalue;
    this->m_multivalue_isSet = true;
}

bool OAICategoryParameterDTO::is_multivalue_Set() const{
    return m_multivalue_isSet;
}

bool OAICategoryParameterDTO::is_multivalue_Valid() const{
    return m_multivalue_isValid;
}

bool OAICategoryParameterDTO::isAllowCustomValues() const {
    return allow_custom_values;
}
void OAICategoryParameterDTO::setAllowCustomValues(const bool &allow_custom_values) {
    this->allow_custom_values = allow_custom_values;
    this->m_allow_custom_values_isSet = true;
}

bool OAICategoryParameterDTO::is_allow_custom_values_Set() const{
    return m_allow_custom_values_isSet;
}

bool OAICategoryParameterDTO::is_allow_custom_values_Valid() const{
    return m_allow_custom_values_isValid;
}

QList<OAIParameterValueOptionDTO> OAICategoryParameterDTO::getValues() const {
    return values;
}
void OAICategoryParameterDTO::setValues(const QList<OAIParameterValueOptionDTO> &values) {
    this->values = values;
    this->m_values_isSet = true;
}

bool OAICategoryParameterDTO::is_values_Set() const{
    return m_values_isSet;
}

bool OAICategoryParameterDTO::is_values_Valid() const{
    return m_values_isValid;
}

OAIParameterValueConstraintsDTO OAICategoryParameterDTO::getConstraints() const {
    return constraints;
}
void OAICategoryParameterDTO::setConstraints(const OAIParameterValueConstraintsDTO &constraints) {
    this->constraints = constraints;
    this->m_constraints_isSet = true;
}

bool OAICategoryParameterDTO::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAICategoryParameterDTO::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QList<OAIValueRestrictionDTO> OAICategoryParameterDTO::getValueRestrictions() const {
    return value_restrictions;
}
void OAICategoryParameterDTO::setValueRestrictions(const QList<OAIValueRestrictionDTO> &value_restrictions) {
    this->value_restrictions = value_restrictions;
    this->m_value_restrictions_isSet = true;
}

bool OAICategoryParameterDTO::is_value_restrictions_Set() const{
    return m_value_restrictions_isSet;
}

bool OAICategoryParameterDTO::is_value_restrictions_Valid() const{
    return m_value_restrictions_isValid;
}

bool OAICategoryParameterDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (recommendation_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filtering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distinctive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multivalue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_custom_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (value_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryParameterDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && m_required_isValid && m_filtering_isValid && m_distinctive_isValid && m_multivalue_isValid && m_allow_custom_values_isValid && true;
}

} // namespace OpenAPI
