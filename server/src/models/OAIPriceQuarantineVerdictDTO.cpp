/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceQuarantineVerdictDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceQuarantineVerdictDTO::OAIPriceQuarantineVerdictDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceQuarantineVerdictDTO::OAIPriceQuarantineVerdictDTO() {
    this->initializeModel();
}

OAIPriceQuarantineVerdictDTO::~OAIPriceQuarantineVerdictDTO() {}

void OAIPriceQuarantineVerdictDTO::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;
}

void OAIPriceQuarantineVerdictDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceQuarantineVerdictDTO::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;
}

QString OAIPriceQuarantineVerdictDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceQuarantineVerdictDTO::asJsonObject() const {
    QJsonObject obj;
    if (type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(params));
    }
    return obj;
}

OAIPriceQuarantineVerdictType OAIPriceQuarantineVerdictDTO::getType() const {
    return type;
}
void OAIPriceQuarantineVerdictDTO::setType(const OAIPriceQuarantineVerdictType &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIPriceQuarantineVerdictDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPriceQuarantineVerdictDTO::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIPriceQuarantineVerdictParameterDTO> OAIPriceQuarantineVerdictDTO::getParams() const {
    return params;
}
void OAIPriceQuarantineVerdictDTO::setParams(const QList<OAIPriceQuarantineVerdictParameterDTO> &params) {
    this->params = params;
    this->m_params_isSet = true;
}

bool OAIPriceQuarantineVerdictDTO::is_params_Set() const{
    return m_params_isSet;
}

bool OAIPriceQuarantineVerdictDTO::is_params_Valid() const{
    return m_params_isValid;
}

bool OAIPriceQuarantineVerdictDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (params.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceQuarantineVerdictDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_params_isValid && true;
}

} // namespace OpenAPI
