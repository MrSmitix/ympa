/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferProcessingNoteType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferProcessingNoteType::OAIOfferProcessingNoteType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferProcessingNoteType::OAIOfferProcessingNoteType() {
    this->initializeModel();
}

OAIOfferProcessingNoteType::~OAIOfferProcessingNoteType() {}

void OAIOfferProcessingNoteType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOfferProcessingNoteType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOfferProcessingNoteType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ASSORTMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::ASSORTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFLICTING_INFORMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::CONFLICTING_INFORMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEPARTMENT_FROZEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::DEPARTMENT_FROZEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCORRECT_INFORMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::INCORRECT_INFORMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEGAL_CONFLICT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::LEGAL_CONFLICT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEED_CLASSIFICATION_INFORMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::NEED_CLASSIFICATION_INFORMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEED_INFORMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::NEED_INFORMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEED_PICTURES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::NEED_PICTURES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEED_VENDOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::NEED_VENDOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_CATEGORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::NO_CATEGORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_KNOWLEDGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::NO_KNOWLEDGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_PARAMETERS_IN_SHOP_TITLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::NO_PARAMETERS_IN_SHOP_TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_SIZE_MEASURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::NO_SIZE_MEASURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SAMPLE_LINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingNoteType::SAMPLE_LINE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOfferProcessingNoteType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOfferProcessingNoteType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOfferProcessingNoteType::ASSORTMENT:
            val = "ASSORTMENT";
            break;
        case eOAIOfferProcessingNoteType::CANCELLED:
            val = "CANCELLED";
            break;
        case eOAIOfferProcessingNoteType::CONFLICTING_INFORMATION:
            val = "CONFLICTING_INFORMATION";
            break;
        case eOAIOfferProcessingNoteType::OTHER:
            val = "OTHER";
            break;
        case eOAIOfferProcessingNoteType::DEPARTMENT_FROZEN:
            val = "DEPARTMENT_FROZEN";
            break;
        case eOAIOfferProcessingNoteType::INCORRECT_INFORMATION:
            val = "INCORRECT_INFORMATION";
            break;
        case eOAIOfferProcessingNoteType::LEGAL_CONFLICT:
            val = "LEGAL_CONFLICT";
            break;
        case eOAIOfferProcessingNoteType::NEED_CLASSIFICATION_INFORMATION:
            val = "NEED_CLASSIFICATION_INFORMATION";
            break;
        case eOAIOfferProcessingNoteType::NEED_INFORMATION:
            val = "NEED_INFORMATION";
            break;
        case eOAIOfferProcessingNoteType::NEED_PICTURES:
            val = "NEED_PICTURES";
            break;
        case eOAIOfferProcessingNoteType::NEED_VENDOR:
            val = "NEED_VENDOR";
            break;
        case eOAIOfferProcessingNoteType::NO_CATEGORY:
            val = "NO_CATEGORY";
            break;
        case eOAIOfferProcessingNoteType::NO_KNOWLEDGE:
            val = "NO_KNOWLEDGE";
            break;
        case eOAIOfferProcessingNoteType::NO_PARAMETERS_IN_SHOP_TITLE:
            val = "NO_PARAMETERS_IN_SHOP_TITLE";
            break;
        case eOAIOfferProcessingNoteType::NO_SIZE_MEASURE:
            val = "NO_SIZE_MEASURE";
            break;
        case eOAIOfferProcessingNoteType::SAMPLE_LINE:
            val = "SAMPLE_LINE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOfferProcessingNoteType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOfferProcessingNoteType::eOAIOfferProcessingNoteType OAIOfferProcessingNoteType::getValue() const {
    return m_value;
}

void OAIOfferProcessingNoteType::setValue(const OAIOfferProcessingNoteType::eOAIOfferProcessingNoteType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOfferProcessingNoteType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOfferProcessingNoteType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
