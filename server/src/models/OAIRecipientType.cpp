/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecipientType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecipientType::OAIRecipientType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecipientType::OAIRecipientType() {
    this->initializeModel();
}

OAIRecipientType::~OAIRecipientType() {}

void OAIRecipientType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRecipientType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRecipientType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SHOP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecipientType::SHOP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecipientType::DELIVERY_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecipientType::POST;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRecipientType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRecipientType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRecipientType::SHOP:
            val = "SHOP";
            break;
        case eOAIRecipientType::DELIVERY_SERVICE:
            val = "DELIVERY_SERVICE";
            break;
        case eOAIRecipientType::POST:
            val = "POST";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRecipientType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRecipientType::eOAIRecipientType OAIRecipientType::getValue() const {
    return m_value;
}

void OAIRecipientType::setValue(const OAIRecipientType::eOAIRecipientType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRecipientType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRecipientType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
