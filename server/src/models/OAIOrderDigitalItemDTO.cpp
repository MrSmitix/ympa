/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderDigitalItemDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderDigitalItemDTO::OAIOrderDigitalItemDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderDigitalItemDTO::OAIOrderDigitalItemDTO() {
    this->initializeModel();
}

OAIOrderDigitalItemDTO::~OAIOrderDigitalItemDTO() {}

void OAIOrderDigitalItemDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_slip_isSet = false;
    m_slip_isValid = false;

    m_activate_till_isSet = false;
    m_activate_till_isValid = false;
}

void OAIOrderDigitalItemDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderDigitalItemDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_slip_isValid = ::OpenAPI::fromJsonValue(slip, json[QString("slip")]);
    m_slip_isSet = !json[QString("slip")].isNull() && m_slip_isValid;

    m_activate_till_isValid = ::OpenAPI::fromJsonValue(activate_till, json[QString("activate_till")]);
    m_activate_till_isSet = !json[QString("activate_till")].isNull() && m_activate_till_isValid;
}

QString OAIOrderDigitalItemDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderDigitalItemDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(code));
    }
    if (m_slip_isSet) {
        obj.insert(QString("slip"), ::OpenAPI::toJsonValue(slip));
    }
    if (m_activate_till_isSet) {
        obj.insert(QString("activate_till"), ::OpenAPI::toJsonValue(activate_till));
    }
    return obj;
}

qint64 OAIOrderDigitalItemDTO::getId() const {
    return id;
}
void OAIOrderDigitalItemDTO::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIOrderDigitalItemDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderDigitalItemDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrderDigitalItemDTO::getCode() const {
    return code;
}
void OAIOrderDigitalItemDTO::setCode(const QString &code) {
    this->code = code;
    this->m_code_isSet = true;
}

bool OAIOrderDigitalItemDTO::is_code_Set() const{
    return m_code_isSet;
}

bool OAIOrderDigitalItemDTO::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIOrderDigitalItemDTO::getSlip() const {
    return slip;
}
void OAIOrderDigitalItemDTO::setSlip(const QString &slip) {
    this->slip = slip;
    this->m_slip_isSet = true;
}

bool OAIOrderDigitalItemDTO::is_slip_Set() const{
    return m_slip_isSet;
}

bool OAIOrderDigitalItemDTO::is_slip_Valid() const{
    return m_slip_isValid;
}

QDate OAIOrderDigitalItemDTO::getActivateTill() const {
    return activate_till;
}
void OAIOrderDigitalItemDTO::setActivateTill(const QDate &activate_till) {
    this->activate_till = activate_till;
    this->m_activate_till_isSet = true;
}

bool OAIOrderDigitalItemDTO::is_activate_till_Set() const{
    return m_activate_till_isSet;
}

bool OAIOrderDigitalItemDTO::is_activate_till_Valid() const{
    return m_activate_till_isValid;
}

bool OAIOrderDigitalItemDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activate_till_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderDigitalItemDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_code_isValid && m_slip_isValid && m_activate_till_isValid && true;
}

} // namespace OpenAPI
