/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateTariffsOfferDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateTariffsOfferDTO::OAICalculateTariffsOfferDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateTariffsOfferDTO::OAICalculateTariffsOfferDTO() {
    this->initializeModel();
}

OAICalculateTariffsOfferDTO::~OAICalculateTariffsOfferDTO() {}

void OAICalculateTariffsOfferDTO::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAICalculateTariffsOfferDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateTariffsOfferDTO::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;
}

QString OAICalculateTariffsOfferDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateTariffsOfferDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(category_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(price));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(length));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(width));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(height));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(weight));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(quantity));
    }
    return obj;
}

qint64 OAICalculateTariffsOfferDTO::getCategoryId() const {
    return category_id;
}
void OAICalculateTariffsOfferDTO::setCategoryId(const qint64 &category_id) {
    this->category_id = category_id;
    this->m_category_id_isSet = true;
}

bool OAICalculateTariffsOfferDTO::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAICalculateTariffsOfferDTO::is_category_id_Valid() const{
    return m_category_id_isValid;
}

double OAICalculateTariffsOfferDTO::getPrice() const {
    return price;
}
void OAICalculateTariffsOfferDTO::setPrice(const double &price) {
    this->price = price;
    this->m_price_isSet = true;
}

bool OAICalculateTariffsOfferDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAICalculateTariffsOfferDTO::is_price_Valid() const{
    return m_price_isValid;
}

double OAICalculateTariffsOfferDTO::getLength() const {
    return length;
}
void OAICalculateTariffsOfferDTO::setLength(const double &length) {
    this->length = length;
    this->m_length_isSet = true;
}

bool OAICalculateTariffsOfferDTO::is_length_Set() const{
    return m_length_isSet;
}

bool OAICalculateTariffsOfferDTO::is_length_Valid() const{
    return m_length_isValid;
}

double OAICalculateTariffsOfferDTO::getWidth() const {
    return width;
}
void OAICalculateTariffsOfferDTO::setWidth(const double &width) {
    this->width = width;
    this->m_width_isSet = true;
}

bool OAICalculateTariffsOfferDTO::is_width_Set() const{
    return m_width_isSet;
}

bool OAICalculateTariffsOfferDTO::is_width_Valid() const{
    return m_width_isValid;
}

double OAICalculateTariffsOfferDTO::getHeight() const {
    return height;
}
void OAICalculateTariffsOfferDTO::setHeight(const double &height) {
    this->height = height;
    this->m_height_isSet = true;
}

bool OAICalculateTariffsOfferDTO::is_height_Set() const{
    return m_height_isSet;
}

bool OAICalculateTariffsOfferDTO::is_height_Valid() const{
    return m_height_isValid;
}

double OAICalculateTariffsOfferDTO::getWeight() const {
    return weight;
}
void OAICalculateTariffsOfferDTO::setWeight(const double &weight) {
    this->weight = weight;
    this->m_weight_isSet = true;
}

bool OAICalculateTariffsOfferDTO::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAICalculateTariffsOfferDTO::is_weight_Valid() const{
    return m_weight_isValid;
}

qint32 OAICalculateTariffsOfferDTO::getQuantity() const {
    return quantity;
}
void OAICalculateTariffsOfferDTO::setQuantity(const qint32 &quantity) {
    this->quantity = quantity;
    this->m_quantity_isSet = true;
}

bool OAICalculateTariffsOfferDTO::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAICalculateTariffsOfferDTO::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAICalculateTariffsOfferDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateTariffsOfferDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_id_isValid && m_price_isValid && m_length_isValid && m_width_isValid && m_height_isValid && m_weight_isValid && true;
}

} // namespace OpenAPI
