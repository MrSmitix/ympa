/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryParameterUnitDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryParameterUnitDTO::OAICategoryParameterUnitDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryParameterUnitDTO::OAICategoryParameterUnitDTO() {
    this->initializeModel();
}

OAICategoryParameterUnitDTO::~OAICategoryParameterUnitDTO() {}

void OAICategoryParameterUnitDTO::initializeModel() {

    m_default_unit_id_isSet = false;
    m_default_unit_id_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAICategoryParameterUnitDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryParameterUnitDTO::fromJsonObject(QJsonObject json) {

    m_default_unit_id_isValid = ::OpenAPI::fromJsonValue(default_unit_id, json[QString("defaultUnitId")]);
    m_default_unit_id_isSet = !json[QString("defaultUnitId")].isNull() && m_default_unit_id_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAICategoryParameterUnitDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryParameterUnitDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_default_unit_id_isSet) {
        obj.insert(QString("defaultUnitId"), ::OpenAPI::toJsonValue(default_unit_id));
    }
    if (units.size() > 0) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(units));
    }
    return obj;
}

qint64 OAICategoryParameterUnitDTO::getDefaultUnitId() const {
    return default_unit_id;
}
void OAICategoryParameterUnitDTO::setDefaultUnitId(const qint64 &default_unit_id) {
    this->default_unit_id = default_unit_id;
    this->m_default_unit_id_isSet = true;
}

bool OAICategoryParameterUnitDTO::is_default_unit_id_Set() const{
    return m_default_unit_id_isSet;
}

bool OAICategoryParameterUnitDTO::is_default_unit_id_Valid() const{
    return m_default_unit_id_isValid;
}

QList<OAIUnitDTO> OAICategoryParameterUnitDTO::getUnits() const {
    return units;
}
void OAICategoryParameterUnitDTO::setUnits(const QList<OAIUnitDTO> &units) {
    this->units = units;
    this->m_units_isSet = true;
}

bool OAICategoryParameterUnitDTO::is_units_Set() const{
    return m_units_isSet;
}

bool OAICategoryParameterUnitDTO::is_units_Valid() const{
    return m_units_isValid;
}

bool OAICategoryParameterUnitDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (units.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryParameterUnitDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_unit_id_isValid && m_units_isValid && true;
}

} // namespace OpenAPI
