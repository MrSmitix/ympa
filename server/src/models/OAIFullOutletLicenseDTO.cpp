/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFullOutletLicenseDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFullOutletLicenseDTO::OAIFullOutletLicenseDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFullOutletLicenseDTO::OAIFullOutletLicenseDTO() {
    this->initializeModel();
}

OAIFullOutletLicenseDTO::~OAIFullOutletLicenseDTO() {}

void OAIFullOutletLicenseDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_outlet_id_isSet = false;
    m_outlet_id_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_date_of_issue_isSet = false;
    m_date_of_issue_isValid = false;

    m_date_of_expiry_isSet = false;
    m_date_of_expiry_isValid = false;

    m_check_status_isSet = false;
    m_check_status_isValid = false;

    m_check_comment_isSet = false;
    m_check_comment_isValid = false;
}

void OAIFullOutletLicenseDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFullOutletLicenseDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_outlet_id_isValid = ::OpenAPI::fromJsonValue(outlet_id, json[QString("outletId")]);
    m_outlet_id_isSet = !json[QString("outletId")].isNull() && m_outlet_id_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_date_of_issue_isValid = ::OpenAPI::fromJsonValue(date_of_issue, json[QString("dateOfIssue")]);
    m_date_of_issue_isSet = !json[QString("dateOfIssue")].isNull() && m_date_of_issue_isValid;

    m_date_of_expiry_isValid = ::OpenAPI::fromJsonValue(date_of_expiry, json[QString("dateOfExpiry")]);
    m_date_of_expiry_isSet = !json[QString("dateOfExpiry")].isNull() && m_date_of_expiry_isValid;

    m_check_status_isValid = ::OpenAPI::fromJsonValue(check_status, json[QString("checkStatus")]);
    m_check_status_isSet = !json[QString("checkStatus")].isNull() && m_check_status_isValid;

    m_check_comment_isValid = ::OpenAPI::fromJsonValue(check_comment, json[QString("checkComment")]);
    m_check_comment_isSet = !json[QString("checkComment")].isNull() && m_check_comment_isValid;
}

QString OAIFullOutletLicenseDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFullOutletLicenseDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_outlet_id_isSet) {
        obj.insert(QString("outletId"), ::OpenAPI::toJsonValue(outlet_id));
    }
    if (license_type.isSet()) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(license_type));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(number));
    }
    if (m_date_of_issue_isSet) {
        obj.insert(QString("dateOfIssue"), ::OpenAPI::toJsonValue(date_of_issue));
    }
    if (m_date_of_expiry_isSet) {
        obj.insert(QString("dateOfExpiry"), ::OpenAPI::toJsonValue(date_of_expiry));
    }
    if (check_status.isSet()) {
        obj.insert(QString("checkStatus"), ::OpenAPI::toJsonValue(check_status));
    }
    if (m_check_comment_isSet) {
        obj.insert(QString("checkComment"), ::OpenAPI::toJsonValue(check_comment));
    }
    return obj;
}

qint64 OAIFullOutletLicenseDTO::getId() const {
    return id;
}
void OAIFullOutletLicenseDTO::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIFullOutletLicenseDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFullOutletLicenseDTO::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIFullOutletLicenseDTO::getOutletId() const {
    return outlet_id;
}
void OAIFullOutletLicenseDTO::setOutletId(const qint64 &outlet_id) {
    this->outlet_id = outlet_id;
    this->m_outlet_id_isSet = true;
}

bool OAIFullOutletLicenseDTO::is_outlet_id_Set() const{
    return m_outlet_id_isSet;
}

bool OAIFullOutletLicenseDTO::is_outlet_id_Valid() const{
    return m_outlet_id_isValid;
}

OAILicenseType OAIFullOutletLicenseDTO::getLicenseType() const {
    return license_type;
}
void OAIFullOutletLicenseDTO::setLicenseType(const OAILicenseType &license_type) {
    this->license_type = license_type;
    this->m_license_type_isSet = true;
}

bool OAIFullOutletLicenseDTO::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIFullOutletLicenseDTO::is_license_type_Valid() const{
    return m_license_type_isValid;
}

QString OAIFullOutletLicenseDTO::getNumber() const {
    return number;
}
void OAIFullOutletLicenseDTO::setNumber(const QString &number) {
    this->number = number;
    this->m_number_isSet = true;
}

bool OAIFullOutletLicenseDTO::is_number_Set() const{
    return m_number_isSet;
}

bool OAIFullOutletLicenseDTO::is_number_Valid() const{
    return m_number_isValid;
}

QDateTime OAIFullOutletLicenseDTO::getDateOfIssue() const {
    return date_of_issue;
}
void OAIFullOutletLicenseDTO::setDateOfIssue(const QDateTime &date_of_issue) {
    this->date_of_issue = date_of_issue;
    this->m_date_of_issue_isSet = true;
}

bool OAIFullOutletLicenseDTO::is_date_of_issue_Set() const{
    return m_date_of_issue_isSet;
}

bool OAIFullOutletLicenseDTO::is_date_of_issue_Valid() const{
    return m_date_of_issue_isValid;
}

QDateTime OAIFullOutletLicenseDTO::getDateOfExpiry() const {
    return date_of_expiry;
}
void OAIFullOutletLicenseDTO::setDateOfExpiry(const QDateTime &date_of_expiry) {
    this->date_of_expiry = date_of_expiry;
    this->m_date_of_expiry_isSet = true;
}

bool OAIFullOutletLicenseDTO::is_date_of_expiry_Set() const{
    return m_date_of_expiry_isSet;
}

bool OAIFullOutletLicenseDTO::is_date_of_expiry_Valid() const{
    return m_date_of_expiry_isValid;
}

OAILicenseCheckStatusType OAIFullOutletLicenseDTO::getCheckStatus() const {
    return check_status;
}
void OAIFullOutletLicenseDTO::setCheckStatus(const OAILicenseCheckStatusType &check_status) {
    this->check_status = check_status;
    this->m_check_status_isSet = true;
}

bool OAIFullOutletLicenseDTO::is_check_status_Set() const{
    return m_check_status_isSet;
}

bool OAIFullOutletLicenseDTO::is_check_status_Valid() const{
    return m_check_status_isValid;
}

QString OAIFullOutletLicenseDTO::getCheckComment() const {
    return check_comment;
}
void OAIFullOutletLicenseDTO::setCheckComment(const QString &check_comment) {
    this->check_comment = check_comment;
    this->m_check_comment_isSet = true;
}

bool OAIFullOutletLicenseDTO::is_check_comment_Set() const{
    return m_check_comment_isSet;
}

bool OAIFullOutletLicenseDTO::is_check_comment_Valid() const{
    return m_check_comment_isValid;
}

bool OAIFullOutletLicenseDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (license_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (check_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_comment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFullOutletLicenseDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
