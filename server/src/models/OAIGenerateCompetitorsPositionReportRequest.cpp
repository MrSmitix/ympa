/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateCompetitorsPositionReportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateCompetitorsPositionReportRequest::OAIGenerateCompetitorsPositionReportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateCompetitorsPositionReportRequest::OAIGenerateCompetitorsPositionReportRequest() {
    this->initializeModel();
}

OAIGenerateCompetitorsPositionReportRequest::~OAIGenerateCompetitorsPositionReportRequest() {}

void OAIGenerateCompetitorsPositionReportRequest::initializeModel() {

    m_business_id_isSet = false;
    m_business_id_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_date_from_isSet = false;
    m_date_from_isValid = false;

    m_date_to_isSet = false;
    m_date_to_isValid = false;
}

void OAIGenerateCompetitorsPositionReportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateCompetitorsPositionReportRequest::fromJsonObject(QJsonObject json) {

    m_business_id_isValid = ::OpenAPI::fromJsonValue(business_id, json[QString("businessId")]);
    m_business_id_isSet = !json[QString("businessId")].isNull() && m_business_id_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_date_from_isValid = ::OpenAPI::fromJsonValue(date_from, json[QString("dateFrom")]);
    m_date_from_isSet = !json[QString("dateFrom")].isNull() && m_date_from_isValid;

    m_date_to_isValid = ::OpenAPI::fromJsonValue(date_to, json[QString("dateTo")]);
    m_date_to_isSet = !json[QString("dateTo")].isNull() && m_date_to_isValid;
}

QString OAIGenerateCompetitorsPositionReportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateCompetitorsPositionReportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_business_id_isSet) {
        obj.insert(QString("businessId"), ::OpenAPI::toJsonValue(business_id));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(category_id));
    }
    if (m_date_from_isSet) {
        obj.insert(QString("dateFrom"), ::OpenAPI::toJsonValue(date_from));
    }
    if (m_date_to_isSet) {
        obj.insert(QString("dateTo"), ::OpenAPI::toJsonValue(date_to));
    }
    return obj;
}

qint64 OAIGenerateCompetitorsPositionReportRequest::getBusinessId() const {
    return business_id;
}
void OAIGenerateCompetitorsPositionReportRequest::setBusinessId(const qint64 &business_id) {
    this->business_id = business_id;
    this->m_business_id_isSet = true;
}

bool OAIGenerateCompetitorsPositionReportRequest::is_business_id_Set() const{
    return m_business_id_isSet;
}

bool OAIGenerateCompetitorsPositionReportRequest::is_business_id_Valid() const{
    return m_business_id_isValid;
}

qint64 OAIGenerateCompetitorsPositionReportRequest::getCategoryId() const {
    return category_id;
}
void OAIGenerateCompetitorsPositionReportRequest::setCategoryId(const qint64 &category_id) {
    this->category_id = category_id;
    this->m_category_id_isSet = true;
}

bool OAIGenerateCompetitorsPositionReportRequest::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIGenerateCompetitorsPositionReportRequest::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QDate OAIGenerateCompetitorsPositionReportRequest::getDateFrom() const {
    return date_from;
}
void OAIGenerateCompetitorsPositionReportRequest::setDateFrom(const QDate &date_from) {
    this->date_from = date_from;
    this->m_date_from_isSet = true;
}

bool OAIGenerateCompetitorsPositionReportRequest::is_date_from_Set() const{
    return m_date_from_isSet;
}

bool OAIGenerateCompetitorsPositionReportRequest::is_date_from_Valid() const{
    return m_date_from_isValid;
}

QDate OAIGenerateCompetitorsPositionReportRequest::getDateTo() const {
    return date_to;
}
void OAIGenerateCompetitorsPositionReportRequest::setDateTo(const QDate &date_to) {
    this->date_to = date_to;
    this->m_date_to_isSet = true;
}

bool OAIGenerateCompetitorsPositionReportRequest::is_date_to_Set() const{
    return m_date_to_isSet;
}

bool OAIGenerateCompetitorsPositionReportRequest::is_date_to_Valid() const{
    return m_date_to_isValid;
}

bool OAIGenerateCompetitorsPositionReportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateCompetitorsPositionReportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_business_id_isValid && m_category_id_isValid && m_date_from_isValid && m_date_to_isValid && true;
}

} // namespace OpenAPI
