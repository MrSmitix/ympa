/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegionType::OAIRegionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegionType::OAIRegionType() {
    this->initializeModel();
}

OAIRegionType::~OAIRegionType() {}

void OAIRegionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRegionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRegionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRegionType::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTINENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRegionType::CONTINENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REGION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRegionType::REGION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COUNTRY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRegionType::COUNTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COUNTRY_DISTRICT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRegionType::COUNTRY_DISTRICT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPUBLIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRegionType::REPUBLIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRegionType::CITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VILLAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRegionType::VILLAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CITY_DISTRICT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRegionType::CITY_DISTRICT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBWAY_STATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRegionType::SUBWAY_STATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPUBLIC_AREA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRegionType::REPUBLIC_AREA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRegionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRegionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRegionType::OTHER:
            val = "OTHER";
            break;
        case eOAIRegionType::CONTINENT:
            val = "CONTINENT";
            break;
        case eOAIRegionType::REGION:
            val = "REGION";
            break;
        case eOAIRegionType::COUNTRY:
            val = "COUNTRY";
            break;
        case eOAIRegionType::COUNTRY_DISTRICT:
            val = "COUNTRY_DISTRICT";
            break;
        case eOAIRegionType::REPUBLIC:
            val = "REPUBLIC";
            break;
        case eOAIRegionType::CITY:
            val = "CITY";
            break;
        case eOAIRegionType::VILLAGE:
            val = "VILLAGE";
            break;
        case eOAIRegionType::CITY_DISTRICT:
            val = "CITY_DISTRICT";
            break;
        case eOAIRegionType::SUBWAY_STATION:
            val = "SUBWAY_STATION";
            break;
        case eOAIRegionType::REPUBLIC_AREA:
            val = "REPUBLIC_AREA";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRegionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRegionType::eOAIRegionType OAIRegionType::getValue() const {
    return m_value;
}

void OAIRegionType::setValue(const OAIRegionType::eOAIRegionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRegionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRegionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
