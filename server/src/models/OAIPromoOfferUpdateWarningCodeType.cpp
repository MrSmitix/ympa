/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromoOfferUpdateWarningCodeType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromoOfferUpdateWarningCodeType::OAIPromoOfferUpdateWarningCodeType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromoOfferUpdateWarningCodeType::OAIPromoOfferUpdateWarningCodeType() {
    this->initializeModel();
}

OAIPromoOfferUpdateWarningCodeType::~OAIPromoOfferUpdateWarningCodeType() {}

void OAIPromoOfferUpdateWarningCodeType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPromoOfferUpdateWarningCodeType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPromoOfferUpdateWarningCodeType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DEEP_DISCOUNT_OFFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPromoOfferUpdateWarningCodeType::DEEP_DISCOUNT_OFFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CATALOG_PRICE_IS_LOWER_THAN_PROMO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPromoOfferUpdateWarningCodeType::CATALOG_PRICE_IS_LOWER_THAN_PROMO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHOP_PRICES_ARE_LOWER_THAN_PROMO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPromoOfferUpdateWarningCodeType::SHOP_PRICES_ARE_LOWER_THAN_PROMO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPromoOfferUpdateWarningCodeType::PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPromoOfferUpdateWarningCodeType::SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPromoOfferUpdateWarningCodeType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPromoOfferUpdateWarningCodeType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPromoOfferUpdateWarningCodeType::DEEP_DISCOUNT_OFFER:
            val = "DEEP_DISCOUNT_OFFER";
            break;
        case eOAIPromoOfferUpdateWarningCodeType::CATALOG_PRICE_IS_LOWER_THAN_PROMO:
            val = "CATALOG_PRICE_IS_LOWER_THAN_PROMO";
            break;
        case eOAIPromoOfferUpdateWarningCodeType::SHOP_PRICES_ARE_LOWER_THAN_PROMO:
            val = "SHOP_PRICES_ARE_LOWER_THAN_PROMO";
            break;
        case eOAIPromoOfferUpdateWarningCodeType::PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE:
            val = "PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE";
            break;
        case eOAIPromoOfferUpdateWarningCodeType::SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO:
            val = "SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPromoOfferUpdateWarningCodeType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPromoOfferUpdateWarningCodeType::eOAIPromoOfferUpdateWarningCodeType OAIPromoOfferUpdateWarningCodeType::getValue() const {
    return m_value;
}

void OAIPromoOfferUpdateWarningCodeType::setValue(const OAIPromoOfferUpdateWarningCodeType::eOAIPromoOfferUpdateWarningCodeType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPromoOfferUpdateWarningCodeType::isSet() const {
    
    return m_value_isSet;
}

bool OAIPromoOfferUpdateWarningCodeType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
