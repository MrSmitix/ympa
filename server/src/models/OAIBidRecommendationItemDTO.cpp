/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBidRecommendationItemDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBidRecommendationItemDTO::OAIBidRecommendationItemDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBidRecommendationItemDTO::OAIBidRecommendationItemDTO() {
    this->initializeModel();
}

OAIBidRecommendationItemDTO::~OAIBidRecommendationItemDTO() {}

void OAIBidRecommendationItemDTO::initializeModel() {

    m_bid_isSet = false;
    m_bid_isValid = false;

    m_show_percent_isSet = false;
    m_show_percent_isValid = false;
}

void OAIBidRecommendationItemDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBidRecommendationItemDTO::fromJsonObject(QJsonObject json) {

    m_bid_isValid = ::OpenAPI::fromJsonValue(bid, json[QString("bid")]);
    m_bid_isSet = !json[QString("bid")].isNull() && m_bid_isValid;

    m_show_percent_isValid = ::OpenAPI::fromJsonValue(show_percent, json[QString("showPercent")]);
    m_show_percent_isSet = !json[QString("showPercent")].isNull() && m_show_percent_isValid;
}

QString OAIBidRecommendationItemDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBidRecommendationItemDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_bid_isSet) {
        obj.insert(QString("bid"), ::OpenAPI::toJsonValue(bid));
    }
    if (m_show_percent_isSet) {
        obj.insert(QString("showPercent"), ::OpenAPI::toJsonValue(show_percent));
    }
    return obj;
}

qint32 OAIBidRecommendationItemDTO::getBid() const {
    return bid;
}
void OAIBidRecommendationItemDTO::setBid(const qint32 &bid) {
    this->bid = bid;
    this->m_bid_isSet = true;
}

bool OAIBidRecommendationItemDTO::is_bid_Set() const{
    return m_bid_isSet;
}

bool OAIBidRecommendationItemDTO::is_bid_Valid() const{
    return m_bid_isValid;
}

qint64 OAIBidRecommendationItemDTO::getShowPercent() const {
    return show_percent;
}
void OAIBidRecommendationItemDTO::setShowPercent(const qint64 &show_percent) {
    this->show_percent = show_percent;
    this->m_show_percent_isSet = true;
}

bool OAIBidRecommendationItemDTO::is_show_percent_Set() const{
    return m_show_percent_isSet;
}

bool OAIBidRecommendationItemDTO::is_show_percent_Valid() const{
    return m_show_percent_isValid;
}

bool OAIBidRecommendationItemDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBidRecommendationItemDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bid_isValid && m_show_percent_isValid && true;
}

} // namespace OpenAPI
