/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferMappingEntryDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferMappingEntryDTO::OAIOfferMappingEntryDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferMappingEntryDTO::OAIOfferMappingEntryDTO() {
    this->initializeModel();
}

OAIOfferMappingEntryDTO::~OAIOfferMappingEntryDTO() {}

void OAIOfferMappingEntryDTO::initializeModel() {

    m_mapping_isSet = false;
    m_mapping_isValid = false;

    m_awaiting_moderation_mapping_isSet = false;
    m_awaiting_moderation_mapping_isValid = false;

    m_rejected_mapping_isSet = false;
    m_rejected_mapping_isValid = false;

    m_offer_isSet = false;
    m_offer_isValid = false;
}

void OAIOfferMappingEntryDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferMappingEntryDTO::fromJsonObject(QJsonObject json) {

    m_mapping_isValid = ::OpenAPI::fromJsonValue(mapping, json[QString("mapping")]);
    m_mapping_isSet = !json[QString("mapping")].isNull() && m_mapping_isValid;

    m_awaiting_moderation_mapping_isValid = ::OpenAPI::fromJsonValue(awaiting_moderation_mapping, json[QString("awaitingModerationMapping")]);
    m_awaiting_moderation_mapping_isSet = !json[QString("awaitingModerationMapping")].isNull() && m_awaiting_moderation_mapping_isValid;

    m_rejected_mapping_isValid = ::OpenAPI::fromJsonValue(rejected_mapping, json[QString("rejectedMapping")]);
    m_rejected_mapping_isSet = !json[QString("rejectedMapping")].isNull() && m_rejected_mapping_isValid;

    m_offer_isValid = ::OpenAPI::fromJsonValue(offer, json[QString("offer")]);
    m_offer_isSet = !json[QString("offer")].isNull() && m_offer_isValid;
}

QString OAIOfferMappingEntryDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferMappingEntryDTO::asJsonObject() const {
    QJsonObject obj;
    if (mapping.isSet()) {
        obj.insert(QString("mapping"), ::OpenAPI::toJsonValue(mapping));
    }
    if (awaiting_moderation_mapping.isSet()) {
        obj.insert(QString("awaitingModerationMapping"), ::OpenAPI::toJsonValue(awaiting_moderation_mapping));
    }
    if (rejected_mapping.isSet()) {
        obj.insert(QString("rejectedMapping"), ::OpenAPI::toJsonValue(rejected_mapping));
    }
    if (offer.isSet()) {
        obj.insert(QString("offer"), ::OpenAPI::toJsonValue(offer));
    }
    return obj;
}

OAIOfferMappingDTO OAIOfferMappingEntryDTO::getMapping() const {
    return mapping;
}
void OAIOfferMappingEntryDTO::setMapping(const OAIOfferMappingDTO &mapping) {
    this->mapping = mapping;
    this->m_mapping_isSet = true;
}

bool OAIOfferMappingEntryDTO::is_mapping_Set() const{
    return m_mapping_isSet;
}

bool OAIOfferMappingEntryDTO::is_mapping_Valid() const{
    return m_mapping_isValid;
}

OAIOfferMappingDTO OAIOfferMappingEntryDTO::getAwaitingModerationMapping() const {
    return awaiting_moderation_mapping;
}
void OAIOfferMappingEntryDTO::setAwaitingModerationMapping(const OAIOfferMappingDTO &awaiting_moderation_mapping) {
    this->awaiting_moderation_mapping = awaiting_moderation_mapping;
    this->m_awaiting_moderation_mapping_isSet = true;
}

bool OAIOfferMappingEntryDTO::is_awaiting_moderation_mapping_Set() const{
    return m_awaiting_moderation_mapping_isSet;
}

bool OAIOfferMappingEntryDTO::is_awaiting_moderation_mapping_Valid() const{
    return m_awaiting_moderation_mapping_isValid;
}

OAIOfferMappingDTO OAIOfferMappingEntryDTO::getRejectedMapping() const {
    return rejected_mapping;
}
void OAIOfferMappingEntryDTO::setRejectedMapping(const OAIOfferMappingDTO &rejected_mapping) {
    this->rejected_mapping = rejected_mapping;
    this->m_rejected_mapping_isSet = true;
}

bool OAIOfferMappingEntryDTO::is_rejected_mapping_Set() const{
    return m_rejected_mapping_isSet;
}

bool OAIOfferMappingEntryDTO::is_rejected_mapping_Valid() const{
    return m_rejected_mapping_isValid;
}

OAIMappingsOfferDTO OAIOfferMappingEntryDTO::getOffer() const {
    return offer;
}
void OAIOfferMappingEntryDTO::setOffer(const OAIMappingsOfferDTO &offer) {
    this->offer = offer;
    this->m_offer_isSet = true;
}

bool OAIOfferMappingEntryDTO::is_offer_Set() const{
    return m_offer_isSet;
}

bool OAIOfferMappingEntryDTO::is_offer_Valid() const{
    return m_offer_isValid;
}

bool OAIOfferMappingEntryDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (awaiting_moderation_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (rejected_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (offer.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferMappingEntryDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
