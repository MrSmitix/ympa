/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogisticPointType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogisticPointType::OAILogisticPointType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogisticPointType::OAILogisticPointType() {
    this->initializeModel();
}

OAILogisticPointType::~OAILogisticPointType() {}

void OAILogisticPointType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILogisticPointType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILogisticPointType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("WAREHOUSE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogisticPointType::WAREHOUSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP_POINT", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogisticPointType::PICKUP_POINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP_TERMINAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogisticPointType::PICKUP_TERMINAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP_POST_OFFICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogisticPointType::PICKUP_POST_OFFICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP_MIXED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogisticPointType::PICKUP_MIXED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP_RETAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogisticPointType::PICKUP_RETAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogisticPointType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILogisticPointType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILogisticPointType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILogisticPointType::WAREHOUSE:
            val = "WAREHOUSE";
            break;
        case eOAILogisticPointType::PICKUP_POINT:
            val = "PICKUP_POINT";
            break;
        case eOAILogisticPointType::PICKUP_TERMINAL:
            val = "PICKUP_TERMINAL";
            break;
        case eOAILogisticPointType::PICKUP_POST_OFFICE:
            val = "PICKUP_POST_OFFICE";
            break;
        case eOAILogisticPointType::PICKUP_MIXED:
            val = "PICKUP_MIXED";
            break;
        case eOAILogisticPointType::PICKUP_RETAIL:
            val = "PICKUP_RETAIL";
            break;
        case eOAILogisticPointType::UNKNOWN:
            val = "UNKNOWN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILogisticPointType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILogisticPointType::eOAILogisticPointType OAILogisticPointType::getValue() const {
    return m_value;
}

void OAILogisticPointType::setValue(const OAILogisticPointType::eOAILogisticPointType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILogisticPointType::isSet() const {
    
    return m_value_isSet;
}

bool OAILogisticPointType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
