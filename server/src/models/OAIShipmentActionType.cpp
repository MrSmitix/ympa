/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipmentActionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipmentActionType::OAIShipmentActionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipmentActionType::OAIShipmentActionType() {
    this->initializeModel();
}

OAIShipmentActionType::~OAIShipmentActionType() {}

void OAIShipmentActionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIShipmentActionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIShipmentActionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CONFIRM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentActionType::CONFIRM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOWNLOAD_ACT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentActionType::DOWNLOAD_ACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOWNLOAD_INBOUND_ACT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentActionType::DOWNLOAD_INBOUND_ACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOWNLOAD_DISCREPANCY_ACT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentActionType::DOWNLOAD_DISCREPANCY_ACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHANGE_PALLETS_COUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentActionType::CHANGE_PALLETS_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIShipmentActionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIShipmentActionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIShipmentActionType::CONFIRM:
            val = "CONFIRM";
            break;
        case eOAIShipmentActionType::DOWNLOAD_ACT:
            val = "DOWNLOAD_ACT";
            break;
        case eOAIShipmentActionType::DOWNLOAD_INBOUND_ACT:
            val = "DOWNLOAD_INBOUND_ACT";
            break;
        case eOAIShipmentActionType::DOWNLOAD_DISCREPANCY_ACT:
            val = "DOWNLOAD_DISCREPANCY_ACT";
            break;
        case eOAIShipmentActionType::CHANGE_PALLETS_COUNT:
            val = "CHANGE_PALLETS_COUNT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIShipmentActionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIShipmentActionType::eOAIShipmentActionType OAIShipmentActionType::getValue() const {
    return m_value;
}

void OAIShipmentActionType::setValue(const OAIShipmentActionType::eOAIShipmentActionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIShipmentActionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIShipmentActionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
