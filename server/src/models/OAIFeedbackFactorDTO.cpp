/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedbackFactorDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedbackFactorDTO::OAIFeedbackFactorDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedbackFactorDTO::OAIFeedbackFactorDTO() {
    this->initializeModel();
}

OAIFeedbackFactorDTO::~OAIFeedbackFactorDTO() {}

void OAIFeedbackFactorDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFeedbackFactorDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedbackFactorDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFeedbackFactorDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedbackFactorDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(value));
    }
    return obj;
}

qint64 OAIFeedbackFactorDTO::getId() const {
    return id;
}
void OAIFeedbackFactorDTO::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIFeedbackFactorDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeedbackFactorDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFeedbackFactorDTO::getTitle() const {
    return title;
}
void OAIFeedbackFactorDTO::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

bool OAIFeedbackFactorDTO::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFeedbackFactorDTO::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIFeedbackFactorDTO::getDescription() const {
    return description;
}
void OAIFeedbackFactorDTO::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAIFeedbackFactorDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFeedbackFactorDTO::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIFeedbackFactorDTO::getValue() const {
    return value;
}
void OAIFeedbackFactorDTO::setValue(const qint32 &value) {
    this->value = value;
    this->m_value_isSet = true;
}

bool OAIFeedbackFactorDTO::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFeedbackFactorDTO::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFeedbackFactorDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedbackFactorDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
