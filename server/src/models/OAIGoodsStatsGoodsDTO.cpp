/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoodsStatsGoodsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoodsStatsGoodsDTO::OAIGoodsStatsGoodsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoodsStatsGoodsDTO::OAIGoodsStatsGoodsDTO() {
    this->initializeModel();
}

OAIGoodsStatsGoodsDTO::~OAIGoodsStatsGoodsDTO() {}

void OAIGoodsStatsGoodsDTO::initializeModel() {

    m_shop_sku_isSet = false;
    m_shop_sku_isValid = false;

    m_market_sku_isSet = false;
    m_market_sku_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_weight_dimensions_isSet = false;
    m_weight_dimensions_isValid = false;

    m_warehouses_isSet = false;
    m_warehouses_isValid = false;

    m_tariffs_isSet = false;
    m_tariffs_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;
}

void OAIGoodsStatsGoodsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoodsStatsGoodsDTO::fromJsonObject(QJsonObject json) {

    m_shop_sku_isValid = ::OpenAPI::fromJsonValue(shop_sku, json[QString("shopSku")]);
    m_shop_sku_isSet = !json[QString("shopSku")].isNull() && m_shop_sku_isValid;

    m_market_sku_isValid = ::OpenAPI::fromJsonValue(market_sku, json[QString("marketSku")]);
    m_market_sku_isSet = !json[QString("marketSku")].isNull() && m_market_sku_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_name_isValid = ::OpenAPI::fromJsonValue(category_name, json[QString("categoryName")]);
    m_category_name_isSet = !json[QString("categoryName")].isNull() && m_category_name_isValid;

    m_weight_dimensions_isValid = ::OpenAPI::fromJsonValue(weight_dimensions, json[QString("weightDimensions")]);
    m_weight_dimensions_isSet = !json[QString("weightDimensions")].isNull() && m_weight_dimensions_isValid;

    m_warehouses_isValid = ::OpenAPI::fromJsonValue(warehouses, json[QString("warehouses")]);
    m_warehouses_isSet = !json[QString("warehouses")].isNull() && m_warehouses_isValid;

    m_tariffs_isValid = ::OpenAPI::fromJsonValue(tariffs, json[QString("tariffs")]);
    m_tariffs_isSet = !json[QString("tariffs")].isNull() && m_tariffs_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;
}

QString OAIGoodsStatsGoodsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoodsStatsGoodsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_shop_sku_isSet) {
        obj.insert(QString("shopSku"), ::OpenAPI::toJsonValue(shop_sku));
    }
    if (m_market_sku_isSet) {
        obj.insert(QString("marketSku"), ::OpenAPI::toJsonValue(market_sku));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(price));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(category_id));
    }
    if (m_category_name_isSet) {
        obj.insert(QString("categoryName"), ::OpenAPI::toJsonValue(category_name));
    }
    if (weight_dimensions.isSet()) {
        obj.insert(QString("weightDimensions"), ::OpenAPI::toJsonValue(weight_dimensions));
    }
    if (warehouses.size() > 0) {
        obj.insert(QString("warehouses"), ::OpenAPI::toJsonValue(warehouses));
    }
    if (tariffs.size() > 0) {
        obj.insert(QString("tariffs"), ::OpenAPI::toJsonValue(tariffs));
    }
    if (pictures.size() > 0) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(pictures));
    }
    return obj;
}

QString OAIGoodsStatsGoodsDTO::getShopSku() const {
    return shop_sku;
}
void OAIGoodsStatsGoodsDTO::setShopSku(const QString &shop_sku) {
    this->shop_sku = shop_sku;
    this->m_shop_sku_isSet = true;
}

bool OAIGoodsStatsGoodsDTO::is_shop_sku_Set() const{
    return m_shop_sku_isSet;
}

bool OAIGoodsStatsGoodsDTO::is_shop_sku_Valid() const{
    return m_shop_sku_isValid;
}

qint64 OAIGoodsStatsGoodsDTO::getMarketSku() const {
    return market_sku;
}
void OAIGoodsStatsGoodsDTO::setMarketSku(const qint64 &market_sku) {
    this->market_sku = market_sku;
    this->m_market_sku_isSet = true;
}

bool OAIGoodsStatsGoodsDTO::is_market_sku_Set() const{
    return m_market_sku_isSet;
}

bool OAIGoodsStatsGoodsDTO::is_market_sku_Valid() const{
    return m_market_sku_isValid;
}

QString OAIGoodsStatsGoodsDTO::getName() const {
    return name;
}
void OAIGoodsStatsGoodsDTO::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIGoodsStatsGoodsDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoodsStatsGoodsDTO::is_name_Valid() const{
    return m_name_isValid;
}

double OAIGoodsStatsGoodsDTO::getPrice() const {
    return price;
}
void OAIGoodsStatsGoodsDTO::setPrice(const double &price) {
    this->price = price;
    this->m_price_isSet = true;
}

bool OAIGoodsStatsGoodsDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAIGoodsStatsGoodsDTO::is_price_Valid() const{
    return m_price_isValid;
}

qint64 OAIGoodsStatsGoodsDTO::getCategoryId() const {
    return category_id;
}
void OAIGoodsStatsGoodsDTO::setCategoryId(const qint64 &category_id) {
    this->category_id = category_id;
    this->m_category_id_isSet = true;
}

bool OAIGoodsStatsGoodsDTO::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIGoodsStatsGoodsDTO::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIGoodsStatsGoodsDTO::getCategoryName() const {
    return category_name;
}
void OAIGoodsStatsGoodsDTO::setCategoryName(const QString &category_name) {
    this->category_name = category_name;
    this->m_category_name_isSet = true;
}

bool OAIGoodsStatsGoodsDTO::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAIGoodsStatsGoodsDTO::is_category_name_Valid() const{
    return m_category_name_isValid;
}

OAIGoodsStatsWeightDimensionsDTO OAIGoodsStatsGoodsDTO::getWeightDimensions() const {
    return weight_dimensions;
}
void OAIGoodsStatsGoodsDTO::setWeightDimensions(const OAIGoodsStatsWeightDimensionsDTO &weight_dimensions) {
    this->weight_dimensions = weight_dimensions;
    this->m_weight_dimensions_isSet = true;
}

bool OAIGoodsStatsGoodsDTO::is_weight_dimensions_Set() const{
    return m_weight_dimensions_isSet;
}

bool OAIGoodsStatsGoodsDTO::is_weight_dimensions_Valid() const{
    return m_weight_dimensions_isValid;
}

QList<OAIGoodsStatsWarehouseDTO> OAIGoodsStatsGoodsDTO::getWarehouses() const {
    return warehouses;
}
void OAIGoodsStatsGoodsDTO::setWarehouses(const QList<OAIGoodsStatsWarehouseDTO> &warehouses) {
    this->warehouses = warehouses;
    this->m_warehouses_isSet = true;
}

bool OAIGoodsStatsGoodsDTO::is_warehouses_Set() const{
    return m_warehouses_isSet;
}

bool OAIGoodsStatsGoodsDTO::is_warehouses_Valid() const{
    return m_warehouses_isValid;
}

QList<OAITariffDTO> OAIGoodsStatsGoodsDTO::getTariffs() const {
    return tariffs;
}
void OAIGoodsStatsGoodsDTO::setTariffs(const QList<OAITariffDTO> &tariffs) {
    this->tariffs = tariffs;
    this->m_tariffs_isSet = true;
}

bool OAIGoodsStatsGoodsDTO::is_tariffs_Set() const{
    return m_tariffs_isSet;
}

bool OAIGoodsStatsGoodsDTO::is_tariffs_Valid() const{
    return m_tariffs_isValid;
}

QList<QString> OAIGoodsStatsGoodsDTO::getPictures() const {
    return pictures;
}
void OAIGoodsStatsGoodsDTO::setPictures(const QList<QString> &pictures) {
    this->pictures = pictures;
    this->m_pictures_isSet = true;
}

bool OAIGoodsStatsGoodsDTO::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIGoodsStatsGoodsDTO::is_pictures_Valid() const{
    return m_pictures_isValid;
}

bool OAIGoodsStatsGoodsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shop_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (weight_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (warehouses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (tariffs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (pictures.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoodsStatsGoodsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
