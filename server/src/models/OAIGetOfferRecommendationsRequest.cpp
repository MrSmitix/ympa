/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOfferRecommendationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOfferRecommendationsRequest::OAIGetOfferRecommendationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOfferRecommendationsRequest::OAIGetOfferRecommendationsRequest() {
    this->initializeModel();
}

OAIGetOfferRecommendationsRequest::~OAIGetOfferRecommendationsRequest() {}

void OAIGetOfferRecommendationsRequest::initializeModel() {

    m_offer_ids_isSet = false;
    m_offer_ids_isValid = false;

    m_cofinance_price_filter_isSet = false;
    m_cofinance_price_filter_isValid = false;

    m_recommended_cofinance_price_filter_isSet = false;
    m_recommended_cofinance_price_filter_isValid = false;

    m_competitiveness_filter_isSet = false;
    m_competitiveness_filter_isValid = false;
}

void OAIGetOfferRecommendationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOfferRecommendationsRequest::fromJsonObject(QJsonObject json) {

    m_offer_ids_isValid = ::OpenAPI::fromJsonValue(offer_ids, json[QString("offerIds")]);
    m_offer_ids_isSet = !json[QString("offerIds")].isNull() && m_offer_ids_isValid;

    m_cofinance_price_filter_isValid = ::OpenAPI::fromJsonValue(cofinance_price_filter, json[QString("cofinancePriceFilter")]);
    m_cofinance_price_filter_isSet = !json[QString("cofinancePriceFilter")].isNull() && m_cofinance_price_filter_isValid;

    m_recommended_cofinance_price_filter_isValid = ::OpenAPI::fromJsonValue(recommended_cofinance_price_filter, json[QString("recommendedCofinancePriceFilter")]);
    m_recommended_cofinance_price_filter_isSet = !json[QString("recommendedCofinancePriceFilter")].isNull() && m_recommended_cofinance_price_filter_isValid;

    m_competitiveness_filter_isValid = ::OpenAPI::fromJsonValue(competitiveness_filter, json[QString("competitivenessFilter")]);
    m_competitiveness_filter_isSet = !json[QString("competitivenessFilter")].isNull() && m_competitiveness_filter_isValid;
}

QString OAIGetOfferRecommendationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOfferRecommendationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (offer_ids.size() > 0) {
        obj.insert(QString("offerIds"), ::OpenAPI::toJsonValue(offer_ids));
    }
    if (cofinance_price_filter.isSet()) {
        obj.insert(QString("cofinancePriceFilter"), ::OpenAPI::toJsonValue(cofinance_price_filter));
    }
    if (recommended_cofinance_price_filter.isSet()) {
        obj.insert(QString("recommendedCofinancePriceFilter"), ::OpenAPI::toJsonValue(recommended_cofinance_price_filter));
    }
    if (competitiveness_filter.isSet()) {
        obj.insert(QString("competitivenessFilter"), ::OpenAPI::toJsonValue(competitiveness_filter));
    }
    return obj;
}

QList<QString> OAIGetOfferRecommendationsRequest::getOfferIds() const {
    return offer_ids;
}
void OAIGetOfferRecommendationsRequest::setOfferIds(const QList<QString> &offer_ids) {
    this->offer_ids = offer_ids;
    this->m_offer_ids_isSet = true;
}

bool OAIGetOfferRecommendationsRequest::is_offer_ids_Set() const{
    return m_offer_ids_isSet;
}

bool OAIGetOfferRecommendationsRequest::is_offer_ids_Valid() const{
    return m_offer_ids_isValid;
}

OAIFieldStateType OAIGetOfferRecommendationsRequest::getCofinancePriceFilter() const {
    return cofinance_price_filter;
}
void OAIGetOfferRecommendationsRequest::setCofinancePriceFilter(const OAIFieldStateType &cofinance_price_filter) {
    this->cofinance_price_filter = cofinance_price_filter;
    this->m_cofinance_price_filter_isSet = true;
}

bool OAIGetOfferRecommendationsRequest::is_cofinance_price_filter_Set() const{
    return m_cofinance_price_filter_isSet;
}

bool OAIGetOfferRecommendationsRequest::is_cofinance_price_filter_Valid() const{
    return m_cofinance_price_filter_isValid;
}

OAIFieldStateType OAIGetOfferRecommendationsRequest::getRecommendedCofinancePriceFilter() const {
    return recommended_cofinance_price_filter;
}
void OAIGetOfferRecommendationsRequest::setRecommendedCofinancePriceFilter(const OAIFieldStateType &recommended_cofinance_price_filter) {
    this->recommended_cofinance_price_filter = recommended_cofinance_price_filter;
    this->m_recommended_cofinance_price_filter_isSet = true;
}

bool OAIGetOfferRecommendationsRequest::is_recommended_cofinance_price_filter_Set() const{
    return m_recommended_cofinance_price_filter_isSet;
}

bool OAIGetOfferRecommendationsRequest::is_recommended_cofinance_price_filter_Valid() const{
    return m_recommended_cofinance_price_filter_isValid;
}

OAIPriceCompetitivenessType OAIGetOfferRecommendationsRequest::getCompetitivenessFilter() const {
    return competitiveness_filter;
}
void OAIGetOfferRecommendationsRequest::setCompetitivenessFilter(const OAIPriceCompetitivenessType &competitiveness_filter) {
    this->competitiveness_filter = competitiveness_filter;
    this->m_competitiveness_filter_isSet = true;
}

bool OAIGetOfferRecommendationsRequest::is_competitiveness_filter_Set() const{
    return m_competitiveness_filter_isSet;
}

bool OAIGetOfferRecommendationsRequest::is_competitiveness_filter_Valid() const{
    return m_competitiveness_filter_isValid;
}

bool OAIGetOfferRecommendationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (offer_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (cofinance_price_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (recommended_cofinance_price_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (competitiveness_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOfferRecommendationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
