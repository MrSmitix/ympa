/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWarehouseStocksRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWarehouseStocksRequest::OAIGetWarehouseStocksRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWarehouseStocksRequest::OAIGetWarehouseStocksRequest() {
    this->initializeModel();
}

OAIGetWarehouseStocksRequest::~OAIGetWarehouseStocksRequest() {}

void OAIGetWarehouseStocksRequest::initializeModel() {

    m_with_turnover_isSet = false;
    m_with_turnover_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_offer_ids_isSet = false;
    m_offer_ids_isValid = false;
}

void OAIGetWarehouseStocksRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWarehouseStocksRequest::fromJsonObject(QJsonObject json) {

    m_with_turnover_isValid = ::OpenAPI::fromJsonValue(with_turnover, json[QString("withTurnover")]);
    m_with_turnover_isSet = !json[QString("withTurnover")].isNull() && m_with_turnover_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_offer_ids_isValid = ::OpenAPI::fromJsonValue(offer_ids, json[QString("offerIds")]);
    m_offer_ids_isSet = !json[QString("offerIds")].isNull() && m_offer_ids_isValid;
}

QString OAIGetWarehouseStocksRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWarehouseStocksRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_with_turnover_isSet) {
        obj.insert(QString("withTurnover"), ::OpenAPI::toJsonValue(with_turnover));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(archived));
    }
    if (offer_ids.size() > 0) {
        obj.insert(QString("offerIds"), ::OpenAPI::toJsonValue(offer_ids));
    }
    return obj;
}

bool OAIGetWarehouseStocksRequest::isWithTurnover() const {
    return with_turnover;
}
void OAIGetWarehouseStocksRequest::setWithTurnover(const bool &with_turnover) {
    this->with_turnover = with_turnover;
    this->m_with_turnover_isSet = true;
}

bool OAIGetWarehouseStocksRequest::is_with_turnover_Set() const{
    return m_with_turnover_isSet;
}

bool OAIGetWarehouseStocksRequest::is_with_turnover_Valid() const{
    return m_with_turnover_isValid;
}

bool OAIGetWarehouseStocksRequest::isArchived() const {
    return archived;
}
void OAIGetWarehouseStocksRequest::setArchived(const bool &archived) {
    this->archived = archived;
    this->m_archived_isSet = true;
}

bool OAIGetWarehouseStocksRequest::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIGetWarehouseStocksRequest::is_archived_Valid() const{
    return m_archived_isValid;
}

QSet<QString> OAIGetWarehouseStocksRequest::getOfferIds() const {
    return offer_ids;
}
void OAIGetWarehouseStocksRequest::setOfferIds(const QSet<QString> &offer_ids) {
    this->offer_ids = offer_ids;
    this->m_offer_ids_isSet = true;
}

bool OAIGetWarehouseStocksRequest::is_offer_ids_Set() const{
    return m_offer_ids_isSet;
}

bool OAIGetWarehouseStocksRequest::is_offer_ids_Valid() const{
    return m_offer_ids_isValid;
}

bool OAIGetWarehouseStocksRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_with_turnover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (offer_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWarehouseStocksRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
