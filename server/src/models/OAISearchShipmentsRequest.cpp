/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchShipmentsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchShipmentsRequest::OAISearchShipmentsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchShipmentsRequest::OAISearchShipmentsRequest() {
    this->initializeModel();
}

OAISearchShipmentsRequest::~OAISearchShipmentsRequest() {}

void OAISearchShipmentsRequest::initializeModel() {

    m_date_from_isSet = false;
    m_date_from_isValid = false;

    m_date_to_isSet = false;
    m_date_to_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_order_ids_isSet = false;
    m_order_ids_isValid = false;

    m_cancelled_orders_isSet = false;
    m_cancelled_orders_isValid = false;
}

void OAISearchShipmentsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchShipmentsRequest::fromJsonObject(QJsonObject json) {

    m_date_from_isValid = ::OpenAPI::fromJsonValue(date_from, json[QString("dateFrom")]);
    m_date_from_isSet = !json[QString("dateFrom")].isNull() && m_date_from_isValid;

    m_date_to_isValid = ::OpenAPI::fromJsonValue(date_to, json[QString("dateTo")]);
    m_date_to_isSet = !json[QString("dateTo")].isNull() && m_date_to_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;

    m_order_ids_isValid = ::OpenAPI::fromJsonValue(order_ids, json[QString("orderIds")]);
    m_order_ids_isSet = !json[QString("orderIds")].isNull() && m_order_ids_isValid;

    m_cancelled_orders_isValid = ::OpenAPI::fromJsonValue(cancelled_orders, json[QString("cancelledOrders")]);
    m_cancelled_orders_isSet = !json[QString("cancelledOrders")].isNull() && m_cancelled_orders_isValid;
}

QString OAISearchShipmentsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchShipmentsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_date_from_isSet) {
        obj.insert(QString("dateFrom"), ::OpenAPI::toJsonValue(date_from));
    }
    if (m_date_to_isSet) {
        obj.insert(QString("dateTo"), ::OpenAPI::toJsonValue(date_to));
    }
    if (statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(statuses));
    }
    if (order_ids.size() > 0) {
        obj.insert(QString("orderIds"), ::OpenAPI::toJsonValue(order_ids));
    }
    if (m_cancelled_orders_isSet) {
        obj.insert(QString("cancelledOrders"), ::OpenAPI::toJsonValue(cancelled_orders));
    }
    return obj;
}

QDate OAISearchShipmentsRequest::getDateFrom() const {
    return date_from;
}
void OAISearchShipmentsRequest::setDateFrom(const QDate &date_from) {
    this->date_from = date_from;
    this->m_date_from_isSet = true;
}

bool OAISearchShipmentsRequest::is_date_from_Set() const{
    return m_date_from_isSet;
}

bool OAISearchShipmentsRequest::is_date_from_Valid() const{
    return m_date_from_isValid;
}

QDate OAISearchShipmentsRequest::getDateTo() const {
    return date_to;
}
void OAISearchShipmentsRequest::setDateTo(const QDate &date_to) {
    this->date_to = date_to;
    this->m_date_to_isSet = true;
}

bool OAISearchShipmentsRequest::is_date_to_Set() const{
    return m_date_to_isSet;
}

bool OAISearchShipmentsRequest::is_date_to_Valid() const{
    return m_date_to_isValid;
}

QSet<OAIShipmentStatusType> OAISearchShipmentsRequest::getStatuses() const {
    return statuses;
}
void OAISearchShipmentsRequest::setStatuses(const QSet<OAIShipmentStatusType> &statuses) {
    this->statuses = statuses;
    this->m_statuses_isSet = true;
}

bool OAISearchShipmentsRequest::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAISearchShipmentsRequest::is_statuses_Valid() const{
    return m_statuses_isValid;
}

QSet<qint64> OAISearchShipmentsRequest::getOrderIds() const {
    return order_ids;
}
void OAISearchShipmentsRequest::setOrderIds(const QSet<qint64> &order_ids) {
    this->order_ids = order_ids;
    this->m_order_ids_isSet = true;
}

bool OAISearchShipmentsRequest::is_order_ids_Set() const{
    return m_order_ids_isSet;
}

bool OAISearchShipmentsRequest::is_order_ids_Valid() const{
    return m_order_ids_isValid;
}

bool OAISearchShipmentsRequest::isCancelledOrders() const {
    return cancelled_orders;
}
void OAISearchShipmentsRequest::setCancelledOrders(const bool &cancelled_orders) {
    this->cancelled_orders = cancelled_orders;
    this->m_cancelled_orders_isSet = true;
}

bool OAISearchShipmentsRequest::is_cancelled_orders_Set() const{
    return m_cancelled_orders_isSet;
}

bool OAISearchShipmentsRequest::is_cancelled_orders_Valid() const{
    return m_cancelled_orders_isValid;
}

bool OAISearchShipmentsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (order_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancelled_orders_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchShipmentsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_from_isValid && m_date_to_isValid && true;
}

} // namespace OpenAPI
