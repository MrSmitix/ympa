/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPromoDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPromoDTO::OAIGetPromoDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPromoDTO::OAIGetPromoDTO() {
    this->initializeModel();
}

OAIGetPromoDTO::~OAIGetPromoDTO() {}

void OAIGetPromoDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_participating_isSet = false;
    m_participating_isValid = false;

    m_assortment_info_isSet = false;
    m_assortment_info_isValid = false;

    m_mechanics_info_isSet = false;
    m_mechanics_info_isValid = false;

    m_bestseller_info_isSet = false;
    m_bestseller_info_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;
}

void OAIGetPromoDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPromoDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_participating_isValid = ::OpenAPI::fromJsonValue(participating, json[QString("participating")]);
    m_participating_isSet = !json[QString("participating")].isNull() && m_participating_isValid;

    m_assortment_info_isValid = ::OpenAPI::fromJsonValue(assortment_info, json[QString("assortmentInfo")]);
    m_assortment_info_isSet = !json[QString("assortmentInfo")].isNull() && m_assortment_info_isValid;

    m_mechanics_info_isValid = ::OpenAPI::fromJsonValue(mechanics_info, json[QString("mechanicsInfo")]);
    m_mechanics_info_isSet = !json[QString("mechanicsInfo")].isNull() && m_mechanics_info_isValid;

    m_bestseller_info_isValid = ::OpenAPI::fromJsonValue(bestseller_info, json[QString("bestsellerInfo")]);
    m_bestseller_info_isSet = !json[QString("bestsellerInfo")].isNull() && m_bestseller_info_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;
}

QString OAIGetPromoDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPromoDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (period.isSet()) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(period));
    }
    if (m_participating_isSet) {
        obj.insert(QString("participating"), ::OpenAPI::toJsonValue(participating));
    }
    if (assortment_info.isSet()) {
        obj.insert(QString("assortmentInfo"), ::OpenAPI::toJsonValue(assortment_info));
    }
    if (mechanics_info.isSet()) {
        obj.insert(QString("mechanicsInfo"), ::OpenAPI::toJsonValue(mechanics_info));
    }
    if (bestseller_info.isSet()) {
        obj.insert(QString("bestsellerInfo"), ::OpenAPI::toJsonValue(bestseller_info));
    }
    if (channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(channels));
    }
    if (constraints.isSet()) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(constraints));
    }
    return obj;
}

QString OAIGetPromoDTO::getId() const {
    return id;
}
void OAIGetPromoDTO::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIGetPromoDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetPromoDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetPromoDTO::getName() const {
    return name;
}
void OAIGetPromoDTO::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIGetPromoDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetPromoDTO::is_name_Valid() const{
    return m_name_isValid;
}

OAIPromoPeriodDTO OAIGetPromoDTO::getPeriod() const {
    return period;
}
void OAIGetPromoDTO::setPeriod(const OAIPromoPeriodDTO &period) {
    this->period = period;
    this->m_period_isSet = true;
}

bool OAIGetPromoDTO::is_period_Set() const{
    return m_period_isSet;
}

bool OAIGetPromoDTO::is_period_Valid() const{
    return m_period_isValid;
}

bool OAIGetPromoDTO::isParticipating() const {
    return participating;
}
void OAIGetPromoDTO::setParticipating(const bool &participating) {
    this->participating = participating;
    this->m_participating_isSet = true;
}

bool OAIGetPromoDTO::is_participating_Set() const{
    return m_participating_isSet;
}

bool OAIGetPromoDTO::is_participating_Valid() const{
    return m_participating_isValid;
}

OAIGetPromoAssortmentInfoDTO OAIGetPromoDTO::getAssortmentInfo() const {
    return assortment_info;
}
void OAIGetPromoDTO::setAssortmentInfo(const OAIGetPromoAssortmentInfoDTO &assortment_info) {
    this->assortment_info = assortment_info;
    this->m_assortment_info_isSet = true;
}

bool OAIGetPromoDTO::is_assortment_info_Set() const{
    return m_assortment_info_isSet;
}

bool OAIGetPromoDTO::is_assortment_info_Valid() const{
    return m_assortment_info_isValid;
}

OAIGetPromoMechanicsInfoDTO OAIGetPromoDTO::getMechanicsInfo() const {
    return mechanics_info;
}
void OAIGetPromoDTO::setMechanicsInfo(const OAIGetPromoMechanicsInfoDTO &mechanics_info) {
    this->mechanics_info = mechanics_info;
    this->m_mechanics_info_isSet = true;
}

bool OAIGetPromoDTO::is_mechanics_info_Set() const{
    return m_mechanics_info_isSet;
}

bool OAIGetPromoDTO::is_mechanics_info_Valid() const{
    return m_mechanics_info_isValid;
}

OAIGetPromoBestsellerInfoDTO OAIGetPromoDTO::getBestsellerInfo() const {
    return bestseller_info;
}
void OAIGetPromoDTO::setBestsellerInfo(const OAIGetPromoBestsellerInfoDTO &bestseller_info) {
    this->bestseller_info = bestseller_info;
    this->m_bestseller_info_isSet = true;
}

bool OAIGetPromoDTO::is_bestseller_info_Set() const{
    return m_bestseller_info_isSet;
}

bool OAIGetPromoDTO::is_bestseller_info_Valid() const{
    return m_bestseller_info_isValid;
}

QList<OAIChannelType> OAIGetPromoDTO::getChannels() const {
    return channels;
}
void OAIGetPromoDTO::setChannels(const QList<OAIChannelType> &channels) {
    this->channels = channels;
    this->m_channels_isSet = true;
}

bool OAIGetPromoDTO::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIGetPromoDTO::is_channels_Valid() const{
    return m_channels_isValid;
}

OAIGetPromoConstraintsDTO OAIGetPromoDTO::getConstraints() const {
    return constraints;
}
void OAIGetPromoDTO::setConstraints(const OAIGetPromoConstraintsDTO &constraints) {
    this->constraints = constraints;
    this->m_constraints_isSet = true;
}

bool OAIGetPromoDTO::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAIGetPromoDTO::is_constraints_Valid() const{
    return m_constraints_isValid;
}

bool OAIGetPromoDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_participating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (assortment_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (mechanics_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (bestseller_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPromoDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_period_isValid && m_participating_isValid && m_assortment_info_isValid && m_mechanics_info_isValid && m_bestseller_info_isValid && true;
}

} // namespace OpenAPI
