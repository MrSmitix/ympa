/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedbackCommentDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedbackCommentDTO::OAIFeedbackCommentDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedbackCommentDTO::OAIFeedbackCommentDTO() {
    this->initializeModel();
}

OAIFeedbackCommentDTO::~OAIFeedbackCommentDTO() {}

void OAIFeedbackCommentDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;
}

void OAIFeedbackCommentDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedbackCommentDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;
}

QString OAIFeedbackCommentDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedbackCommentDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(parent_id));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(body));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(author));
    }
    if (children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(children));
    }
    return obj;
}

qint64 OAIFeedbackCommentDTO::getId() const {
    return id;
}
void OAIFeedbackCommentDTO::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIFeedbackCommentDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeedbackCommentDTO::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIFeedbackCommentDTO::getParentId() const {
    return parent_id;
}
void OAIFeedbackCommentDTO::setParentId(const qint64 &parent_id) {
    this->parent_id = parent_id;
    this->m_parent_id_isSet = true;
}

bool OAIFeedbackCommentDTO::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIFeedbackCommentDTO::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAIFeedbackCommentDTO::getBody() const {
    return body;
}
void OAIFeedbackCommentDTO::setBody(const QString &body) {
    this->body = body;
    this->m_body_isSet = true;
}

bool OAIFeedbackCommentDTO::is_body_Set() const{
    return m_body_isSet;
}

bool OAIFeedbackCommentDTO::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAIFeedbackCommentDTO::getCreatedAt() const {
    return created_at;
}
void OAIFeedbackCommentDTO::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAIFeedbackCommentDTO::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFeedbackCommentDTO::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIFeedbackCommentDTO::getUpdatedAt() const {
    return updated_at;
}
void OAIFeedbackCommentDTO::setUpdatedAt(const QDateTime &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool OAIFeedbackCommentDTO::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFeedbackCommentDTO::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIFeedbackCommentAuthorDTO OAIFeedbackCommentDTO::getAuthor() const {
    return author;
}
void OAIFeedbackCommentDTO::setAuthor(const OAIFeedbackCommentAuthorDTO &author) {
    this->author = author;
    this->m_author_isSet = true;
}

bool OAIFeedbackCommentDTO::is_author_Set() const{
    return m_author_isSet;
}

bool OAIFeedbackCommentDTO::is_author_Valid() const{
    return m_author_isValid;
}

QList<OAIFeedbackCommentDTO> OAIFeedbackCommentDTO::getChildren() const {
    return children;
}
void OAIFeedbackCommentDTO::setChildren(const QList<OAIFeedbackCommentDTO> &children) {
    this->children = children;
    this->m_children_isSet = true;
}

bool OAIFeedbackCommentDTO::is_children_Set() const{
    return m_children_isSet;
}

bool OAIFeedbackCommentDTO::is_children_Valid() const{
    return m_children_isValid;
}

bool OAIFeedbackCommentDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (children.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedbackCommentDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
