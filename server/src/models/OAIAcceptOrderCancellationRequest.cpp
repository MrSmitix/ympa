/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcceptOrderCancellationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcceptOrderCancellationRequest::OAIAcceptOrderCancellationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcceptOrderCancellationRequest::OAIAcceptOrderCancellationRequest() {
    this->initializeModel();
}

OAIAcceptOrderCancellationRequest::~OAIAcceptOrderCancellationRequest() {}

void OAIAcceptOrderCancellationRequest::initializeModel() {

    m_accepted_isSet = false;
    m_accepted_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIAcceptOrderCancellationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcceptOrderCancellationRequest::fromJsonObject(QJsonObject json) {

    m_accepted_isValid = ::OpenAPI::fromJsonValue(accepted, json[QString("accepted")]);
    m_accepted_isSet = !json[QString("accepted")].isNull() && m_accepted_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIAcceptOrderCancellationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcceptOrderCancellationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_isSet) {
        obj.insert(QString("accepted"), ::OpenAPI::toJsonValue(accepted));
    }
    if (reason.isSet()) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(reason));
    }
    return obj;
}

bool OAIAcceptOrderCancellationRequest::isAccepted() const {
    return accepted;
}
void OAIAcceptOrderCancellationRequest::setAccepted(const bool &accepted) {
    this->accepted = accepted;
    this->m_accepted_isSet = true;
}

bool OAIAcceptOrderCancellationRequest::is_accepted_Set() const{
    return m_accepted_isSet;
}

bool OAIAcceptOrderCancellationRequest::is_accepted_Valid() const{
    return m_accepted_isValid;
}

OAIOrderCancellationReasonType OAIAcceptOrderCancellationRequest::getReason() const {
    return reason;
}
void OAIAcceptOrderCancellationRequest::setReason(const OAIOrderCancellationReasonType &reason) {
    this->reason = reason;
    this->m_reason_isSet = true;
}

bool OAIAcceptOrderCancellationRequest::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIAcceptOrderCancellationRequest::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIAcceptOrderCancellationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (reason.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcceptOrderCancellationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accepted_isValid && true;
}

} // namespace OpenAPI
