/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnInstanceDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnInstanceDTO::OAIReturnInstanceDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnInstanceDTO::OAIReturnInstanceDTO() {
    this->initializeModel();
}

OAIReturnInstanceDTO::~OAIReturnInstanceDTO() {}

void OAIReturnInstanceDTO::initializeModel() {

    m_stock_type_isSet = false;
    m_stock_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_cis_isSet = false;
    m_cis_isValid = false;

    m_imei_isSet = false;
    m_imei_isValid = false;
}

void OAIReturnInstanceDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReturnInstanceDTO::fromJsonObject(QJsonObject json) {

    m_stock_type_isValid = ::OpenAPI::fromJsonValue(stock_type, json[QString("stockType")]);
    m_stock_type_isSet = !json[QString("stockType")].isNull() && m_stock_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_cis_isValid = ::OpenAPI::fromJsonValue(cis, json[QString("cis")]);
    m_cis_isSet = !json[QString("cis")].isNull() && m_cis_isValid;

    m_imei_isValid = ::OpenAPI::fromJsonValue(imei, json[QString("imei")]);
    m_imei_isSet = !json[QString("imei")].isNull() && m_imei_isValid;
}

QString OAIReturnInstanceDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReturnInstanceDTO::asJsonObject() const {
    QJsonObject obj;
    if (stock_type.isSet()) {
        obj.insert(QString("stockType"), ::OpenAPI::toJsonValue(stock_type));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_cis_isSet) {
        obj.insert(QString("cis"), ::OpenAPI::toJsonValue(cis));
    }
    if (m_imei_isSet) {
        obj.insert(QString("imei"), ::OpenAPI::toJsonValue(imei));
    }
    return obj;
}

OAIReturnInstanceStockType OAIReturnInstanceDTO::getStockType() const {
    return stock_type;
}
void OAIReturnInstanceDTO::setStockType(const OAIReturnInstanceStockType &stock_type) {
    this->stock_type = stock_type;
    this->m_stock_type_isSet = true;
}

bool OAIReturnInstanceDTO::is_stock_type_Set() const{
    return m_stock_type_isSet;
}

bool OAIReturnInstanceDTO::is_stock_type_Valid() const{
    return m_stock_type_isValid;
}

OAIReturnInstanceStatusType OAIReturnInstanceDTO::getStatus() const {
    return status;
}
void OAIReturnInstanceDTO::setStatus(const OAIReturnInstanceStatusType &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIReturnInstanceDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReturnInstanceDTO::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIReturnInstanceDTO::getCis() const {
    return cis;
}
void OAIReturnInstanceDTO::setCis(const QString &cis) {
    this->cis = cis;
    this->m_cis_isSet = true;
}

bool OAIReturnInstanceDTO::is_cis_Set() const{
    return m_cis_isSet;
}

bool OAIReturnInstanceDTO::is_cis_Valid() const{
    return m_cis_isValid;
}

QString OAIReturnInstanceDTO::getImei() const {
    return imei;
}
void OAIReturnInstanceDTO::setImei(const QString &imei) {
    this->imei = imei;
    this->m_imei_isSet = true;
}

bool OAIReturnInstanceDTO::is_imei_Set() const{
    return m_imei_isSet;
}

bool OAIReturnInstanceDTO::is_imei_Valid() const{
    return m_imei_isValid;
}

bool OAIReturnInstanceDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (stock_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imei_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReturnInstanceDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
