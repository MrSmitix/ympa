/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRejectedPromoOfferUpdateReasonType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRejectedPromoOfferUpdateReasonType::OAIRejectedPromoOfferUpdateReasonType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRejectedPromoOfferUpdateReasonType::OAIRejectedPromoOfferUpdateReasonType() {
    this->initializeModel();
}

OAIRejectedPromoOfferUpdateReasonType::~OAIRejectedPromoOfferUpdateReasonType() {}

void OAIRejectedPromoOfferUpdateReasonType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRejectedPromoOfferUpdateReasonType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRejectedPromoOfferUpdateReasonType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OFFER_DOES_NOT_EXIST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRejectedPromoOfferUpdateReasonType::OFFER_DOES_NOT_EXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OFFER_DUPLICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRejectedPromoOfferUpdateReasonType::OFFER_DUPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OFFER_NOT_ELIGIBLE_FOR_PROMO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRejectedPromoOfferUpdateReasonType::OFFER_NOT_ELIGIBLE_FOR_PROMO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRejectedPromoOfferUpdateReasonType::OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRejectedPromoOfferUpdateReasonType::DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMPTY_OLD_PRICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRejectedPromoOfferUpdateReasonType::EMPTY_OLD_PRICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMPTY_PROMO_PRICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRejectedPromoOfferUpdateReasonType::EMPTY_PROMO_PRICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAX_PROMO_PRICE_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRejectedPromoOfferUpdateReasonType::MAX_PROMO_PRICE_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROMO_PRICE_BIGGER_THAN_MAX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRejectedPromoOfferUpdateReasonType::PROMO_PRICE_BIGGER_THAN_MAX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROMO_PRICE_SMALLER_THAN_MIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRejectedPromoOfferUpdateReasonType::PROMO_PRICE_SMALLER_THAN_MIN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRejectedPromoOfferUpdateReasonType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRejectedPromoOfferUpdateReasonType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRejectedPromoOfferUpdateReasonType::OFFER_DOES_NOT_EXIST:
            val = "OFFER_DOES_NOT_EXIST";
            break;
        case eOAIRejectedPromoOfferUpdateReasonType::OFFER_DUPLICATION:
            val = "OFFER_DUPLICATION";
            break;
        case eOAIRejectedPromoOfferUpdateReasonType::OFFER_NOT_ELIGIBLE_FOR_PROMO:
            val = "OFFER_NOT_ELIGIBLE_FOR_PROMO";
            break;
        case eOAIRejectedPromoOfferUpdateReasonType::OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED:
            val = "OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED";
            break;
        case eOAIRejectedPromoOfferUpdateReasonType::DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED:
            val = "DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED";
            break;
        case eOAIRejectedPromoOfferUpdateReasonType::EMPTY_OLD_PRICE:
            val = "EMPTY_OLD_PRICE";
            break;
        case eOAIRejectedPromoOfferUpdateReasonType::EMPTY_PROMO_PRICE:
            val = "EMPTY_PROMO_PRICE";
            break;
        case eOAIRejectedPromoOfferUpdateReasonType::MAX_PROMO_PRICE_EXCEEDED:
            val = "MAX_PROMO_PRICE_EXCEEDED";
            break;
        case eOAIRejectedPromoOfferUpdateReasonType::PROMO_PRICE_BIGGER_THAN_MAX:
            val = "PROMO_PRICE_BIGGER_THAN_MAX";
            break;
        case eOAIRejectedPromoOfferUpdateReasonType::PROMO_PRICE_SMALLER_THAN_MIN:
            val = "PROMO_PRICE_SMALLER_THAN_MIN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRejectedPromoOfferUpdateReasonType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRejectedPromoOfferUpdateReasonType::eOAIRejectedPromoOfferUpdateReasonType OAIRejectedPromoOfferUpdateReasonType::getValue() const {
    return m_value;
}

void OAIRejectedPromoOfferUpdateReasonType::setValue(const OAIRejectedPromoOfferUpdateReasonType::eOAIRejectedPromoOfferUpdateReasonType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRejectedPromoOfferUpdateReasonType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRejectedPromoOfferUpdateReasonType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
