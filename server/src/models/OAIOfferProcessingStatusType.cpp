/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferProcessingStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferProcessingStatusType::OAIOfferProcessingStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferProcessingStatusType::OAIOfferProcessingStatusType() {
    this->initializeModel();
}

OAIOfferProcessingStatusType::~OAIOfferProcessingStatusType() {}

void OAIOfferProcessingStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOfferProcessingStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOfferProcessingStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_WORK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::IN_WORK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEED_INFO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::NEED_INFO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEED_MAPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::NEED_MAPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEED_CONTENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::NEED_CONTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTENT_PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::CONTENT_PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUSPENDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::SUSPENDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REVIEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::REVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::CREATE_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferProcessingStatusType::UPDATE_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOfferProcessingStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOfferProcessingStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOfferProcessingStatusType::UNKNOWN:
            val = "UNKNOWN";
            break;
        case eOAIOfferProcessingStatusType::READY:
            val = "READY";
            break;
        case eOAIOfferProcessingStatusType::IN_WORK:
            val = "IN_WORK";
            break;
        case eOAIOfferProcessingStatusType::NEED_INFO:
            val = "NEED_INFO";
            break;
        case eOAIOfferProcessingStatusType::NEED_MAPPING:
            val = "NEED_MAPPING";
            break;
        case eOAIOfferProcessingStatusType::NEED_CONTENT:
            val = "NEED_CONTENT";
            break;
        case eOAIOfferProcessingStatusType::CONTENT_PROCESSING:
            val = "CONTENT_PROCESSING";
            break;
        case eOAIOfferProcessingStatusType::SUSPENDED:
            val = "SUSPENDED";
            break;
        case eOAIOfferProcessingStatusType::REJECTED:
            val = "REJECTED";
            break;
        case eOAIOfferProcessingStatusType::REVIEW:
            val = "REVIEW";
            break;
        case eOAIOfferProcessingStatusType::CREATE_ERROR:
            val = "CREATE_ERROR";
            break;
        case eOAIOfferProcessingStatusType::UPDATE_ERROR:
            val = "UPDATE_ERROR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOfferProcessingStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOfferProcessingStatusType::eOAIOfferProcessingStatusType OAIOfferProcessingStatusType::getValue() const {
    return m_value;
}

void OAIOfferProcessingStatusType::setValue(const OAIOfferProcessingStatusType::eOAIOfferProcessingStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOfferProcessingStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOfferProcessingStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
