/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderItemInstanceModificationDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderItemInstanceModificationDTO::OAIOrderItemInstanceModificationDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderItemInstanceModificationDTO::OAIOrderItemInstanceModificationDTO() {
    this->initializeModel();
}

OAIOrderItemInstanceModificationDTO::~OAIOrderItemInstanceModificationDTO() {}

void OAIOrderItemInstanceModificationDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;
}

void OAIOrderItemInstanceModificationDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderItemInstanceModificationDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;
}

QString OAIOrderItemInstanceModificationDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderItemInstanceModificationDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(instances));
    }
    return obj;
}

qint64 OAIOrderItemInstanceModificationDTO::getId() const {
    return id;
}
void OAIOrderItemInstanceModificationDTO::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIOrderItemInstanceModificationDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderItemInstanceModificationDTO::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIBriefOrderItemInstanceDTO> OAIOrderItemInstanceModificationDTO::getInstances() const {
    return instances;
}
void OAIOrderItemInstanceModificationDTO::setInstances(const QList<OAIBriefOrderItemInstanceDTO> &instances) {
    this->instances = instances;
    this->m_instances_isSet = true;
}

bool OAIOrderItemInstanceModificationDTO::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIOrderItemInstanceModificationDTO::is_instances_Valid() const{
    return m_instances_isValid;
}

bool OAIOrderItemInstanceModificationDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderItemInstanceModificationDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_instances_isValid && true;
}

} // namespace OpenAPI
