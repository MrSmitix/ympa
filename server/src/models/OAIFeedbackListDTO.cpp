/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedbackListDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedbackListDTO::OAIFeedbackListDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedbackListDTO::OAIFeedbackListDTO() {
    this->initializeModel();
}

OAIFeedbackListDTO::~OAIFeedbackListDTO() {}

void OAIFeedbackListDTO::initializeModel() {

    m_paging_isSet = false;
    m_paging_isValid = false;

    m_feedback_list_isSet = false;
    m_feedback_list_isValid = false;
}

void OAIFeedbackListDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedbackListDTO::fromJsonObject(QJsonObject json) {

    m_paging_isValid = ::OpenAPI::fromJsonValue(paging, json[QString("paging")]);
    m_paging_isSet = !json[QString("paging")].isNull() && m_paging_isValid;

    m_feedback_list_isValid = ::OpenAPI::fromJsonValue(feedback_list, json[QString("feedbackList")]);
    m_feedback_list_isSet = !json[QString("feedbackList")].isNull() && m_feedback_list_isValid;
}

QString OAIFeedbackListDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedbackListDTO::asJsonObject() const {
    QJsonObject obj;
    if (paging.isSet()) {
        obj.insert(QString("paging"), ::OpenAPI::toJsonValue(paging));
    }
    if (feedback_list.size() > 0) {
        obj.insert(QString("feedbackList"), ::OpenAPI::toJsonValue(feedback_list));
    }
    return obj;
}

OAIScrollingPagerDTO OAIFeedbackListDTO::getPaging() const {
    return paging;
}
void OAIFeedbackListDTO::setPaging(const OAIScrollingPagerDTO &paging) {
    this->paging = paging;
    this->m_paging_isSet = true;
}

bool OAIFeedbackListDTO::is_paging_Set() const{
    return m_paging_isSet;
}

bool OAIFeedbackListDTO::is_paging_Valid() const{
    return m_paging_isValid;
}

QList<OAIFeedbackDTO> OAIFeedbackListDTO::getFeedbackList() const {
    return feedback_list;
}
void OAIFeedbackListDTO::setFeedbackList(const QList<OAIFeedbackDTO> &feedback_list) {
    this->feedback_list = feedback_list;
    this->m_feedback_list_isSet = true;
}

bool OAIFeedbackListDTO::is_feedback_list_Set() const{
    return m_feedback_list_isSet;
}

bool OAIFeedbackListDTO::is_feedback_list_Valid() const{
    return m_feedback_list_isValid;
}

bool OAIFeedbackListDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (paging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (feedback_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedbackListDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_feedback_list_isValid && true;
}

} // namespace OpenAPI
