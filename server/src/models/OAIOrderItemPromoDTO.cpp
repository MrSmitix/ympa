/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderItemPromoDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderItemPromoDTO::OAIOrderItemPromoDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderItemPromoDTO::OAIOrderItemPromoDTO() {
    this->initializeModel();
}

OAIOrderItemPromoDTO::~OAIOrderItemPromoDTO() {}

void OAIOrderItemPromoDTO::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_subsidy_isSet = false;
    m_subsidy_isValid = false;

    m_shop_promo_id_isSet = false;
    m_shop_promo_id_isValid = false;

    m_market_promo_id_isSet = false;
    m_market_promo_id_isValid = false;
}

void OAIOrderItemPromoDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderItemPromoDTO::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_subsidy_isValid = ::OpenAPI::fromJsonValue(subsidy, json[QString("subsidy")]);
    m_subsidy_isSet = !json[QString("subsidy")].isNull() && m_subsidy_isValid;

    m_shop_promo_id_isValid = ::OpenAPI::fromJsonValue(shop_promo_id, json[QString("shopPromoId")]);
    m_shop_promo_id_isSet = !json[QString("shopPromoId")].isNull() && m_shop_promo_id_isValid;

    m_market_promo_id_isValid = ::OpenAPI::fromJsonValue(market_promo_id, json[QString("marketPromoId")]);
    m_market_promo_id_isSet = !json[QString("marketPromoId")].isNull() && m_market_promo_id_isValid;
}

QString OAIOrderItemPromoDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderItemPromoDTO::asJsonObject() const {
    QJsonObject obj;
    if (type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_discount_isSet) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(discount));
    }
    if (m_subsidy_isSet) {
        obj.insert(QString("subsidy"), ::OpenAPI::toJsonValue(subsidy));
    }
    if (m_shop_promo_id_isSet) {
        obj.insert(QString("shopPromoId"), ::OpenAPI::toJsonValue(shop_promo_id));
    }
    if (m_market_promo_id_isSet) {
        obj.insert(QString("marketPromoId"), ::OpenAPI::toJsonValue(market_promo_id));
    }
    return obj;
}

OAIOrderPromoType OAIOrderItemPromoDTO::getType() const {
    return type;
}
void OAIOrderItemPromoDTO::setType(const OAIOrderPromoType &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIOrderItemPromoDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrderItemPromoDTO::is_type_Valid() const{
    return m_type_isValid;
}

double OAIOrderItemPromoDTO::getDiscount() const {
    return discount;
}
void OAIOrderItemPromoDTO::setDiscount(const double &discount) {
    this->discount = discount;
    this->m_discount_isSet = true;
}

bool OAIOrderItemPromoDTO::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIOrderItemPromoDTO::is_discount_Valid() const{
    return m_discount_isValid;
}

double OAIOrderItemPromoDTO::getSubsidy() const {
    return subsidy;
}
void OAIOrderItemPromoDTO::setSubsidy(const double &subsidy) {
    this->subsidy = subsidy;
    this->m_subsidy_isSet = true;
}

bool OAIOrderItemPromoDTO::is_subsidy_Set() const{
    return m_subsidy_isSet;
}

bool OAIOrderItemPromoDTO::is_subsidy_Valid() const{
    return m_subsidy_isValid;
}

QString OAIOrderItemPromoDTO::getShopPromoId() const {
    return shop_promo_id;
}
void OAIOrderItemPromoDTO::setShopPromoId(const QString &shop_promo_id) {
    this->shop_promo_id = shop_promo_id;
    this->m_shop_promo_id_isSet = true;
}

bool OAIOrderItemPromoDTO::is_shop_promo_id_Set() const{
    return m_shop_promo_id_isSet;
}

bool OAIOrderItemPromoDTO::is_shop_promo_id_Valid() const{
    return m_shop_promo_id_isValid;
}

QString OAIOrderItemPromoDTO::getMarketPromoId() const {
    return market_promo_id;
}
void OAIOrderItemPromoDTO::setMarketPromoId(const QString &market_promo_id) {
    this->market_promo_id = market_promo_id;
    this->m_market_promo_id_isSet = true;
}

bool OAIOrderItemPromoDTO::is_market_promo_id_Set() const{
    return m_market_promo_id_isSet;
}

bool OAIOrderItemPromoDTO::is_market_promo_id_Valid() const{
    return m_market_promo_id_isValid;
}

bool OAIOrderItemPromoDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subsidy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_promo_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_promo_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderItemPromoDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
