/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrdersStatsStockType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrdersStatsStockType::OAIOrdersStatsStockType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrdersStatsStockType::OAIOrdersStatsStockType() {
    this->initializeModel();
}

OAIOrdersStatsStockType::~OAIOrdersStatsStockType() {}

void OAIOrdersStatsStockType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrdersStatsStockType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrdersStatsStockType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsStockType::FIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FREEZE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsStockType::FREEZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsStockType::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUARANTINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsStockType::QUARANTINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UTILIZATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsStockType::UTILIZATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEFECT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsStockType::DEFECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdersStatsStockType::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrdersStatsStockType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrdersStatsStockType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrdersStatsStockType::FIT:
            val = "FIT";
            break;
        case eOAIOrdersStatsStockType::FREEZE:
            val = "FREEZE";
            break;
        case eOAIOrdersStatsStockType::AVAILABLE:
            val = "AVAILABLE";
            break;
        case eOAIOrdersStatsStockType::QUARANTINE:
            val = "QUARANTINE";
            break;
        case eOAIOrdersStatsStockType::UTILIZATION:
            val = "UTILIZATION";
            break;
        case eOAIOrdersStatsStockType::DEFECT:
            val = "DEFECT";
            break;
        case eOAIOrdersStatsStockType::EXPIRED:
            val = "EXPIRED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrdersStatsStockType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrdersStatsStockType::eOAIOrdersStatsStockType OAIOrdersStatsStockType::getValue() const {
    return m_value;
}

void OAIOrdersStatsStockType::setValue(const OAIOrdersStatsStockType::eOAIOrdersStatsStockType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrdersStatsStockType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrdersStatsStockType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
