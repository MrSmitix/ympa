/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedContentDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedContentDTO::OAIFeedContentDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedContentDTO::OAIFeedContentDTO() {
    this->initializeModel();
}

OAIFeedContentDTO::~OAIFeedContentDTO() {}

void OAIFeedContentDTO::initializeModel() {

    m_rejected_offers_count_isSet = false;
    m_rejected_offers_count_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_offers_count_isSet = false;
    m_total_offers_count_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIFeedContentDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedContentDTO::fromJsonObject(QJsonObject json) {

    m_rejected_offers_count_isValid = ::OpenAPI::fromJsonValue(rejected_offers_count, json[QString("rejectedOffersCount")]);
    m_rejected_offers_count_isSet = !json[QString("rejectedOffersCount")].isNull() && m_rejected_offers_count_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_offers_count_isValid = ::OpenAPI::fromJsonValue(total_offers_count, json[QString("totalOffersCount")]);
    m_total_offers_count_isSet = !json[QString("totalOffersCount")].isNull() && m_total_offers_count_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAIFeedContentDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedContentDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_rejected_offers_count_isSet) {
        obj.insert(QString("rejectedOffersCount"), ::OpenAPI::toJsonValue(rejected_offers_count));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_total_offers_count_isSet) {
        obj.insert(QString("totalOffersCount"), ::OpenAPI::toJsonValue(total_offers_count));
    }
    if (error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(error));
    }
    return obj;
}

qint64 OAIFeedContentDTO::getRejectedOffersCount() const {
    return rejected_offers_count;
}
void OAIFeedContentDTO::setRejectedOffersCount(const qint64 &rejected_offers_count) {
    this->rejected_offers_count = rejected_offers_count;
    this->m_rejected_offers_count_isSet = true;
}

bool OAIFeedContentDTO::is_rejected_offers_count_Set() const{
    return m_rejected_offers_count_isSet;
}

bool OAIFeedContentDTO::is_rejected_offers_count_Valid() const{
    return m_rejected_offers_count_isValid;
}

OAIFeedStatusType OAIFeedContentDTO::getStatus() const {
    return status;
}
void OAIFeedContentDTO::setStatus(const OAIFeedStatusType &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIFeedContentDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFeedContentDTO::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAIFeedContentDTO::getTotalOffersCount() const {
    return total_offers_count;
}
void OAIFeedContentDTO::setTotalOffersCount(const qint64 &total_offers_count) {
    this->total_offers_count = total_offers_count;
    this->m_total_offers_count_isSet = true;
}

bool OAIFeedContentDTO::is_total_offers_count_Set() const{
    return m_total_offers_count_isSet;
}

bool OAIFeedContentDTO::is_total_offers_count_Valid() const{
    return m_total_offers_count_isValid;
}

OAIFeedContentErrorDTO OAIFeedContentDTO::getError() const {
    return error;
}
void OAIFeedContentDTO::setError(const OAIFeedContentErrorDTO &error) {
    this->error = error;
    this->m_error_isSet = true;
}

bool OAIFeedContentDTO::is_error_Set() const{
    return m_error_isSet;
}

bool OAIFeedContentDTO::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIFeedContentDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rejected_offers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_offers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedContentDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
