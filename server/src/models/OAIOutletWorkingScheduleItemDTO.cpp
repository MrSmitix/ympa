/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutletWorkingScheduleItemDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutletWorkingScheduleItemDTO::OAIOutletWorkingScheduleItemDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutletWorkingScheduleItemDTO::OAIOutletWorkingScheduleItemDTO() {
    this->initializeModel();
}

OAIOutletWorkingScheduleItemDTO::~OAIOutletWorkingScheduleItemDTO() {}

void OAIOutletWorkingScheduleItemDTO::initializeModel() {

    m_start_day_isSet = false;
    m_start_day_isValid = false;

    m_end_day_isSet = false;
    m_end_day_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;
}

void OAIOutletWorkingScheduleItemDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutletWorkingScheduleItemDTO::fromJsonObject(QJsonObject json) {

    m_start_day_isValid = ::OpenAPI::fromJsonValue(start_day, json[QString("startDay")]);
    m_start_day_isSet = !json[QString("startDay")].isNull() && m_start_day_isValid;

    m_end_day_isValid = ::OpenAPI::fromJsonValue(end_day, json[QString("endDay")]);
    m_end_day_isSet = !json[QString("endDay")].isNull() && m_end_day_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;
}

QString OAIOutletWorkingScheduleItemDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutletWorkingScheduleItemDTO::asJsonObject() const {
    QJsonObject obj;
    if (start_day.isSet()) {
        obj.insert(QString("startDay"), ::OpenAPI::toJsonValue(start_day));
    }
    if (end_day.isSet()) {
        obj.insert(QString("endDay"), ::OpenAPI::toJsonValue(end_day));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(end_time));
    }
    return obj;
}

OAIDayOfWeekType OAIOutletWorkingScheduleItemDTO::getStartDay() const {
    return start_day;
}
void OAIOutletWorkingScheduleItemDTO::setStartDay(const OAIDayOfWeekType &start_day) {
    this->start_day = start_day;
    this->m_start_day_isSet = true;
}

bool OAIOutletWorkingScheduleItemDTO::is_start_day_Set() const{
    return m_start_day_isSet;
}

bool OAIOutletWorkingScheduleItemDTO::is_start_day_Valid() const{
    return m_start_day_isValid;
}

OAIDayOfWeekType OAIOutletWorkingScheduleItemDTO::getEndDay() const {
    return end_day;
}
void OAIOutletWorkingScheduleItemDTO::setEndDay(const OAIDayOfWeekType &end_day) {
    this->end_day = end_day;
    this->m_end_day_isSet = true;
}

bool OAIOutletWorkingScheduleItemDTO::is_end_day_Set() const{
    return m_end_day_isSet;
}

bool OAIOutletWorkingScheduleItemDTO::is_end_day_Valid() const{
    return m_end_day_isValid;
}

QString OAIOutletWorkingScheduleItemDTO::getStartTime() const {
    return start_time;
}
void OAIOutletWorkingScheduleItemDTO::setStartTime(const QString &start_time) {
    this->start_time = start_time;
    this->m_start_time_isSet = true;
}

bool OAIOutletWorkingScheduleItemDTO::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIOutletWorkingScheduleItemDTO::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIOutletWorkingScheduleItemDTO::getEndTime() const {
    return end_time;
}
void OAIOutletWorkingScheduleItemDTO::setEndTime(const QString &end_time) {
    this->end_time = end_time;
    this->m_end_time_isSet = true;
}

bool OAIOutletWorkingScheduleItemDTO::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIOutletWorkingScheduleItemDTO::is_end_time_Valid() const{
    return m_end_time_isValid;
}

bool OAIOutletWorkingScheduleItemDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (start_day.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (end_day.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutletWorkingScheduleItemDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_day_isValid && m_end_day_isValid && m_start_time_isValid && m_end_time_isValid && true;
}

} // namespace OpenAPI
