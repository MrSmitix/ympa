/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCampaignOfferDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCampaignOfferDTO::OAIGetCampaignOfferDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCampaignOfferDTO::OAIGetCampaignOfferDTO() {
    this->initializeModel();
}

OAIGetCampaignOfferDTO::~OAIGetCampaignOfferDTO() {}

void OAIGetCampaignOfferDTO::initializeModel() {

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_quantum_isSet = false;
    m_quantum_isValid = false;

    m_available_isSet = false;
    m_available_isValid = false;

    m_basic_price_isSet = false;
    m_basic_price_isValid = false;

    m_campaign_price_isSet = false;
    m_campaign_price_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIGetCampaignOfferDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCampaignOfferDTO::fromJsonObject(QJsonObject json) {

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_quantum_isValid = ::OpenAPI::fromJsonValue(quantum, json[QString("quantum")]);
    m_quantum_isSet = !json[QString("quantum")].isNull() && m_quantum_isValid;

    m_available_isValid = ::OpenAPI::fromJsonValue(available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_basic_price_isValid = ::OpenAPI::fromJsonValue(basic_price, json[QString("basicPrice")]);
    m_basic_price_isSet = !json[QString("basicPrice")].isNull() && m_basic_price_isValid;

    m_campaign_price_isValid = ::OpenAPI::fromJsonValue(campaign_price, json[QString("campaignPrice")]);
    m_campaign_price_isSet = !json[QString("campaignPrice")].isNull() && m_campaign_price_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIGetCampaignOfferDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCampaignOfferDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(offer_id));
    }
    if (quantum.isSet()) {
        obj.insert(QString("quantum"), ::OpenAPI::toJsonValue(quantum));
    }
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(available));
    }
    if (basic_price.isSet()) {
        obj.insert(QString("basicPrice"), ::OpenAPI::toJsonValue(basic_price));
    }
    if (campaign_price.isSet()) {
        obj.insert(QString("campaignPrice"), ::OpenAPI::toJsonValue(campaign_price));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(errors));
    }
    if (warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(warnings));
    }
    return obj;
}

QString OAIGetCampaignOfferDTO::getOfferId() const {
    return offer_id;
}
void OAIGetCampaignOfferDTO::setOfferId(const QString &offer_id) {
    this->offer_id = offer_id;
    this->m_offer_id_isSet = true;
}

bool OAIGetCampaignOfferDTO::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIGetCampaignOfferDTO::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

OAIQuantumDTO OAIGetCampaignOfferDTO::getQuantum() const {
    return quantum;
}
void OAIGetCampaignOfferDTO::setQuantum(const OAIQuantumDTO &quantum) {
    this->quantum = quantum;
    this->m_quantum_isSet = true;
}

bool OAIGetCampaignOfferDTO::is_quantum_Set() const{
    return m_quantum_isSet;
}

bool OAIGetCampaignOfferDTO::is_quantum_Valid() const{
    return m_quantum_isValid;
}

bool OAIGetCampaignOfferDTO::isAvailable() const {
    return available;
}
void OAIGetCampaignOfferDTO::setAvailable(const bool &available) {
    this->available = available;
    this->m_available_isSet = true;
}

bool OAIGetCampaignOfferDTO::is_available_Set() const{
    return m_available_isSet;
}

bool OAIGetCampaignOfferDTO::is_available_Valid() const{
    return m_available_isValid;
}

OAIGetPriceWithDiscountDTO OAIGetCampaignOfferDTO::getBasicPrice() const {
    return basic_price;
}
void OAIGetCampaignOfferDTO::setBasicPrice(const OAIGetPriceWithDiscountDTO &basic_price) {
    this->basic_price = basic_price;
    this->m_basic_price_isSet = true;
}

bool OAIGetCampaignOfferDTO::is_basic_price_Set() const{
    return m_basic_price_isSet;
}

bool OAIGetCampaignOfferDTO::is_basic_price_Valid() const{
    return m_basic_price_isValid;
}

OAIGetPriceWithVatDTO OAIGetCampaignOfferDTO::getCampaignPrice() const {
    return campaign_price;
}
void OAIGetCampaignOfferDTO::setCampaignPrice(const OAIGetPriceWithVatDTO &campaign_price) {
    this->campaign_price = campaign_price;
    this->m_campaign_price_isSet = true;
}

bool OAIGetCampaignOfferDTO::is_campaign_price_Set() const{
    return m_campaign_price_isSet;
}

bool OAIGetCampaignOfferDTO::is_campaign_price_Valid() const{
    return m_campaign_price_isValid;
}

OAIOfferCampaignStatusType OAIGetCampaignOfferDTO::getStatus() const {
    return status;
}
void OAIGetCampaignOfferDTO::setStatus(const OAIOfferCampaignStatusType &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIGetCampaignOfferDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetCampaignOfferDTO::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIOfferErrorDTO> OAIGetCampaignOfferDTO::getErrors() const {
    return errors;
}
void OAIGetCampaignOfferDTO::setErrors(const QList<OAIOfferErrorDTO> &errors) {
    this->errors = errors;
    this->m_errors_isSet = true;
}

bool OAIGetCampaignOfferDTO::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGetCampaignOfferDTO::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAIOfferErrorDTO> OAIGetCampaignOfferDTO::getWarnings() const {
    return warnings;
}
void OAIGetCampaignOfferDTO::setWarnings(const QList<OAIOfferErrorDTO> &warnings) {
    this->warnings = warnings;
    this->m_warnings_isSet = true;
}

bool OAIGetCampaignOfferDTO::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIGetCampaignOfferDTO::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIGetCampaignOfferDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (quantum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (basic_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (campaign_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCampaignOfferDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_offer_id_isValid && true;
}

} // namespace OpenAPI
