/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBriefOrderItemDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBriefOrderItemDTO::OAIBriefOrderItemDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBriefOrderItemDTO::OAIBriefOrderItemDTO() {
    this->initializeModel();
}

OAIBriefOrderItemDTO::~OAIBriefOrderItemDTO() {}

void OAIBriefOrderItemDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_offer_name_isSet = false;
    m_offer_name_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;
}

void OAIBriefOrderItemDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBriefOrderItemDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_offer_name_isValid = ::OpenAPI::fromJsonValue(offer_name, json[QString("offerName")]);
    m_offer_name_isSet = !json[QString("offerName")].isNull() && m_offer_name_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;
}

QString OAIBriefOrderItemDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBriefOrderItemDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (vat.isSet()) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(vat));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(count));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(price));
    }
    if (m_offer_name_isSet) {
        obj.insert(QString("offerName"), ::OpenAPI::toJsonValue(offer_name));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(offer_id));
    }
    if (instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(instances));
    }
    return obj;
}

qint64 OAIBriefOrderItemDTO::getId() const {
    return id;
}
void OAIBriefOrderItemDTO::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIBriefOrderItemDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBriefOrderItemDTO::is_id_Valid() const{
    return m_id_isValid;
}

OAIOrderVatType OAIBriefOrderItemDTO::getVat() const {
    return vat;
}
void OAIBriefOrderItemDTO::setVat(const OAIOrderVatType &vat) {
    this->vat = vat;
    this->m_vat_isSet = true;
}

bool OAIBriefOrderItemDTO::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIBriefOrderItemDTO::is_vat_Valid() const{
    return m_vat_isValid;
}

qint32 OAIBriefOrderItemDTO::getCount() const {
    return count;
}
void OAIBriefOrderItemDTO::setCount(const qint32 &count) {
    this->count = count;
    this->m_count_isSet = true;
}

bool OAIBriefOrderItemDTO::is_count_Set() const{
    return m_count_isSet;
}

bool OAIBriefOrderItemDTO::is_count_Valid() const{
    return m_count_isValid;
}

double OAIBriefOrderItemDTO::getPrice() const {
    return price;
}
void OAIBriefOrderItemDTO::setPrice(const double &price) {
    this->price = price;
    this->m_price_isSet = true;
}

bool OAIBriefOrderItemDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAIBriefOrderItemDTO::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIBriefOrderItemDTO::getOfferName() const {
    return offer_name;
}
void OAIBriefOrderItemDTO::setOfferName(const QString &offer_name) {
    this->offer_name = offer_name;
    this->m_offer_name_isSet = true;
}

bool OAIBriefOrderItemDTO::is_offer_name_Set() const{
    return m_offer_name_isSet;
}

bool OAIBriefOrderItemDTO::is_offer_name_Valid() const{
    return m_offer_name_isValid;
}

QString OAIBriefOrderItemDTO::getOfferId() const {
    return offer_id;
}
void OAIBriefOrderItemDTO::setOfferId(const QString &offer_id) {
    this->offer_id = offer_id;
    this->m_offer_id_isSet = true;
}

bool OAIBriefOrderItemDTO::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIBriefOrderItemDTO::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QList<OAIOrderItemInstanceDTO> OAIBriefOrderItemDTO::getInstances() const {
    return instances;
}
void OAIBriefOrderItemDTO::setInstances(const QList<OAIOrderItemInstanceDTO> &instances) {
    this->instances = instances;
    this->m_instances_isSet = true;
}

bool OAIBriefOrderItemDTO::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIBriefOrderItemDTO::is_instances_Valid() const{
    return m_instances_isValid;
}

bool OAIBriefOrderItemDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (vat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBriefOrderItemDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
