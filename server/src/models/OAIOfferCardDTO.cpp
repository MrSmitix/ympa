/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferCardDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferCardDTO::OAIOfferCardDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferCardDTO::OAIOfferCardDTO() {
    this->initializeModel();
}

OAIOfferCardDTO::~OAIOfferCardDTO() {}

void OAIOfferCardDTO::initializeModel() {

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_mapping_isSet = false;
    m_mapping_isValid = false;

    m_parameter_values_isSet = false;
    m_parameter_values_isValid = false;

    m_card_status_isSet = false;
    m_card_status_isValid = false;

    m_content_rating_isSet = false;
    m_content_rating_isValid = false;

    m_recommendations_isSet = false;
    m_recommendations_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIOfferCardDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferCardDTO::fromJsonObject(QJsonObject json) {

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_mapping_isValid = ::OpenAPI::fromJsonValue(mapping, json[QString("mapping")]);
    m_mapping_isSet = !json[QString("mapping")].isNull() && m_mapping_isValid;

    m_parameter_values_isValid = ::OpenAPI::fromJsonValue(parameter_values, json[QString("parameterValues")]);
    m_parameter_values_isSet = !json[QString("parameterValues")].isNull() && m_parameter_values_isValid;

    m_card_status_isValid = ::OpenAPI::fromJsonValue(card_status, json[QString("cardStatus")]);
    m_card_status_isSet = !json[QString("cardStatus")].isNull() && m_card_status_isValid;

    m_content_rating_isValid = ::OpenAPI::fromJsonValue(content_rating, json[QString("contentRating")]);
    m_content_rating_isSet = !json[QString("contentRating")].isNull() && m_content_rating_isValid;

    m_recommendations_isValid = ::OpenAPI::fromJsonValue(recommendations, json[QString("recommendations")]);
    m_recommendations_isSet = !json[QString("recommendations")].isNull() && m_recommendations_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIOfferCardDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferCardDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(offer_id));
    }
    if (mapping.isSet()) {
        obj.insert(QString("mapping"), ::OpenAPI::toJsonValue(mapping));
    }
    if (parameter_values.size() > 0) {
        obj.insert(QString("parameterValues"), ::OpenAPI::toJsonValue(parameter_values));
    }
    if (card_status.isSet()) {
        obj.insert(QString("cardStatus"), ::OpenAPI::toJsonValue(card_status));
    }
    if (m_content_rating_isSet) {
        obj.insert(QString("contentRating"), ::OpenAPI::toJsonValue(content_rating));
    }
    if (recommendations.size() > 0) {
        obj.insert(QString("recommendations"), ::OpenAPI::toJsonValue(recommendations));
    }
    if (errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(errors));
    }
    if (warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(warnings));
    }
    return obj;
}

QString OAIOfferCardDTO::getOfferId() const {
    return offer_id;
}
void OAIOfferCardDTO::setOfferId(const QString &offer_id) {
    this->offer_id = offer_id;
    this->m_offer_id_isSet = true;
}

bool OAIOfferCardDTO::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIOfferCardDTO::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

OAIGetMappingDTO OAIOfferCardDTO::getMapping() const {
    return mapping;
}
void OAIOfferCardDTO::setMapping(const OAIGetMappingDTO &mapping) {
    this->mapping = mapping;
    this->m_mapping_isSet = true;
}

bool OAIOfferCardDTO::is_mapping_Set() const{
    return m_mapping_isSet;
}

bool OAIOfferCardDTO::is_mapping_Valid() const{
    return m_mapping_isValid;
}

QList<OAIParameterValueDTO> OAIOfferCardDTO::getParameterValues() const {
    return parameter_values;
}
void OAIOfferCardDTO::setParameterValues(const QList<OAIParameterValueDTO> &parameter_values) {
    this->parameter_values = parameter_values;
    this->m_parameter_values_isSet = true;
}

bool OAIOfferCardDTO::is_parameter_values_Set() const{
    return m_parameter_values_isSet;
}

bool OAIOfferCardDTO::is_parameter_values_Valid() const{
    return m_parameter_values_isValid;
}

OAIOfferCardStatusType OAIOfferCardDTO::getCardStatus() const {
    return card_status;
}
void OAIOfferCardDTO::setCardStatus(const OAIOfferCardStatusType &card_status) {
    this->card_status = card_status;
    this->m_card_status_isSet = true;
}

bool OAIOfferCardDTO::is_card_status_Set() const{
    return m_card_status_isSet;
}

bool OAIOfferCardDTO::is_card_status_Valid() const{
    return m_card_status_isValid;
}

qint32 OAIOfferCardDTO::getContentRating() const {
    return content_rating;
}
void OAIOfferCardDTO::setContentRating(const qint32 &content_rating) {
    this->content_rating = content_rating;
    this->m_content_rating_isSet = true;
}

bool OAIOfferCardDTO::is_content_rating_Set() const{
    return m_content_rating_isSet;
}

bool OAIOfferCardDTO::is_content_rating_Valid() const{
    return m_content_rating_isValid;
}

QList<OAIOfferCardRecommendationDTO> OAIOfferCardDTO::getRecommendations() const {
    return recommendations;
}
void OAIOfferCardDTO::setRecommendations(const QList<OAIOfferCardRecommendationDTO> &recommendations) {
    this->recommendations = recommendations;
    this->m_recommendations_isSet = true;
}

bool OAIOfferCardDTO::is_recommendations_Set() const{
    return m_recommendations_isSet;
}

bool OAIOfferCardDTO::is_recommendations_Valid() const{
    return m_recommendations_isValid;
}

QList<OAIOfferErrorDTO> OAIOfferCardDTO::getErrors() const {
    return errors;
}
void OAIOfferCardDTO::setErrors(const QList<OAIOfferErrorDTO> &errors) {
    this->errors = errors;
    this->m_errors_isSet = true;
}

bool OAIOfferCardDTO::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIOfferCardDTO::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAIOfferErrorDTO> OAIOfferCardDTO::getWarnings() const {
    return warnings;
}
void OAIOfferCardDTO::setWarnings(const QList<OAIOfferErrorDTO> &warnings) {
    this->warnings = warnings;
    this->m_warnings_isSet = true;
}

bool OAIOfferCardDTO::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIOfferCardDTO::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIOfferCardDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (parameter_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (card_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (recommendations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferCardDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_offer_id_isValid && true;
}

} // namespace OpenAPI
