/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportInfoDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportInfoDTO::OAIReportInfoDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportInfoDTO::OAIReportInfoDTO() {
    this->initializeModel();
}

OAIReportInfoDTO::~OAIReportInfoDTO() {}

void OAIReportInfoDTO::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_status_isSet = false;
    m_sub_status_isValid = false;

    m_generation_requested_at_isSet = false;
    m_generation_requested_at_isValid = false;

    m_generation_finished_at_isSet = false;
    m_generation_finished_at_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_estimated_generation_time_isSet = false;
    m_estimated_generation_time_isValid = false;
}

void OAIReportInfoDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportInfoDTO::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sub_status_isValid = ::OpenAPI::fromJsonValue(sub_status, json[QString("subStatus")]);
    m_sub_status_isSet = !json[QString("subStatus")].isNull() && m_sub_status_isValid;

    m_generation_requested_at_isValid = ::OpenAPI::fromJsonValue(generation_requested_at, json[QString("generationRequestedAt")]);
    m_generation_requested_at_isSet = !json[QString("generationRequestedAt")].isNull() && m_generation_requested_at_isValid;

    m_generation_finished_at_isValid = ::OpenAPI::fromJsonValue(generation_finished_at, json[QString("generationFinishedAt")]);
    m_generation_finished_at_isSet = !json[QString("generationFinishedAt")].isNull() && m_generation_finished_at_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_estimated_generation_time_isValid = ::OpenAPI::fromJsonValue(estimated_generation_time, json[QString("estimatedGenerationTime")]);
    m_estimated_generation_time_isSet = !json[QString("estimatedGenerationTime")].isNull() && m_estimated_generation_time_isValid;
}

QString OAIReportInfoDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportInfoDTO::asJsonObject() const {
    QJsonObject obj;
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (sub_status.isSet()) {
        obj.insert(QString("subStatus"), ::OpenAPI::toJsonValue(sub_status));
    }
    if (m_generation_requested_at_isSet) {
        obj.insert(QString("generationRequestedAt"), ::OpenAPI::toJsonValue(generation_requested_at));
    }
    if (m_generation_finished_at_isSet) {
        obj.insert(QString("generationFinishedAt"), ::OpenAPI::toJsonValue(generation_finished_at));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(file));
    }
    if (m_estimated_generation_time_isSet) {
        obj.insert(QString("estimatedGenerationTime"), ::OpenAPI::toJsonValue(estimated_generation_time));
    }
    return obj;
}

OAIReportStatusType OAIReportInfoDTO::getStatus() const {
    return status;
}
void OAIReportInfoDTO::setStatus(const OAIReportStatusType &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIReportInfoDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReportInfoDTO::is_status_Valid() const{
    return m_status_isValid;
}

OAIReportSubStatusType OAIReportInfoDTO::getSubStatus() const {
    return sub_status;
}
void OAIReportInfoDTO::setSubStatus(const OAIReportSubStatusType &sub_status) {
    this->sub_status = sub_status;
    this->m_sub_status_isSet = true;
}

bool OAIReportInfoDTO::is_sub_status_Set() const{
    return m_sub_status_isSet;
}

bool OAIReportInfoDTO::is_sub_status_Valid() const{
    return m_sub_status_isValid;
}

QDateTime OAIReportInfoDTO::getGenerationRequestedAt() const {
    return generation_requested_at;
}
void OAIReportInfoDTO::setGenerationRequestedAt(const QDateTime &generation_requested_at) {
    this->generation_requested_at = generation_requested_at;
    this->m_generation_requested_at_isSet = true;
}

bool OAIReportInfoDTO::is_generation_requested_at_Set() const{
    return m_generation_requested_at_isSet;
}

bool OAIReportInfoDTO::is_generation_requested_at_Valid() const{
    return m_generation_requested_at_isValid;
}

QDateTime OAIReportInfoDTO::getGenerationFinishedAt() const {
    return generation_finished_at;
}
void OAIReportInfoDTO::setGenerationFinishedAt(const QDateTime &generation_finished_at) {
    this->generation_finished_at = generation_finished_at;
    this->m_generation_finished_at_isSet = true;
}

bool OAIReportInfoDTO::is_generation_finished_at_Set() const{
    return m_generation_finished_at_isSet;
}

bool OAIReportInfoDTO::is_generation_finished_at_Valid() const{
    return m_generation_finished_at_isValid;
}

QString OAIReportInfoDTO::getFile() const {
    return file;
}
void OAIReportInfoDTO::setFile(const QString &file) {
    this->file = file;
    this->m_file_isSet = true;
}

bool OAIReportInfoDTO::is_file_Set() const{
    return m_file_isSet;
}

bool OAIReportInfoDTO::is_file_Valid() const{
    return m_file_isValid;
}

qint64 OAIReportInfoDTO::getEstimatedGenerationTime() const {
    return estimated_generation_time;
}
void OAIReportInfoDTO::setEstimatedGenerationTime(const qint64 &estimated_generation_time) {
    this->estimated_generation_time = estimated_generation_time;
    this->m_estimated_generation_time_isSet = true;
}

bool OAIReportInfoDTO::is_estimated_generation_time_Set() const{
    return m_estimated_generation_time_isSet;
}

bool OAIReportInfoDTO::is_estimated_generation_time_Valid() const{
    return m_estimated_generation_time_isValid;
}

bool OAIReportInfoDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (sub_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_requested_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_generation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportInfoDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && m_generation_requested_at_isValid && true;
}

} // namespace OpenAPI
