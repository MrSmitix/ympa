/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderItemDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderItemDTO::OAIOrderItemDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderItemDTO::OAIOrderItemDTO() {
    this->initializeModel();
}

OAIOrderItemDTO::~OAIOrderItemDTO() {}

void OAIOrderItemDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_offer_name_isSet = false;
    m_offer_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_buyer_price_isSet = false;
    m_buyer_price_isValid = false;

    m_buyer_price_before_discount_isSet = false;
    m_buyer_price_before_discount_isValid = false;

    m_price_before_discount_isSet = false;
    m_price_before_discount_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;

    m_shop_sku_isSet = false;
    m_shop_sku_isValid = false;

    m_subsidy_isSet = false;
    m_subsidy_isValid = false;

    m_partner_warehouse_id_isSet = false;
    m_partner_warehouse_id_isValid = false;

    m_promos_isSet = false;
    m_promos_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_subsidies_isSet = false;
    m_subsidies_isValid = false;

    m_required_instance_types_isSet = false;
    m_required_instance_types_isValid = false;
}

void OAIOrderItemDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderItemDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_offer_name_isValid = ::OpenAPI::fromJsonValue(offer_name, json[QString("offerName")]);
    m_offer_name_isSet = !json[QString("offerName")].isNull() && m_offer_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_buyer_price_isValid = ::OpenAPI::fromJsonValue(buyer_price, json[QString("buyerPrice")]);
    m_buyer_price_isSet = !json[QString("buyerPrice")].isNull() && m_buyer_price_isValid;

    m_buyer_price_before_discount_isValid = ::OpenAPI::fromJsonValue(buyer_price_before_discount, json[QString("buyerPriceBeforeDiscount")]);
    m_buyer_price_before_discount_isSet = !json[QString("buyerPriceBeforeDiscount")].isNull() && m_buyer_price_before_discount_isValid;

    m_price_before_discount_isValid = ::OpenAPI::fromJsonValue(price_before_discount, json[QString("priceBeforeDiscount")]);
    m_price_before_discount_isSet = !json[QString("priceBeforeDiscount")].isNull() && m_price_before_discount_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;

    m_shop_sku_isValid = ::OpenAPI::fromJsonValue(shop_sku, json[QString("shopSku")]);
    m_shop_sku_isSet = !json[QString("shopSku")].isNull() && m_shop_sku_isValid;

    m_subsidy_isValid = ::OpenAPI::fromJsonValue(subsidy, json[QString("subsidy")]);
    m_subsidy_isSet = !json[QString("subsidy")].isNull() && m_subsidy_isValid;

    m_partner_warehouse_id_isValid = ::OpenAPI::fromJsonValue(partner_warehouse_id, json[QString("partnerWarehouseId")]);
    m_partner_warehouse_id_isSet = !json[QString("partnerWarehouseId")].isNull() && m_partner_warehouse_id_isValid;

    m_promos_isValid = ::OpenAPI::fromJsonValue(promos, json[QString("promos")]);
    m_promos_isSet = !json[QString("promos")].isNull() && m_promos_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_subsidies_isValid = ::OpenAPI::fromJsonValue(subsidies, json[QString("subsidies")]);
    m_subsidies_isSet = !json[QString("subsidies")].isNull() && m_subsidies_isValid;

    m_required_instance_types_isValid = ::OpenAPI::fromJsonValue(required_instance_types, json[QString("requiredInstanceTypes")]);
    m_required_instance_types_isSet = !json[QString("requiredInstanceTypes")].isNull() && m_required_instance_types_isValid;
}

QString OAIOrderItemDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderItemDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(offer_id));
    }
    if (m_offer_name_isSet) {
        obj.insert(QString("offerName"), ::OpenAPI::toJsonValue(offer_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(price));
    }
    if (m_buyer_price_isSet) {
        obj.insert(QString("buyerPrice"), ::OpenAPI::toJsonValue(buyer_price));
    }
    if (m_buyer_price_before_discount_isSet) {
        obj.insert(QString("buyerPriceBeforeDiscount"), ::OpenAPI::toJsonValue(buyer_price_before_discount));
    }
    if (m_price_before_discount_isSet) {
        obj.insert(QString("priceBeforeDiscount"), ::OpenAPI::toJsonValue(price_before_discount));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(count));
    }
    if (vat.isSet()) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(vat));
    }
    if (m_shop_sku_isSet) {
        obj.insert(QString("shopSku"), ::OpenAPI::toJsonValue(shop_sku));
    }
    if (m_subsidy_isSet) {
        obj.insert(QString("subsidy"), ::OpenAPI::toJsonValue(subsidy));
    }
    if (m_partner_warehouse_id_isSet) {
        obj.insert(QString("partnerWarehouseId"), ::OpenAPI::toJsonValue(partner_warehouse_id));
    }
    if (promos.size() > 0) {
        obj.insert(QString("promos"), ::OpenAPI::toJsonValue(promos));
    }
    if (instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(instances));
    }
    if (details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(details));
    }
    if (subsidies.size() > 0) {
        obj.insert(QString("subsidies"), ::OpenAPI::toJsonValue(subsidies));
    }
    if (required_instance_types.size() > 0) {
        obj.insert(QString("requiredInstanceTypes"), ::OpenAPI::toJsonValue(required_instance_types));
    }
    return obj;
}

qint64 OAIOrderItemDTO::getId() const {
    return id;
}
void OAIOrderItemDTO::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIOrderItemDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderItemDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrderItemDTO::getOfferId() const {
    return offer_id;
}
void OAIOrderItemDTO::setOfferId(const QString &offer_id) {
    this->offer_id = offer_id;
    this->m_offer_id_isSet = true;
}

bool OAIOrderItemDTO::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIOrderItemDTO::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAIOrderItemDTO::getOfferName() const {
    return offer_name;
}
void OAIOrderItemDTO::setOfferName(const QString &offer_name) {
    this->offer_name = offer_name;
    this->m_offer_name_isSet = true;
}

bool OAIOrderItemDTO::is_offer_name_Set() const{
    return m_offer_name_isSet;
}

bool OAIOrderItemDTO::is_offer_name_Valid() const{
    return m_offer_name_isValid;
}

double OAIOrderItemDTO::getPrice() const {
    return price;
}
void OAIOrderItemDTO::setPrice(const double &price) {
    this->price = price;
    this->m_price_isSet = true;
}

bool OAIOrderItemDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOrderItemDTO::is_price_Valid() const{
    return m_price_isValid;
}

double OAIOrderItemDTO::getBuyerPrice() const {
    return buyer_price;
}
void OAIOrderItemDTO::setBuyerPrice(const double &buyer_price) {
    this->buyer_price = buyer_price;
    this->m_buyer_price_isSet = true;
}

bool OAIOrderItemDTO::is_buyer_price_Set() const{
    return m_buyer_price_isSet;
}

bool OAIOrderItemDTO::is_buyer_price_Valid() const{
    return m_buyer_price_isValid;
}

double OAIOrderItemDTO::getBuyerPriceBeforeDiscount() const {
    return buyer_price_before_discount;
}
void OAIOrderItemDTO::setBuyerPriceBeforeDiscount(const double &buyer_price_before_discount) {
    this->buyer_price_before_discount = buyer_price_before_discount;
    this->m_buyer_price_before_discount_isSet = true;
}

bool OAIOrderItemDTO::is_buyer_price_before_discount_Set() const{
    return m_buyer_price_before_discount_isSet;
}

bool OAIOrderItemDTO::is_buyer_price_before_discount_Valid() const{
    return m_buyer_price_before_discount_isValid;
}

double OAIOrderItemDTO::getPriceBeforeDiscount() const {
    return price_before_discount;
}
void OAIOrderItemDTO::setPriceBeforeDiscount(const double &price_before_discount) {
    this->price_before_discount = price_before_discount;
    this->m_price_before_discount_isSet = true;
}

bool OAIOrderItemDTO::is_price_before_discount_Set() const{
    return m_price_before_discount_isSet;
}

bool OAIOrderItemDTO::is_price_before_discount_Valid() const{
    return m_price_before_discount_isValid;
}

qint32 OAIOrderItemDTO::getCount() const {
    return count;
}
void OAIOrderItemDTO::setCount(const qint32 &count) {
    this->count = count;
    this->m_count_isSet = true;
}

bool OAIOrderItemDTO::is_count_Set() const{
    return m_count_isSet;
}

bool OAIOrderItemDTO::is_count_Valid() const{
    return m_count_isValid;
}

OAIOrderVatType OAIOrderItemDTO::getVat() const {
    return vat;
}
void OAIOrderItemDTO::setVat(const OAIOrderVatType &vat) {
    this->vat = vat;
    this->m_vat_isSet = true;
}

bool OAIOrderItemDTO::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIOrderItemDTO::is_vat_Valid() const{
    return m_vat_isValid;
}

QString OAIOrderItemDTO::getShopSku() const {
    return shop_sku;
}
void OAIOrderItemDTO::setShopSku(const QString &shop_sku) {
    this->shop_sku = shop_sku;
    this->m_shop_sku_isSet = true;
}

bool OAIOrderItemDTO::is_shop_sku_Set() const{
    return m_shop_sku_isSet;
}

bool OAIOrderItemDTO::is_shop_sku_Valid() const{
    return m_shop_sku_isValid;
}

double OAIOrderItemDTO::getSubsidy() const {
    return subsidy;
}
void OAIOrderItemDTO::setSubsidy(const double &subsidy) {
    this->subsidy = subsidy;
    this->m_subsidy_isSet = true;
}

bool OAIOrderItemDTO::is_subsidy_Set() const{
    return m_subsidy_isSet;
}

bool OAIOrderItemDTO::is_subsidy_Valid() const{
    return m_subsidy_isValid;
}

QString OAIOrderItemDTO::getPartnerWarehouseId() const {
    return partner_warehouse_id;
}
void OAIOrderItemDTO::setPartnerWarehouseId(const QString &partner_warehouse_id) {
    this->partner_warehouse_id = partner_warehouse_id;
    this->m_partner_warehouse_id_isSet = true;
}

bool OAIOrderItemDTO::is_partner_warehouse_id_Set() const{
    return m_partner_warehouse_id_isSet;
}

bool OAIOrderItemDTO::is_partner_warehouse_id_Valid() const{
    return m_partner_warehouse_id_isValid;
}

QList<OAIOrderItemPromoDTO> OAIOrderItemDTO::getPromos() const {
    return promos;
}
void OAIOrderItemDTO::setPromos(const QList<OAIOrderItemPromoDTO> &promos) {
    this->promos = promos;
    this->m_promos_isSet = true;
}

bool OAIOrderItemDTO::is_promos_Set() const{
    return m_promos_isSet;
}

bool OAIOrderItemDTO::is_promos_Valid() const{
    return m_promos_isValid;
}

QList<OAIOrderItemInstanceDTO> OAIOrderItemDTO::getInstances() const {
    return instances;
}
void OAIOrderItemDTO::setInstances(const QList<OAIOrderItemInstanceDTO> &instances) {
    this->instances = instances;
    this->m_instances_isSet = true;
}

bool OAIOrderItemDTO::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIOrderItemDTO::is_instances_Valid() const{
    return m_instances_isValid;
}

QList<OAIOrderItemDetailDTO> OAIOrderItemDTO::getDetails() const {
    return details;
}
void OAIOrderItemDTO::setDetails(const QList<OAIOrderItemDetailDTO> &details) {
    this->details = details;
    this->m_details_isSet = true;
}

bool OAIOrderItemDTO::is_details_Set() const{
    return m_details_isSet;
}

bool OAIOrderItemDTO::is_details_Valid() const{
    return m_details_isValid;
}

QList<OAIOrderItemSubsidyDTO> OAIOrderItemDTO::getSubsidies() const {
    return subsidies;
}
void OAIOrderItemDTO::setSubsidies(const QList<OAIOrderItemSubsidyDTO> &subsidies) {
    this->subsidies = subsidies;
    this->m_subsidies_isSet = true;
}

bool OAIOrderItemDTO::is_subsidies_Set() const{
    return m_subsidies_isSet;
}

bool OAIOrderItemDTO::is_subsidies_Valid() const{
    return m_subsidies_isValid;
}

QList<OAIOrderItemInstanceType> OAIOrderItemDTO::getRequiredInstanceTypes() const {
    return required_instance_types;
}
void OAIOrderItemDTO::setRequiredInstanceTypes(const QList<OAIOrderItemInstanceType> &required_instance_types) {
    this->required_instance_types = required_instance_types;
    this->m_required_instance_types_isSet = true;
}

bool OAIOrderItemDTO::is_required_instance_types_Set() const{
    return m_required_instance_types_isSet;
}

bool OAIOrderItemDTO::is_required_instance_types_Valid() const{
    return m_required_instance_types_isValid;
}

bool OAIOrderItemDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_price_before_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_before_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (vat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subsidy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (promos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (subsidies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (required_instance_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderItemDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
