/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateStocksOnWarehousesReportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateStocksOnWarehousesReportRequest::OAIGenerateStocksOnWarehousesReportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateStocksOnWarehousesReportRequest::OAIGenerateStocksOnWarehousesReportRequest() {
    this->initializeModel();
}

OAIGenerateStocksOnWarehousesReportRequest::~OAIGenerateStocksOnWarehousesReportRequest() {}

void OAIGenerateStocksOnWarehousesReportRequest::initializeModel() {

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_warehouse_ids_isSet = false;
    m_warehouse_ids_isValid = false;

    m_report_date_isSet = false;
    m_report_date_isValid = false;

    m_category_ids_isSet = false;
    m_category_ids_isValid = false;

    m_has_stocks_isSet = false;
    m_has_stocks_isValid = false;
}

void OAIGenerateStocksOnWarehousesReportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateStocksOnWarehousesReportRequest::fromJsonObject(QJsonObject json) {

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_warehouse_ids_isValid = ::OpenAPI::fromJsonValue(warehouse_ids, json[QString("warehouseIds")]);
    m_warehouse_ids_isSet = !json[QString("warehouseIds")].isNull() && m_warehouse_ids_isValid;

    m_report_date_isValid = ::OpenAPI::fromJsonValue(report_date, json[QString("reportDate")]);
    m_report_date_isSet = !json[QString("reportDate")].isNull() && m_report_date_isValid;

    m_category_ids_isValid = ::OpenAPI::fromJsonValue(category_ids, json[QString("categoryIds")]);
    m_category_ids_isSet = !json[QString("categoryIds")].isNull() && m_category_ids_isValid;

    m_has_stocks_isValid = ::OpenAPI::fromJsonValue(has_stocks, json[QString("hasStocks")]);
    m_has_stocks_isSet = !json[QString("hasStocks")].isNull() && m_has_stocks_isValid;
}

QString OAIGenerateStocksOnWarehousesReportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateStocksOnWarehousesReportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(campaign_id));
    }
    if (warehouse_ids.size() > 0) {
        obj.insert(QString("warehouseIds"), ::OpenAPI::toJsonValue(warehouse_ids));
    }
    if (m_report_date_isSet) {
        obj.insert(QString("reportDate"), ::OpenAPI::toJsonValue(report_date));
    }
    if (category_ids.size() > 0) {
        obj.insert(QString("categoryIds"), ::OpenAPI::toJsonValue(category_ids));
    }
    if (m_has_stocks_isSet) {
        obj.insert(QString("hasStocks"), ::OpenAPI::toJsonValue(has_stocks));
    }
    return obj;
}

qint64 OAIGenerateStocksOnWarehousesReportRequest::getCampaignId() const {
    return campaign_id;
}
void OAIGenerateStocksOnWarehousesReportRequest::setCampaignId(const qint64 &campaign_id) {
    this->campaign_id = campaign_id;
    this->m_campaign_id_isSet = true;
}

bool OAIGenerateStocksOnWarehousesReportRequest::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIGenerateStocksOnWarehousesReportRequest::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QList<qint64> OAIGenerateStocksOnWarehousesReportRequest::getWarehouseIds() const {
    return warehouse_ids;
}
void OAIGenerateStocksOnWarehousesReportRequest::setWarehouseIds(const QList<qint64> &warehouse_ids) {
    this->warehouse_ids = warehouse_ids;
    this->m_warehouse_ids_isSet = true;
}

bool OAIGenerateStocksOnWarehousesReportRequest::is_warehouse_ids_Set() const{
    return m_warehouse_ids_isSet;
}

bool OAIGenerateStocksOnWarehousesReportRequest::is_warehouse_ids_Valid() const{
    return m_warehouse_ids_isValid;
}

QDate OAIGenerateStocksOnWarehousesReportRequest::getReportDate() const {
    return report_date;
}
void OAIGenerateStocksOnWarehousesReportRequest::setReportDate(const QDate &report_date) {
    this->report_date = report_date;
    this->m_report_date_isSet = true;
}

bool OAIGenerateStocksOnWarehousesReportRequest::is_report_date_Set() const{
    return m_report_date_isSet;
}

bool OAIGenerateStocksOnWarehousesReportRequest::is_report_date_Valid() const{
    return m_report_date_isValid;
}

QList<qint64> OAIGenerateStocksOnWarehousesReportRequest::getCategoryIds() const {
    return category_ids;
}
void OAIGenerateStocksOnWarehousesReportRequest::setCategoryIds(const QList<qint64> &category_ids) {
    this->category_ids = category_ids;
    this->m_category_ids_isSet = true;
}

bool OAIGenerateStocksOnWarehousesReportRequest::is_category_ids_Set() const{
    return m_category_ids_isSet;
}

bool OAIGenerateStocksOnWarehousesReportRequest::is_category_ids_Valid() const{
    return m_category_ids_isValid;
}

bool OAIGenerateStocksOnWarehousesReportRequest::isHasStocks() const {
    return has_stocks;
}
void OAIGenerateStocksOnWarehousesReportRequest::setHasStocks(const bool &has_stocks) {
    this->has_stocks = has_stocks;
    this->m_has_stocks_isSet = true;
}

bool OAIGenerateStocksOnWarehousesReportRequest::is_has_stocks_Set() const{
    return m_has_stocks_isSet;
}

bool OAIGenerateStocksOnWarehousesReportRequest::is_has_stocks_Valid() const{
    return m_has_stocks_isValid;
}

bool OAIGenerateStocksOnWarehousesReportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (warehouse_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_stocks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateStocksOnWarehousesReportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_campaign_id_isValid && true;
}

} // namespace OpenAPI
