/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderSubstatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderSubstatusType::OAIOrderSubstatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderSubstatusType::OAIOrderSubstatusType() {
    this->initializeModel();
}

OAIOrderSubstatusType::~OAIOrderSubstatusType() {}

void OAIOrderSubstatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrderSubstatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrderSubstatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("RESERVATION_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::RESERVATION_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_NOT_PAID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_NOT_PAID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_UNREACHABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_UNREACHABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_CHANGED_MIND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_CHANGED_MIND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_REFUSED_DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_REFUSED_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_REFUSED_PRODUCT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_REFUSED_PRODUCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHOP_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::SHOP_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_REFUSED_QUALITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_REFUSED_QUALITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPLACING_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::REPLACING_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROCESSING_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::PROCESSING_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::PENDING_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHOP_PENDING_CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::SHOP_PENDING_CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::PENDING_CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_FRAUD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_FRAUD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESERVATION_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::RESERVATION_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_PLACED_OTHER_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_PLACED_OTHER_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_BOUGHT_CHEAPER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_BOUGHT_CHEAPER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MISSING_ITEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::MISSING_ITEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BROKEN_ITEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::BROKEN_ITEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WRONG_ITEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::WRONG_ITEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::PICKUP_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_PROBLEMS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_PROBLEMS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LATE_CONTACT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::LATE_CONTACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_SERVICE_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_SERVICE_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAREHOUSE_FAILED_TO_SHIP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::WAREHOUSE_FAILED_TO_SHIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_SERIVCE_UNDELIVERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_SERIVCE_UNDELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_SERVICE_UNDELIVERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_SERVICE_UNDELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PREORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::PREORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWAIT_CONFIRMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::AWAIT_CONFIRMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PACKAGING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::PACKAGING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_TO_SHIP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::READY_TO_SHIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHIPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::SHIPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ASYNC_PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::ASYNC_PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_REFUSED_TO_PROVIDE_PERSONAL_DATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_REFUSED_TO_PROVIDE_PERSONAL_DATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_USER_INPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::WAITING_USER_INPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_BANK_DECISION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::WAITING_BANK_DECISION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BANK_REJECT_CREDIT_OFFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::BANK_REJECT_CREDIT_OFFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOMER_REJECT_CREDIT_OFFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::CUSTOMER_REJECT_CREDIT_OFFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREDIT_OFFER_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::CREDIT_OFFER_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWAIT_DELIVERY_DATES_CONFIRMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::AWAIT_DELIVERY_DATES_CONFIRMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVICE_FAULT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::SERVICE_FAULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_SERVICE_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_SERVICE_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_FOR_STOCKS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::WAITING_FOR_STOCKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AS_PART_OF_MULTI_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::AS_PART_OF_MULTI_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_LAST_MILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::READY_FOR_LAST_MILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAST_MILE_STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::LAST_MILE_STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ANTIFRAUD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::ANTIFRAUD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_USER_NOT_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_USER_NOT_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_SERVICE_DELIVERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_SERVICE_DELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERED_USER_NOT_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERED_USER_NOT_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_WANTED_ANOTHER_PAYMENT_METHOD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_WANTED_ANOTHER_PAYMENT_METHOD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_RECEIVED_TECHNICAL_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_RECEIVED_TECHNICAL_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_FORGOT_TO_USE_BONUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_FORGOT_TO_USE_BONUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RECEIVED_ON_DISTRIBUTION_CENTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::RECEIVED_ON_DISTRIBUTION_CENTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_SERVICE_NOT_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_SERVICE_NOT_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_SERVICE_LOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_SERVICE_LOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHIPPED_TO_WRONG_DELIVERY_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::SHIPPED_TO_WRONG_DELIVERY_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERED_USER_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERED_USER_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_TINKOFF_DECISION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::WAITING_TINKOFF_DECISION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COURIER_SEARCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::COURIER_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COURIER_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::COURIER_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COURIER_IN_TRANSIT_TO_SENDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::COURIER_IN_TRANSIT_TO_SENDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COURIER_ARRIVED_TO_SENDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::COURIER_ARRIVED_TO_SENDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COURIER_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::COURIER_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COURIER_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::COURIER_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COURIER_NOT_DELIVER_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::COURIER_NOT_DELIVER_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COURIER_RETURNS_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::COURIER_RETURNS_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COURIER_RETURNED_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::COURIER_RETURNED_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_USER_DELIVERY_INPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::WAITING_USER_DELIVERY_INPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP_SERVICE_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::PICKUP_SERVICE_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP_USER_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::PICKUP_USER_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED_COURIER_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::CANCELLED_COURIER_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COURIER_NOT_COME_FOR_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::COURIER_NOT_COME_FOR_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_NOT_MANAGED_REGION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_NOT_MANAGED_REGION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCOMPLETE_CONTACT_INFORMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::INCOMPLETE_CONTACT_INFORMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCOMPLETE_MULTI_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::INCOMPLETE_MULTI_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INAPPROPRIATE_WEIGHT_SIZE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::INAPPROPRIATE_WEIGHT_SIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TECHNICAL_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::TECHNICAL_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SORTING_CENTER_LOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::SORTING_CENTER_LOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COURIER_SEARCH_NOT_STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::COURIER_SEARCH_NOT_STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::LOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWAIT_PAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::AWAIT_PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWAIT_LAVKA_RESERVATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::AWAIT_LAVKA_RESERVATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_WANTS_TO_CHANGE_ADDRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_WANTS_TO_CHANGE_ADDRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FULL_NOT_RANSOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::FULL_NOT_RANSOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PRESCRIPTION_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::PRESCRIPTION_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DROPOFF_LOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DROPOFF_LOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DROPOFF_CLOSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DROPOFF_CLOSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_TO_STORE_STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_TO_STORE_STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_WANTS_TO_CHANGE_DELIVERY_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_WANTS_TO_CHANGE_DELIVERY_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WRONG_ITEM_DELIVERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::WRONG_ITEM_DELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DAMAGED_BOX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DAMAGED_BOX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWAIT_DELIVERY_DATES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::AWAIT_DELIVERY_DATES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAST_MILE_COURIER_SEARCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::LAST_MILE_COURIER_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PICKUP_POINT_CLOSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::PICKUP_POINT_CLOSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEGAL_INFO_CHANGED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::LEGAL_INFO_CHANGED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_HAS_NO_TIME_TO_PICKUP_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::USER_HAS_NO_TIME_TO_PICKUP_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_CUSTOMS_ARRIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_CUSTOMS_ARRIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_CUSTOMS_CLEARED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::DELIVERY_CUSTOMS_CLEARED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FIRST_MILE_DELIVERY_SERVICE_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::FIRST_MILE_DELIVERY_SERVICE_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWAIT_AUTO_DELIVERY_DATES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::AWAIT_AUTO_DELIVERY_DATES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWAIT_USER_PERSONAL_DATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::AWAIT_USER_PERSONAL_DATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_PERSONAL_DATA_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::NO_PERSONAL_DATA_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOMS_PROBLEMS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::CUSTOMS_PROBLEMS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWAIT_CASHIER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::AWAIT_CASHIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_POSTPAID_BUDGET_RESERVATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::WAITING_POSTPAID_BUDGET_RESERVATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWAIT_SERVICEABLE_CONFIRMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::AWAIT_SERVICEABLE_CONFIRMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POSTPAID_BUDGET_RESERVATION_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::POSTPAID_BUDGET_RESERVATION_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWAIT_CUSTOM_PRICE_CONFIRMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::AWAIT_CUSTOM_PRICE_CONFIRMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_PICKUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::READY_FOR_PICKUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderSubstatusType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrderSubstatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrderSubstatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrderSubstatusType::RESERVATION_EXPIRED:
            val = "RESERVATION_EXPIRED";
            break;
        case eOAIOrderSubstatusType::USER_NOT_PAID:
            val = "USER_NOT_PAID";
            break;
        case eOAIOrderSubstatusType::USER_UNREACHABLE:
            val = "USER_UNREACHABLE";
            break;
        case eOAIOrderSubstatusType::USER_CHANGED_MIND:
            val = "USER_CHANGED_MIND";
            break;
        case eOAIOrderSubstatusType::USER_REFUSED_DELIVERY:
            val = "USER_REFUSED_DELIVERY";
            break;
        case eOAIOrderSubstatusType::USER_REFUSED_PRODUCT:
            val = "USER_REFUSED_PRODUCT";
            break;
        case eOAIOrderSubstatusType::SHOP_FAILED:
            val = "SHOP_FAILED";
            break;
        case eOAIOrderSubstatusType::USER_REFUSED_QUALITY:
            val = "USER_REFUSED_QUALITY";
            break;
        case eOAIOrderSubstatusType::REPLACING_ORDER:
            val = "REPLACING_ORDER";
            break;
        case eOAIOrderSubstatusType::PROCESSING_EXPIRED:
            val = "PROCESSING_EXPIRED";
            break;
        case eOAIOrderSubstatusType::PENDING_EXPIRED:
            val = "PENDING_EXPIRED";
            break;
        case eOAIOrderSubstatusType::SHOP_PENDING_CANCELLED:
            val = "SHOP_PENDING_CANCELLED";
            break;
        case eOAIOrderSubstatusType::PENDING_CANCELLED:
            val = "PENDING_CANCELLED";
            break;
        case eOAIOrderSubstatusType::USER_FRAUD:
            val = "USER_FRAUD";
            break;
        case eOAIOrderSubstatusType::RESERVATION_FAILED:
            val = "RESERVATION_FAILED";
            break;
        case eOAIOrderSubstatusType::USER_PLACED_OTHER_ORDER:
            val = "USER_PLACED_OTHER_ORDER";
            break;
        case eOAIOrderSubstatusType::USER_BOUGHT_CHEAPER:
            val = "USER_BOUGHT_CHEAPER";
            break;
        case eOAIOrderSubstatusType::MISSING_ITEM:
            val = "MISSING_ITEM";
            break;
        case eOAIOrderSubstatusType::BROKEN_ITEM:
            val = "BROKEN_ITEM";
            break;
        case eOAIOrderSubstatusType::WRONG_ITEM:
            val = "WRONG_ITEM";
            break;
        case eOAIOrderSubstatusType::PICKUP_EXPIRED:
            val = "PICKUP_EXPIRED";
            break;
        case eOAIOrderSubstatusType::DELIVERY_PROBLEMS:
            val = "DELIVERY_PROBLEMS";
            break;
        case eOAIOrderSubstatusType::LATE_CONTACT:
            val = "LATE_CONTACT";
            break;
        case eOAIOrderSubstatusType::CUSTOM:
            val = "CUSTOM";
            break;
        case eOAIOrderSubstatusType::DELIVERY_SERVICE_FAILED:
            val = "DELIVERY_SERVICE_FAILED";
            break;
        case eOAIOrderSubstatusType::WAREHOUSE_FAILED_TO_SHIP:
            val = "WAREHOUSE_FAILED_TO_SHIP";
            break;
        case eOAIOrderSubstatusType::DELIVERY_SERIVCE_UNDELIVERED:
            val = "DELIVERY_SERIVCE_UNDELIVERED";
            break;
        case eOAIOrderSubstatusType::DELIVERY_SERVICE_UNDELIVERED:
            val = "DELIVERY_SERVICE_UNDELIVERED";
            break;
        case eOAIOrderSubstatusType::PREORDER:
            val = "PREORDER";
            break;
        case eOAIOrderSubstatusType::AWAIT_CONFIRMATION:
            val = "AWAIT_CONFIRMATION";
            break;
        case eOAIOrderSubstatusType::STARTED:
            val = "STARTED";
            break;
        case eOAIOrderSubstatusType::PACKAGING:
            val = "PACKAGING";
            break;
        case eOAIOrderSubstatusType::READY_TO_SHIP:
            val = "READY_TO_SHIP";
            break;
        case eOAIOrderSubstatusType::SHIPPED:
            val = "SHIPPED";
            break;
        case eOAIOrderSubstatusType::ASYNC_PROCESSING:
            val = "ASYNC_PROCESSING";
            break;
        case eOAIOrderSubstatusType::USER_REFUSED_TO_PROVIDE_PERSONAL_DATA:
            val = "USER_REFUSED_TO_PROVIDE_PERSONAL_DATA";
            break;
        case eOAIOrderSubstatusType::WAITING_USER_INPUT:
            val = "WAITING_USER_INPUT";
            break;
        case eOAIOrderSubstatusType::WAITING_BANK_DECISION:
            val = "WAITING_BANK_DECISION";
            break;
        case eOAIOrderSubstatusType::BANK_REJECT_CREDIT_OFFER:
            val = "BANK_REJECT_CREDIT_OFFER";
            break;
        case eOAIOrderSubstatusType::CUSTOMER_REJECT_CREDIT_OFFER:
            val = "CUSTOMER_REJECT_CREDIT_OFFER";
            break;
        case eOAIOrderSubstatusType::CREDIT_OFFER_FAILED:
            val = "CREDIT_OFFER_FAILED";
            break;
        case eOAIOrderSubstatusType::AWAIT_DELIVERY_DATES_CONFIRMATION:
            val = "AWAIT_DELIVERY_DATES_CONFIRMATION";
            break;
        case eOAIOrderSubstatusType::SERVICE_FAULT:
            val = "SERVICE_FAULT";
            break;
        case eOAIOrderSubstatusType::DELIVERY_SERVICE_RECEIVED:
            val = "DELIVERY_SERVICE_RECEIVED";
            break;
        case eOAIOrderSubstatusType::USER_RECEIVED:
            val = "USER_RECEIVED";
            break;
        case eOAIOrderSubstatusType::WAITING_FOR_STOCKS:
            val = "WAITING_FOR_STOCKS";
            break;
        case eOAIOrderSubstatusType::AS_PART_OF_MULTI_ORDER:
            val = "AS_PART_OF_MULTI_ORDER";
            break;
        case eOAIOrderSubstatusType::READY_FOR_LAST_MILE:
            val = "READY_FOR_LAST_MILE";
            break;
        case eOAIOrderSubstatusType::LAST_MILE_STARTED:
            val = "LAST_MILE_STARTED";
            break;
        case eOAIOrderSubstatusType::ANTIFRAUD:
            val = "ANTIFRAUD";
            break;
        case eOAIOrderSubstatusType::DELIVERY_USER_NOT_RECEIVED:
            val = "DELIVERY_USER_NOT_RECEIVED";
            break;
        case eOAIOrderSubstatusType::DELIVERY_SERVICE_DELIVERED:
            val = "DELIVERY_SERVICE_DELIVERED";
            break;
        case eOAIOrderSubstatusType::DELIVERED_USER_NOT_RECEIVED:
            val = "DELIVERED_USER_NOT_RECEIVED";
            break;
        case eOAIOrderSubstatusType::USER_WANTED_ANOTHER_PAYMENT_METHOD:
            val = "USER_WANTED_ANOTHER_PAYMENT_METHOD";
            break;
        case eOAIOrderSubstatusType::USER_RECEIVED_TECHNICAL_ERROR:
            val = "USER_RECEIVED_TECHNICAL_ERROR";
            break;
        case eOAIOrderSubstatusType::USER_FORGOT_TO_USE_BONUS:
            val = "USER_FORGOT_TO_USE_BONUS";
            break;
        case eOAIOrderSubstatusType::RECEIVED_ON_DISTRIBUTION_CENTER:
            val = "RECEIVED_ON_DISTRIBUTION_CENTER";
            break;
        case eOAIOrderSubstatusType::DELIVERY_SERVICE_NOT_RECEIVED:
            val = "DELIVERY_SERVICE_NOT_RECEIVED";
            break;
        case eOAIOrderSubstatusType::DELIVERY_SERVICE_LOST:
            val = "DELIVERY_SERVICE_LOST";
            break;
        case eOAIOrderSubstatusType::SHIPPED_TO_WRONG_DELIVERY_SERVICE:
            val = "SHIPPED_TO_WRONG_DELIVERY_SERVICE";
            break;
        case eOAIOrderSubstatusType::DELIVERED_USER_RECEIVED:
            val = "DELIVERED_USER_RECEIVED";
            break;
        case eOAIOrderSubstatusType::WAITING_TINKOFF_DECISION:
            val = "WAITING_TINKOFF_DECISION";
            break;
        case eOAIOrderSubstatusType::COURIER_SEARCH:
            val = "COURIER_SEARCH";
            break;
        case eOAIOrderSubstatusType::COURIER_FOUND:
            val = "COURIER_FOUND";
            break;
        case eOAIOrderSubstatusType::COURIER_IN_TRANSIT_TO_SENDER:
            val = "COURIER_IN_TRANSIT_TO_SENDER";
            break;
        case eOAIOrderSubstatusType::COURIER_ARRIVED_TO_SENDER:
            val = "COURIER_ARRIVED_TO_SENDER";
            break;
        case eOAIOrderSubstatusType::COURIER_RECEIVED:
            val = "COURIER_RECEIVED";
            break;
        case eOAIOrderSubstatusType::COURIER_NOT_FOUND:
            val = "COURIER_NOT_FOUND";
            break;
        case eOAIOrderSubstatusType::COURIER_NOT_DELIVER_ORDER:
            val = "COURIER_NOT_DELIVER_ORDER";
            break;
        case eOAIOrderSubstatusType::COURIER_RETURNS_ORDER:
            val = "COURIER_RETURNS_ORDER";
            break;
        case eOAIOrderSubstatusType::COURIER_RETURNED_ORDER:
            val = "COURIER_RETURNED_ORDER";
            break;
        case eOAIOrderSubstatusType::WAITING_USER_DELIVERY_INPUT:
            val = "WAITING_USER_DELIVERY_INPUT";
            break;
        case eOAIOrderSubstatusType::PICKUP_SERVICE_RECEIVED:
            val = "PICKUP_SERVICE_RECEIVED";
            break;
        case eOAIOrderSubstatusType::PICKUP_USER_RECEIVED:
            val = "PICKUP_USER_RECEIVED";
            break;
        case eOAIOrderSubstatusType::CANCELLED_COURIER_NOT_FOUND:
            val = "CANCELLED_COURIER_NOT_FOUND";
            break;
        case eOAIOrderSubstatusType::COURIER_NOT_COME_FOR_ORDER:
            val = "COURIER_NOT_COME_FOR_ORDER";
            break;
        case eOAIOrderSubstatusType::DELIVERY_NOT_MANAGED_REGION:
            val = "DELIVERY_NOT_MANAGED_REGION";
            break;
        case eOAIOrderSubstatusType::INCOMPLETE_CONTACT_INFORMATION:
            val = "INCOMPLETE_CONTACT_INFORMATION";
            break;
        case eOAIOrderSubstatusType::INCOMPLETE_MULTI_ORDER:
            val = "INCOMPLETE_MULTI_ORDER";
            break;
        case eOAIOrderSubstatusType::INAPPROPRIATE_WEIGHT_SIZE:
            val = "INAPPROPRIATE_WEIGHT_SIZE";
            break;
        case eOAIOrderSubstatusType::TECHNICAL_ERROR:
            val = "TECHNICAL_ERROR";
            break;
        case eOAIOrderSubstatusType::SORTING_CENTER_LOST:
            val = "SORTING_CENTER_LOST";
            break;
        case eOAIOrderSubstatusType::COURIER_SEARCH_NOT_STARTED:
            val = "COURIER_SEARCH_NOT_STARTED";
            break;
        case eOAIOrderSubstatusType::LOST:
            val = "LOST";
            break;
        case eOAIOrderSubstatusType::AWAIT_PAYMENT:
            val = "AWAIT_PAYMENT";
            break;
        case eOAIOrderSubstatusType::AWAIT_LAVKA_RESERVATION:
            val = "AWAIT_LAVKA_RESERVATION";
            break;
        case eOAIOrderSubstatusType::USER_WANTS_TO_CHANGE_ADDRESS:
            val = "USER_WANTS_TO_CHANGE_ADDRESS";
            break;
        case eOAIOrderSubstatusType::FULL_NOT_RANSOM:
            val = "FULL_NOT_RANSOM";
            break;
        case eOAIOrderSubstatusType::PRESCRIPTION_MISMATCH:
            val = "PRESCRIPTION_MISMATCH";
            break;
        case eOAIOrderSubstatusType::DROPOFF_LOST:
            val = "DROPOFF_LOST";
            break;
        case eOAIOrderSubstatusType::DROPOFF_CLOSED:
            val = "DROPOFF_CLOSED";
            break;
        case eOAIOrderSubstatusType::DELIVERY_TO_STORE_STARTED:
            val = "DELIVERY_TO_STORE_STARTED";
            break;
        case eOAIOrderSubstatusType::USER_WANTS_TO_CHANGE_DELIVERY_DATE:
            val = "USER_WANTS_TO_CHANGE_DELIVERY_DATE";
            break;
        case eOAIOrderSubstatusType::WRONG_ITEM_DELIVERED:
            val = "WRONG_ITEM_DELIVERED";
            break;
        case eOAIOrderSubstatusType::DAMAGED_BOX:
            val = "DAMAGED_BOX";
            break;
        case eOAIOrderSubstatusType::AWAIT_DELIVERY_DATES:
            val = "AWAIT_DELIVERY_DATES";
            break;
        case eOAIOrderSubstatusType::LAST_MILE_COURIER_SEARCH:
            val = "LAST_MILE_COURIER_SEARCH";
            break;
        case eOAIOrderSubstatusType::PICKUP_POINT_CLOSED:
            val = "PICKUP_POINT_CLOSED";
            break;
        case eOAIOrderSubstatusType::LEGAL_INFO_CHANGED:
            val = "LEGAL_INFO_CHANGED";
            break;
        case eOAIOrderSubstatusType::USER_HAS_NO_TIME_TO_PICKUP_ORDER:
            val = "USER_HAS_NO_TIME_TO_PICKUP_ORDER";
            break;
        case eOAIOrderSubstatusType::DELIVERY_CUSTOMS_ARRIVED:
            val = "DELIVERY_CUSTOMS_ARRIVED";
            break;
        case eOAIOrderSubstatusType::DELIVERY_CUSTOMS_CLEARED:
            val = "DELIVERY_CUSTOMS_CLEARED";
            break;
        case eOAIOrderSubstatusType::FIRST_MILE_DELIVERY_SERVICE_RECEIVED:
            val = "FIRST_MILE_DELIVERY_SERVICE_RECEIVED";
            break;
        case eOAIOrderSubstatusType::AWAIT_AUTO_DELIVERY_DATES:
            val = "AWAIT_AUTO_DELIVERY_DATES";
            break;
        case eOAIOrderSubstatusType::AWAIT_USER_PERSONAL_DATA:
            val = "AWAIT_USER_PERSONAL_DATA";
            break;
        case eOAIOrderSubstatusType::NO_PERSONAL_DATA_EXPIRED:
            val = "NO_PERSONAL_DATA_EXPIRED";
            break;
        case eOAIOrderSubstatusType::CUSTOMS_PROBLEMS:
            val = "CUSTOMS_PROBLEMS";
            break;
        case eOAIOrderSubstatusType::AWAIT_CASHIER:
            val = "AWAIT_CASHIER";
            break;
        case eOAIOrderSubstatusType::WAITING_POSTPAID_BUDGET_RESERVATION:
            val = "WAITING_POSTPAID_BUDGET_RESERVATION";
            break;
        case eOAIOrderSubstatusType::AWAIT_SERVICEABLE_CONFIRMATION:
            val = "AWAIT_SERVICEABLE_CONFIRMATION";
            break;
        case eOAIOrderSubstatusType::POSTPAID_BUDGET_RESERVATION_FAILED:
            val = "POSTPAID_BUDGET_RESERVATION_FAILED";
            break;
        case eOAIOrderSubstatusType::AWAIT_CUSTOM_PRICE_CONFIRMATION:
            val = "AWAIT_CUSTOM_PRICE_CONFIRMATION";
            break;
        case eOAIOrderSubstatusType::READY_FOR_PICKUP:
            val = "READY_FOR_PICKUP";
            break;
        case eOAIOrderSubstatusType::UNKNOWN:
            val = "UNKNOWN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrderSubstatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrderSubstatusType::eOAIOrderSubstatusType OAIOrderSubstatusType::getValue() const {
    return m_value;
}

void OAIOrderSubstatusType::setValue(const OAIOrderSubstatusType::eOAIOrderSubstatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrderSubstatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrderSubstatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
