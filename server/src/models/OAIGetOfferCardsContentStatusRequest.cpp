/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOfferCardsContentStatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOfferCardsContentStatusRequest::OAIGetOfferCardsContentStatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOfferCardsContentStatusRequest::OAIGetOfferCardsContentStatusRequest() {
    this->initializeModel();
}

OAIGetOfferCardsContentStatusRequest::~OAIGetOfferCardsContentStatusRequest() {}

void OAIGetOfferCardsContentStatusRequest::initializeModel() {

    m_offer_ids_isSet = false;
    m_offer_ids_isValid = false;

    m_card_statuses_isSet = false;
    m_card_statuses_isValid = false;

    m_category_ids_isSet = false;
    m_category_ids_isValid = false;
}

void OAIGetOfferCardsContentStatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOfferCardsContentStatusRequest::fromJsonObject(QJsonObject json) {

    m_offer_ids_isValid = ::OpenAPI::fromJsonValue(offer_ids, json[QString("offerIds")]);
    m_offer_ids_isSet = !json[QString("offerIds")].isNull() && m_offer_ids_isValid;

    m_card_statuses_isValid = ::OpenAPI::fromJsonValue(card_statuses, json[QString("cardStatuses")]);
    m_card_statuses_isSet = !json[QString("cardStatuses")].isNull() && m_card_statuses_isValid;

    m_category_ids_isValid = ::OpenAPI::fromJsonValue(category_ids, json[QString("categoryIds")]);
    m_category_ids_isSet = !json[QString("categoryIds")].isNull() && m_category_ids_isValid;
}

QString OAIGetOfferCardsContentStatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOfferCardsContentStatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (offer_ids.size() > 0) {
        obj.insert(QString("offerIds"), ::OpenAPI::toJsonValue(offer_ids));
    }
    if (card_statuses.size() > 0) {
        obj.insert(QString("cardStatuses"), ::OpenAPI::toJsonValue(card_statuses));
    }
    if (category_ids.size() > 0) {
        obj.insert(QString("categoryIds"), ::OpenAPI::toJsonValue(category_ids));
    }
    return obj;
}

QSet<QString> OAIGetOfferCardsContentStatusRequest::getOfferIds() const {
    return offer_ids;
}
void OAIGetOfferCardsContentStatusRequest::setOfferIds(const QSet<QString> &offer_ids) {
    this->offer_ids = offer_ids;
    this->m_offer_ids_isSet = true;
}

bool OAIGetOfferCardsContentStatusRequest::is_offer_ids_Set() const{
    return m_offer_ids_isSet;
}

bool OAIGetOfferCardsContentStatusRequest::is_offer_ids_Valid() const{
    return m_offer_ids_isValid;
}

QSet<OAIOfferCardStatusType> OAIGetOfferCardsContentStatusRequest::getCardStatuses() const {
    return card_statuses;
}
void OAIGetOfferCardsContentStatusRequest::setCardStatuses(const QSet<OAIOfferCardStatusType> &card_statuses) {
    this->card_statuses = card_statuses;
    this->m_card_statuses_isSet = true;
}

bool OAIGetOfferCardsContentStatusRequest::is_card_statuses_Set() const{
    return m_card_statuses_isSet;
}

bool OAIGetOfferCardsContentStatusRequest::is_card_statuses_Valid() const{
    return m_card_statuses_isValid;
}

QSet<qint32> OAIGetOfferCardsContentStatusRequest::getCategoryIds() const {
    return category_ids;
}
void OAIGetOfferCardsContentStatusRequest::setCategoryIds(const QSet<qint32> &category_ids) {
    this->category_ids = category_ids;
    this->m_category_ids_isSet = true;
}

bool OAIGetOfferCardsContentStatusRequest::is_category_ids_Set() const{
    return m_category_ids_isSet;
}

bool OAIGetOfferCardsContentStatusRequest::is_category_ids_Valid() const{
    return m_category_ids_isValid;
}

bool OAIGetOfferCardsContentStatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (offer_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (card_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOfferCardsContentStatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
