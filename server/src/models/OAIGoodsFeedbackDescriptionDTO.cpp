/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoodsFeedbackDescriptionDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoodsFeedbackDescriptionDTO::OAIGoodsFeedbackDescriptionDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoodsFeedbackDescriptionDTO::OAIGoodsFeedbackDescriptionDTO() {
    this->initializeModel();
}

OAIGoodsFeedbackDescriptionDTO::~OAIGoodsFeedbackDescriptionDTO() {}

void OAIGoodsFeedbackDescriptionDTO::initializeModel() {

    m_advantages_isSet = false;
    m_advantages_isValid = false;

    m_disadvantages_isSet = false;
    m_disadvantages_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;
}

void OAIGoodsFeedbackDescriptionDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoodsFeedbackDescriptionDTO::fromJsonObject(QJsonObject json) {

    m_advantages_isValid = ::OpenAPI::fromJsonValue(advantages, json[QString("advantages")]);
    m_advantages_isSet = !json[QString("advantages")].isNull() && m_advantages_isValid;

    m_disadvantages_isValid = ::OpenAPI::fromJsonValue(disadvantages, json[QString("disadvantages")]);
    m_disadvantages_isSet = !json[QString("disadvantages")].isNull() && m_disadvantages_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;
}

QString OAIGoodsFeedbackDescriptionDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoodsFeedbackDescriptionDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_advantages_isSet) {
        obj.insert(QString("advantages"), ::OpenAPI::toJsonValue(advantages));
    }
    if (m_disadvantages_isSet) {
        obj.insert(QString("disadvantages"), ::OpenAPI::toJsonValue(disadvantages));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(comment));
    }
    return obj;
}

QString OAIGoodsFeedbackDescriptionDTO::getAdvantages() const {
    return advantages;
}
void OAIGoodsFeedbackDescriptionDTO::setAdvantages(const QString &advantages) {
    this->advantages = advantages;
    this->m_advantages_isSet = true;
}

bool OAIGoodsFeedbackDescriptionDTO::is_advantages_Set() const{
    return m_advantages_isSet;
}

bool OAIGoodsFeedbackDescriptionDTO::is_advantages_Valid() const{
    return m_advantages_isValid;
}

QString OAIGoodsFeedbackDescriptionDTO::getDisadvantages() const {
    return disadvantages;
}
void OAIGoodsFeedbackDescriptionDTO::setDisadvantages(const QString &disadvantages) {
    this->disadvantages = disadvantages;
    this->m_disadvantages_isSet = true;
}

bool OAIGoodsFeedbackDescriptionDTO::is_disadvantages_Set() const{
    return m_disadvantages_isSet;
}

bool OAIGoodsFeedbackDescriptionDTO::is_disadvantages_Valid() const{
    return m_disadvantages_isValid;
}

QString OAIGoodsFeedbackDescriptionDTO::getComment() const {
    return comment;
}
void OAIGoodsFeedbackDescriptionDTO::setComment(const QString &comment) {
    this->comment = comment;
    this->m_comment_isSet = true;
}

bool OAIGoodsFeedbackDescriptionDTO::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIGoodsFeedbackDescriptionDTO::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIGoodsFeedbackDescriptionDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advantages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disadvantages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoodsFeedbackDescriptionDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
