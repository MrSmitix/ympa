/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCampaignOffersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCampaignOffersRequest::OAIGetCampaignOffersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCampaignOffersRequest::OAIGetCampaignOffersRequest() {
    this->initializeModel();
}

OAIGetCampaignOffersRequest::~OAIGetCampaignOffersRequest() {}

void OAIGetCampaignOffersRequest::initializeModel() {

    m_offer_ids_isSet = false;
    m_offer_ids_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_category_ids_isSet = false;
    m_category_ids_isValid = false;

    m_vendor_names_isSet = false;
    m_vendor_names_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetCampaignOffersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCampaignOffersRequest::fromJsonObject(QJsonObject json) {

    m_offer_ids_isValid = ::OpenAPI::fromJsonValue(offer_ids, json[QString("offerIds")]);
    m_offer_ids_isSet = !json[QString("offerIds")].isNull() && m_offer_ids_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;

    m_category_ids_isValid = ::OpenAPI::fromJsonValue(category_ids, json[QString("categoryIds")]);
    m_category_ids_isSet = !json[QString("categoryIds")].isNull() && m_category_ids_isValid;

    m_vendor_names_isValid = ::OpenAPI::fromJsonValue(vendor_names, json[QString("vendorNames")]);
    m_vendor_names_isSet = !json[QString("vendorNames")].isNull() && m_vendor_names_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetCampaignOffersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCampaignOffersRequest::asJsonObject() const {
    QJsonObject obj;
    if (offer_ids.size() > 0) {
        obj.insert(QString("offerIds"), ::OpenAPI::toJsonValue(offer_ids));
    }
    if (statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(statuses));
    }
    if (category_ids.size() > 0) {
        obj.insert(QString("categoryIds"), ::OpenAPI::toJsonValue(category_ids));
    }
    if (vendor_names.size() > 0) {
        obj.insert(QString("vendorNames"), ::OpenAPI::toJsonValue(vendor_names));
    }
    if (tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(tags));
    }
    return obj;
}

QList<QString> OAIGetCampaignOffersRequest::getOfferIds() const {
    return offer_ids;
}
void OAIGetCampaignOffersRequest::setOfferIds(const QList<QString> &offer_ids) {
    this->offer_ids = offer_ids;
    this->m_offer_ids_isSet = true;
}

bool OAIGetCampaignOffersRequest::is_offer_ids_Set() const{
    return m_offer_ids_isSet;
}

bool OAIGetCampaignOffersRequest::is_offer_ids_Valid() const{
    return m_offer_ids_isValid;
}

QList<OAIOfferCampaignStatusType> OAIGetCampaignOffersRequest::getStatuses() const {
    return statuses;
}
void OAIGetCampaignOffersRequest::setStatuses(const QList<OAIOfferCampaignStatusType> &statuses) {
    this->statuses = statuses;
    this->m_statuses_isSet = true;
}

bool OAIGetCampaignOffersRequest::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIGetCampaignOffersRequest::is_statuses_Valid() const{
    return m_statuses_isValid;
}

QList<qint32> OAIGetCampaignOffersRequest::getCategoryIds() const {
    return category_ids;
}
void OAIGetCampaignOffersRequest::setCategoryIds(const QList<qint32> &category_ids) {
    this->category_ids = category_ids;
    this->m_category_ids_isSet = true;
}

bool OAIGetCampaignOffersRequest::is_category_ids_Set() const{
    return m_category_ids_isSet;
}

bool OAIGetCampaignOffersRequest::is_category_ids_Valid() const{
    return m_category_ids_isValid;
}

QList<QString> OAIGetCampaignOffersRequest::getVendorNames() const {
    return vendor_names;
}
void OAIGetCampaignOffersRequest::setVendorNames(const QList<QString> &vendor_names) {
    this->vendor_names = vendor_names;
    this->m_vendor_names_isSet = true;
}

bool OAIGetCampaignOffersRequest::is_vendor_names_Set() const{
    return m_vendor_names_isSet;
}

bool OAIGetCampaignOffersRequest::is_vendor_names_Valid() const{
    return m_vendor_names_isValid;
}

QList<QString> OAIGetCampaignOffersRequest::getTags() const {
    return tags;
}
void OAIGetCampaignOffersRequest::setTags(const QList<QString> &tags) {
    this->tags = tags;
    this->m_tags_isSet = true;
}

bool OAIGetCampaignOffersRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetCampaignOffersRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetCampaignOffersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (offer_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (vendor_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCampaignOffersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
