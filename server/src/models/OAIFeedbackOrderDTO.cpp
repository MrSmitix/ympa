/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedbackOrderDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedbackOrderDTO::OAIFeedbackOrderDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedbackOrderDTO::OAIFeedbackOrderDTO() {
    this->initializeModel();
}

OAIFeedbackOrderDTO::~OAIFeedbackOrderDTO() {}

void OAIFeedbackOrderDTO::initializeModel() {

    m_shop_order_id_isSet = false;
    m_shop_order_id_isValid = false;

    m_delivery_isSet = false;
    m_delivery_isValid = false;
}

void OAIFeedbackOrderDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedbackOrderDTO::fromJsonObject(QJsonObject json) {

    m_shop_order_id_isValid = ::OpenAPI::fromJsonValue(shop_order_id, json[QString("shopOrderId")]);
    m_shop_order_id_isSet = !json[QString("shopOrderId")].isNull() && m_shop_order_id_isValid;

    m_delivery_isValid = ::OpenAPI::fromJsonValue(delivery, json[QString("delivery")]);
    m_delivery_isSet = !json[QString("delivery")].isNull() && m_delivery_isValid;
}

QString OAIFeedbackOrderDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedbackOrderDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_shop_order_id_isSet) {
        obj.insert(QString("shopOrderId"), ::OpenAPI::toJsonValue(shop_order_id));
    }
    if (delivery.isSet()) {
        obj.insert(QString("delivery"), ::OpenAPI::toJsonValue(delivery));
    }
    return obj;
}

QString OAIFeedbackOrderDTO::getShopOrderId() const {
    return shop_order_id;
}
void OAIFeedbackOrderDTO::setShopOrderId(const QString &shop_order_id) {
    this->shop_order_id = shop_order_id;
    this->m_shop_order_id_isSet = true;
}

bool OAIFeedbackOrderDTO::is_shop_order_id_Set() const{
    return m_shop_order_id_isSet;
}

bool OAIFeedbackOrderDTO::is_shop_order_id_Valid() const{
    return m_shop_order_id_isValid;
}

OAIFeedbackDeliveryType OAIFeedbackOrderDTO::getDelivery() const {
    return delivery;
}
void OAIFeedbackOrderDTO::setDelivery(const OAIFeedbackDeliveryType &delivery) {
    this->delivery = delivery;
    this->m_delivery_isSet = true;
}

bool OAIFeedbackOrderDTO::is_delivery_Set() const{
    return m_delivery_isSet;
}

bool OAIFeedbackOrderDTO::is_delivery_Valid() const{
    return m_delivery_isValid;
}

bool OAIFeedbackOrderDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shop_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedbackOrderDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
