/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferType::OAIOfferType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferType::OAIOfferType() {
    this->initializeModel();
}

OAIOfferType::~OAIOfferType() {}

void OAIOfferType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOfferType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOfferType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DEFAULT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferType::DEFAULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEDICINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferType::MEDICINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BOOK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferType::BOOK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUDIOBOOK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferType::AUDIOBOOK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ARTIST_TITLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferType::ARTIST_TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ON_DEMAND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfferType::ON_DEMAND;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOfferType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOfferType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOfferType::DEFAULT:
            val = "DEFAULT";
            break;
        case eOAIOfferType::MEDICINE:
            val = "MEDICINE";
            break;
        case eOAIOfferType::BOOK:
            val = "BOOK";
            break;
        case eOAIOfferType::AUDIOBOOK:
            val = "AUDIOBOOK";
            break;
        case eOAIOfferType::ARTIST_TITLE:
            val = "ARTIST_TITLE";
            break;
        case eOAIOfferType::ON_DEMAND:
            val = "ON_DEMAND";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOfferType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOfferType::eOAIOfferType OAIOfferType::getValue() const {
    return m_value;
}

void OAIOfferType::setValue(const OAIOfferType::eOAIOfferType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOfferType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOfferType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
