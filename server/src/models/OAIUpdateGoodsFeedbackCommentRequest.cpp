/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateGoodsFeedbackCommentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateGoodsFeedbackCommentRequest::OAIUpdateGoodsFeedbackCommentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateGoodsFeedbackCommentRequest::OAIUpdateGoodsFeedbackCommentRequest() {
    this->initializeModel();
}

OAIUpdateGoodsFeedbackCommentRequest::~OAIUpdateGoodsFeedbackCommentRequest() {}

void OAIUpdateGoodsFeedbackCommentRequest::initializeModel() {

    m_feedback_id_isSet = false;
    m_feedback_id_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;
}

void OAIUpdateGoodsFeedbackCommentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateGoodsFeedbackCommentRequest::fromJsonObject(QJsonObject json) {

    m_feedback_id_isValid = ::OpenAPI::fromJsonValue(feedback_id, json[QString("feedbackId")]);
    m_feedback_id_isSet = !json[QString("feedbackId")].isNull() && m_feedback_id_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;
}

QString OAIUpdateGoodsFeedbackCommentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateGoodsFeedbackCommentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_feedback_id_isSet) {
        obj.insert(QString("feedbackId"), ::OpenAPI::toJsonValue(feedback_id));
    }
    if (comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(comment));
    }
    return obj;
}

qint64 OAIUpdateGoodsFeedbackCommentRequest::getFeedbackId() const {
    return feedback_id;
}
void OAIUpdateGoodsFeedbackCommentRequest::setFeedbackId(const qint64 &feedback_id) {
    this->feedback_id = feedback_id;
    this->m_feedback_id_isSet = true;
}

bool OAIUpdateGoodsFeedbackCommentRequest::is_feedback_id_Set() const{
    return m_feedback_id_isSet;
}

bool OAIUpdateGoodsFeedbackCommentRequest::is_feedback_id_Valid() const{
    return m_feedback_id_isValid;
}

OAIUpdateGoodsFeedbackCommentDTO OAIUpdateGoodsFeedbackCommentRequest::getComment() const {
    return comment;
}
void OAIUpdateGoodsFeedbackCommentRequest::setComment(const OAIUpdateGoodsFeedbackCommentDTO &comment) {
    this->comment = comment;
    this->m_comment_isSet = true;
}

bool OAIUpdateGoodsFeedbackCommentRequest::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIUpdateGoodsFeedbackCommentRequest::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIUpdateGoodsFeedbackCommentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feedback_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (comment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateGoodsFeedbackCommentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_feedback_id_isValid && m_comment_isValid && true;
}

} // namespace OpenAPI
