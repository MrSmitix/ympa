/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrdersStatsPaymentDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrdersStatsPaymentDTO::OAIOrdersStatsPaymentDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrdersStatsPaymentDTO::OAIOrdersStatsPaymentDTO() {
    this->initializeModel();
}

OAIOrdersStatsPaymentDTO::~OAIOrdersStatsPaymentDTO() {}

void OAIOrdersStatsPaymentDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_payment_order_isSet = false;
    m_payment_order_isValid = false;
}

void OAIOrdersStatsPaymentDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrdersStatsPaymentDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_payment_order_isValid = ::OpenAPI::fromJsonValue(payment_order, json[QString("paymentOrder")]);
    m_payment_order_isSet = !json[QString("paymentOrder")].isNull() && m_payment_order_isValid;
}

QString OAIOrdersStatsPaymentDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrdersStatsPaymentDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(date));
    }
    if (type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(source));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(total));
    }
    if (payment_order.isSet()) {
        obj.insert(QString("paymentOrder"), ::OpenAPI::toJsonValue(payment_order));
    }
    return obj;
}

QString OAIOrdersStatsPaymentDTO::getId() const {
    return id;
}
void OAIOrdersStatsPaymentDTO::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIOrdersStatsPaymentDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrdersStatsPaymentDTO::is_id_Valid() const{
    return m_id_isValid;
}

QDate OAIOrdersStatsPaymentDTO::getDate() const {
    return date;
}
void OAIOrdersStatsPaymentDTO::setDate(const QDate &date) {
    this->date = date;
    this->m_date_isSet = true;
}

bool OAIOrdersStatsPaymentDTO::is_date_Set() const{
    return m_date_isSet;
}

bool OAIOrdersStatsPaymentDTO::is_date_Valid() const{
    return m_date_isValid;
}

OAIOrdersStatsPaymentType OAIOrdersStatsPaymentDTO::getType() const {
    return type;
}
void OAIOrdersStatsPaymentDTO::setType(const OAIOrdersStatsPaymentType &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIOrdersStatsPaymentDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrdersStatsPaymentDTO::is_type_Valid() const{
    return m_type_isValid;
}

OAIOrdersStatsPaymentSourceType OAIOrdersStatsPaymentDTO::getSource() const {
    return source;
}
void OAIOrdersStatsPaymentDTO::setSource(const OAIOrdersStatsPaymentSourceType &source) {
    this->source = source;
    this->m_source_isSet = true;
}

bool OAIOrdersStatsPaymentDTO::is_source_Set() const{
    return m_source_isSet;
}

bool OAIOrdersStatsPaymentDTO::is_source_Valid() const{
    return m_source_isValid;
}

double OAIOrdersStatsPaymentDTO::getTotal() const {
    return total;
}
void OAIOrdersStatsPaymentDTO::setTotal(const double &total) {
    this->total = total;
    this->m_total_isSet = true;
}

bool OAIOrdersStatsPaymentDTO::is_total_Set() const{
    return m_total_isSet;
}

bool OAIOrdersStatsPaymentDTO::is_total_Valid() const{
    return m_total_isValid;
}

OAIOrdersStatsPaymentOrderDTO OAIOrdersStatsPaymentDTO::getPaymentOrder() const {
    return payment_order;
}
void OAIOrdersStatsPaymentDTO::setPaymentOrder(const OAIOrdersStatsPaymentOrderDTO &payment_order) {
    this->payment_order = payment_order;
    this->m_payment_order_isSet = true;
}

bool OAIOrdersStatsPaymentDTO::is_payment_order_Set() const{
    return m_payment_order_isSet;
}

bool OAIOrdersStatsPaymentDTO::is_payment_order_Valid() const{
    return m_payment_order_isValid;
}

bool OAIOrdersStatsPaymentDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (payment_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrdersStatsPaymentDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
