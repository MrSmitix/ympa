/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedDTO::OAIFeedDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedDTO::OAIFeedDTO() {
    this->initializeModel();
}

OAIFeedDTO::~OAIFeedDTO() {}

void OAIFeedDTO::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_upload_date_isSet = false;
    m_upload_date_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_download_isSet = false;
    m_download_isValid = false;

    m_placement_isSet = false;
    m_placement_isValid = false;

    m_publication_isSet = false;
    m_publication_isValid = false;
}

void OAIFeedDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedDTO::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_upload_date_isValid = ::OpenAPI::fromJsonValue(upload_date, json[QString("uploadDate")]);
    m_upload_date_isSet = !json[QString("uploadDate")].isNull() && m_upload_date_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_download_isValid = ::OpenAPI::fromJsonValue(download, json[QString("download")]);
    m_download_isSet = !json[QString("download")].isNull() && m_download_isValid;

    m_placement_isValid = ::OpenAPI::fromJsonValue(placement, json[QString("placement")]);
    m_placement_isSet = !json[QString("placement")].isNull() && m_placement_isValid;

    m_publication_isValid = ::OpenAPI::fromJsonValue(publication, json[QString("publication")]);
    m_publication_isSet = !json[QString("publication")].isNull() && m_publication_isValid;
}

QString OAIFeedDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(login));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(password));
    }
    if (m_upload_date_isSet) {
        obj.insert(QString("uploadDate"), ::OpenAPI::toJsonValue(upload_date));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(url));
    }
    if (content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(content));
    }
    if (download.isSet()) {
        obj.insert(QString("download"), ::OpenAPI::toJsonValue(download));
    }
    if (placement.isSet()) {
        obj.insert(QString("placement"), ::OpenAPI::toJsonValue(placement));
    }
    if (publication.isSet()) {
        obj.insert(QString("publication"), ::OpenAPI::toJsonValue(publication));
    }
    return obj;
}

qint64 OAIFeedDTO::getId() const {
    return id;
}
void OAIFeedDTO::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIFeedDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeedDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFeedDTO::getLogin() const {
    return login;
}
void OAIFeedDTO::setLogin(const QString &login) {
    this->login = login;
    this->m_login_isSet = true;
}

bool OAIFeedDTO::is_login_Set() const{
    return m_login_isSet;
}

bool OAIFeedDTO::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIFeedDTO::getName() const {
    return name;
}
void OAIFeedDTO::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIFeedDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFeedDTO::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFeedDTO::getPassword() const {
    return password;
}
void OAIFeedDTO::setPassword(const QString &password) {
    this->password = password;
    this->m_password_isSet = true;
}

bool OAIFeedDTO::is_password_Set() const{
    return m_password_isSet;
}

bool OAIFeedDTO::is_password_Valid() const{
    return m_password_isValid;
}

QDateTime OAIFeedDTO::getUploadDate() const {
    return upload_date;
}
void OAIFeedDTO::setUploadDate(const QDateTime &upload_date) {
    this->upload_date = upload_date;
    this->m_upload_date_isSet = true;
}

bool OAIFeedDTO::is_upload_date_Set() const{
    return m_upload_date_isSet;
}

bool OAIFeedDTO::is_upload_date_Valid() const{
    return m_upload_date_isValid;
}

QString OAIFeedDTO::getUrl() const {
    return url;
}
void OAIFeedDTO::setUrl(const QString &url) {
    this->url = url;
    this->m_url_isSet = true;
}

bool OAIFeedDTO::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFeedDTO::is_url_Valid() const{
    return m_url_isValid;
}

OAIFeedContentDTO OAIFeedDTO::getContent() const {
    return content;
}
void OAIFeedDTO::setContent(const OAIFeedContentDTO &content) {
    this->content = content;
    this->m_content_isSet = true;
}

bool OAIFeedDTO::is_content_Set() const{
    return m_content_isSet;
}

bool OAIFeedDTO::is_content_Valid() const{
    return m_content_isValid;
}

OAIFeedDownloadDTO OAIFeedDTO::getDownload() const {
    return download;
}
void OAIFeedDTO::setDownload(const OAIFeedDownloadDTO &download) {
    this->download = download;
    this->m_download_isSet = true;
}

bool OAIFeedDTO::is_download_Set() const{
    return m_download_isSet;
}

bool OAIFeedDTO::is_download_Valid() const{
    return m_download_isValid;
}

OAIFeedPlacementDTO OAIFeedDTO::getPlacement() const {
    return placement;
}
void OAIFeedDTO::setPlacement(const OAIFeedPlacementDTO &placement) {
    this->placement = placement;
    this->m_placement_isSet = true;
}

bool OAIFeedDTO::is_placement_Set() const{
    return m_placement_isSet;
}

bool OAIFeedDTO::is_placement_Valid() const{
    return m_placement_isValid;
}

OAIFeedPublicationDTO OAIFeedDTO::getPublication() const {
    return publication;
}
void OAIFeedDTO::setPublication(const OAIFeedPublicationDTO &publication) {
    this->publication = publication;
    this->m_publication_isSet = true;
}

bool OAIFeedDTO::is_publication_Set() const{
    return m_publication_isSet;
}

bool OAIFeedDTO::is_publication_Valid() const{
    return m_publication_isValid;
}

bool OAIFeedDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (download.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (publication.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
