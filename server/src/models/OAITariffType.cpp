/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITariffType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITariffType::OAITariffType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITariffType::OAITariffType() {
    this->initializeModel();
}

OAITariffType::~OAITariffType() {}

void OAITariffType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITariffType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITariffType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AGENCY_COMMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::AGENCY_COMMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAYMENT_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::PAYMENT_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STORAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::STORAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WITHDRAW", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::WITHDRAW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SURPLUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::SURPLUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FEE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_TO_CUSTOMER", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::DELIVERY_TO_CUSTOMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CROSSREGIONAL_DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::CROSSREGIONAL_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CROSSREGIONAL_DELIVERY_RETURN", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::CROSSREGIONAL_DELIVERY_RETURN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISPOSAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::DISPOSAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SORTING_CENTER_STORAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::SORTING_CENTER_STORAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPRESS_DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::EXPRESS_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FF_XDOC_SUPPLY_BOX", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::FF_XDOC_SUPPLY_BOX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FF_XDOC_SUPPLY_PALLET", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::FF_XDOC_SUPPLY_PALLET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SORTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::SORTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MIDDLE_MILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::MIDDLE_MILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETURN_PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::RETURN_PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPRESS_CANCELLED_BY_PARTNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::EXPRESS_CANCELLED_BY_PARTNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELIVERY_TO_CUSTOMER_RETURN", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::DELIVERY_TO_CUSTOMER_RETURN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CROSSBORDER_DELIVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::CROSSBORDER_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTAKE_SORTING_BULKY_CARGO", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::INTAKE_SORTING_BULKY_CARGO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTAKE_SORTING_SMALL_GOODS", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::INTAKE_SORTING_SMALL_GOODS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTAKE_SORTING_DAILY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::INTAKE_SORTING_DAILY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FF_STORAGE_BILLING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::FF_STORAGE_BILLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED_ORDER_FEE_QI", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::CANCELLED_ORDER_FEE_QI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LATE_ORDER_EXECUTION_FEE_QI", Qt::CaseInsensitive) == 0) {
        m_value = eOAITariffType::LATE_ORDER_EXECUTION_FEE_QI;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITariffType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITariffType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITariffType::AGENCY_COMMISSION:
            val = "AGENCY_COMMISSION";
            break;
        case eOAITariffType::PAYMENT_TRANSFER:
            val = "PAYMENT_TRANSFER";
            break;
        case eOAITariffType::STORAGE:
            val = "STORAGE";
            break;
        case eOAITariffType::WITHDRAW:
            val = "WITHDRAW";
            break;
        case eOAITariffType::SURPLUS:
            val = "SURPLUS";
            break;
        case eOAITariffType::FEE:
            val = "FEE";
            break;
        case eOAITariffType::DELIVERY_TO_CUSTOMER:
            val = "DELIVERY_TO_CUSTOMER";
            break;
        case eOAITariffType::CROSSREGIONAL_DELIVERY:
            val = "CROSSREGIONAL_DELIVERY";
            break;
        case eOAITariffType::CROSSREGIONAL_DELIVERY_RETURN:
            val = "CROSSREGIONAL_DELIVERY_RETURN";
            break;
        case eOAITariffType::DISPOSAL:
            val = "DISPOSAL";
            break;
        case eOAITariffType::SORTING_CENTER_STORAGE:
            val = "SORTING_CENTER_STORAGE";
            break;
        case eOAITariffType::EXPRESS_DELIVERY:
            val = "EXPRESS_DELIVERY";
            break;
        case eOAITariffType::FF_XDOC_SUPPLY_BOX:
            val = "FF_XDOC_SUPPLY_BOX";
            break;
        case eOAITariffType::FF_XDOC_SUPPLY_PALLET:
            val = "FF_XDOC_SUPPLY_PALLET";
            break;
        case eOAITariffType::SORTING:
            val = "SORTING";
            break;
        case eOAITariffType::MIDDLE_MILE:
            val = "MIDDLE_MILE";
            break;
        case eOAITariffType::RETURN_PROCESSING:
            val = "RETURN_PROCESSING";
            break;
        case eOAITariffType::EXPRESS_CANCELLED_BY_PARTNER:
            val = "EXPRESS_CANCELLED_BY_PARTNER";
            break;
        case eOAITariffType::DELIVERY_TO_CUSTOMER_RETURN:
            val = "DELIVERY_TO_CUSTOMER_RETURN";
            break;
        case eOAITariffType::CROSSBORDER_DELIVERY:
            val = "CROSSBORDER_DELIVERY";
            break;
        case eOAITariffType::INTAKE_SORTING_BULKY_CARGO:
            val = "INTAKE_SORTING_BULKY_CARGO";
            break;
        case eOAITariffType::INTAKE_SORTING_SMALL_GOODS:
            val = "INTAKE_SORTING_SMALL_GOODS";
            break;
        case eOAITariffType::INTAKE_SORTING_DAILY:
            val = "INTAKE_SORTING_DAILY";
            break;
        case eOAITariffType::FF_STORAGE_BILLING:
            val = "FF_STORAGE_BILLING";
            break;
        case eOAITariffType::CANCELLED_ORDER_FEE_QI:
            val = "CANCELLED_ORDER_FEE_QI";
            break;
        case eOAITariffType::LATE_ORDER_EXECUTION_FEE_QI:
            val = "LATE_ORDER_EXECUTION_FEE_QI";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITariffType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITariffType::eOAITariffType OAITariffType::getValue() const {
    return m_value;
}

void OAITariffType::setValue(const OAITariffType::eOAITariffType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITariffType::isSet() const {
    
    return m_value_isSet;
}

bool OAITariffType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
