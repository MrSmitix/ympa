/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipmentStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipmentStatusType::OAIShipmentStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipmentStatusType::OAIShipmentStatusType() {
    this->initializeModel();
}

OAIShipmentStatusType::~OAIShipmentStatusType() {}

void OAIShipmentStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIShipmentStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIShipmentStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OUTBOUND_CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentStatusType::OUTBOUND_CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OUTBOUND_READY_FOR_CONFIRMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentStatusType::OUTBOUND_READY_FOR_CONFIRMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OUTBOUND_CONFIRMED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentStatusType::OUTBOUND_CONFIRMED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OUTBOUND_SIGNED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentStatusType::OUTBOUND_SIGNED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FINISHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentStatusType::FINISHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCEPTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentStatusType::ACCEPTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCEPTED_WITH_DISCREPANCIES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentStatusType::ACCEPTED_WITH_DISCREPANCIES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShipmentStatusType::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIShipmentStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIShipmentStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIShipmentStatusType::OUTBOUND_CREATED:
            val = "OUTBOUND_CREATED";
            break;
        case eOAIShipmentStatusType::OUTBOUND_READY_FOR_CONFIRMATION:
            val = "OUTBOUND_READY_FOR_CONFIRMATION";
            break;
        case eOAIShipmentStatusType::OUTBOUND_CONFIRMED:
            val = "OUTBOUND_CONFIRMED";
            break;
        case eOAIShipmentStatusType::OUTBOUND_SIGNED:
            val = "OUTBOUND_SIGNED";
            break;
        case eOAIShipmentStatusType::FINISHED:
            val = "FINISHED";
            break;
        case eOAIShipmentStatusType::ACCEPTED:
            val = "ACCEPTED";
            break;
        case eOAIShipmentStatusType::ACCEPTED_WITH_DISCREPANCIES:
            val = "ACCEPTED_WITH_DISCREPANCIES";
            break;
        case eOAIShipmentStatusType::ERROR:
            val = "ERROR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIShipmentStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIShipmentStatusType::eOAIShipmentStatusType OAIShipmentStatusType::getValue() const {
    return m_value;
}

void OAIShipmentStatusType::setValue(const OAIShipmentStatusType::eOAIShipmentStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIShipmentStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIShipmentStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
