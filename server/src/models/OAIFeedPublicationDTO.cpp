/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedPublicationDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedPublicationDTO::OAIFeedPublicationDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedPublicationDTO::OAIFeedPublicationDTO() {
    this->initializeModel();
}

OAIFeedPublicationDTO::~OAIFeedPublicationDTO() {}

void OAIFeedPublicationDTO::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_full_isSet = false;
    m_full_isValid = false;

    m_price_and_stock_update_isSet = false;
    m_price_and_stock_update_isValid = false;
}

void OAIFeedPublicationDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedPublicationDTO::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_full_isValid = ::OpenAPI::fromJsonValue(full, json[QString("full")]);
    m_full_isSet = !json[QString("full")].isNull() && m_full_isValid;

    m_price_and_stock_update_isValid = ::OpenAPI::fromJsonValue(price_and_stock_update, json[QString("priceAndStockUpdate")]);
    m_price_and_stock_update_isSet = !json[QString("priceAndStockUpdate")].isNull() && m_price_and_stock_update_isValid;
}

QString OAIFeedPublicationDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedPublicationDTO::asJsonObject() const {
    QJsonObject obj;
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (full.isSet()) {
        obj.insert(QString("full"), ::OpenAPI::toJsonValue(full));
    }
    if (price_and_stock_update.isSet()) {
        obj.insert(QString("priceAndStockUpdate"), ::OpenAPI::toJsonValue(price_and_stock_update));
    }
    return obj;
}

OAIFeedStatusType OAIFeedPublicationDTO::getStatus() const {
    return status;
}
void OAIFeedPublicationDTO::setStatus(const OAIFeedStatusType &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIFeedPublicationDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFeedPublicationDTO::is_status_Valid() const{
    return m_status_isValid;
}

OAIFeedPublicationFullDTO OAIFeedPublicationDTO::getFull() const {
    return full;
}
void OAIFeedPublicationDTO::setFull(const OAIFeedPublicationFullDTO &full) {
    this->full = full;
    this->m_full_isSet = true;
}

bool OAIFeedPublicationDTO::is_full_Set() const{
    return m_full_isSet;
}

bool OAIFeedPublicationDTO::is_full_Valid() const{
    return m_full_isValid;
}

OAIFeedPublicationPriceAndStockUpdateDTO OAIFeedPublicationDTO::getPriceAndStockUpdate() const {
    return price_and_stock_update;
}
void OAIFeedPublicationDTO::setPriceAndStockUpdate(const OAIFeedPublicationPriceAndStockUpdateDTO &price_and_stock_update) {
    this->price_and_stock_update = price_and_stock_update;
    this->m_price_and_stock_update_isSet = true;
}

bool OAIFeedPublicationDTO::is_price_and_stock_update_Set() const{
    return m_price_and_stock_update_isSet;
}

bool OAIFeedPublicationDTO::is_price_and_stock_update_Valid() const{
    return m_price_and_stock_update_isValid;
}

bool OAIFeedPublicationDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (full.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (price_and_stock_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedPublicationDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
