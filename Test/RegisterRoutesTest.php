<?php

/**
 * Партнерский API Маркета
 * PHP version 8.x
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace OpenAPIServer\Test;

use function OpenAPIServer\parseParam;

class RegisterRoutesTest extends \PHPUnit\Framework\TestCase {
    public function testRegisterRoutesAbstractBidsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractBidsApi {
            public function getBidsInfoForBusiness(int $businessId, ?string $pageToken, ?int $limit, ?\OpenAPIServer\Model\GetBidsInfoRequest $getBidsInfoRequest): \OpenAPIServer\Model\GetBidsInfoResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractBusinessOfferMappingsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractBusinessOfferMappingsApi {
            public function addOffersToArchive(int $businessId, \OpenAPIServer\Model\AddOffersToArchiveRequest $addOffersToArchiveRequest): \OpenAPIServer\Model\AddOffersToArchiveResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractBusinessesApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractBusinessesApi {
            public function getBusinessSettings(int $businessId): \OpenAPIServer\Model\GetBusinessSettingsResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractCampaignsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractCampaignsApi {
            public function getCampaign(int $campaignId): \OpenAPIServer\Model\GetCampaignResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractCategoriesApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractCategoriesApi {
            public function getCategoriesMaxSaleQuantum(\OpenAPIServer\Model\GetCategoriesMaxSaleQuantumRequest $getCategoriesMaxSaleQuantumRequest): \OpenAPIServer\Model\GetCategoriesMaxSaleQuantumResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractChatsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractChatsApi {
            public function createChat(int $businessId, \OpenAPIServer\Model\CreateChatRequest $createChatRequest): \OpenAPIServer\Model\CreateChatResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractContentApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractContentApi {
            public function getCategoryContentParameters(int $categoryId): \OpenAPIServer\Model\GetCategoryContentParametersResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractDbsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractDbsApi {
            public function acceptOrderCancellation(int $campaignId, int $orderId, \OpenAPIServer\Model\AcceptOrderCancellationRequest $acceptOrderCancellationRequest): \OpenAPIServer\Model\EmptyApiResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractDeliveryServicesApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractDeliveryServicesApi {
            public function getDeliveryServices(): \OpenAPIServer\Model\GetDeliveryServicesResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractExpressApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractExpressApi {
            public function addHiddenOffers(int $campaignId, \OpenAPIServer\Model\AddHiddenOffersRequest $addHiddenOffersRequest): \OpenAPIServer\Model\EmptyApiResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractFbsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractFbsApi {
            public function addHiddenOffers(int $campaignId, \OpenAPIServer\Model\AddHiddenOffersRequest $addHiddenOffersRequest): \OpenAPIServer\Model\EmptyApiResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractFbyApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractFbyApi {
            public function addHiddenOffers(int $campaignId, \OpenAPIServer\Model\AddHiddenOffersRequest $addHiddenOffersRequest): \OpenAPIServer\Model\EmptyApiResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractFeedbacksApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractFeedbacksApi {
            public function getFeedbackAndCommentUpdates(int $campaignId, ?string $pageToken, ?int $limit, ?\DateTime $fromDate): \OpenAPIServer\Model\GetFeedbackListResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractFeedsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractFeedsApi {
            public function getFeed(int $campaignId, int $feedId): \OpenAPIServer\Model\GetFeedResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractGoodsFeedbackApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractGoodsFeedbackApi {
            public function deleteGoodsFeedbackComment(int $businessId, \OpenAPIServer\Model\DeleteGoodsFeedbackCommentRequest $deleteGoodsFeedbackCommentRequest): \OpenAPIServer\Model\EmptyApiResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractGoodsStatsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractGoodsStatsApi {
            public function getGoodsStats(int $campaignId, \OpenAPIServer\Model\GetGoodsStatsRequest $getGoodsStatsRequest): \OpenAPIServer\Model\GetGoodsStatsResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractHiddenOffersApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractHiddenOffersApi {
            public function addHiddenOffers(int $campaignId, \OpenAPIServer\Model\AddHiddenOffersRequest $addHiddenOffersRequest): \OpenAPIServer\Model\EmptyApiResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractModelsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractModelsApi {
            public function getModel(int $modelId, int $regionId,  $currency): \OpenAPIServer\Model\GetModelsResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractOfferMappingsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractOfferMappingsApi {
            public function getOfferMappingEntries(int $campaignId, ?array $offerId, ?array $shopSku,  $mappingKind, ?array $status, ?array $availability, ?array $categoryId, ?array $vendor, ?string $pageToken, ?int $limit): \OpenAPIServer\Model\GetOfferMappingEntriesResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractOffersApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractOffersApi {
            public function deleteCampaignOffers(int $campaignId, \OpenAPIServer\Model\DeleteCampaignOffersRequest $deleteCampaignOffersRequest): \OpenAPIServer\Model\DeleteCampaignOffersResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractOrderBusinessInformationApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractOrderBusinessInformationApi {
            public function getOrderBusinessBuyerInfo(int $campaignId, int $orderId): \OpenAPIServer\Model\GetBusinessBuyerInfoResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractOrderDeliveryApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractOrderDeliveryApi {
            public function getOrderBuyerInfo(int $campaignId, int $orderId): \OpenAPIServer\Model\GetOrderBuyerInfoResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractOrderLabelsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractOrderLabelsApi {
            public function generateOrderLabel(int $campaignId, int $orderId, int $shipmentId, int $boxId,  $format): void
            {
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractOrdersApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractOrdersApi {
            public function acceptOrderCancellation(int $campaignId, int $orderId, \OpenAPIServer\Model\AcceptOrderCancellationRequest $acceptOrderCancellationRequest): \OpenAPIServer\Model\EmptyApiResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractOrdersStatsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractOrdersStatsApi {
            public function getOrdersStats(int $campaignId, ?string $pageToken, ?int $limit, ?\OpenAPIServer\Model\GetOrdersStatsRequest $getOrdersStatsRequest): \OpenAPIServer\Model\GetOrdersStatsResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractOutletLicensesApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractOutletLicensesApi {
            public function deleteOutletLicenses(int $campaignId, ?array $ids): \OpenAPIServer\Model\EmptyApiResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractOutletsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractOutletsApi {
            public function createOutlet(int $campaignId, \OpenAPIServer\Model\ChangeOutletRequest $changeOutletRequest): \OpenAPIServer\Model\CreateOutletResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractPriceQuarantineApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractPriceQuarantineApi {
            public function confirmBusinessPrices(int $businessId, \OpenAPIServer\Model\ConfirmPricesRequest $confirmPricesRequest): \OpenAPIServer\Model\EmptyApiResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractPricesApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractPricesApi {
            public function getPrices(int $campaignId, ?string $pageToken, ?int $limit, ?bool $archived): \OpenAPIServer\Model\GetPricesResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractPromosApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractPromosApi {
            public function deletePromoOffers(int $businessId, \OpenAPIServer\Model\DeletePromoOffersRequest $deletePromoOffersRequest): \OpenAPIServer\Model\DeletePromoOffersResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractRatingsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractRatingsApi {
            public function getQualityRatingDetails(int $campaignId): \OpenAPIServer\Model\GetQualityRatingDetailsResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractRegionsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractRegionsApi {
            public function searchRegionChildren(int $regionId, ?int $page, ?int $pageSize): \OpenAPIServer\Model\GetRegionWithChildrenResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractReportsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractReportsApi {
            public function generateBoostConsolidatedReport(\OpenAPIServer\Model\GenerateBoostConsolidatedRequest $generateBoostConsolidatedRequest,  $format): \OpenAPIServer\Model\GenerateReportResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractReturnsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractReturnsApi {
            public function getReturn(int $campaignId, int $orderId, int $returnId): \OpenAPIServer\Model\GetReturnResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractShipmentsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractShipmentsApi {
            public function confirmShipment(int $campaignId, int $shipmentId, ?\OpenAPIServer\Model\ConfirmShipmentRequest $confirmShipmentRequest): \OpenAPIServer\Model\EmptyApiResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractStocksApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractStocksApi {
            public function getStocks(int $campaignId, ?string $pageToken, ?int $limit, ?\OpenAPIServer\Model\GetWarehouseStocksRequest $getWarehouseStocksRequest): \OpenAPIServer\Model\GetWarehouseStocksResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractTariffsApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractTariffsApi {
            public function calculateTariffs(\OpenAPIServer\Model\CalculateTariffsRequest $calculateTariffsRequest): \OpenAPIServer\Model\CalculateTariffsResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testRegisterRoutesAbstractWarehousesApi(): void
    {
        $handler = new class extends \OpenAPIServer\Api\AbstractWarehousesApi {
            public function getFulfillmentWarehouses(): \OpenAPIServer\Model\GetFulfillmentWarehousesResponse|null
            {
                return null;
            }
        };
        \OpenAPIServer\RegisterRoutes::registerRoutes($handler);
        $this->assertTrue(true);
    }
    public function testParseParamsEnumAddOffersToArchiveErrorType(): void
    {
        $value = 'OFFER_HAS_STOCKS';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\AddOffersToArchiveErrorType'),
            \OpenAPIServer\Model\AddOffersToArchiveErrorType::OFFER_HAS_STOCKS
        );
    }
    public function testParseParamsEnumAffectedOrderQualityRatingComponentType(): void
    {
        $value = 'DBS_CANCELLATION_RATE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\AffectedOrderQualityRatingComponentType'),
            \OpenAPIServer\Model\AffectedOrderQualityRatingComponentType::DBS_CANCELLATION_RATE
        );
    }
    public function testParseParamsEnumAgeUnitType(): void
    {
        $value = 'YEAR';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\AgeUnitType'),
            \OpenAPIServer\Model\AgeUnitType::YEAR
        );
    }
    public function testParseParamsEnumApiResponseStatusType(): void
    {
        $value = 'OK';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ApiResponseStatusType'),
            \OpenAPIServer\Model\ApiResponseStatusType::OK
        );
    }
    public function testParseParamsEnumCalculatedTariffType(): void
    {
        $value = 'AGENCY_COMMISSION';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\CalculatedTariffType'),
            \OpenAPIServer\Model\CalculatedTariffType::AGENCY_COMMISSION
        );
    }
    public function testParseParamsEnumCampaignSettingsScheduleSourceType(): void
    {
        $value = 'WEB';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\CampaignSettingsScheduleSourceType'),
            \OpenAPIServer\Model\CampaignSettingsScheduleSourceType::WEB
        );
    }
    public function testParseParamsEnumCategoryErrorType(): void
    {
        $value = 'UNKNOWN_CATEGORY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\CategoryErrorType'),
            \OpenAPIServer\Model\CategoryErrorType::UNKNOWN_CATEGORY
        );
    }
    public function testParseParamsEnumChatMessageSenderType(): void
    {
        $value = 'PARTNER';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ChatMessageSenderType'),
            \OpenAPIServer\Model\ChatMessageSenderType::PARTNER
        );
    }
    public function testParseParamsEnumChatStatusType(): void
    {
        $value = 'NEW';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ChatStatusType'),
            \OpenAPIServer\Model\ChatStatusType::_NEW
        );
    }
    public function testParseParamsEnumChatType(): void
    {
        $value = 'CHAT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ChatType'),
            \OpenAPIServer\Model\ChatType::CHAT
        );
    }
    public function testParseParamsEnumCurrencyType(): void
    {
        $value = 'RUR';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\CurrencyType'),
            \OpenAPIServer\Model\CurrencyType::RUR
        );
    }
    public function testParseParamsEnumDayOfWeekType(): void
    {
        $value = 'MONDAY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\DayOfWeekType'),
            \OpenAPIServer\Model\DayOfWeekType::MONDAY
        );
    }
    public function testParseParamsEnumEacVerificationStatusType(): void
    {
        $value = 'ACCEPTED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\EacVerificationStatusType'),
            \OpenAPIServer\Model\EacVerificationStatusType::ACCEPTED
        );
    }
    public function testParseParamsEnumFeedContentErrorType(): void
    {
        $value = 'PARSE_ERROR';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\FeedContentErrorType'),
            \OpenAPIServer\Model\FeedContentErrorType::PARSE_ERROR
        );
    }
    public function testParseParamsEnumFeedDownloadErrorType(): void
    {
        $value = 'DOWNLOAD_ERROR';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\FeedDownloadErrorType'),
            \OpenAPIServer\Model\FeedDownloadErrorType::ERROR
        );
    }
    public function testParseParamsEnumFeedIndexLogsErrorType(): void
    {
        $value = 'DOWNLOAD_ERROR';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\FeedIndexLogsErrorType'),
            \OpenAPIServer\Model\FeedIndexLogsErrorType::DOWNLOAD_ERROR
        );
    }
    public function testParseParamsEnumFeedIndexLogsIndexType(): void
    {
        $value = 'DIFF';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\FeedIndexLogsIndexType'),
            \OpenAPIServer\Model\FeedIndexLogsIndexType::DIFF
        );
    }
    public function testParseParamsEnumFeedIndexLogsStatusType(): void
    {
        $value = 'ERROR';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\FeedIndexLogsStatusType'),
            \OpenAPIServer\Model\FeedIndexLogsStatusType::ERROR
        );
    }
    public function testParseParamsEnumFeedStatusType(): void
    {
        $value = 'ERROR';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\FeedStatusType'),
            \OpenAPIServer\Model\FeedStatusType::ERROR
        );
    }
    public function testParseParamsEnumFeedbackCommentAuthorType(): void
    {
        $value = 'USER';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\FeedbackCommentAuthorType'),
            \OpenAPIServer\Model\FeedbackCommentAuthorType::USER
        );
    }
    public function testParseParamsEnumFeedbackDeliveryType(): void
    {
        $value = 'DELIVERY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\FeedbackDeliveryType'),
            \OpenAPIServer\Model\FeedbackDeliveryType::DELIVERY
        );
    }
    public function testParseParamsEnumFeedbackReactionStatusType(): void
    {
        $value = 'ALL';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\FeedbackReactionStatusType'),
            \OpenAPIServer\Model\FeedbackReactionStatusType::ALL
        );
    }
    public function testParseParamsEnumFeedbackStateType(): void
    {
        $value = 'LAST';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\FeedbackStateType'),
            \OpenAPIServer\Model\FeedbackStateType::LAST
        );
    }
    public function testParseParamsEnumFieldStateType(): void
    {
        $value = 'SPECIFIED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\FieldStateType'),
            \OpenAPIServer\Model\FieldStateType::SPECIFIED
        );
    }
    public function testParseParamsEnumGoodsFeedbackCommentAuthorType(): void
    {
        $value = 'USER';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\GoodsFeedbackCommentAuthorType'),
            \OpenAPIServer\Model\GoodsFeedbackCommentAuthorType::USER
        );
    }
    public function testParseParamsEnumGoodsFeedbackCommentStatusType(): void
    {
        $value = 'PUBLISHED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\GoodsFeedbackCommentStatusType'),
            \OpenAPIServer\Model\GoodsFeedbackCommentStatusType::PUBLISHED
        );
    }
    public function testParseParamsEnumLanguageType(): void
    {
        $value = 'RU';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\LanguageType'),
            \OpenAPIServer\Model\LanguageType::RU
        );
    }
    public function testParseParamsEnumLicenseCheckStatusType(): void
    {
        $value = 'NEW';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\LicenseCheckStatusType'),
            \OpenAPIServer\Model\LicenseCheckStatusType::_NEW
        );
    }
    public function testParseParamsEnumLicenseType(): void
    {
        $value = 'ALCOHOL';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\LicenseType'),
            \OpenAPIServer\Model\LicenseType::ALCOHOL
        );
    }
    public function testParseParamsEnumLogisticPointType(): void
    {
        $value = 'WAREHOUSE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\LogisticPointType'),
            \OpenAPIServer\Model\LogisticPointType::WAREHOUSE
        );
    }
    public function testParseParamsEnumMechanicsType(): void
    {
        $value = 'DIRECT_DISCOUNT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\MechanicsType'),
            \OpenAPIServer\Model\MechanicsType::DIRECT_DISCOUNT
        );
    }
    public function testParseParamsEnumOfferAvailabilityStatusType(): void
    {
        $value = 'ACTIVE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferAvailabilityStatusType'),
            \OpenAPIServer\Model\OfferAvailabilityStatusType::ACTIVE
        );
    }
    public function testParseParamsEnumOfferCampaignStatusType(): void
    {
        $value = 'PUBLISHED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferCampaignStatusType'),
            \OpenAPIServer\Model\OfferCampaignStatusType::PUBLISHED
        );
    }
    public function testParseParamsEnumOfferCardRecommendationType(): void
    {
        $value = 'HAS_VIDEO';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferCardRecommendationType'),
            \OpenAPIServer\Model\OfferCardRecommendationType::HAS_VIDEO
        );
    }
    public function testParseParamsEnumOfferCardStatusType(): void
    {
        $value = 'HAS_CARD_CAN_NOT_UPDATE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferCardStatusType'),
            \OpenAPIServer\Model\OfferCardStatusType::HAS_CARD_CAN_NOT_UPDATE
        );
    }
    public function testParseParamsEnumOfferConditionQualityType(): void
    {
        $value = 'PERFECT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferConditionQualityType'),
            \OpenAPIServer\Model\OfferConditionQualityType::PERFECT
        );
    }
    public function testParseParamsEnumOfferConditionType(): void
    {
        $value = 'PREOWNED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferConditionType'),
            \OpenAPIServer\Model\OfferConditionType::PREOWNED
        );
    }
    public function testParseParamsEnumOfferContentErrorType(): void
    {
        $value = 'OFFER_NOT_FOUND';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferContentErrorType'),
            \OpenAPIServer\Model\OfferContentErrorType::OFFER_NOT_FOUND
        );
    }
    public function testParseParamsEnumOfferMappingErrorType(): void
    {
        $value = 'UNKNOWN_CATEGORY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferMappingErrorType'),
            \OpenAPIServer\Model\OfferMappingErrorType::UNKNOWN_CATEGORY
        );
    }
    public function testParseParamsEnumOfferMappingKindType(): void
    {
        $value = 'ACTIVE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferMappingKindType'),
            \OpenAPIServer\Model\OfferMappingKindType::ACTIVE
        );
    }
    public function testParseParamsEnumOfferProcessingNoteType(): void
    {
        $value = 'ASSORTMENT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferProcessingNoteType'),
            \OpenAPIServer\Model\OfferProcessingNoteType::ASSORTMENT
        );
    }
    public function testParseParamsEnumOfferProcessingStatusType(): void
    {
        $value = 'UNKNOWN';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferProcessingStatusType'),
            \OpenAPIServer\Model\OfferProcessingStatusType::UNKNOWN
        );
    }
    public function testParseParamsEnumOfferSellingProgramStatusType(): void
    {
        $value = 'FINE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferSellingProgramStatusType'),
            \OpenAPIServer\Model\OfferSellingProgramStatusType::FINE
        );
    }
    public function testParseParamsEnumOfferType(): void
    {
        $value = 'DEFAULT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OfferType'),
            \OpenAPIServer\Model\OfferType::_DEFAULT
        );
    }
    public function testParseParamsEnumOrderBuyerType(): void
    {
        $value = 'PERSON';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderBuyerType'),
            \OpenAPIServer\Model\OrderBuyerType::PERSON
        );
    }
    public function testParseParamsEnumOrderCancellationReasonType(): void
    {
        $value = 'ORDER_DELIVERED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderCancellationReasonType'),
            \OpenAPIServer\Model\OrderCancellationReasonType::DELIVERED
        );
    }
    public function testParseParamsEnumOrderDeliveryDateReasonType(): void
    {
        $value = 'USER_MOVED_DELIVERY_DATES';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderDeliveryDateReasonType'),
            \OpenAPIServer\Model\OrderDeliveryDateReasonType::USER_MOVED_DELIVERY_DATES
        );
    }
    public function testParseParamsEnumOrderDeliveryDispatchType(): void
    {
        $value = 'UNKNOWN';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderDeliveryDispatchType'),
            \OpenAPIServer\Model\OrderDeliveryDispatchType::UNKNOWN
        );
    }
    public function testParseParamsEnumOrderDeliveryEacType(): void
    {
        $value = 'MERCHANT_TO_COURIER';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderDeliveryEacType'),
            \OpenAPIServer\Model\OrderDeliveryEacType::MERCHANT_TO_COURIER
        );
    }
    public function testParseParamsEnumOrderDeliveryPartnerType(): void
    {
        $value = 'SHOP';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderDeliveryPartnerType'),
            \OpenAPIServer\Model\OrderDeliveryPartnerType::SHOP
        );
    }
    public function testParseParamsEnumOrderDeliveryType(): void
    {
        $value = 'DELIVERY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderDeliveryType'),
            \OpenAPIServer\Model\OrderDeliveryType::DELIVERY
        );
    }
    public function testParseParamsEnumOrderDocumentStatusType(): void
    {
        $value = 'READY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderDocumentStatusType'),
            \OpenAPIServer\Model\OrderDocumentStatusType::READY
        );
    }
    public function testParseParamsEnumOrderItemInstanceType(): void
    {
        $value = 'CIS';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderItemInstanceType'),
            \OpenAPIServer\Model\OrderItemInstanceType::CIS
        );
    }
    public function testParseParamsEnumOrderItemStatusType(): void
    {
        $value = 'REJECTED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderItemStatusType'),
            \OpenAPIServer\Model\OrderItemStatusType::REJECTED
        );
    }
    public function testParseParamsEnumOrderItemSubsidyType(): void
    {
        $value = 'YANDEX_CASHBACK';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderItemSubsidyType'),
            \OpenAPIServer\Model\OrderItemSubsidyType::YANDEX_CASHBACK
        );
    }
    public function testParseParamsEnumOrderItemsModificationRequestReasonType(): void
    {
        $value = 'PARTNER_REQUESTED_REMOVE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderItemsModificationRequestReasonType'),
            \OpenAPIServer\Model\OrderItemsModificationRequestReasonType::PARTNER_REQUESTED_REMOVE
        );
    }
    public function testParseParamsEnumOrderLiftType(): void
    {
        $value = 'NOT_NEEDED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderLiftType'),
            \OpenAPIServer\Model\OrderLiftType::NOT_NEEDED
        );
    }
    public function testParseParamsEnumOrderPaymentMethodType(): void
    {
        $value = 'CASH_ON_DELIVERY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderPaymentMethodType'),
            \OpenAPIServer\Model\OrderPaymentMethodType::CASH_ON_DELIVERY
        );
    }
    public function testParseParamsEnumOrderPaymentType(): void
    {
        $value = 'PREPAID';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderPaymentType'),
            \OpenAPIServer\Model\OrderPaymentType::PREPAID
        );
    }
    public function testParseParamsEnumOrderPromoType(): void
    {
        $value = 'DIRECT_DISCOUNT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderPromoType'),
            \OpenAPIServer\Model\OrderPromoType::DIRECT_DISCOUNT
        );
    }
    public function testParseParamsEnumOrderStatsStatusType(): void
    {
        $value = 'CANCELLED_BEFORE_PROCESSING';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderStatsStatusType'),
            \OpenAPIServer\Model\OrderStatsStatusType::CANCELLED_BEFORE_PROCESSING
        );
    }
    public function testParseParamsEnumOrderStatusType(): void
    {
        $value = 'PLACING';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderStatusType'),
            \OpenAPIServer\Model\OrderStatusType::PLACING
        );
    }
    public function testParseParamsEnumOrderSubsidyType(): void
    {
        $value = 'YANDEX_CASHBACK';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderSubsidyType'),
            \OpenAPIServer\Model\OrderSubsidyType::YANDEX_CASHBACK
        );
    }
    public function testParseParamsEnumOrderSubstatusType(): void
    {
        $value = 'RESERVATION_EXPIRED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderSubstatusType'),
            \OpenAPIServer\Model\OrderSubstatusType::RESERVATION_EXPIRED
        );
    }
    public function testParseParamsEnumOrderTaxSystemType(): void
    {
        $value = 'OSN';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderTaxSystemType'),
            \OpenAPIServer\Model\OrderTaxSystemType::OSN
        );
    }
    public function testParseParamsEnumOrderUpdateStatusType(): void
    {
        $value = 'OK';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderUpdateStatusType'),
            \OpenAPIServer\Model\OrderUpdateStatusType::OK
        );
    }
    public function testParseParamsEnumOrderVatType(): void
    {
        $value = 'NO_VAT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrderVatType'),
            \OpenAPIServer\Model\OrderVatType::NO_VAT
        );
    }
    public function testParseParamsEnumOrdersStatsCommissionType(): void
    {
        $value = 'FEE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrdersStatsCommissionType'),
            \OpenAPIServer\Model\OrdersStatsCommissionType::FEE
        );
    }
    public function testParseParamsEnumOrdersStatsItemStatusType(): void
    {
        $value = 'REJECTED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrdersStatsItemStatusType'),
            \OpenAPIServer\Model\OrdersStatsItemStatusType::REJECTED
        );
    }
    public function testParseParamsEnumOrdersStatsOrderPaymentType(): void
    {
        $value = 'CREDIT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrdersStatsOrderPaymentType'),
            \OpenAPIServer\Model\OrdersStatsOrderPaymentType::CREDIT
        );
    }
    public function testParseParamsEnumOrdersStatsPaymentSourceType(): void
    {
        $value = 'BUYER';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrdersStatsPaymentSourceType'),
            \OpenAPIServer\Model\OrdersStatsPaymentSourceType::BUYER
        );
    }
    public function testParseParamsEnumOrdersStatsPaymentType(): void
    {
        $value = 'PAYMENT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrdersStatsPaymentType'),
            \OpenAPIServer\Model\OrdersStatsPaymentType::PAYMENT
        );
    }
    public function testParseParamsEnumOrdersStatsPriceType(): void
    {
        $value = 'BUYER';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrdersStatsPriceType'),
            \OpenAPIServer\Model\OrdersStatsPriceType::BUYER
        );
    }
    public function testParseParamsEnumOrdersStatsStockType(): void
    {
        $value = 'FIT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OrdersStatsStockType'),
            \OpenAPIServer\Model\OrdersStatsStockType::FIT
        );
    }
    public function testParseParamsEnumOutletStatusType(): void
    {
        $value = 'AT_MODERATION';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OutletStatusType'),
            \OpenAPIServer\Model\OutletStatusType::AT_MODERATION
        );
    }
    public function testParseParamsEnumOutletType(): void
    {
        $value = 'DEPOT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OutletType'),
            \OpenAPIServer\Model\OutletType::DEPOT
        );
    }
    public function testParseParamsEnumOutletVisibilityType(): void
    {
        $value = 'HIDDEN';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\OutletVisibilityType'),
            \OpenAPIServer\Model\OutletVisibilityType::HIDDEN
        );
    }
    public function testParseParamsEnumPageFormatType(): void
    {
        $value = 'A7';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\PageFormatType'),
            \OpenAPIServer\Model\PageFormatType::A7
        );
    }
    public function testParseParamsEnumParameterType(): void
    {
        $value = 'TEXT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ParameterType'),
            \OpenAPIServer\Model\ParameterType::TEXT
        );
    }
    public function testParseParamsEnumPaymentFrequencyType(): void
    {
        $value = 'DAILY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\PaymentFrequencyType'),
            \OpenAPIServer\Model\PaymentFrequencyType::DAILY
        );
    }
    public function testParseParamsEnumPlacementType(): void
    {
        $value = 'FBS';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\PlacementType'),
            \OpenAPIServer\Model\PlacementType::FBS
        );
    }
    public function testParseParamsEnumPriceCompetitivenessType(): void
    {
        $value = 'OPTIMAL';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\PriceCompetitivenessType'),
            \OpenAPIServer\Model\PriceCompetitivenessType::OPTIMAL
        );
    }
    public function testParseParamsEnumPriceQuarantineVerdictParamNameType(): void
    {
        $value = 'CURRENT_PRICE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\PriceQuarantineVerdictParamNameType'),
            \OpenAPIServer\Model\PriceQuarantineVerdictParamNameType::CURRENT_PRICE
        );
    }
    public function testParseParamsEnumPriceQuarantineVerdictType(): void
    {
        $value = 'PRICE_CHANGE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\PriceQuarantineVerdictType'),
            \OpenAPIServer\Model\PriceQuarantineVerdictType::PRICE_CHANGE
        );
    }
    public function testParseParamsEnumPriceSuggestType(): void
    {
        $value = 'BUYBOX';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\PriceSuggestType'),
            \OpenAPIServer\Model\PriceSuggestType::BUYBOX
        );
    }
    public function testParseParamsEnumPromoOfferParticipationStatusFilterType(): void
    {
        $value = 'MANUALLY_ADDED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\PromoOfferParticipationStatusFilterType'),
            \OpenAPIServer\Model\PromoOfferParticipationStatusFilterType::MANUALLY_ADDED
        );
    }
    public function testParseParamsEnumPromoOfferParticipationStatusType(): void
    {
        $value = 'AUTO';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\PromoOfferParticipationStatusType'),
            \OpenAPIServer\Model\PromoOfferParticipationStatusType::AUTO
        );
    }
    public function testParseParamsEnumPromoOfferUpdateWarningCodeType(): void
    {
        $value = 'DEEP_DISCOUNT_OFFER';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\PromoOfferUpdateWarningCodeType'),
            \OpenAPIServer\Model\PromoOfferUpdateWarningCodeType::DEEP_DISCOUNT_OFFER
        );
    }
    public function testParseParamsEnumPromoParticipationType(): void
    {
        $value = 'PARTICIPATING_NOW';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\PromoParticipationType'),
            \OpenAPIServer\Model\PromoParticipationType::PARTICIPATING_NOW
        );
    }
    public function testParseParamsEnumQualityRatingComponentType(): void
    {
        $value = 'DBS_CANCELLATION_RATE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\QualityRatingComponentType'),
            \OpenAPIServer\Model\QualityRatingComponentType::DBS_CANCELLATION_RATE
        );
    }
    public function testParseParamsEnumRecipientType(): void
    {
        $value = 'SHOP';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\RecipientType'),
            \OpenAPIServer\Model\RecipientType::SHOP
        );
    }
    public function testParseParamsEnumRefundStatusType(): void
    {
        $value = 'STARTED_BY_USER';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\RefundStatusType'),
            \OpenAPIServer\Model\RefundStatusType::STARTED_BY_USER
        );
    }
    public function testParseParamsEnumRegionType(): void
    {
        $value = 'OTHER';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\RegionType'),
            \OpenAPIServer\Model\RegionType::OTHER
        );
    }
    public function testParseParamsEnumRejectedPromoOfferDeleteReasonType(): void
    {
        $value = 'OFFER_DOES_NOT_EXIST';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\RejectedPromoOfferDeleteReasonType'),
            \OpenAPIServer\Model\RejectedPromoOfferDeleteReasonType::OFFER_DOES_NOT_EXIST
        );
    }
    public function testParseParamsEnumRejectedPromoOfferUpdateReasonType(): void
    {
        $value = 'OFFER_DOES_NOT_EXIST';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\RejectedPromoOfferUpdateReasonType'),
            \OpenAPIServer\Model\RejectedPromoOfferUpdateReasonType::OFFER_DOES_NOT_EXIST
        );
    }
    public function testParseParamsEnumReportFormatType(): void
    {
        $value = 'FILE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ReportFormatType'),
            \OpenAPIServer\Model\ReportFormatType::FILE
        );
    }
    public function testParseParamsEnumReportStatusType(): void
    {
        $value = 'PENDING';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ReportStatusType'),
            \OpenAPIServer\Model\ReportStatusType::PENDING
        );
    }
    public function testParseParamsEnumReportSubStatusType(): void
    {
        $value = 'NO_DATA';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ReportSubStatusType'),
            \OpenAPIServer\Model\ReportSubStatusType::NO_DATA
        );
    }
    public function testParseParamsEnumReturnDecisionReasonType(): void
    {
        $value = 'BAD_QUALITY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ReturnDecisionReasonType'),
            \OpenAPIServer\Model\ReturnDecisionReasonType::BAD_QUALITY
        );
    }
    public function testParseParamsEnumReturnDecisionSubreasonType(): void
    {
        $value = 'USER_DID_NOT_LIKE';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ReturnDecisionSubreasonType'),
            \OpenAPIServer\Model\ReturnDecisionSubreasonType::USER_DID_NOT_LIKE
        );
    }
    public function testParseParamsEnumReturnDecisionType(): void
    {
        $value = 'REFUND_MONEY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ReturnDecisionType'),
            \OpenAPIServer\Model\ReturnDecisionType::REFUND_MONEY
        );
    }
    public function testParseParamsEnumReturnInstanceStatusType(): void
    {
        $value = 'CREATED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ReturnInstanceStatusType'),
            \OpenAPIServer\Model\ReturnInstanceStatusType::CREATED
        );
    }
    public function testParseParamsEnumReturnInstanceStockType(): void
    {
        $value = 'FIT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ReturnInstanceStockType'),
            \OpenAPIServer\Model\ReturnInstanceStockType::FIT
        );
    }
    public function testParseParamsEnumReturnRequestDecisionType(): void
    {
        $value = 'REFUND_MONEY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ReturnRequestDecisionType'),
            \OpenAPIServer\Model\ReturnRequestDecisionType::REFUND_MONEY
        );
    }
    public function testParseParamsEnumReturnShipmentStatusType(): void
    {
        $value = 'CREATED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ReturnShipmentStatusType'),
            \OpenAPIServer\Model\ReturnShipmentStatusType::CREATED
        );
    }
    public function testParseParamsEnumReturnType(): void
    {
        $value = 'UNREDEEMED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ReturnType'),
            \OpenAPIServer\Model\ReturnType::UNREDEEMED
        );
    }
    public function testParseParamsEnumSellingProgramType(): void
    {
        $value = 'FBY';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\SellingProgramType'),
            \OpenAPIServer\Model\SellingProgramType::FBY
        );
    }
    public function testParseParamsEnumShelfsStatisticsAttributionType(): void
    {
        $value = 'CLICKS';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ShelfsStatisticsAttributionType'),
            \OpenAPIServer\Model\ShelfsStatisticsAttributionType::CLICKS
        );
    }
    public function testParseParamsEnumShipmentActionType(): void
    {
        $value = 'CONFIRM';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ShipmentActionType'),
            \OpenAPIServer\Model\ShipmentActionType::CONFIRM
        );
    }
    public function testParseParamsEnumShipmentPalletLabelPageFormatType(): void
    {
        $value = 'A4';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ShipmentPalletLabelPageFormatType'),
            \OpenAPIServer\Model\ShipmentPalletLabelPageFormatType::A4
        );
    }
    public function testParseParamsEnumShipmentStatusType(): void
    {
        $value = 'OUTBOUND_CREATED';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ShipmentStatusType'),
            \OpenAPIServer\Model\ShipmentStatusType::OUTBOUND_CREATED
        );
    }
    public function testParseParamsEnumShipmentType(): void
    {
        $value = 'IMPORT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ShipmentType'),
            \OpenAPIServer\Model\ShipmentType::IMPORT
        );
    }
    public function testParseParamsEnumShowsSalesGroupingType(): void
    {
        $value = 'CATEGORIES';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\ShowsSalesGroupingType'),
            \OpenAPIServer\Model\ShowsSalesGroupingType::CATEGORIES
        );
    }
    public function testParseParamsEnumSortOrderType(): void
    {
        $value = 'ASC';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\SortOrderType'),
            \OpenAPIServer\Model\SortOrderType::ASC
        );
    }
    public function testParseParamsEnumTariffType(): void
    {
        $value = 'AGENCY_COMMISSION';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\TariffType'),
            \OpenAPIServer\Model\TariffType::AGENCY_COMMISSION
        );
    }
    public function testParseParamsEnumTimeUnitType(): void
    {
        $value = 'HOUR';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\TimeUnitType'),
            \OpenAPIServer\Model\TimeUnitType::HOUR
        );
    }
    public function testParseParamsEnumTurnoverType(): void
    {
        $value = 'LOW';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\TurnoverType'),
            \OpenAPIServer\Model\TurnoverType::LOW
        );
    }
    public function testParseParamsEnumWarehouseStockType(): void
    {
        $value = 'FIT';
        $this->assertEquals(
            parseParam($value, '\\OpenAPIServer\\Model\\WarehouseStockType'),
            \OpenAPIServer\Model\WarehouseStockType::FIT
        );
    }
}
