# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class DeletePromoOffersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, promo_id: str=None, delete_all_offers: bool=None, offer_ids: List[str]=None):
        """DeletePromoOffersRequest - a model defined in OpenAPI

        :param promo_id: The promo_id of this DeletePromoOffersRequest.
        :param delete_all_offers: The delete_all_offers of this DeletePromoOffersRequest.
        :param offer_ids: The offer_ids of this DeletePromoOffersRequest.
        """
        self.openapi_types = {
            'promo_id': str,
            'delete_all_offers': bool,
            'offer_ids': List[str]
        }

        self.attribute_map = {
            'promo_id': 'promoId',
            'delete_all_offers': 'deleteAllOffers',
            'offer_ids': 'offerIds'
        }

        self._promo_id = promo_id
        self._delete_all_offers = delete_all_offers
        self._offer_ids = offer_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeletePromoOffersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeletePromoOffersRequest of this DeletePromoOffersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def promo_id(self):
        """Gets the promo_id of this DeletePromoOffersRequest.

        Идентификатор акции.

        :return: The promo_id of this DeletePromoOffersRequest.
        :rtype: str
        """
        return self._promo_id

    @promo_id.setter
    def promo_id(self, promo_id):
        """Sets the promo_id of this DeletePromoOffersRequest.

        Идентификатор акции.

        :param promo_id: The promo_id of this DeletePromoOffersRequest.
        :type promo_id: str
        """
        if promo_id is None:
            raise ValueError("Invalid value for `promo_id`, must not be `None`")

        self._promo_id = promo_id

    @property
    def delete_all_offers(self):
        """Gets the delete_all_offers of this DeletePromoOffersRequest.

        Чтобы убрать все товары из акции и больше не участвовать в ней, передайте значение `true` и не передавайте параметр `offerIds`.

        :return: The delete_all_offers of this DeletePromoOffersRequest.
        :rtype: bool
        """
        return self._delete_all_offers

    @delete_all_offers.setter
    def delete_all_offers(self, delete_all_offers):
        """Sets the delete_all_offers of this DeletePromoOffersRequest.

        Чтобы убрать все товары из акции и больше не участвовать в ней, передайте значение `true` и не передавайте параметр `offerIds`.

        :param delete_all_offers: The delete_all_offers of this DeletePromoOffersRequest.
        :type delete_all_offers: bool
        """

        self._delete_all_offers = delete_all_offers

    @property
    def offer_ids(self):
        """Gets the offer_ids of this DeletePromoOffersRequest.

        Товары, которые нужно убрать из акции.

        :return: The offer_ids of this DeletePromoOffersRequest.
        :rtype: List[str]
        """
        return self._offer_ids

    @offer_ids.setter
    def offer_ids(self, offer_ids):
        """Sets the offer_ids of this DeletePromoOffersRequest.

        Товары, которые нужно убрать из акции.

        :param offer_ids: The offer_ids of this DeletePromoOffersRequest.
        :type offer_ids: List[str]
        """
        if offer_ids is not None and len(offer_ids) > 500:
            raise ValueError("Invalid value for `offer_ids`, number of items must be less than or equal to `500`")
        if offer_ids is not None and len(offer_ids) < 1:
            raise ValueError("Invalid value for `offer_ids`, number of items must be greater than or equal to `1`")

        self._offer_ids = offer_ids
