# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.chat_status_type import ChatStatusType
from ympa_python_aiohttp_server.models.chat_type import ChatType
from ympa_python_aiohttp_server import util


class GetChatInfoDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_id: int=None, order_id: int=None, type: ChatType=None, status: ChatStatusType=None, created_at: datetime=None, updated_at: datetime=None):
        """GetChatInfoDTO - a model defined in OpenAPI

        :param chat_id: The chat_id of this GetChatInfoDTO.
        :param order_id: The order_id of this GetChatInfoDTO.
        :param type: The type of this GetChatInfoDTO.
        :param status: The status of this GetChatInfoDTO.
        :param created_at: The created_at of this GetChatInfoDTO.
        :param updated_at: The updated_at of this GetChatInfoDTO.
        """
        self.openapi_types = {
            'chat_id': int,
            'order_id': int,
            'type': ChatType,
            'status': ChatStatusType,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'chat_id': 'chatId',
            'order_id': 'orderId',
            'type': 'type',
            'status': 'status',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._chat_id = chat_id
        self._order_id = order_id
        self._type = type
        self._status = status
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetChatInfoDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetChatInfoDTO of this GetChatInfoDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_id(self):
        """Gets the chat_id of this GetChatInfoDTO.

        Идентификатор чата.

        :return: The chat_id of this GetChatInfoDTO.
        :rtype: int
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this GetChatInfoDTO.

        Идентификатор чата.

        :param chat_id: The chat_id of this GetChatInfoDTO.
        :type chat_id: int
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def order_id(self):
        """Gets the order_id of this GetChatInfoDTO.

        Идентификатор заказа.

        :return: The order_id of this GetChatInfoDTO.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this GetChatInfoDTO.

        Идентификатор заказа.

        :param order_id: The order_id of this GetChatInfoDTO.
        :type order_id: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def type(self):
        """Gets the type of this GetChatInfoDTO.


        :return: The type of this GetChatInfoDTO.
        :rtype: ChatType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetChatInfoDTO.


        :param type: The type of this GetChatInfoDTO.
        :type type: ChatType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def status(self):
        """Gets the status of this GetChatInfoDTO.


        :return: The status of this GetChatInfoDTO.
        :rtype: ChatStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetChatInfoDTO.


        :param status: The status of this GetChatInfoDTO.
        :type status: ChatStatusType
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this GetChatInfoDTO.

        Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 

        :return: The created_at of this GetChatInfoDTO.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetChatInfoDTO.

        Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 

        :param created_at: The created_at of this GetChatInfoDTO.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GetChatInfoDTO.

        Дата и время последнего сообщения в чате.

        :return: The updated_at of this GetChatInfoDTO.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetChatInfoDTO.

        Дата и время последнего сообщения в чате.

        :param updated_at: The updated_at of this GetChatInfoDTO.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
