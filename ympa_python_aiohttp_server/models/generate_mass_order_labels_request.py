# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class GenerateMassOrderLabelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_id: int=None, order_ids: list[int]=None):
        """GenerateMassOrderLabelsRequest - a model defined in OpenAPI

        :param business_id: The business_id of this GenerateMassOrderLabelsRequest.
        :param order_ids: The order_ids of this GenerateMassOrderLabelsRequest.
        """
        self.openapi_types = {
            'business_id': int,
            'order_ids': list[int]
        }

        self.attribute_map = {
            'business_id': 'businessId',
            'order_ids': 'orderIds'
        }

        self._business_id = business_id
        self._order_ids = order_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateMassOrderLabelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateMassOrderLabelsRequest of this GenerateMassOrderLabelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_id(self):
        """Gets the business_id of this GenerateMassOrderLabelsRequest.

        Идентификатор кабинета.

        :return: The business_id of this GenerateMassOrderLabelsRequest.
        :rtype: int
        """
        return self._business_id

    @business_id.setter
    def business_id(self, business_id):
        """Sets the business_id of this GenerateMassOrderLabelsRequest.

        Идентификатор кабинета.

        :param business_id: The business_id of this GenerateMassOrderLabelsRequest.
        :type business_id: int
        """
        if business_id is None:
            raise ValueError("Invalid value for `business_id`, must not be `None`")

        self._business_id = business_id

    @property
    def order_ids(self):
        """Gets the order_ids of this GenerateMassOrderLabelsRequest.

        Список идентификаторов заказов.

        :return: The order_ids of this GenerateMassOrderLabelsRequest.
        :rtype: list[int]
        """
        return self._order_ids

    @order_ids.setter
    def order_ids(self, order_ids):
        """Sets the order_ids of this GenerateMassOrderLabelsRequest.

        Список идентификаторов заказов.

        :param order_ids: The order_ids of this GenerateMassOrderLabelsRequest.
        :type order_ids: list[int]
        """
        if order_ids is None:
            raise ValueError("Invalid value for `order_ids`, must not be `None`")
        if order_ids is not None and len(order_ids) > 1000:
            raise ValueError("Invalid value for `order_ids`, number of items must be less than or equal to `1000`")
        if order_ids is not None and len(order_ids) < 1:
            raise ValueError("Invalid value for `order_ids`, number of items must be greater than or equal to `1`")

        self._order_ids = order_ids
