# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.quality_rating_dto import QualityRatingDTO
from ympa_python_aiohttp_server import util


class CampaignQualityRatingDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_id: int=None, ratings: List[QualityRatingDTO]=None):
        """CampaignQualityRatingDTO - a model defined in OpenAPI

        :param campaign_id: The campaign_id of this CampaignQualityRatingDTO.
        :param ratings: The ratings of this CampaignQualityRatingDTO.
        """
        self.openapi_types = {
            'campaign_id': int,
            'ratings': List[QualityRatingDTO]
        }

        self.attribute_map = {
            'campaign_id': 'campaignId',
            'ratings': 'ratings'
        }

        self._campaign_id = campaign_id
        self._ratings = ratings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignQualityRatingDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CampaignQualityRatingDTO of this CampaignQualityRatingDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_id(self):
        """Gets the campaign_id of this CampaignQualityRatingDTO.

        Идентификатор магазина.

        :return: The campaign_id of this CampaignQualityRatingDTO.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this CampaignQualityRatingDTO.

        Идентификатор магазина.

        :param campaign_id: The campaign_id of this CampaignQualityRatingDTO.
        :type campaign_id: int
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")

        self._campaign_id = campaign_id

    @property
    def ratings(self):
        """Gets the ratings of this CampaignQualityRatingDTO.

        Список значений индекса качества.

        :return: The ratings of this CampaignQualityRatingDTO.
        :rtype: List[QualityRatingDTO]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this CampaignQualityRatingDTO.

        Список значений индекса качества.

        :param ratings: The ratings of this CampaignQualityRatingDTO.
        :type ratings: List[QualityRatingDTO]
        """
        if ratings is None:
            raise ValueError("Invalid value for `ratings`, must not be `None`")

        self._ratings = ratings
