# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class GetCategoriesMaxSaleQuantumRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, market_category_ids: list[int]=None):
        """GetCategoriesMaxSaleQuantumRequest - a model defined in OpenAPI

        :param market_category_ids: The market_category_ids of this GetCategoriesMaxSaleQuantumRequest.
        """
        self.openapi_types = {
            'market_category_ids': list[int]
        }

        self.attribute_map = {
            'market_category_ids': 'marketCategoryIds'
        }

        self._market_category_ids = market_category_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCategoriesMaxSaleQuantumRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCategoriesMaxSaleQuantumRequest of this GetCategoriesMaxSaleQuantumRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def market_category_ids(self):
        """Gets the market_category_ids of this GetCategoriesMaxSaleQuantumRequest.

        Идентификаторы листовых категории на Маркете — тех, у которых нет дочерних категорий.

        :return: The market_category_ids of this GetCategoriesMaxSaleQuantumRequest.
        :rtype: list[int]
        """
        return self._market_category_ids

    @market_category_ids.setter
    def market_category_ids(self, market_category_ids):
        """Sets the market_category_ids of this GetCategoriesMaxSaleQuantumRequest.

        Идентификаторы листовых категории на Маркете — тех, у которых нет дочерних категорий.

        :param market_category_ids: The market_category_ids of this GetCategoriesMaxSaleQuantumRequest.
        :type market_category_ids: list[int]
        """
        if market_category_ids is None:
            raise ValueError("Invalid value for `market_category_ids`, must not be `None`")
        if market_category_ids is not None and len(market_category_ids) > 1500:
            raise ValueError("Invalid value for `market_category_ids`, number of items must be less than or equal to `1500`")
        if market_category_ids is not None and len(market_category_ids) < 1:
            raise ValueError("Invalid value for `market_category_ids`, number of items must be greater than or equal to `1`")

        self._market_category_ids = market_category_ids
