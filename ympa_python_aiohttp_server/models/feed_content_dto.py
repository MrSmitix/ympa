# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.feed_content_error_dto import FeedContentErrorDTO
from ympa_python_aiohttp_server.models.feed_status_type import FeedStatusType
from ympa_python_aiohttp_server import util


class FeedContentDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rejected_offers_count: int=None, status: FeedStatusType=None, total_offers_count: int=None, error: FeedContentErrorDTO=None):
        """FeedContentDTO - a model defined in OpenAPI

        :param rejected_offers_count: The rejected_offers_count of this FeedContentDTO.
        :param status: The status of this FeedContentDTO.
        :param total_offers_count: The total_offers_count of this FeedContentDTO.
        :param error: The error of this FeedContentDTO.
        """
        self.openapi_types = {
            'rejected_offers_count': int,
            'status': FeedStatusType,
            'total_offers_count': int,
            'error': FeedContentErrorDTO
        }

        self.attribute_map = {
            'rejected_offers_count': 'rejectedOffersCount',
            'status': 'status',
            'total_offers_count': 'totalOffersCount',
            'error': 'error'
        }

        self._rejected_offers_count = rejected_offers_count
        self._status = status
        self._total_offers_count = total_offers_count
        self._error = error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeedContentDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeedContentDTO of this FeedContentDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rejected_offers_count(self):
        """Gets the rejected_offers_count of this FeedContentDTO.

        Количество предложений, в которых найдены ошибки на этапе загрузки прайс-листа. Выводится, если параметр `content status=OK`. 

        :return: The rejected_offers_count of this FeedContentDTO.
        :rtype: int
        """
        return self._rejected_offers_count

    @rejected_offers_count.setter
    def rejected_offers_count(self, rejected_offers_count):
        """Sets the rejected_offers_count of this FeedContentDTO.

        Количество предложений, в которых найдены ошибки на этапе загрузки прайс-листа. Выводится, если параметр `content status=OK`. 

        :param rejected_offers_count: The rejected_offers_count of this FeedContentDTO.
        :type rejected_offers_count: int
        """

        self._rejected_offers_count = rejected_offers_count

    @property
    def status(self):
        """Gets the status of this FeedContentDTO.


        :return: The status of this FeedContentDTO.
        :rtype: FeedStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FeedContentDTO.


        :param status: The status of this FeedContentDTO.
        :type status: FeedStatusType
        """

        self._status = status

    @property
    def total_offers_count(self):
        """Gets the total_offers_count of this FeedContentDTO.

        Количество предложений в прайс-листе. Выводится, если параметр `content status=OK`. 

        :return: The total_offers_count of this FeedContentDTO.
        :rtype: int
        """
        return self._total_offers_count

    @total_offers_count.setter
    def total_offers_count(self, total_offers_count):
        """Sets the total_offers_count of this FeedContentDTO.

        Количество предложений в прайс-листе. Выводится, если параметр `content status=OK`. 

        :param total_offers_count: The total_offers_count of this FeedContentDTO.
        :type total_offers_count: int
        """

        self._total_offers_count = total_offers_count

    @property
    def error(self):
        """Gets the error of this FeedContentDTO.


        :return: The error of this FeedContentDTO.
        :rtype: FeedContentErrorDTO
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this FeedContentDTO.


        :param error: The error of this FeedContentDTO.
        :type error: FeedContentErrorDTO
        """

        self._error = error
