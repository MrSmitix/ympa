# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.payment_frequency_type import PaymentFrequencyType
from ympa_python_aiohttp_server.models.selling_program_type import SellingProgramType
from ympa_python_aiohttp_server import util


class CalculateTariffsParametersDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_id: int=None, selling_program: SellingProgramType=None, frequency: PaymentFrequencyType=None):
        """CalculateTariffsParametersDTO - a model defined in OpenAPI

        :param campaign_id: The campaign_id of this CalculateTariffsParametersDTO.
        :param selling_program: The selling_program of this CalculateTariffsParametersDTO.
        :param frequency: The frequency of this CalculateTariffsParametersDTO.
        """
        self.openapi_types = {
            'campaign_id': int,
            'selling_program': SellingProgramType,
            'frequency': PaymentFrequencyType
        }

        self.attribute_map = {
            'campaign_id': 'campaignId',
            'selling_program': 'sellingProgram',
            'frequency': 'frequency'
        }

        self._campaign_id = campaign_id
        self._selling_program = selling_program
        self._frequency = frequency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateTariffsParametersDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateTariffsParametersDTO of this CalculateTariffsParametersDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_id(self):
        """Gets the campaign_id of this CalculateTariffsParametersDTO.

        Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр `campaignId`, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр `sellingProgram`. Совместное использование параметров приведет к ошибке. 

        :return: The campaign_id of this CalculateTariffsParametersDTO.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this CalculateTariffsParametersDTO.

        Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр `campaignId`, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр `sellingProgram`. Совместное использование параметров приведет к ошибке. 

        :param campaign_id: The campaign_id of this CalculateTariffsParametersDTO.
        :type campaign_id: int
        """

        self._campaign_id = campaign_id

    @property
    def selling_program(self):
        """Gets the selling_program of this CalculateTariffsParametersDTO.


        :return: The selling_program of this CalculateTariffsParametersDTO.
        :rtype: SellingProgramType
        """
        return self._selling_program

    @selling_program.setter
    def selling_program(self, selling_program):
        """Sets the selling_program of this CalculateTariffsParametersDTO.


        :param selling_program: The selling_program of this CalculateTariffsParametersDTO.
        :type selling_program: SellingProgramType
        """

        self._selling_program = selling_program

    @property
    def frequency(self):
        """Gets the frequency of this CalculateTariffsParametersDTO.


        :return: The frequency of this CalculateTariffsParametersDTO.
        :rtype: PaymentFrequencyType
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this CalculateTariffsParametersDTO.


        :param frequency: The frequency of this CalculateTariffsParametersDTO.
        :type frequency: PaymentFrequencyType
        """

        self._frequency = frequency
