# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.warehouse_stock_type import WarehouseStockType
from ympa_python_aiohttp_server import util


class WarehouseStockDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: WarehouseStockType=None, count: int=None):
        """WarehouseStockDTO - a model defined in OpenAPI

        :param type: The type of this WarehouseStockDTO.
        :param count: The count of this WarehouseStockDTO.
        """
        self.openapi_types = {
            'type': WarehouseStockType,
            'count': int
        }

        self.attribute_map = {
            'type': 'type',
            'count': 'count'
        }

        self._type = type
        self._count = count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WarehouseStockDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WarehouseStockDTO of this WarehouseStockDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this WarehouseStockDTO.


        :return: The type of this WarehouseStockDTO.
        :rtype: WarehouseStockType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WarehouseStockDTO.


        :param type: The type of this WarehouseStockDTO.
        :type type: WarehouseStockType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def count(self):
        """Gets the count of this WarehouseStockDTO.

        Значение остатков.

        :return: The count of this WarehouseStockDTO.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this WarehouseStockDTO.

        Значение остатков.

        :param count: The count of this WarehouseStockDTO.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count
