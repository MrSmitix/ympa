# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.rejected_promo_offer_update_reason_type import RejectedPromoOfferUpdateReasonType
import re
from ympa_python_aiohttp_server import util


class RejectedPromoOfferUpdateDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer_id: str=None, reason: RejectedPromoOfferUpdateReasonType=None):
        """RejectedPromoOfferUpdateDTO - a model defined in OpenAPI

        :param offer_id: The offer_id of this RejectedPromoOfferUpdateDTO.
        :param reason: The reason of this RejectedPromoOfferUpdateDTO.
        """
        self.openapi_types = {
            'offer_id': str,
            'reason': RejectedPromoOfferUpdateReasonType
        }

        self.attribute_map = {
            'offer_id': 'offerId',
            'reason': 'reason'
        }

        self._offer_id = offer_id
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RejectedPromoOfferUpdateDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RejectedPromoOfferUpdateDTO of this RejectedPromoOfferUpdateDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_id(self):
        """Gets the offer_id of this RejectedPromoOfferUpdateDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 

        :return: The offer_id of this RejectedPromoOfferUpdateDTO.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this RejectedPromoOfferUpdateDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 

        :param offer_id: The offer_id of this RejectedPromoOfferUpdateDTO.
        :type offer_id: str
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")
        if offer_id is not None and len(offer_id) > 255:
            raise ValueError("Invalid value for `offer_id`, length must be less than or equal to `255`")
        if offer_id is not None and len(offer_id) < 1:
            raise ValueError("Invalid value for `offer_id`, length must be greater than or equal to `1`")
        if offer_id is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', offer_id):
            raise ValueError("Invalid value for `offer_id`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")

        self._offer_id = offer_id

    @property
    def reason(self):
        """Gets the reason of this RejectedPromoOfferUpdateDTO.


        :return: The reason of this RejectedPromoOfferUpdateDTO.
        :rtype: RejectedPromoOfferUpdateReasonType
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RejectedPromoOfferUpdateDTO.


        :param reason: The reason of this RejectedPromoOfferUpdateDTO.
        :type reason: RejectedPromoOfferUpdateReasonType
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason
