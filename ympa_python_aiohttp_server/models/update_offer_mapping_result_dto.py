# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.offer_mapping_error_dto import OfferMappingErrorDTO
import re
from ympa_python_aiohttp_server import util


class UpdateOfferMappingResultDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer_id: str=None, errors: List[OfferMappingErrorDTO]=None, warnings: List[OfferMappingErrorDTO]=None):
        """UpdateOfferMappingResultDTO - a model defined in OpenAPI

        :param offer_id: The offer_id of this UpdateOfferMappingResultDTO.
        :param errors: The errors of this UpdateOfferMappingResultDTO.
        :param warnings: The warnings of this UpdateOfferMappingResultDTO.
        """
        self.openapi_types = {
            'offer_id': str,
            'errors': List[OfferMappingErrorDTO],
            'warnings': List[OfferMappingErrorDTO]
        }

        self.attribute_map = {
            'offer_id': 'offerId',
            'errors': 'errors',
            'warnings': 'warnings'
        }

        self._offer_id = offer_id
        self._errors = errors
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateOfferMappingResultDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateOfferMappingResultDTO of this UpdateOfferMappingResultDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_id(self):
        """Gets the offer_id of this UpdateOfferMappingResultDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 

        :return: The offer_id of this UpdateOfferMappingResultDTO.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this UpdateOfferMappingResultDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 

        :param offer_id: The offer_id of this UpdateOfferMappingResultDTO.
        :type offer_id: str
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")
        if offer_id is not None and len(offer_id) > 255:
            raise ValueError("Invalid value for `offer_id`, length must be less than or equal to `255`")
        if offer_id is not None and len(offer_id) < 1:
            raise ValueError("Invalid value for `offer_id`, length must be greater than or equal to `1`")
        if offer_id is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', offer_id):
            raise ValueError("Invalid value for `offer_id`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")

        self._offer_id = offer_id

    @property
    def errors(self):
        """Gets the errors of this UpdateOfferMappingResultDTO.

        Ошибки — информация в каталоге не обновится.

        :return: The errors of this UpdateOfferMappingResultDTO.
        :rtype: List[OfferMappingErrorDTO]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this UpdateOfferMappingResultDTO.

        Ошибки — информация в каталоге не обновится.

        :param errors: The errors of this UpdateOfferMappingResultDTO.
        :type errors: List[OfferMappingErrorDTO]
        """

        self._errors = errors

    @property
    def warnings(self):
        """Gets the warnings of this UpdateOfferMappingResultDTO.

        Предупреждения — информация в каталоге обновится.

        :return: The warnings of this UpdateOfferMappingResultDTO.
        :rtype: List[OfferMappingErrorDTO]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this UpdateOfferMappingResultDTO.

        Предупреждения — информация в каталоге обновится.

        :param warnings: The warnings of this UpdateOfferMappingResultDTO.
        :type warnings: List[OfferMappingErrorDTO]
        """

        self._warnings = warnings
