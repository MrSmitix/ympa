# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.offer_content_error_type import OfferContentErrorType
from ympa_python_aiohttp_server import util


class OfferContentErrorDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: OfferContentErrorType=None, parameter_id: int=None, message: str=None):
        """OfferContentErrorDTO - a model defined in OpenAPI

        :param type: The type of this OfferContentErrorDTO.
        :param parameter_id: The parameter_id of this OfferContentErrorDTO.
        :param message: The message of this OfferContentErrorDTO.
        """
        self.openapi_types = {
            'type': OfferContentErrorType,
            'parameter_id': int,
            'message': str
        }

        self.attribute_map = {
            'type': 'type',
            'parameter_id': 'parameterId',
            'message': 'message'
        }

        self._type = type
        self._parameter_id = parameter_id
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferContentErrorDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfferContentErrorDTO of this OfferContentErrorDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this OfferContentErrorDTO.


        :return: The type of this OfferContentErrorDTO.
        :rtype: OfferContentErrorType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OfferContentErrorDTO.


        :param type: The type of this OfferContentErrorDTO.
        :type type: OfferContentErrorType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def parameter_id(self):
        """Gets the parameter_id of this OfferContentErrorDTO.

        Идентификатор характеристики, с которой связана ошибка.

        :return: The parameter_id of this OfferContentErrorDTO.
        :rtype: int
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this OfferContentErrorDTO.

        Идентификатор характеристики, с которой связана ошибка.

        :param parameter_id: The parameter_id of this OfferContentErrorDTO.
        :type parameter_id: int
        """

        self._parameter_id = parameter_id

    @property
    def message(self):
        """Gets the message of this OfferContentErrorDTO.

        Текст ошибки.

        :return: The message of this OfferContentErrorDTO.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OfferContentErrorDTO.

        Текст ошибки.

        :param message: The message of this OfferContentErrorDTO.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
