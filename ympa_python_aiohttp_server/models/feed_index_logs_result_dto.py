# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.feed_index_logs_feed_dto import FeedIndexLogsFeedDTO
from ympa_python_aiohttp_server.models.feed_index_logs_record_dto import FeedIndexLogsRecordDTO
from ympa_python_aiohttp_server import util


class FeedIndexLogsResultDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feed: FeedIndexLogsFeedDTO=None, index_log_records: List[FeedIndexLogsRecordDTO]=None, total: int=None):
        """FeedIndexLogsResultDTO - a model defined in OpenAPI

        :param feed: The feed of this FeedIndexLogsResultDTO.
        :param index_log_records: The index_log_records of this FeedIndexLogsResultDTO.
        :param total: The total of this FeedIndexLogsResultDTO.
        """
        self.openapi_types = {
            'feed': FeedIndexLogsFeedDTO,
            'index_log_records': List[FeedIndexLogsRecordDTO],
            'total': int
        }

        self.attribute_map = {
            'feed': 'feed',
            'index_log_records': 'indexLogRecords',
            'total': 'total'
        }

        self._feed = feed
        self._index_log_records = index_log_records
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeedIndexLogsResultDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeedIndexLogsResultDTO of this FeedIndexLogsResultDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feed(self):
        """Gets the feed of this FeedIndexLogsResultDTO.


        :return: The feed of this FeedIndexLogsResultDTO.
        :rtype: FeedIndexLogsFeedDTO
        """
        return self._feed

    @feed.setter
    def feed(self, feed):
        """Sets the feed of this FeedIndexLogsResultDTO.


        :param feed: The feed of this FeedIndexLogsResultDTO.
        :type feed: FeedIndexLogsFeedDTO
        """

        self._feed = feed

    @property
    def index_log_records(self):
        """Gets the index_log_records of this FeedIndexLogsResultDTO.

        Список отчетов по индексации прайс-листа.

        :return: The index_log_records of this FeedIndexLogsResultDTO.
        :rtype: List[FeedIndexLogsRecordDTO]
        """
        return self._index_log_records

    @index_log_records.setter
    def index_log_records(self, index_log_records):
        """Sets the index_log_records of this FeedIndexLogsResultDTO.

        Список отчетов по индексации прайс-листа.

        :param index_log_records: The index_log_records of this FeedIndexLogsResultDTO.
        :type index_log_records: List[FeedIndexLogsRecordDTO]
        """
        if index_log_records is None:
            raise ValueError("Invalid value for `index_log_records`, must not be `None`")

        self._index_log_records = index_log_records

    @property
    def total(self):
        """Gets the total of this FeedIndexLogsResultDTO.

        Количество отчетов на всех страницах выходных данных.

        :return: The total of this FeedIndexLogsResultDTO.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this FeedIndexLogsResultDTO.

        Количество отчетов на всех страницах выходных данных.

        :param total: The total of this FeedIndexLogsResultDTO.
        :type total: int
        """

        self._total = total
