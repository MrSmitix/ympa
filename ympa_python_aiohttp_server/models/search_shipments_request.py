# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.shipment_status_type import ShipmentStatusType
from ympa_python_aiohttp_server import util


class SearchShipmentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_from: date=None, date_to: date=None, statuses: list[ShipmentStatusType]=None, order_ids: list[int]=None, cancelled_orders: bool=True):
        """SearchShipmentsRequest - a model defined in OpenAPI

        :param date_from: The date_from of this SearchShipmentsRequest.
        :param date_to: The date_to of this SearchShipmentsRequest.
        :param statuses: The statuses of this SearchShipmentsRequest.
        :param order_ids: The order_ids of this SearchShipmentsRequest.
        :param cancelled_orders: The cancelled_orders of this SearchShipmentsRequest.
        """
        self.openapi_types = {
            'date_from': date,
            'date_to': date,
            'statuses': list[ShipmentStatusType],
            'order_ids': list[int],
            'cancelled_orders': bool
        }

        self.attribute_map = {
            'date_from': 'dateFrom',
            'date_to': 'dateTo',
            'statuses': 'statuses',
            'order_ids': 'orderIds',
            'cancelled_orders': 'cancelledOrders'
        }

        self._date_from = date_from
        self._date_to = date_to
        self._statuses = statuses
        self._order_ids = order_ids
        self._cancelled_orders = cancelled_orders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchShipmentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchShipmentsRequest of this SearchShipmentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_from(self):
        """Gets the date_from of this SearchShipmentsRequest.

        Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 

        :return: The date_from of this SearchShipmentsRequest.
        :rtype: date
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this SearchShipmentsRequest.

        Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 

        :param date_from: The date_from of this SearchShipmentsRequest.
        :type date_from: date
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this SearchShipmentsRequest.

        Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 

        :return: The date_to of this SearchShipmentsRequest.
        :rtype: date
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this SearchShipmentsRequest.

        Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 

        :param date_to: The date_to of this SearchShipmentsRequest.
        :type date_to: date
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")

        self._date_to = date_to

    @property
    def statuses(self):
        """Gets the statuses of this SearchShipmentsRequest.

        Список статусов отгрузок.

        :return: The statuses of this SearchShipmentsRequest.
        :rtype: list[ShipmentStatusType]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this SearchShipmentsRequest.

        Список статусов отгрузок.

        :param statuses: The statuses of this SearchShipmentsRequest.
        :type statuses: list[ShipmentStatusType]
        """
        if statuses is not None and len(statuses) < 1:
            raise ValueError("Invalid value for `statuses`, number of items must be greater than or equal to `1`")

        self._statuses = statuses

    @property
    def order_ids(self):
        """Gets the order_ids of this SearchShipmentsRequest.

        Список идентификаторов заказов из отгрузок.

        :return: The order_ids of this SearchShipmentsRequest.
        :rtype: list[int]
        """
        return self._order_ids

    @order_ids.setter
    def order_ids(self, order_ids):
        """Sets the order_ids of this SearchShipmentsRequest.

        Список идентификаторов заказов из отгрузок.

        :param order_ids: The order_ids of this SearchShipmentsRequest.
        :type order_ids: list[int]
        """
        if order_ids is not None and len(order_ids) < 1:
            raise ValueError("Invalid value for `order_ids`, number of items must be greater than or equal to `1`")

        self._order_ids = order_ids

    @property
    def cancelled_orders(self):
        """Gets the cancelled_orders of this SearchShipmentsRequest.

        Возвращать ли отмененные заказы.  Значение по умолчанию — `true`. Если возвращать отмененные заказы не нужно, передайте значение `false`. 

        :return: The cancelled_orders of this SearchShipmentsRequest.
        :rtype: bool
        """
        return self._cancelled_orders

    @cancelled_orders.setter
    def cancelled_orders(self, cancelled_orders):
        """Sets the cancelled_orders of this SearchShipmentsRequest.

        Возвращать ли отмененные заказы.  Значение по умолчанию — `true`. Если возвращать отмененные заказы не нужно, передайте значение `false`. 

        :param cancelled_orders: The cancelled_orders of this SearchShipmentsRequest.
        :type cancelled_orders: bool
        """

        self._cancelled_orders = cancelled_orders
