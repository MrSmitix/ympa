# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.region_type import RegionType
from ympa_python_aiohttp_server import util


class RegionDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, type: RegionType=None, parent: RegionDTO=None, children: List[RegionDTO]=None):
        """RegionDTO - a model defined in OpenAPI

        :param id: The id of this RegionDTO.
        :param name: The name of this RegionDTO.
        :param type: The type of this RegionDTO.
        :param parent: The parent of this RegionDTO.
        :param children: The children of this RegionDTO.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'type': RegionType,
            'parent': RegionDTO,
            'children': List[RegionDTO]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'parent': 'parent',
            'children': 'children'
        }

        self._id = id
        self._name = name
        self._type = type
        self._parent = parent
        self._children = children

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionDTO of this RegionDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this RegionDTO.

        Идентификатор региона.

        :return: The id of this RegionDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RegionDTO.

        Идентификатор региона.

        :param id: The id of this RegionDTO.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RegionDTO.

        Название региона.

        :return: The name of this RegionDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegionDTO.

        Название региона.

        :param name: The name of this RegionDTO.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this RegionDTO.


        :return: The type of this RegionDTO.
        :rtype: RegionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RegionDTO.


        :param type: The type of this RegionDTO.
        :type type: RegionType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def parent(self):
        """Gets the parent of this RegionDTO.


        :return: The parent of this RegionDTO.
        :rtype: RegionDTO
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this RegionDTO.


        :param parent: The parent of this RegionDTO.
        :type parent: RegionDTO
        """

        self._parent = parent

    @property
    def children(self):
        """Gets the children of this RegionDTO.

        Дочерние регионы.

        :return: The children of this RegionDTO.
        :rtype: List[RegionDTO]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this RegionDTO.

        Дочерние регионы.

        :param children: The children of this RegionDTO.
        :type children: List[RegionDTO]
        """

        self._children = children
