# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.campaign_dto import CampaignDTO
from ympa_python_aiohttp_server.models.flipping_pager_dto import FlippingPagerDTO
from ympa_python_aiohttp_server import util


class GetCampaignsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaigns: List[CampaignDTO]=None, pager: FlippingPagerDTO=None):
        """GetCampaignsResponse - a model defined in OpenAPI

        :param campaigns: The campaigns of this GetCampaignsResponse.
        :param pager: The pager of this GetCampaignsResponse.
        """
        self.openapi_types = {
            'campaigns': List[CampaignDTO],
            'pager': FlippingPagerDTO
        }

        self.attribute_map = {
            'campaigns': 'campaigns',
            'pager': 'pager'
        }

        self._campaigns = campaigns
        self._pager = pager

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCampaignsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCampaignsResponse of this GetCampaignsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaigns(self):
        """Gets the campaigns of this GetCampaignsResponse.

        Список с информацией по каждому магазину.

        :return: The campaigns of this GetCampaignsResponse.
        :rtype: List[CampaignDTO]
        """
        return self._campaigns

    @campaigns.setter
    def campaigns(self, campaigns):
        """Sets the campaigns of this GetCampaignsResponse.

        Список с информацией по каждому магазину.

        :param campaigns: The campaigns of this GetCampaignsResponse.
        :type campaigns: List[CampaignDTO]
        """
        if campaigns is None:
            raise ValueError("Invalid value for `campaigns`, must not be `None`")

        self._campaigns = campaigns

    @property
    def pager(self):
        """Gets the pager of this GetCampaignsResponse.


        :return: The pager of this GetCampaignsResponse.
        :rtype: FlippingPagerDTO
        """
        return self._pager

    @pager.setter
    def pager(self, pager):
        """Sets the pager of this GetCampaignsResponse.


        :param pager: The pager of this GetCampaignsResponse.
        :type pager: FlippingPagerDTO
        """

        self._pager = pager
