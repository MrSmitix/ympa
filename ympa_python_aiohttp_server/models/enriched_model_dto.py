# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.model_offer_dto import ModelOfferDTO
from ympa_python_aiohttp_server.models.model_price_dto import ModelPriceDTO
from ympa_python_aiohttp_server import util


class EnrichedModelDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, prices: ModelPriceDTO=None, offers: List[ModelOfferDTO]=None, offline_offers: int=None, online_offers: int=None):
        """EnrichedModelDTO - a model defined in OpenAPI

        :param id: The id of this EnrichedModelDTO.
        :param name: The name of this EnrichedModelDTO.
        :param prices: The prices of this EnrichedModelDTO.
        :param offers: The offers of this EnrichedModelDTO.
        :param offline_offers: The offline_offers of this EnrichedModelDTO.
        :param online_offers: The online_offers of this EnrichedModelDTO.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'prices': ModelPriceDTO,
            'offers': List[ModelOfferDTO],
            'offline_offers': int,
            'online_offers': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'prices': 'prices',
            'offers': 'offers',
            'offline_offers': 'offlineOffers',
            'online_offers': 'onlineOffers'
        }

        self._id = id
        self._name = name
        self._prices = prices
        self._offers = offers
        self._offline_offers = offline_offers
        self._online_offers = online_offers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnrichedModelDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnrichedModelDTO of this EnrichedModelDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EnrichedModelDTO.

        Идентификатор модели товара.

        :return: The id of this EnrichedModelDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnrichedModelDTO.

        Идентификатор модели товара.

        :param id: The id of this EnrichedModelDTO.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EnrichedModelDTO.

        Название модели товара.

        :return: The name of this EnrichedModelDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnrichedModelDTO.

        Название модели товара.

        :param name: The name of this EnrichedModelDTO.
        :type name: str
        """

        self._name = name

    @property
    def prices(self):
        """Gets the prices of this EnrichedModelDTO.


        :return: The prices of this EnrichedModelDTO.
        :rtype: ModelPriceDTO
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this EnrichedModelDTO.


        :param prices: The prices of this EnrichedModelDTO.
        :type prices: ModelPriceDTO
        """

        self._prices = prices

    @property
    def offers(self):
        """Gets the offers of this EnrichedModelDTO.

        Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 

        :return: The offers of this EnrichedModelDTO.
        :rtype: List[ModelOfferDTO]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this EnrichedModelDTO.

        Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 

        :param offers: The offers of this EnrichedModelDTO.
        :type offers: List[ModelOfferDTO]
        """

        self._offers = offers

    @property
    def offline_offers(self):
        """Gets the offline_offers of this EnrichedModelDTO.

        Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.

        :return: The offline_offers of this EnrichedModelDTO.
        :rtype: int
        """
        return self._offline_offers

    @offline_offers.setter
    def offline_offers(self, offline_offers):
        """Sets the offline_offers of this EnrichedModelDTO.

        Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.

        :param offline_offers: The offline_offers of this EnrichedModelDTO.
        :type offline_offers: int
        """

        self._offline_offers = offline_offers

    @property
    def online_offers(self):
        """Gets the online_offers of this EnrichedModelDTO.

        Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.

        :return: The online_offers of this EnrichedModelDTO.
        :rtype: int
        """
        return self._online_offers

    @online_offers.setter
    def online_offers(self, online_offers):
        """Sets the online_offers of this EnrichedModelDTO.

        Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.

        :param online_offers: The online_offers of this EnrichedModelDTO.
        :type online_offers: int
        """

        self._online_offers = online_offers
