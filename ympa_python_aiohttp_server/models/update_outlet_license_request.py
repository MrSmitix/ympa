# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.outlet_license_dto import OutletLicenseDTO
from ympa_python_aiohttp_server import util


class UpdateOutletLicenseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, licenses: List[OutletLicenseDTO]=None):
        """UpdateOutletLicenseRequest - a model defined in OpenAPI

        :param licenses: The licenses of this UpdateOutletLicenseRequest.
        """
        self.openapi_types = {
            'licenses': List[OutletLicenseDTO]
        }

        self.attribute_map = {
            'licenses': 'licenses'
        }

        self._licenses = licenses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateOutletLicenseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateOutletLicenseRequest of this UpdateOutletLicenseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def licenses(self):
        """Gets the licenses of this UpdateOutletLicenseRequest.

        Список лицензий. Обязательный параметр, должен содержать информацию хотя бы об одной лицензии. 

        :return: The licenses of this UpdateOutletLicenseRequest.
        :rtype: List[OutletLicenseDTO]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this UpdateOutletLicenseRequest.

        Список лицензий. Обязательный параметр, должен содержать информацию хотя бы об одной лицензии. 

        :param licenses: The licenses of this UpdateOutletLicenseRequest.
        :type licenses: List[OutletLicenseDTO]
        """
        if licenses is None:
            raise ValueError("Invalid value for `licenses`, must not be `None`")
        if licenses is not None and len(licenses) < 1:
            raise ValueError("Invalid value for `licenses`, number of items must be greater than or equal to `1`")

        self._licenses = licenses
