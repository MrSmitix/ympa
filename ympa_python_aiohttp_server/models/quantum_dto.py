# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class QuantumDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_quantity: int=None, step_quantity: int=None):
        """QuantumDTO - a model defined in OpenAPI

        :param min_quantity: The min_quantity of this QuantumDTO.
        :param step_quantity: The step_quantity of this QuantumDTO.
        """
        self.openapi_types = {
            'min_quantity': int,
            'step_quantity': int
        }

        self.attribute_map = {
            'min_quantity': 'minQuantity',
            'step_quantity': 'stepQuantity'
        }

        self._min_quantity = min_quantity
        self._step_quantity = step_quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuantumDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuantumDTO of this QuantumDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_quantity(self):
        """Gets the min_quantity of this QuantumDTO.

        Минимальное количество единиц товара в заказе. Например, если указать 10, покупатель сможет добавить в корзину не меньше 10 единиц.  ⚠️ Если количество товара на складе меньше заданного, ограничение не сработает и покупатель сможет его заказать. 

        :return: The min_quantity of this QuantumDTO.
        :rtype: int
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this QuantumDTO.

        Минимальное количество единиц товара в заказе. Например, если указать 10, покупатель сможет добавить в корзину не меньше 10 единиц.  ⚠️ Если количество товара на складе меньше заданного, ограничение не сработает и покупатель сможет его заказать. 

        :param min_quantity: The min_quantity of this QuantumDTO.
        :type min_quantity: int
        """
        if min_quantity is not None and min_quantity < 1:
            raise ValueError("Invalid value for `min_quantity`, must be a value greater than or equal to `1`")

        self._min_quantity = min_quantity

    @property
    def step_quantity(self):
        """Gets the step_quantity of this QuantumDTO.

        На сколько единиц покупатель сможет увеличить количество товара в корзине.  Например, если задать 5, покупатель сможет добавить к заказу только 5, 10, 15, ... единиц товара.  ⚠️ Если количество товара на складе не дотягивает до кванта, ограничение не сработает и покупатель сможет заказать количество, не кратное кванту. 

        :return: The step_quantity of this QuantumDTO.
        :rtype: int
        """
        return self._step_quantity

    @step_quantity.setter
    def step_quantity(self, step_quantity):
        """Sets the step_quantity of this QuantumDTO.

        На сколько единиц покупатель сможет увеличить количество товара в корзине.  Например, если задать 5, покупатель сможет добавить к заказу только 5, 10, 15, ... единиц товара.  ⚠️ Если количество товара на складе не дотягивает до кванта, ограничение не сработает и покупатель сможет заказать количество, не кратное кванту. 

        :param step_quantity: The step_quantity of this QuantumDTO.
        :type step_quantity: int
        """
        if step_quantity is not None and step_quantity > 100:
            raise ValueError("Invalid value for `step_quantity`, must be a value less than or equal to `100`")
        if step_quantity is not None and step_quantity < 1:
            raise ValueError("Invalid value for `step_quantity`, must be a value greater than or equal to `1`")

        self._step_quantity = step_quantity
