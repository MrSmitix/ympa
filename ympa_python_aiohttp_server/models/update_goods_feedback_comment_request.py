# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.update_goods_feedback_comment_dto import UpdateGoodsFeedbackCommentDTO
from ympa_python_aiohttp_server import util


class UpdateGoodsFeedbackCommentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feedback_id: int=None, comment: UpdateGoodsFeedbackCommentDTO=None):
        """UpdateGoodsFeedbackCommentRequest - a model defined in OpenAPI

        :param feedback_id: The feedback_id of this UpdateGoodsFeedbackCommentRequest.
        :param comment: The comment of this UpdateGoodsFeedbackCommentRequest.
        """
        self.openapi_types = {
            'feedback_id': int,
            'comment': UpdateGoodsFeedbackCommentDTO
        }

        self.attribute_map = {
            'feedback_id': 'feedbackId',
            'comment': 'comment'
        }

        self._feedback_id = feedback_id
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateGoodsFeedbackCommentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateGoodsFeedbackCommentRequest of this UpdateGoodsFeedbackCommentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feedback_id(self):
        """Gets the feedback_id of this UpdateGoodsFeedbackCommentRequest.

        Идентификатор отзыва. 

        :return: The feedback_id of this UpdateGoodsFeedbackCommentRequest.
        :rtype: int
        """
        return self._feedback_id

    @feedback_id.setter
    def feedback_id(self, feedback_id):
        """Sets the feedback_id of this UpdateGoodsFeedbackCommentRequest.

        Идентификатор отзыва. 

        :param feedback_id: The feedback_id of this UpdateGoodsFeedbackCommentRequest.
        :type feedback_id: int
        """
        if feedback_id is None:
            raise ValueError("Invalid value for `feedback_id`, must not be `None`")

        self._feedback_id = feedback_id

    @property
    def comment(self):
        """Gets the comment of this UpdateGoodsFeedbackCommentRequest.


        :return: The comment of this UpdateGoodsFeedbackCommentRequest.
        :rtype: UpdateGoodsFeedbackCommentDTO
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UpdateGoodsFeedbackCommentRequest.


        :param comment: The comment of this UpdateGoodsFeedbackCommentRequest.
        :type comment: UpdateGoodsFeedbackCommentDTO
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment
