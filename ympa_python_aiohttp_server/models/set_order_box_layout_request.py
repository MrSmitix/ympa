# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.order_box_layout_dto import OrderBoxLayoutDTO
from ympa_python_aiohttp_server import util


class SetOrderBoxLayoutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boxes: List[OrderBoxLayoutDTO]=None, allow_remove: bool=False):
        """SetOrderBoxLayoutRequest - a model defined in OpenAPI

        :param boxes: The boxes of this SetOrderBoxLayoutRequest.
        :param allow_remove: The allow_remove of this SetOrderBoxLayoutRequest.
        """
        self.openapi_types = {
            'boxes': List[OrderBoxLayoutDTO],
            'allow_remove': bool
        }

        self.attribute_map = {
            'boxes': 'boxes',
            'allow_remove': 'allowRemove'
        }

        self._boxes = boxes
        self._allow_remove = allow_remove

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetOrderBoxLayoutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetOrderBoxLayoutRequest of this SetOrderBoxLayoutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boxes(self):
        """Gets the boxes of this SetOrderBoxLayoutRequest.

        Список коробок.

        :return: The boxes of this SetOrderBoxLayoutRequest.
        :rtype: List[OrderBoxLayoutDTO]
        """
        return self._boxes

    @boxes.setter
    def boxes(self, boxes):
        """Sets the boxes of this SetOrderBoxLayoutRequest.

        Список коробок.

        :param boxes: The boxes of this SetOrderBoxLayoutRequest.
        :type boxes: List[OrderBoxLayoutDTO]
        """
        if boxes is None:
            raise ValueError("Invalid value for `boxes`, must not be `None`")
        if boxes is not None and len(boxes) < 1:
            raise ValueError("Invalid value for `boxes`, number of items must be greater than or equal to `1`")

        self._boxes = boxes

    @property
    def allow_remove(self):
        """Gets the allow_remove of this SetOrderBoxLayoutRequest.

        Передайте `true`, если вы собираетесь удалить часть товаров из заказа.

        :return: The allow_remove of this SetOrderBoxLayoutRequest.
        :rtype: bool
        """
        return self._allow_remove

    @allow_remove.setter
    def allow_remove(self, allow_remove):
        """Sets the allow_remove of this SetOrderBoxLayoutRequest.

        Передайте `true`, если вы собираетесь удалить часть товаров из заказа.

        :param allow_remove: The allow_remove of this SetOrderBoxLayoutRequest.
        :type allow_remove: bool
        """

        self._allow_remove = allow_remove
