# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.offer_campaign_status_type import OfferCampaignStatusType
from ympa_python_aiohttp_server import util


class GetCampaignOffersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer_ids: List[str]=None, statuses: List[OfferCampaignStatusType]=None, category_ids: List[int]=None, vendor_names: List[str]=None, tags: List[str]=None):
        """GetCampaignOffersRequest - a model defined in OpenAPI

        :param offer_ids: The offer_ids of this GetCampaignOffersRequest.
        :param statuses: The statuses of this GetCampaignOffersRequest.
        :param category_ids: The category_ids of this GetCampaignOffersRequest.
        :param vendor_names: The vendor_names of this GetCampaignOffersRequest.
        :param tags: The tags of this GetCampaignOffersRequest.
        """
        self.openapi_types = {
            'offer_ids': List[str],
            'statuses': List[OfferCampaignStatusType],
            'category_ids': List[int],
            'vendor_names': List[str],
            'tags': List[str]
        }

        self.attribute_map = {
            'offer_ids': 'offerIds',
            'statuses': 'statuses',
            'category_ids': 'categoryIds',
            'vendor_names': 'vendorNames',
            'tags': 'tags'
        }

        self._offer_ids = offer_ids
        self._statuses = statuses
        self._category_ids = category_ids
        self._vendor_names = vendor_names
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCampaignOffersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCampaignOffersRequest of this GetCampaignOffersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_ids(self):
        """Gets the offer_ids of this GetCampaignOffersRequest.

        Идентификаторы товаров, информация о которых нужна.  {% note warning \"Такой список возвращается только целиком\" %}  Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * `page_token` * `limit`  {% endnote %}    

        :return: The offer_ids of this GetCampaignOffersRequest.
        :rtype: List[str]
        """
        return self._offer_ids

    @offer_ids.setter
    def offer_ids(self, offer_ids):
        """Sets the offer_ids of this GetCampaignOffersRequest.

        Идентификаторы товаров, информация о которых нужна.  {% note warning \"Такой список возвращается только целиком\" %}  Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * `page_token` * `limit`  {% endnote %}    

        :param offer_ids: The offer_ids of this GetCampaignOffersRequest.
        :type offer_ids: List[str]
        """
        if offer_ids is not None and len(offer_ids) > 200:
            raise ValueError("Invalid value for `offer_ids`, number of items must be less than or equal to `200`")

        self._offer_ids = offer_ids

    @property
    def statuses(self):
        """Gets the statuses of this GetCampaignOffersRequest.

        Фильтр по статусам товаров. 

        :return: The statuses of this GetCampaignOffersRequest.
        :rtype: List[OfferCampaignStatusType]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this GetCampaignOffersRequest.

        Фильтр по статусам товаров. 

        :param statuses: The statuses of this GetCampaignOffersRequest.
        :type statuses: List[OfferCampaignStatusType]
        """

        self._statuses = statuses

    @property
    def category_ids(self):
        """Gets the category_ids of this GetCampaignOffersRequest.

        Фильтр по категориям на Маркете.

        :return: The category_ids of this GetCampaignOffersRequest.
        :rtype: List[int]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this GetCampaignOffersRequest.

        Фильтр по категориям на Маркете.

        :param category_ids: The category_ids of this GetCampaignOffersRequest.
        :type category_ids: List[int]
        """

        self._category_ids = category_ids

    @property
    def vendor_names(self):
        """Gets the vendor_names of this GetCampaignOffersRequest.

        Фильтр по брендам.

        :return: The vendor_names of this GetCampaignOffersRequest.
        :rtype: List[str]
        """
        return self._vendor_names

    @vendor_names.setter
    def vendor_names(self, vendor_names):
        """Sets the vendor_names of this GetCampaignOffersRequest.

        Фильтр по брендам.

        :param vendor_names: The vendor_names of this GetCampaignOffersRequest.
        :type vendor_names: List[str]
        """

        self._vendor_names = vendor_names

    @property
    def tags(self):
        """Gets the tags of this GetCampaignOffersRequest.

        Фильтр по тегам.

        :return: The tags of this GetCampaignOffersRequest.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetCampaignOffersRequest.

        Фильтр по тегам.

        :param tags: The tags of this GetCampaignOffersRequest.
        :type tags: List[str]
        """

        self._tags = tags
