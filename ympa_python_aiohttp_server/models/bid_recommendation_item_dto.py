# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class BidRecommendationItemDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bid: int=None, show_percent: int=None):
        """BidRecommendationItemDTO - a model defined in OpenAPI

        :param bid: The bid of this BidRecommendationItemDTO.
        :param show_percent: The show_percent of this BidRecommendationItemDTO.
        """
        self.openapi_types = {
            'bid': int,
            'show_percent': int
        }

        self.attribute_map = {
            'bid': 'bid',
            'show_percent': 'showPercent'
        }

        self._bid = bid
        self._show_percent = show_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BidRecommendationItemDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BidRecommendationItemDTO of this BidRecommendationItemDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bid(self):
        """Gets the bid of this BidRecommendationItemDTO.

        Значение ставки.

        :return: The bid of this BidRecommendationItemDTO.
        :rtype: int
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this BidRecommendationItemDTO.

        Значение ставки.

        :param bid: The bid of this BidRecommendationItemDTO.
        :type bid: int
        """
        if bid is None:
            raise ValueError("Invalid value for `bid`, must not be `None`")
        if bid is not None and bid > 9999:
            raise ValueError("Invalid value for `bid`, must be a value less than or equal to `9999`")
        if bid is not None and bid < 0:
            raise ValueError("Invalid value for `bid`, must be a value greater than or equal to `0`")

        self._bid = bid

    @property
    def show_percent(self):
        """Gets the show_percent of this BidRecommendationItemDTO.

        Доля показов. 

        :return: The show_percent of this BidRecommendationItemDTO.
        :rtype: int
        """
        return self._show_percent

    @show_percent.setter
    def show_percent(self, show_percent):
        """Sets the show_percent of this BidRecommendationItemDTO.

        Доля показов. 

        :param show_percent: The show_percent of this BidRecommendationItemDTO.
        :type show_percent: int
        """
        if show_percent is None:
            raise ValueError("Invalid value for `show_percent`, must not be `None`")
        if show_percent is not None and show_percent > 100:
            raise ValueError("Invalid value for `show_percent`, must be a value less than or equal to `100`")
        if show_percent is not None and show_percent < 0:
            raise ValueError("Invalid value for `show_percent`, must be a value greater than or equal to `0`")

        self._show_percent = show_percent
