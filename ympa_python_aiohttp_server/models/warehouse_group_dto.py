# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.warehouse_dto import WarehouseDTO
from ympa_python_aiohttp_server import util


class WarehouseGroupDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, main_warehouse: WarehouseDTO=None, warehouses: List[WarehouseDTO]=None):
        """WarehouseGroupDTO - a model defined in OpenAPI

        :param name: The name of this WarehouseGroupDTO.
        :param main_warehouse: The main_warehouse of this WarehouseGroupDTO.
        :param warehouses: The warehouses of this WarehouseGroupDTO.
        """
        self.openapi_types = {
            'name': str,
            'main_warehouse': WarehouseDTO,
            'warehouses': List[WarehouseDTO]
        }

        self.attribute_map = {
            'name': 'name',
            'main_warehouse': 'mainWarehouse',
            'warehouses': 'warehouses'
        }

        self._name = name
        self._main_warehouse = main_warehouse
        self._warehouses = warehouses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WarehouseGroupDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WarehouseGroupDTO of this WarehouseGroupDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this WarehouseGroupDTO.

        Название группы складов.

        :return: The name of this WarehouseGroupDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WarehouseGroupDTO.

        Название группы складов.

        :param name: The name of this WarehouseGroupDTO.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def main_warehouse(self):
        """Gets the main_warehouse of this WarehouseGroupDTO.


        :return: The main_warehouse of this WarehouseGroupDTO.
        :rtype: WarehouseDTO
        """
        return self._main_warehouse

    @main_warehouse.setter
    def main_warehouse(self, main_warehouse):
        """Sets the main_warehouse of this WarehouseGroupDTO.


        :param main_warehouse: The main_warehouse of this WarehouseGroupDTO.
        :type main_warehouse: WarehouseDTO
        """
        if main_warehouse is None:
            raise ValueError("Invalid value for `main_warehouse`, must not be `None`")

        self._main_warehouse = main_warehouse

    @property
    def warehouses(self):
        """Gets the warehouses of this WarehouseGroupDTO.

        Список складов, входящих в группу.

        :return: The warehouses of this WarehouseGroupDTO.
        :rtype: List[WarehouseDTO]
        """
        return self._warehouses

    @warehouses.setter
    def warehouses(self, warehouses):
        """Sets the warehouses of this WarehouseGroupDTO.

        Список складов, входящих в группу.

        :param warehouses: The warehouses of this WarehouseGroupDTO.
        :type warehouses: List[WarehouseDTO]
        """
        if warehouses is None:
            raise ValueError("Invalid value for `warehouses`, must not be `None`")

        self._warehouses = warehouses
