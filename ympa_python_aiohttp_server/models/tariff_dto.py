# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.tariff_parameter_dto import TariffParameterDTO
from ympa_python_aiohttp_server.models.tariff_type import TariffType
from ympa_python_aiohttp_server import util


class TariffDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: TariffType=None, percent: float=None, amount: float=None, parameters: List[TariffParameterDTO]=None):
        """TariffDTO - a model defined in OpenAPI

        :param type: The type of this TariffDTO.
        :param percent: The percent of this TariffDTO.
        :param amount: The amount of this TariffDTO.
        :param parameters: The parameters of this TariffDTO.
        """
        self.openapi_types = {
            'type': TariffType,
            'percent': float,
            'amount': float,
            'parameters': List[TariffParameterDTO]
        }

        self.attribute_map = {
            'type': 'type',
            'percent': 'percent',
            'amount': 'amount',
            'parameters': 'parameters'
        }

        self._type = type
        self._percent = percent
        self._amount = amount
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TariffDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TariffDTO of this TariffDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this TariffDTO.


        :return: The type of this TariffDTO.
        :rtype: TariffType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TariffDTO.


        :param type: The type of this TariffDTO.
        :type type: TariffType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def percent(self):
        """Gets the percent of this TariffDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах. 

        :return: The percent of this TariffDTO.
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this TariffDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах. 

        :param percent: The percent of this TariffDTO.
        :type percent: float
        """

        self._percent = percent

    @property
    def amount(self):
        """Gets the amount of this TariffDTO.

        Значение тарифа в рублях.

        :return: The amount of this TariffDTO.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TariffDTO.

        Значение тарифа в рублях.

        :param amount: The amount of this TariffDTO.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def parameters(self):
        """Gets the parameters of this TariffDTO.

        Параметры расчета тарифа.

        :return: The parameters of this TariffDTO.
        :rtype: List[TariffParameterDTO]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this TariffDTO.

        Параметры расчета тарифа.

        :param parameters: The parameters of this TariffDTO.
        :type parameters: List[TariffParameterDTO]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters
