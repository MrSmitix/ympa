# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.warehouse_dto import WarehouseDTO
from ympa_python_aiohttp_server.models.warehouse_group_dto import WarehouseGroupDTO
from ympa_python_aiohttp_server import util


class WarehousesDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, warehouses: List[WarehouseDTO]=None, warehouse_groups: List[WarehouseGroupDTO]=None):
        """WarehousesDTO - a model defined in OpenAPI

        :param warehouses: The warehouses of this WarehousesDTO.
        :param warehouse_groups: The warehouse_groups of this WarehousesDTO.
        """
        self.openapi_types = {
            'warehouses': List[WarehouseDTO],
            'warehouse_groups': List[WarehouseGroupDTO]
        }

        self.attribute_map = {
            'warehouses': 'warehouses',
            'warehouse_groups': 'warehouseGroups'
        }

        self._warehouses = warehouses
        self._warehouse_groups = warehouse_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WarehousesDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WarehousesDTO of this WarehousesDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def warehouses(self):
        """Gets the warehouses of this WarehousesDTO.

        Список складов, не входящих в группы.

        :return: The warehouses of this WarehousesDTO.
        :rtype: List[WarehouseDTO]
        """
        return self._warehouses

    @warehouses.setter
    def warehouses(self, warehouses):
        """Sets the warehouses of this WarehousesDTO.

        Список складов, не входящих в группы.

        :param warehouses: The warehouses of this WarehousesDTO.
        :type warehouses: List[WarehouseDTO]
        """
        if warehouses is None:
            raise ValueError("Invalid value for `warehouses`, must not be `None`")

        self._warehouses = warehouses

    @property
    def warehouse_groups(self):
        """Gets the warehouse_groups of this WarehousesDTO.

        Список групп складов.

        :return: The warehouse_groups of this WarehousesDTO.
        :rtype: List[WarehouseGroupDTO]
        """
        return self._warehouse_groups

    @warehouse_groups.setter
    def warehouse_groups(self, warehouse_groups):
        """Sets the warehouse_groups of this WarehousesDTO.

        Список групп складов.

        :param warehouse_groups: The warehouse_groups of this WarehousesDTO.
        :type warehouse_groups: List[WarehouseGroupDTO]
        """
        if warehouse_groups is None:
            raise ValueError("Invalid value for `warehouse_groups`, must not be `None`")

        self._warehouse_groups = warehouse_groups
