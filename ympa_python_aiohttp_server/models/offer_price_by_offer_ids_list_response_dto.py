# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.offer_price_by_offer_ids_response_dto import OfferPriceByOfferIdsResponseDTO
from ympa_python_aiohttp_server.models.scrolling_pager_dto import ScrollingPagerDTO
from ympa_python_aiohttp_server import util


class OfferPriceByOfferIdsListResponseDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offers: List[OfferPriceByOfferIdsResponseDTO]=None, paging: ScrollingPagerDTO=None):
        """OfferPriceByOfferIdsListResponseDTO - a model defined in OpenAPI

        :param offers: The offers of this OfferPriceByOfferIdsListResponseDTO.
        :param paging: The paging of this OfferPriceByOfferIdsListResponseDTO.
        """
        self.openapi_types = {
            'offers': List[OfferPriceByOfferIdsResponseDTO],
            'paging': ScrollingPagerDTO
        }

        self.attribute_map = {
            'offers': 'offers',
            'paging': 'paging'
        }

        self._offers = offers
        self._paging = paging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferPriceByOfferIdsListResponseDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfferPriceByOfferIdsListResponseDTO of this OfferPriceByOfferIdsListResponseDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offers(self):
        """Gets the offers of this OfferPriceByOfferIdsListResponseDTO.

        Страница списка цен.

        :return: The offers of this OfferPriceByOfferIdsListResponseDTO.
        :rtype: List[OfferPriceByOfferIdsResponseDTO]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this OfferPriceByOfferIdsListResponseDTO.

        Страница списка цен.

        :param offers: The offers of this OfferPriceByOfferIdsListResponseDTO.
        :type offers: List[OfferPriceByOfferIdsResponseDTO]
        """
        if offers is None:
            raise ValueError("Invalid value for `offers`, must not be `None`")

        self._offers = offers

    @property
    def paging(self):
        """Gets the paging of this OfferPriceByOfferIdsListResponseDTO.


        :return: The paging of this OfferPriceByOfferIdsListResponseDTO.
        :rtype: ScrollingPagerDTO
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this OfferPriceByOfferIdsListResponseDTO.


        :param paging: The paging of this OfferPriceByOfferIdsListResponseDTO.
        :type paging: ScrollingPagerDTO
        """

        self._paging = paging
