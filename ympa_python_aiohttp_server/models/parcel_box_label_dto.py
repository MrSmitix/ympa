# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class ParcelBoxLabelDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url: str=None, supplier_name: str=None, delivery_service_name: str=None, order_id: int=None, order_num: str=None, recipient_name: str=None, box_id: int=None, fulfilment_id: str=None, place: str=None, weight: str=None, delivery_service_id: str=None, delivery_address: str=None, shipment_date: str=None):
        """ParcelBoxLabelDTO - a model defined in OpenAPI

        :param url: The url of this ParcelBoxLabelDTO.
        :param supplier_name: The supplier_name of this ParcelBoxLabelDTO.
        :param delivery_service_name: The delivery_service_name of this ParcelBoxLabelDTO.
        :param order_id: The order_id of this ParcelBoxLabelDTO.
        :param order_num: The order_num of this ParcelBoxLabelDTO.
        :param recipient_name: The recipient_name of this ParcelBoxLabelDTO.
        :param box_id: The box_id of this ParcelBoxLabelDTO.
        :param fulfilment_id: The fulfilment_id of this ParcelBoxLabelDTO.
        :param place: The place of this ParcelBoxLabelDTO.
        :param weight: The weight of this ParcelBoxLabelDTO.
        :param delivery_service_id: The delivery_service_id of this ParcelBoxLabelDTO.
        :param delivery_address: The delivery_address of this ParcelBoxLabelDTO.
        :param shipment_date: The shipment_date of this ParcelBoxLabelDTO.
        """
        self.openapi_types = {
            'url': str,
            'supplier_name': str,
            'delivery_service_name': str,
            'order_id': int,
            'order_num': str,
            'recipient_name': str,
            'box_id': int,
            'fulfilment_id': str,
            'place': str,
            'weight': str,
            'delivery_service_id': str,
            'delivery_address': str,
            'shipment_date': str
        }

        self.attribute_map = {
            'url': 'url',
            'supplier_name': 'supplierName',
            'delivery_service_name': 'deliveryServiceName',
            'order_id': 'orderId',
            'order_num': 'orderNum',
            'recipient_name': 'recipientName',
            'box_id': 'boxId',
            'fulfilment_id': 'fulfilmentId',
            'place': 'place',
            'weight': 'weight',
            'delivery_service_id': 'deliveryServiceId',
            'delivery_address': 'deliveryAddress',
            'shipment_date': 'shipmentDate'
        }

        self._url = url
        self._supplier_name = supplier_name
        self._delivery_service_name = delivery_service_name
        self._order_id = order_id
        self._order_num = order_num
        self._recipient_name = recipient_name
        self._box_id = box_id
        self._fulfilment_id = fulfilment_id
        self._place = place
        self._weight = weight
        self._delivery_service_id = delivery_service_id
        self._delivery_address = delivery_address
        self._shipment_date = shipment_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParcelBoxLabelDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParcelBoxLabelDTO of this ParcelBoxLabelDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this ParcelBoxLabelDTO.

        Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 

        :return: The url of this ParcelBoxLabelDTO.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ParcelBoxLabelDTO.

        Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 

        :param url: The url of this ParcelBoxLabelDTO.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def supplier_name(self):
        """Gets the supplier_name of this ParcelBoxLabelDTO.

        Юридическое название магазина.

        :return: The supplier_name of this ParcelBoxLabelDTO.
        :rtype: str
        """
        return self._supplier_name

    @supplier_name.setter
    def supplier_name(self, supplier_name):
        """Sets the supplier_name of this ParcelBoxLabelDTO.

        Юридическое название магазина.

        :param supplier_name: The supplier_name of this ParcelBoxLabelDTO.
        :type supplier_name: str
        """
        if supplier_name is None:
            raise ValueError("Invalid value for `supplier_name`, must not be `None`")

        self._supplier_name = supplier_name

    @property
    def delivery_service_name(self):
        """Gets the delivery_service_name of this ParcelBoxLabelDTO.

        Юридическое название службы доставки.

        :return: The delivery_service_name of this ParcelBoxLabelDTO.
        :rtype: str
        """
        return self._delivery_service_name

    @delivery_service_name.setter
    def delivery_service_name(self, delivery_service_name):
        """Sets the delivery_service_name of this ParcelBoxLabelDTO.

        Юридическое название службы доставки.

        :param delivery_service_name: The delivery_service_name of this ParcelBoxLabelDTO.
        :type delivery_service_name: str
        """
        if delivery_service_name is None:
            raise ValueError("Invalid value for `delivery_service_name`, must not be `None`")

        self._delivery_service_name = delivery_service_name

    @property
    def order_id(self):
        """Gets the order_id of this ParcelBoxLabelDTO.

        Идентификатор заказа в системе Маркета.

        :return: The order_id of this ParcelBoxLabelDTO.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this ParcelBoxLabelDTO.

        Идентификатор заказа в системе Маркета.

        :param order_id: The order_id of this ParcelBoxLabelDTO.
        :type order_id: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def order_num(self):
        """Gets the order_num of this ParcelBoxLabelDTO.

        Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина. 

        :return: The order_num of this ParcelBoxLabelDTO.
        :rtype: str
        """
        return self._order_num

    @order_num.setter
    def order_num(self, order_num):
        """Sets the order_num of this ParcelBoxLabelDTO.

        Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина. 

        :param order_num: The order_num of this ParcelBoxLabelDTO.
        :type order_num: str
        """
        if order_num is None:
            raise ValueError("Invalid value for `order_num`, must not be `None`")

        self._order_num = order_num

    @property
    def recipient_name(self):
        """Gets the recipient_name of this ParcelBoxLabelDTO.

        Фамилия и инициалы получателя заказа.

        :return: The recipient_name of this ParcelBoxLabelDTO.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this ParcelBoxLabelDTO.

        Фамилия и инициалы получателя заказа.

        :param recipient_name: The recipient_name of this ParcelBoxLabelDTO.
        :type recipient_name: str
        """
        if recipient_name is None:
            raise ValueError("Invalid value for `recipient_name`, must not be `None`")

        self._recipient_name = recipient_name

    @property
    def box_id(self):
        """Gets the box_id of this ParcelBoxLabelDTO.

        Идентификатор коробки.

        :return: The box_id of this ParcelBoxLabelDTO.
        :rtype: int
        """
        return self._box_id

    @box_id.setter
    def box_id(self, box_id):
        """Sets the box_id of this ParcelBoxLabelDTO.

        Идентификатор коробки.

        :param box_id: The box_id of this ParcelBoxLabelDTO.
        :type box_id: int
        """
        if box_id is None:
            raise ValueError("Invalid value for `box_id`, must not be `None`")

        self._box_id = box_id

    @property
    def fulfilment_id(self):
        """Gets the fulfilment_id of this ParcelBoxLabelDTO.

        Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д. 

        :return: The fulfilment_id of this ParcelBoxLabelDTO.
        :rtype: str
        """
        return self._fulfilment_id

    @fulfilment_id.setter
    def fulfilment_id(self, fulfilment_id):
        """Sets the fulfilment_id of this ParcelBoxLabelDTO.

        Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д. 

        :param fulfilment_id: The fulfilment_id of this ParcelBoxLabelDTO.
        :type fulfilment_id: str
        """
        if fulfilment_id is None:
            raise ValueError("Invalid value for `fulfilment_id`, must not be `None`")

        self._fulfilment_id = fulfilment_id

    @property
    def place(self):
        """Gets the place of this ParcelBoxLabelDTO.

        Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`. 

        :return: The place of this ParcelBoxLabelDTO.
        :rtype: str
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this ParcelBoxLabelDTO.

        Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`. 

        :param place: The place of this ParcelBoxLabelDTO.
        :type place: str
        """
        if place is None:
            raise ValueError("Invalid value for `place`, must not be `None`")

        self._place = place

    @property
    def weight(self):
        """Gets the weight of this ParcelBoxLabelDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`. 

        :return: The weight of this ParcelBoxLabelDTO.
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ParcelBoxLabelDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`. 

        :param weight: The weight of this ParcelBoxLabelDTO.
        :type weight: str
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight

    @property
    def delivery_service_id(self):
        """Gets the delivery_service_id of this ParcelBoxLabelDTO.

        Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).

        :return: The delivery_service_id of this ParcelBoxLabelDTO.
        :rtype: str
        """
        return self._delivery_service_id

    @delivery_service_id.setter
    def delivery_service_id(self, delivery_service_id):
        """Sets the delivery_service_id of this ParcelBoxLabelDTO.

        Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).

        :param delivery_service_id: The delivery_service_id of this ParcelBoxLabelDTO.
        :type delivery_service_id: str
        """
        if delivery_service_id is None:
            raise ValueError("Invalid value for `delivery_service_id`, must not be `None`")

        self._delivery_service_id = delivery_service_id

    @property
    def delivery_address(self):
        """Gets the delivery_address of this ParcelBoxLabelDTO.

        Адрес получателя.

        :return: The delivery_address of this ParcelBoxLabelDTO.
        :rtype: str
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this ParcelBoxLabelDTO.

        Адрес получателя.

        :param delivery_address: The delivery_address of this ParcelBoxLabelDTO.
        :type delivery_address: str
        """

        self._delivery_address = delivery_address

    @property
    def shipment_date(self):
        """Gets the shipment_date of this ParcelBoxLabelDTO.

        Дата отгрузки в формате `dd.MM.yyyy`.

        :return: The shipment_date of this ParcelBoxLabelDTO.
        :rtype: str
        """
        return self._shipment_date

    @shipment_date.setter
    def shipment_date(self, shipment_date):
        """Sets the shipment_date of this ParcelBoxLabelDTO.

        Дата отгрузки в формате `dd.MM.yyyy`.

        :param shipment_date: The shipment_date of this ParcelBoxLabelDTO.
        :type shipment_date: str
        """

        self._shipment_date = shipment_date
