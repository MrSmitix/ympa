# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.order_stats_status_type import OrderStatsStatusType
from ympa_python_aiohttp_server import util


class GetOrdersStatsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_from: date=None, date_to: date=None, update_from: date=None, update_to: date=None, orders: List[int]=None, statuses: List[OrderStatsStatusType]=None, has_cis: bool=None):
        """GetOrdersStatsRequest - a model defined in OpenAPI

        :param date_from: The date_from of this GetOrdersStatsRequest.
        :param date_to: The date_to of this GetOrdersStatsRequest.
        :param update_from: The update_from of this GetOrdersStatsRequest.
        :param update_to: The update_to of this GetOrdersStatsRequest.
        :param orders: The orders of this GetOrdersStatsRequest.
        :param statuses: The statuses of this GetOrdersStatsRequest.
        :param has_cis: The has_cis of this GetOrdersStatsRequest.
        """
        self.openapi_types = {
            'date_from': date,
            'date_to': date,
            'update_from': date,
            'update_to': date,
            'orders': List[int],
            'statuses': List[OrderStatsStatusType],
            'has_cis': bool
        }

        self.attribute_map = {
            'date_from': 'dateFrom',
            'date_to': 'dateTo',
            'update_from': 'updateFrom',
            'update_to': 'updateTo',
            'orders': 'orders',
            'statuses': 'statuses',
            'has_cis': 'hasCis'
        }

        self._date_from = date_from
        self._date_to = date_to
        self._update_from = update_from
        self._update_to = update_to
        self._orders = orders
        self._statuses = statuses
        self._has_cis = has_cis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrdersStatsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetOrdersStatsRequest of this GetOrdersStatsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_from(self):
        """Gets the date_from of this GetOrdersStatsRequest.

        Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 

        :return: The date_from of this GetOrdersStatsRequest.
        :rtype: date
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this GetOrdersStatsRequest.

        Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 

        :param date_from: The date_from of this GetOrdersStatsRequest.
        :type date_from: date
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this GetOrdersStatsRequest.

        Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 

        :return: The date_to of this GetOrdersStatsRequest.
        :rtype: date
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this GetOrdersStatsRequest.

        Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 

        :param date_to: The date_to of this GetOrdersStatsRequest.
        :type date_to: date
        """

        self._date_to = date_to

    @property
    def update_from(self):
        """Gets the update_from of this GetOrdersStatsRequest.

        Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 

        :return: The update_from of this GetOrdersStatsRequest.
        :rtype: date
        """
        return self._update_from

    @update_from.setter
    def update_from(self, update_from):
        """Sets the update_from of this GetOrdersStatsRequest.

        Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 

        :param update_from: The update_from of this GetOrdersStatsRequest.
        :type update_from: date
        """

        self._update_from = update_from

    @property
    def update_to(self):
        """Gets the update_to of this GetOrdersStatsRequest.

        Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 

        :return: The update_to of this GetOrdersStatsRequest.
        :rtype: date
        """
        return self._update_to

    @update_to.setter
    def update_to(self, update_to):
        """Sets the update_to of this GetOrdersStatsRequest.

        Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 

        :param update_to: The update_to of this GetOrdersStatsRequest.
        :type update_to: date
        """

        self._update_to = update_to

    @property
    def orders(self):
        """Gets the orders of this GetOrdersStatsRequest.

        Список идентификаторов заказов.

        :return: The orders of this GetOrdersStatsRequest.
        :rtype: List[int]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this GetOrdersStatsRequest.

        Список идентификаторов заказов.

        :param orders: The orders of this GetOrdersStatsRequest.
        :type orders: List[int]
        """

        self._orders = orders

    @property
    def statuses(self):
        """Gets the statuses of this GetOrdersStatsRequest.

        Список статусов заказов.

        :return: The statuses of this GetOrdersStatsRequest.
        :rtype: List[OrderStatsStatusType]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this GetOrdersStatsRequest.

        Список статусов заказов.

        :param statuses: The statuses of this GetOrdersStatsRequest.
        :type statuses: List[OrderStatsStatusType]
        """

        self._statuses = statuses

    @property
    def has_cis(self):
        """Gets the has_cis of this GetOrdersStatsRequest.

        Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 

        :return: The has_cis of this GetOrdersStatsRequest.
        :rtype: bool
        """
        return self._has_cis

    @has_cis.setter
    def has_cis(self, has_cis):
        """Sets the has_cis of this GetOrdersStatsRequest.

        Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 

        :param has_cis: The has_cis of this GetOrdersStatsRequest.
        :type has_cis: bool
        """

        self._has_cis = has_cis
