# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.goods_stats_goods_dto import GoodsStatsGoodsDTO
from ympa_python_aiohttp_server import util


class GoodsStatsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shop_skus: List[GoodsStatsGoodsDTO]=None):
        """GoodsStatsDTO - a model defined in OpenAPI

        :param shop_skus: The shop_skus of this GoodsStatsDTO.
        """
        self.openapi_types = {
            'shop_skus': List[GoodsStatsGoodsDTO]
        }

        self.attribute_map = {
            'shop_skus': 'shopSkus'
        }

        self._shop_skus = shop_skus

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoodsStatsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoodsStatsDTO of this GoodsStatsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shop_skus(self):
        """Gets the shop_skus of this GoodsStatsDTO.

        Список товаров.

        :return: The shop_skus of this GoodsStatsDTO.
        :rtype: List[GoodsStatsGoodsDTO]
        """
        return self._shop_skus

    @shop_skus.setter
    def shop_skus(self, shop_skus):
        """Sets the shop_skus of this GoodsStatsDTO.

        Список товаров.

        :param shop_skus: The shop_skus of this GoodsStatsDTO.
        :type shop_skus: List[GoodsStatsGoodsDTO]
        """
        if shop_skus is None:
            raise ValueError("Invalid value for `shop_skus`, must not be `None`")

        self._shop_skus = shop_skus
