# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.base_price_dto import BasePriceDTO
import re
from ympa_python_aiohttp_server import util


class SuggestedOfferDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer_id: str=None, name: str=None, category: str=None, vendor: str=None, barcodes: List[str]=None, description: str=None, vendor_code: str=None, basic_price: BasePriceDTO=None):
        """SuggestedOfferDTO - a model defined in OpenAPI

        :param offer_id: The offer_id of this SuggestedOfferDTO.
        :param name: The name of this SuggestedOfferDTO.
        :param category: The category of this SuggestedOfferDTO.
        :param vendor: The vendor of this SuggestedOfferDTO.
        :param barcodes: The barcodes of this SuggestedOfferDTO.
        :param description: The description of this SuggestedOfferDTO.
        :param vendor_code: The vendor_code of this SuggestedOfferDTO.
        :param basic_price: The basic_price of this SuggestedOfferDTO.
        """
        self.openapi_types = {
            'offer_id': str,
            'name': str,
            'category': str,
            'vendor': str,
            'barcodes': List[str],
            'description': str,
            'vendor_code': str,
            'basic_price': BasePriceDTO
        }

        self.attribute_map = {
            'offer_id': 'offerId',
            'name': 'name',
            'category': 'category',
            'vendor': 'vendor',
            'barcodes': 'barcodes',
            'description': 'description',
            'vendor_code': 'vendorCode',
            'basic_price': 'basicPrice'
        }

        self._offer_id = offer_id
        self._name = name
        self._category = category
        self._vendor = vendor
        self._barcodes = barcodes
        self._description = description
        self._vendor_code = vendor_code
        self._basic_price = basic_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuggestedOfferDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuggestedOfferDTO of this SuggestedOfferDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_id(self):
        """Gets the offer_id of this SuggestedOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 

        :return: The offer_id of this SuggestedOfferDTO.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this SuggestedOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 

        :param offer_id: The offer_id of this SuggestedOfferDTO.
        :type offer_id: str
        """
        if offer_id is not None and len(offer_id) > 255:
            raise ValueError("Invalid value for `offer_id`, length must be less than or equal to `255`")
        if offer_id is not None and len(offer_id) < 1:
            raise ValueError("Invalid value for `offer_id`, length must be greater than or equal to `1`")
        if offer_id is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', offer_id):
            raise ValueError("Invalid value for `offer_id`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")

        self._offer_id = offer_id

    @property
    def name(self):
        """Gets the name of this SuggestedOfferDTO.

        Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 

        :return: The name of this SuggestedOfferDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SuggestedOfferDTO.

        Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 

        :param name: The name of this SuggestedOfferDTO.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")

        self._name = name

    @property
    def category(self):
        """Gets the category of this SuggestedOfferDTO.

        Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 

        :return: The category of this SuggestedOfferDTO.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SuggestedOfferDTO.

        Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 

        :param category: The category of this SuggestedOfferDTO.
        :type category: str
        """

        self._category = category

    @property
    def vendor(self):
        """Gets the vendor of this SuggestedOfferDTO.

        Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.

        :return: The vendor of this SuggestedOfferDTO.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this SuggestedOfferDTO.

        Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.

        :param vendor: The vendor of this SuggestedOfferDTO.
        :type vendor: str
        """

        self._vendor = vendor

    @property
    def barcodes(self):
        """Gets the barcodes of this SuggestedOfferDTO.

        Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  

        :return: The barcodes of this SuggestedOfferDTO.
        :rtype: List[str]
        """
        return self._barcodes

    @barcodes.setter
    def barcodes(self, barcodes):
        """Sets the barcodes of this SuggestedOfferDTO.

        Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  

        :param barcodes: The barcodes of this SuggestedOfferDTO.
        :type barcodes: List[str]
        """

        self._barcodes = barcodes

    @property
    def description(self):
        """Gets the description of this SuggestedOfferDTO.

        Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 

        :return: The description of this SuggestedOfferDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SuggestedOfferDTO.

        Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 

        :param description: The description of this SuggestedOfferDTO.
        :type description: str
        """
        if description is not None and len(description) > 6000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `6000`")

        self._description = description

    @property
    def vendor_code(self):
        """Gets the vendor_code of this SuggestedOfferDTO.

        Артикул товара от производителя.

        :return: The vendor_code of this SuggestedOfferDTO.
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this SuggestedOfferDTO.

        Артикул товара от производителя.

        :param vendor_code: The vendor_code of this SuggestedOfferDTO.
        :type vendor_code: str
        """

        self._vendor_code = vendor_code

    @property
    def basic_price(self):
        """Gets the basic_price of this SuggestedOfferDTO.


        :return: The basic_price of this SuggestedOfferDTO.
        :rtype: BasePriceDTO
        """
        return self._basic_price

    @basic_price.setter
    def basic_price(self, basic_price):
        """Sets the basic_price of this SuggestedOfferDTO.


        :param basic_price: The basic_price of this SuggestedOfferDTO.
        :type basic_price: BasePriceDTO
        """

        self._basic_price = basic_price
