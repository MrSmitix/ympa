# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class GenerateCompetitorsPositionReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_id: int=None, category_id: int=None, date_from: date=None, date_to: date=None):
        """GenerateCompetitorsPositionReportRequest - a model defined in OpenAPI

        :param business_id: The business_id of this GenerateCompetitorsPositionReportRequest.
        :param category_id: The category_id of this GenerateCompetitorsPositionReportRequest.
        :param date_from: The date_from of this GenerateCompetitorsPositionReportRequest.
        :param date_to: The date_to of this GenerateCompetitorsPositionReportRequest.
        """
        self.openapi_types = {
            'business_id': int,
            'category_id': int,
            'date_from': date,
            'date_to': date
        }

        self.attribute_map = {
            'business_id': 'businessId',
            'category_id': 'categoryId',
            'date_from': 'dateFrom',
            'date_to': 'dateTo'
        }

        self._business_id = business_id
        self._category_id = category_id
        self._date_from = date_from
        self._date_to = date_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateCompetitorsPositionReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateCompetitorsPositionReportRequest of this GenerateCompetitorsPositionReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_id(self):
        """Gets the business_id of this GenerateCompetitorsPositionReportRequest.

        Идентификатор бизнеса.

        :return: The business_id of this GenerateCompetitorsPositionReportRequest.
        :rtype: int
        """
        return self._business_id

    @business_id.setter
    def business_id(self, business_id):
        """Sets the business_id of this GenerateCompetitorsPositionReportRequest.

        Идентификатор бизнеса.

        :param business_id: The business_id of this GenerateCompetitorsPositionReportRequest.
        :type business_id: int
        """
        if business_id is None:
            raise ValueError("Invalid value for `business_id`, must not be `None`")

        self._business_id = business_id

    @property
    def category_id(self):
        """Gets the category_id of this GenerateCompetitorsPositionReportRequest.

        Идентификатор категории.

        :return: The category_id of this GenerateCompetitorsPositionReportRequest.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this GenerateCompetitorsPositionReportRequest.

        Идентификатор категории.

        :param category_id: The category_id of this GenerateCompetitorsPositionReportRequest.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def date_from(self):
        """Gets the date_from of this GenerateCompetitorsPositionReportRequest.

        Начало периода, включительно.

        :return: The date_from of this GenerateCompetitorsPositionReportRequest.
        :rtype: date
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this GenerateCompetitorsPositionReportRequest.

        Начало периода, включительно.

        :param date_from: The date_from of this GenerateCompetitorsPositionReportRequest.
        :type date_from: date
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this GenerateCompetitorsPositionReportRequest.

        Конец периода, включительно.

        :return: The date_to of this GenerateCompetitorsPositionReportRequest.
        :rtype: date
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this GenerateCompetitorsPositionReportRequest.

        Конец периода, включительно.

        :param date_to: The date_to of this GenerateCompetitorsPositionReportRequest.
        :type date_to: date
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")

        self._date_to = date_to
