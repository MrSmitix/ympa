# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class GetQualityRatingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_from: date=None, date_to: date=None, campaign_ids: list[int]=None):
        """GetQualityRatingRequest - a model defined in OpenAPI

        :param date_from: The date_from of this GetQualityRatingRequest.
        :param date_to: The date_to of this GetQualityRatingRequest.
        :param campaign_ids: The campaign_ids of this GetQualityRatingRequest.
        """
        self.openapi_types = {
            'date_from': date,
            'date_to': date,
            'campaign_ids': list[int]
        }

        self.attribute_map = {
            'date_from': 'dateFrom',
            'date_to': 'dateTo',
            'campaign_ids': 'campaignIds'
        }

        self._date_from = date_from
        self._date_to = date_to
        self._campaign_ids = campaign_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetQualityRatingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetQualityRatingRequest of this GetQualityRatingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_from(self):
        """Gets the date_from of this GetQualityRatingRequest.

        Начало периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть раньше 30 дней от текущей даты. 

        :return: The date_from of this GetQualityRatingRequest.
        :rtype: date
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this GetQualityRatingRequest.

        Начало периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть раньше 30 дней от текущей даты. 

        :param date_from: The date_from of this GetQualityRatingRequest.
        :type date_from: date
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this GetQualityRatingRequest.

        Конец периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть позже текущей даты. 

        :return: The date_to of this GetQualityRatingRequest.
        :rtype: date
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this GetQualityRatingRequest.

        Конец периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть позже текущей даты. 

        :param date_to: The date_to of this GetQualityRatingRequest.
        :type date_to: date
        """

        self._date_to = date_to

    @property
    def campaign_ids(self):
        """Gets the campaign_ids of this GetQualityRatingRequest.

        Список идентификаторов магазинов.

        :return: The campaign_ids of this GetQualityRatingRequest.
        :rtype: list[int]
        """
        return self._campaign_ids

    @campaign_ids.setter
    def campaign_ids(self, campaign_ids):
        """Sets the campaign_ids of this GetQualityRatingRequest.

        Список идентификаторов магазинов.

        :param campaign_ids: The campaign_ids of this GetQualityRatingRequest.
        :type campaign_ids: list[int]
        """
        if campaign_ids is None:
            raise ValueError("Invalid value for `campaign_ids`, must not be `None`")
        if campaign_ids is not None and len(campaign_ids) > 50:
            raise ValueError("Invalid value for `campaign_ids`, number of items must be less than or equal to `50`")
        if campaign_ids is not None and len(campaign_ids) < 1:
            raise ValueError("Invalid value for `campaign_ids`, number of items must be greater than or equal to `1`")

        self._campaign_ids = campaign_ids
