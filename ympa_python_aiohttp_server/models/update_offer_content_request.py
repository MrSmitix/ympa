# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.offer_content_dto import OfferContentDTO
from ympa_python_aiohttp_server import util


class UpdateOfferContentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offers_content: List[OfferContentDTO]=None):
        """UpdateOfferContentRequest - a model defined in OpenAPI

        :param offers_content: The offers_content of this UpdateOfferContentRequest.
        """
        self.openapi_types = {
            'offers_content': List[OfferContentDTO]
        }

        self.attribute_map = {
            'offers_content': 'offersContent'
        }

        self._offers_content = offers_content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateOfferContentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateOfferContentRequest of this UpdateOfferContentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offers_content(self):
        """Gets the offers_content of this UpdateOfferContentRequest.

        Список товаров с указанными характеристиками.

        :return: The offers_content of this UpdateOfferContentRequest.
        :rtype: List[OfferContentDTO]
        """
        return self._offers_content

    @offers_content.setter
    def offers_content(self, offers_content):
        """Sets the offers_content of this UpdateOfferContentRequest.

        Список товаров с указанными характеристиками.

        :param offers_content: The offers_content of this UpdateOfferContentRequest.
        :type offers_content: List[OfferContentDTO]
        """
        if offers_content is None:
            raise ValueError("Invalid value for `offers_content`, must not be `None`")
        if offers_content is not None and len(offers_content) > 100:
            raise ValueError("Invalid value for `offers_content`, number of items must be less than or equal to `100`")
        if offers_content is not None and len(offers_content) < 1:
            raise ValueError("Invalid value for `offers_content`, number of items must be greater than or equal to `1`")

        self._offers_content = offers_content
