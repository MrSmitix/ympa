# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.category_parameter_unit_dto import CategoryParameterUnitDTO
from ympa_python_aiohttp_server.models.offer_card_recommendation_type import OfferCardRecommendationType
from ympa_python_aiohttp_server.models.parameter_type import ParameterType
from ympa_python_aiohttp_server.models.parameter_value_constraints_dto import ParameterValueConstraintsDTO
from ympa_python_aiohttp_server.models.parameter_value_option_dto import ParameterValueOptionDTO
from ympa_python_aiohttp_server.models.value_restriction_dto import ValueRestrictionDTO
from ympa_python_aiohttp_server import util


class CategoryParameterDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, type: ParameterType=None, unit: CategoryParameterUnitDTO=None, description: str=None, recommendation_types: List[OfferCardRecommendationType]=None, required: bool=None, filtering: bool=None, distinctive: bool=None, multivalue: bool=None, allow_custom_values: bool=None, values: List[ParameterValueOptionDTO]=None, constraints: ParameterValueConstraintsDTO=None, value_restrictions: List[ValueRestrictionDTO]=None):
        """CategoryParameterDTO - a model defined in OpenAPI

        :param id: The id of this CategoryParameterDTO.
        :param name: The name of this CategoryParameterDTO.
        :param type: The type of this CategoryParameterDTO.
        :param unit: The unit of this CategoryParameterDTO.
        :param description: The description of this CategoryParameterDTO.
        :param recommendation_types: The recommendation_types of this CategoryParameterDTO.
        :param required: The required of this CategoryParameterDTO.
        :param filtering: The filtering of this CategoryParameterDTO.
        :param distinctive: The distinctive of this CategoryParameterDTO.
        :param multivalue: The multivalue of this CategoryParameterDTO.
        :param allow_custom_values: The allow_custom_values of this CategoryParameterDTO.
        :param values: The values of this CategoryParameterDTO.
        :param constraints: The constraints of this CategoryParameterDTO.
        :param value_restrictions: The value_restrictions of this CategoryParameterDTO.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'type': ParameterType,
            'unit': CategoryParameterUnitDTO,
            'description': str,
            'recommendation_types': List[OfferCardRecommendationType],
            'required': bool,
            'filtering': bool,
            'distinctive': bool,
            'multivalue': bool,
            'allow_custom_values': bool,
            'values': List[ParameterValueOptionDTO],
            'constraints': ParameterValueConstraintsDTO,
            'value_restrictions': List[ValueRestrictionDTO]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'unit': 'unit',
            'description': 'description',
            'recommendation_types': 'recommendationTypes',
            'required': 'required',
            'filtering': 'filtering',
            'distinctive': 'distinctive',
            'multivalue': 'multivalue',
            'allow_custom_values': 'allowCustomValues',
            'values': 'values',
            'constraints': 'constraints',
            'value_restrictions': 'valueRestrictions'
        }

        self._id = id
        self._name = name
        self._type = type
        self._unit = unit
        self._description = description
        self._recommendation_types = recommendation_types
        self._required = required
        self._filtering = filtering
        self._distinctive = distinctive
        self._multivalue = multivalue
        self._allow_custom_values = allow_custom_values
        self._values = values
        self._constraints = constraints
        self._value_restrictions = value_restrictions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryParameterDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoryParameterDTO of this CategoryParameterDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CategoryParameterDTO.

        Идентификатор характеристики.

        :return: The id of this CategoryParameterDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CategoryParameterDTO.

        Идентификатор характеристики.

        :param id: The id of this CategoryParameterDTO.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this CategoryParameterDTO.

        Название характеристики.

        :return: The name of this CategoryParameterDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CategoryParameterDTO.

        Название характеристики.

        :param name: The name of this CategoryParameterDTO.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this CategoryParameterDTO.


        :return: The type of this CategoryParameterDTO.
        :rtype: ParameterType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CategoryParameterDTO.


        :param type: The type of this CategoryParameterDTO.
        :type type: ParameterType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this CategoryParameterDTO.


        :return: The unit of this CategoryParameterDTO.
        :rtype: CategoryParameterUnitDTO
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CategoryParameterDTO.


        :param unit: The unit of this CategoryParameterDTO.
        :type unit: CategoryParameterUnitDTO
        """

        self._unit = unit

    @property
    def description(self):
        """Gets the description of this CategoryParameterDTO.

        Описание характеристики.

        :return: The description of this CategoryParameterDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CategoryParameterDTO.

        Описание характеристики.

        :param description: The description of this CategoryParameterDTO.
        :type description: str
        """

        self._description = description

    @property
    def recommendation_types(self):
        """Gets the recommendation_types of this CategoryParameterDTO.

        Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.

        :return: The recommendation_types of this CategoryParameterDTO.
        :rtype: List[OfferCardRecommendationType]
        """
        return self._recommendation_types

    @recommendation_types.setter
    def recommendation_types(self, recommendation_types):
        """Sets the recommendation_types of this CategoryParameterDTO.

        Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.

        :param recommendation_types: The recommendation_types of this CategoryParameterDTO.
        :type recommendation_types: List[OfferCardRecommendationType]
        """

        self._recommendation_types = recommendation_types

    @property
    def required(self):
        """Gets the required of this CategoryParameterDTO.

        Обязательность характеристики.

        :return: The required of this CategoryParameterDTO.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CategoryParameterDTO.

        Обязательность характеристики.

        :param required: The required of this CategoryParameterDTO.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def filtering(self):
        """Gets the filtering of this CategoryParameterDTO.

        Используется ли характеристика в фильтре.

        :return: The filtering of this CategoryParameterDTO.
        :rtype: bool
        """
        return self._filtering

    @filtering.setter
    def filtering(self, filtering):
        """Sets the filtering of this CategoryParameterDTO.

        Используется ли характеристика в фильтре.

        :param filtering: The filtering of this CategoryParameterDTO.
        :type filtering: bool
        """
        if filtering is None:
            raise ValueError("Invalid value for `filtering`, must not be `None`")

        self._filtering = filtering

    @property
    def distinctive(self):
        """Gets the distinctive of this CategoryParameterDTO.

        Является ли характеристика особенностью варианта.

        :return: The distinctive of this CategoryParameterDTO.
        :rtype: bool
        """
        return self._distinctive

    @distinctive.setter
    def distinctive(self, distinctive):
        """Sets the distinctive of this CategoryParameterDTO.

        Является ли характеристика особенностью варианта.

        :param distinctive: The distinctive of this CategoryParameterDTO.
        :type distinctive: bool
        """
        if distinctive is None:
            raise ValueError("Invalid value for `distinctive`, must not be `None`")

        self._distinctive = distinctive

    @property
    def multivalue(self):
        """Gets the multivalue of this CategoryParameterDTO.

        Можно ли передать сразу несколько значений.

        :return: The multivalue of this CategoryParameterDTO.
        :rtype: bool
        """
        return self._multivalue

    @multivalue.setter
    def multivalue(self, multivalue):
        """Sets the multivalue of this CategoryParameterDTO.

        Можно ли передать сразу несколько значений.

        :param multivalue: The multivalue of this CategoryParameterDTO.
        :type multivalue: bool
        """
        if multivalue is None:
            raise ValueError("Invalid value for `multivalue`, must not be `None`")

        self._multivalue = multivalue

    @property
    def allow_custom_values(self):
        """Gets the allow_custom_values of this CategoryParameterDTO.

        Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.

        :return: The allow_custom_values of this CategoryParameterDTO.
        :rtype: bool
        """
        return self._allow_custom_values

    @allow_custom_values.setter
    def allow_custom_values(self, allow_custom_values):
        """Sets the allow_custom_values of this CategoryParameterDTO.

        Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.

        :param allow_custom_values: The allow_custom_values of this CategoryParameterDTO.
        :type allow_custom_values: bool
        """
        if allow_custom_values is None:
            raise ValueError("Invalid value for `allow_custom_values`, must not be `None`")

        self._allow_custom_values = allow_custom_values

    @property
    def values(self):
        """Gets the values of this CategoryParameterDTO.

        Список допустимых значений параметра. Только для характеристик типа `ENUM`.

        :return: The values of this CategoryParameterDTO.
        :rtype: List[ParameterValueOptionDTO]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this CategoryParameterDTO.

        Список допустимых значений параметра. Только для характеристик типа `ENUM`.

        :param values: The values of this CategoryParameterDTO.
        :type values: List[ParameterValueOptionDTO]
        """

        self._values = values

    @property
    def constraints(self):
        """Gets the constraints of this CategoryParameterDTO.


        :return: The constraints of this CategoryParameterDTO.
        :rtype: ParameterValueConstraintsDTO
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this CategoryParameterDTO.


        :param constraints: The constraints of this CategoryParameterDTO.
        :type constraints: ParameterValueConstraintsDTO
        """

        self._constraints = constraints

    @property
    def value_restrictions(self):
        """Gets the value_restrictions of this CategoryParameterDTO.

        Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.

        :return: The value_restrictions of this CategoryParameterDTO.
        :rtype: List[ValueRestrictionDTO]
        """
        return self._value_restrictions

    @value_restrictions.setter
    def value_restrictions(self, value_restrictions):
        """Sets the value_restrictions of this CategoryParameterDTO.

        Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.

        :param value_restrictions: The value_restrictions of this CategoryParameterDTO.
        :type value_restrictions: List[ValueRestrictionDTO]
        """

        self._value_restrictions = value_restrictions
