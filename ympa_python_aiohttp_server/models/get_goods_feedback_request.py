# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.feedback_reaction_status_type import FeedbackReactionStatusType
from ympa_python_aiohttp_server import util


class GetGoodsFeedbackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_time_from: datetime=None, date_time_to: datetime=None, reaction_status: FeedbackReactionStatusType=None, rating_values: list[int]=None, model_ids: list[int]=None, paid: bool=None):
        """GetGoodsFeedbackRequest - a model defined in OpenAPI

        :param date_time_from: The date_time_from of this GetGoodsFeedbackRequest.
        :param date_time_to: The date_time_to of this GetGoodsFeedbackRequest.
        :param reaction_status: The reaction_status of this GetGoodsFeedbackRequest.
        :param rating_values: The rating_values of this GetGoodsFeedbackRequest.
        :param model_ids: The model_ids of this GetGoodsFeedbackRequest.
        :param paid: The paid of this GetGoodsFeedbackRequest.
        """
        self.openapi_types = {
            'date_time_from': datetime,
            'date_time_to': datetime,
            'reaction_status': FeedbackReactionStatusType,
            'rating_values': list[int],
            'model_ids': list[int],
            'paid': bool
        }

        self.attribute_map = {
            'date_time_from': 'dateTimeFrom',
            'date_time_to': 'dateTimeTo',
            'reaction_status': 'reactionStatus',
            'rating_values': 'ratingValues',
            'model_ids': 'modelIds',
            'paid': 'paid'
        }

        self._date_time_from = date_time_from
        self._date_time_to = date_time_to
        self._reaction_status = reaction_status
        self._rating_values = rating_values
        self._model_ids = model_ids
        self._paid = paid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetGoodsFeedbackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetGoodsFeedbackRequest of this GetGoodsFeedbackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_time_from(self):
        """Gets the date_time_from of this GetGoodsFeedbackRequest.

        Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты. 

        :return: The date_time_from of this GetGoodsFeedbackRequest.
        :rtype: datetime
        """
        return self._date_time_from

    @date_time_from.setter
    def date_time_from(self, date_time_from):
        """Sets the date_time_from of this GetGoodsFeedbackRequest.

        Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты. 

        :param date_time_from: The date_time_from of this GetGoodsFeedbackRequest.
        :type date_time_from: datetime
        """

        self._date_time_from = date_time_from

    @property
    def date_time_to(self):
        """Gets the date_time_to of this GetGoodsFeedbackRequest.

        Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 

        :return: The date_time_to of this GetGoodsFeedbackRequest.
        :rtype: datetime
        """
        return self._date_time_to

    @date_time_to.setter
    def date_time_to(self, date_time_to):
        """Sets the date_time_to of this GetGoodsFeedbackRequest.

        Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 

        :param date_time_to: The date_time_to of this GetGoodsFeedbackRequest.
        :type date_time_to: datetime
        """

        self._date_time_to = date_time_to

    @property
    def reaction_status(self):
        """Gets the reaction_status of this GetGoodsFeedbackRequest.


        :return: The reaction_status of this GetGoodsFeedbackRequest.
        :rtype: FeedbackReactionStatusType
        """
        return self._reaction_status

    @reaction_status.setter
    def reaction_status(self, reaction_status):
        """Sets the reaction_status of this GetGoodsFeedbackRequest.


        :param reaction_status: The reaction_status of this GetGoodsFeedbackRequest.
        :type reaction_status: FeedbackReactionStatusType
        """

        self._reaction_status = reaction_status

    @property
    def rating_values(self):
        """Gets the rating_values of this GetGoodsFeedbackRequest.

        Оценка товара.

        :return: The rating_values of this GetGoodsFeedbackRequest.
        :rtype: list[int]
        """
        return self._rating_values

    @rating_values.setter
    def rating_values(self, rating_values):
        """Sets the rating_values of this GetGoodsFeedbackRequest.

        Оценка товара.

        :param rating_values: The rating_values of this GetGoodsFeedbackRequest.
        :type rating_values: list[int]
        """
        if rating_values is not None and len(rating_values) > 5:
            raise ValueError("Invalid value for `rating_values`, number of items must be less than or equal to `5`")

        self._rating_values = rating_values

    @property
    def model_ids(self):
        """Gets the model_ids of this GetGoodsFeedbackRequest.

        Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 

        :return: The model_ids of this GetGoodsFeedbackRequest.
        :rtype: list[int]
        """
        return self._model_ids

    @model_ids.setter
    def model_ids(self, model_ids):
        """Sets the model_ids of this GetGoodsFeedbackRequest.

        Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 

        :param model_ids: The model_ids of this GetGoodsFeedbackRequest.
        :type model_ids: list[int]
        """
        if model_ids is not None and len(model_ids) > 20:
            raise ValueError("Invalid value for `model_ids`, number of items must be less than or equal to `20`")

        self._model_ids = model_ids

    @property
    def paid(self):
        """Gets the paid of this GetGoodsFeedbackRequest.

        Фильтр отзывов за баллы Плюса.

        :return: The paid of this GetGoodsFeedbackRequest.
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this GetGoodsFeedbackRequest.

        Фильтр отзывов за баллы Плюса.

        :param paid: The paid of this GetGoodsFeedbackRequest.
        :type paid: bool
        """

        self._paid = paid
