# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class OutletAddressDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, region_id: int=None, street: str=None, number: str=None, building: str=None, estate: str=None, block: str=None, additional: str=None, km: int=None, city: str=None):
        """OutletAddressDTO - a model defined in OpenAPI

        :param region_id: The region_id of this OutletAddressDTO.
        :param street: The street of this OutletAddressDTO.
        :param number: The number of this OutletAddressDTO.
        :param building: The building of this OutletAddressDTO.
        :param estate: The estate of this OutletAddressDTO.
        :param block: The block of this OutletAddressDTO.
        :param additional: The additional of this OutletAddressDTO.
        :param km: The km of this OutletAddressDTO.
        :param city: The city of this OutletAddressDTO.
        """
        self.openapi_types = {
            'region_id': int,
            'street': str,
            'number': str,
            'building': str,
            'estate': str,
            'block': str,
            'additional': str,
            'km': int,
            'city': str
        }

        self.attribute_map = {
            'region_id': 'regionId',
            'street': 'street',
            'number': 'number',
            'building': 'building',
            'estate': 'estate',
            'block': 'block',
            'additional': 'additional',
            'km': 'km',
            'city': 'city'
        }

        self._region_id = region_id
        self._street = street
        self._number = number
        self._building = building
        self._estate = estate
        self._block = block
        self._additional = additional
        self._km = km
        self._city = city

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutletAddressDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutletAddressDTO of this OutletAddressDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region_id(self):
        """Gets the region_id of this OutletAddressDTO.

        Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 

        :return: The region_id of this OutletAddressDTO.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this OutletAddressDTO.

        Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 

        :param region_id: The region_id of this OutletAddressDTO.
        :type region_id: int
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")

        self._region_id = region_id

    @property
    def street(self):
        """Gets the street of this OutletAddressDTO.

        Улица.

        :return: The street of this OutletAddressDTO.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this OutletAddressDTO.

        Улица.

        :param street: The street of this OutletAddressDTO.
        :type street: str
        """
        if street is not None and len(street) > 512:
            raise ValueError("Invalid value for `street`, length must be less than or equal to `512`")

        self._street = street

    @property
    def number(self):
        """Gets the number of this OutletAddressDTO.

        Номер дома.

        :return: The number of this OutletAddressDTO.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OutletAddressDTO.

        Номер дома.

        :param number: The number of this OutletAddressDTO.
        :type number: str
        """
        if number is not None and len(number) > 256:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `256`")

        self._number = number

    @property
    def building(self):
        """Gets the building of this OutletAddressDTO.

        Номер строения.

        :return: The building of this OutletAddressDTO.
        :rtype: str
        """
        return self._building

    @building.setter
    def building(self, building):
        """Sets the building of this OutletAddressDTO.

        Номер строения.

        :param building: The building of this OutletAddressDTO.
        :type building: str
        """
        if building is not None and len(building) > 16:
            raise ValueError("Invalid value for `building`, length must be less than or equal to `16`")

        self._building = building

    @property
    def estate(self):
        """Gets the estate of this OutletAddressDTO.

        Номер владения.

        :return: The estate of this OutletAddressDTO.
        :rtype: str
        """
        return self._estate

    @estate.setter
    def estate(self, estate):
        """Sets the estate of this OutletAddressDTO.

        Номер владения.

        :param estate: The estate of this OutletAddressDTO.
        :type estate: str
        """
        if estate is not None and len(estate) > 16:
            raise ValueError("Invalid value for `estate`, length must be less than or equal to `16`")

        self._estate = estate

    @property
    def block(self):
        """Gets the block of this OutletAddressDTO.

        Номер корпуса.

        :return: The block of this OutletAddressDTO.
        :rtype: str
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this OutletAddressDTO.

        Номер корпуса.

        :param block: The block of this OutletAddressDTO.
        :type block: str
        """
        if block is not None and len(block) > 16:
            raise ValueError("Invalid value for `block`, length must be less than or equal to `16`")

        self._block = block

    @property
    def additional(self):
        """Gets the additional of this OutletAddressDTO.

        Дополнительная информация.

        :return: The additional of this OutletAddressDTO.
        :rtype: str
        """
        return self._additional

    @additional.setter
    def additional(self, additional):
        """Sets the additional of this OutletAddressDTO.

        Дополнительная информация.

        :param additional: The additional of this OutletAddressDTO.
        :type additional: str
        """

        self._additional = additional

    @property
    def km(self):
        """Gets the km of this OutletAddressDTO.

        Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.

        :return: The km of this OutletAddressDTO.
        :rtype: int
        """
        return self._km

    @km.setter
    def km(self, km):
        """Sets the km of this OutletAddressDTO.

        Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.

        :param km: The km of this OutletAddressDTO.
        :type km: int
        """

        self._km = km

    @property
    def city(self):
        """Gets the city of this OutletAddressDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 

        :return: The city of this OutletAddressDTO.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this OutletAddressDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 

        :param city: The city of this OutletAddressDTO.
        :type city: str
        """
        if city is not None and len(city) > 200:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `200`")

        self._city = city
