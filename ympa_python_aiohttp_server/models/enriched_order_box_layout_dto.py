# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.order_box_layout_item_dto import OrderBoxLayoutItemDTO
from ympa_python_aiohttp_server import util


class EnrichedOrderBoxLayoutDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[OrderBoxLayoutItemDTO]=None, box_id: int=None):
        """EnrichedOrderBoxLayoutDTO - a model defined in OpenAPI

        :param items: The items of this EnrichedOrderBoxLayoutDTO.
        :param box_id: The box_id of this EnrichedOrderBoxLayoutDTO.
        """
        self.openapi_types = {
            'items': List[OrderBoxLayoutItemDTO],
            'box_id': int
        }

        self.attribute_map = {
            'items': 'items',
            'box_id': 'boxId'
        }

        self._items = items
        self._box_id = box_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnrichedOrderBoxLayoutDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnrichedOrderBoxLayoutDTO of this EnrichedOrderBoxLayoutDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this EnrichedOrderBoxLayoutDTO.

        Список товаров в коробке.  Если в коробке едет часть большого товара, в списке может быть только один пункт. 

        :return: The items of this EnrichedOrderBoxLayoutDTO.
        :rtype: List[OrderBoxLayoutItemDTO]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this EnrichedOrderBoxLayoutDTO.

        Список товаров в коробке.  Если в коробке едет часть большого товара, в списке может быть только один пункт. 

        :param items: The items of this EnrichedOrderBoxLayoutDTO.
        :type items: List[OrderBoxLayoutItemDTO]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items

    @property
    def box_id(self):
        """Gets the box_id of this EnrichedOrderBoxLayoutDTO.

        Идентификатор коробки.

        :return: The box_id of this EnrichedOrderBoxLayoutDTO.
        :rtype: int
        """
        return self._box_id

    @box_id.setter
    def box_id(self, box_id):
        """Sets the box_id of this EnrichedOrderBoxLayoutDTO.

        Идентификатор коробки.

        :param box_id: The box_id of this EnrichedOrderBoxLayoutDTO.
        :type box_id: int
        """

        self._box_id = box_id
