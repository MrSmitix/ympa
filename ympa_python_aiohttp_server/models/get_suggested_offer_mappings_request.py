# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.suggested_offer_dto import SuggestedOfferDTO
from ympa_python_aiohttp_server import util


class GetSuggestedOfferMappingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offers: List[SuggestedOfferDTO]=None):
        """GetSuggestedOfferMappingsRequest - a model defined in OpenAPI

        :param offers: The offers of this GetSuggestedOfferMappingsRequest.
        """
        self.openapi_types = {
            'offers': List[SuggestedOfferDTO]
        }

        self.attribute_map = {
            'offers': 'offers'
        }

        self._offers = offers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSuggestedOfferMappingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSuggestedOfferMappingsRequest of this GetSuggestedOfferMappingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offers(self):
        """Gets the offers of this GetSuggestedOfferMappingsRequest.

        Список товаров.

        :return: The offers of this GetSuggestedOfferMappingsRequest.
        :rtype: List[SuggestedOfferDTO]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this GetSuggestedOfferMappingsRequest.

        Список товаров.

        :param offers: The offers of this GetSuggestedOfferMappingsRequest.
        :type offers: List[SuggestedOfferDTO]
        """
        if offers is not None and len(offers) > 500:
            raise ValueError("Invalid value for `offers`, number of items must be less than or equal to `500`")
        if offers is not None and len(offers) < 1:
            raise ValueError("Invalid value for `offers`, number of items must be greater than or equal to `1`")

        self._offers = offers
