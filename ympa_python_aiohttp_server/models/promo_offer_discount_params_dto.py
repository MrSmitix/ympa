# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class PromoOfferDiscountParamsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, price: int=None, promo_price: int=None, max_promo_price: int=None):
        """PromoOfferDiscountParamsDTO - a model defined in OpenAPI

        :param price: The price of this PromoOfferDiscountParamsDTO.
        :param promo_price: The promo_price of this PromoOfferDiscountParamsDTO.
        :param max_promo_price: The max_promo_price of this PromoOfferDiscountParamsDTO.
        """
        self.openapi_types = {
            'price': int,
            'promo_price': int,
            'max_promo_price': int
        }

        self.attribute_map = {
            'price': 'price',
            'promo_price': 'promoPrice',
            'max_promo_price': 'maxPromoPrice'
        }

        self._price = price
        self._promo_price = promo_price
        self._max_promo_price = max_promo_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromoOfferDiscountParamsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromoOfferDiscountParamsDTO of this PromoOfferDiscountParamsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def price(self):
        """Gets the price of this PromoOfferDiscountParamsDTO.

        Зачеркнутая цена — та, по которой товар продавался до акции.  Указывается в рублях.  Возвращается, только если товар участвует в акции. 

        :return: The price of this PromoOfferDiscountParamsDTO.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PromoOfferDiscountParamsDTO.

        Зачеркнутая цена — та, по которой товар продавался до акции.  Указывается в рублях.  Возвращается, только если товар участвует в акции. 

        :param price: The price of this PromoOfferDiscountParamsDTO.
        :type price: int
        """

        self._price = price

    @property
    def promo_price(self):
        """Gets the promo_price of this PromoOfferDiscountParamsDTO.

        Цена по акции — та, по которой вы хотите продавать товар.  Указывается в рублях.  Возвращается, только если товар участвует в акции. 

        :return: The promo_price of this PromoOfferDiscountParamsDTO.
        :rtype: int
        """
        return self._promo_price

    @promo_price.setter
    def promo_price(self, promo_price):
        """Sets the promo_price of this PromoOfferDiscountParamsDTO.

        Цена по акции — та, по которой вы хотите продавать товар.  Указывается в рублях.  Возвращается, только если товар участвует в акции. 

        :param promo_price: The promo_price of this PromoOfferDiscountParamsDTO.
        :type promo_price: int
        """

        self._promo_price = promo_price

    @property
    def max_promo_price(self):
        """Gets the max_promo_price of this PromoOfferDiscountParamsDTO.

        Максимально возможная цена для участия в акции.  Указывается в рублях.  Возвращается для всех товаров. 

        :return: The max_promo_price of this PromoOfferDiscountParamsDTO.
        :rtype: int
        """
        return self._max_promo_price

    @max_promo_price.setter
    def max_promo_price(self, max_promo_price):
        """Sets the max_promo_price of this PromoOfferDiscountParamsDTO.

        Максимально возможная цена для участия в акции.  Указывается в рублях.  Возвращается для всех товаров. 

        :param max_promo_price: The max_promo_price of this PromoOfferDiscountParamsDTO.
        :type max_promo_price: int
        """
        if max_promo_price is None:
            raise ValueError("Invalid value for `max_promo_price`, must not be `None`")

        self._max_promo_price = max_promo_price
