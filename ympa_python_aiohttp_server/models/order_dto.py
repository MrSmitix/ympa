# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.currency_type import CurrencyType
from ympa_python_aiohttp_server.models.order_buyer_dto import OrderBuyerDTO
from ympa_python_aiohttp_server.models.order_delivery_dto import OrderDeliveryDTO
from ympa_python_aiohttp_server.models.order_item_dto import OrderItemDTO
from ympa_python_aiohttp_server.models.order_payment_method_type import OrderPaymentMethodType
from ympa_python_aiohttp_server.models.order_payment_type import OrderPaymentType
from ympa_python_aiohttp_server.models.order_status_type import OrderStatusType
from ympa_python_aiohttp_server.models.order_subsidy_dto import OrderSubsidyDTO
from ympa_python_aiohttp_server.models.order_substatus_type import OrderSubstatusType
from ympa_python_aiohttp_server.models.order_tax_system_type import OrderTaxSystemType
from ympa_python_aiohttp_server import util


class OrderDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, status: OrderStatusType=None, substatus: OrderSubstatusType=None, creation_date: str=None, updated_at: str=None, currency: CurrencyType=None, items_total: float=None, delivery_total: float=None, buyer_items_total: float=None, buyer_total: float=None, buyer_items_total_before_discount: float=None, buyer_total_before_discount: float=None, payment_type: OrderPaymentType=None, payment_method: OrderPaymentMethodType=None, fake: bool=None, items: List[OrderItemDTO]=None, subsidies: List[OrderSubsidyDTO]=None, delivery: OrderDeliveryDTO=None, buyer: OrderBuyerDTO=None, notes: str=None, tax_system: OrderTaxSystemType=None, cancel_requested: bool=None, expiry_date: str=None):
        """OrderDTO - a model defined in OpenAPI

        :param id: The id of this OrderDTO.
        :param status: The status of this OrderDTO.
        :param substatus: The substatus of this OrderDTO.
        :param creation_date: The creation_date of this OrderDTO.
        :param updated_at: The updated_at of this OrderDTO.
        :param currency: The currency of this OrderDTO.
        :param items_total: The items_total of this OrderDTO.
        :param delivery_total: The delivery_total of this OrderDTO.
        :param buyer_items_total: The buyer_items_total of this OrderDTO.
        :param buyer_total: The buyer_total of this OrderDTO.
        :param buyer_items_total_before_discount: The buyer_items_total_before_discount of this OrderDTO.
        :param buyer_total_before_discount: The buyer_total_before_discount of this OrderDTO.
        :param payment_type: The payment_type of this OrderDTO.
        :param payment_method: The payment_method of this OrderDTO.
        :param fake: The fake of this OrderDTO.
        :param items: The items of this OrderDTO.
        :param subsidies: The subsidies of this OrderDTO.
        :param delivery: The delivery of this OrderDTO.
        :param buyer: The buyer of this OrderDTO.
        :param notes: The notes of this OrderDTO.
        :param tax_system: The tax_system of this OrderDTO.
        :param cancel_requested: The cancel_requested of this OrderDTO.
        :param expiry_date: The expiry_date of this OrderDTO.
        """
        self.openapi_types = {
            'id': int,
            'status': OrderStatusType,
            'substatus': OrderSubstatusType,
            'creation_date': str,
            'updated_at': str,
            'currency': CurrencyType,
            'items_total': float,
            'delivery_total': float,
            'buyer_items_total': float,
            'buyer_total': float,
            'buyer_items_total_before_discount': float,
            'buyer_total_before_discount': float,
            'payment_type': OrderPaymentType,
            'payment_method': OrderPaymentMethodType,
            'fake': bool,
            'items': List[OrderItemDTO],
            'subsidies': List[OrderSubsidyDTO],
            'delivery': OrderDeliveryDTO,
            'buyer': OrderBuyerDTO,
            'notes': str,
            'tax_system': OrderTaxSystemType,
            'cancel_requested': bool,
            'expiry_date': str
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'substatus': 'substatus',
            'creation_date': 'creationDate',
            'updated_at': 'updatedAt',
            'currency': 'currency',
            'items_total': 'itemsTotal',
            'delivery_total': 'deliveryTotal',
            'buyer_items_total': 'buyerItemsTotal',
            'buyer_total': 'buyerTotal',
            'buyer_items_total_before_discount': 'buyerItemsTotalBeforeDiscount',
            'buyer_total_before_discount': 'buyerTotalBeforeDiscount',
            'payment_type': 'paymentType',
            'payment_method': 'paymentMethod',
            'fake': 'fake',
            'items': 'items',
            'subsidies': 'subsidies',
            'delivery': 'delivery',
            'buyer': 'buyer',
            'notes': 'notes',
            'tax_system': 'taxSystem',
            'cancel_requested': 'cancelRequested',
            'expiry_date': 'expiryDate'
        }

        self._id = id
        self._status = status
        self._substatus = substatus
        self._creation_date = creation_date
        self._updated_at = updated_at
        self._currency = currency
        self._items_total = items_total
        self._delivery_total = delivery_total
        self._buyer_items_total = buyer_items_total
        self._buyer_total = buyer_total
        self._buyer_items_total_before_discount = buyer_items_total_before_discount
        self._buyer_total_before_discount = buyer_total_before_discount
        self._payment_type = payment_type
        self._payment_method = payment_method
        self._fake = fake
        self._items = items
        self._subsidies = subsidies
        self._delivery = delivery
        self._buyer = buyer
        self._notes = notes
        self._tax_system = tax_system
        self._cancel_requested = cancel_requested
        self._expiry_date = expiry_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderDTO of this OrderDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OrderDTO.

        Идентификатор заказа.

        :return: The id of this OrderDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderDTO.

        Идентификатор заказа.

        :param id: The id of this OrderDTO.
        :type id: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this OrderDTO.


        :return: The status of this OrderDTO.
        :rtype: OrderStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderDTO.


        :param status: The status of this OrderDTO.
        :type status: OrderStatusType
        """

        self._status = status

    @property
    def substatus(self):
        """Gets the substatus of this OrderDTO.


        :return: The substatus of this OrderDTO.
        :rtype: OrderSubstatusType
        """
        return self._substatus

    @substatus.setter
    def substatus(self, substatus):
        """Sets the substatus of this OrderDTO.


        :param substatus: The substatus of this OrderDTO.
        :type substatus: OrderSubstatusType
        """

        self._substatus = substatus

    @property
    def creation_date(self):
        """Gets the creation_date of this OrderDTO.


        :return: The creation_date of this OrderDTO.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this OrderDTO.


        :param creation_date: The creation_date of this OrderDTO.
        :type creation_date: str
        """

        self._creation_date = creation_date

    @property
    def updated_at(self):
        """Gets the updated_at of this OrderDTO.


        :return: The updated_at of this OrderDTO.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OrderDTO.


        :param updated_at: The updated_at of this OrderDTO.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def currency(self):
        """Gets the currency of this OrderDTO.


        :return: The currency of this OrderDTO.
        :rtype: CurrencyType
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderDTO.


        :param currency: The currency of this OrderDTO.
        :type currency: CurrencyType
        """

        self._currency = currency

    @property
    def items_total(self):
        """Gets the items_total of this OrderDTO.

        Платеж покупателя. 

        :return: The items_total of this OrderDTO.
        :rtype: float
        """
        return self._items_total

    @items_total.setter
    def items_total(self, items_total):
        """Sets the items_total of this OrderDTO.

        Платеж покупателя. 

        :param items_total: The items_total of this OrderDTO.
        :type items_total: float
        """

        self._items_total = items_total

    @property
    def delivery_total(self):
        """Gets the delivery_total of this OrderDTO.

        Стоимость доставки. 

        :return: The delivery_total of this OrderDTO.
        :rtype: float
        """
        return self._delivery_total

    @delivery_total.setter
    def delivery_total(self, delivery_total):
        """Sets the delivery_total of this OrderDTO.

        Стоимость доставки. 

        :param delivery_total: The delivery_total of this OrderDTO.
        :type delivery_total: float
        """

        self._delivery_total = delivery_total

    @property
    def buyer_items_total(self):
        """Gets the buyer_items_total of this OrderDTO.

        {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 

        :return: The buyer_items_total of this OrderDTO.
        :rtype: float
        """
        return self._buyer_items_total

    @buyer_items_total.setter
    def buyer_items_total(self, buyer_items_total):
        """Sets the buyer_items_total of this OrderDTO.

        {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 

        :param buyer_items_total: The buyer_items_total of this OrderDTO.
        :type buyer_items_total: float
        """

        self._buyer_items_total = buyer_items_total

    @property
    def buyer_total(self):
        """Gets the buyer_total of this OrderDTO.

        {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 

        :return: The buyer_total of this OrderDTO.
        :rtype: float
        """
        return self._buyer_total

    @buyer_total.setter
    def buyer_total(self, buyer_total):
        """Sets the buyer_total of this OrderDTO.

        {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 

        :param buyer_total: The buyer_total of this OrderDTO.
        :type buyer_total: float
        """

        self._buyer_total = buyer_total

    @property
    def buyer_items_total_before_discount(self):
        """Gets the buyer_items_total_before_discount of this OrderDTO.

        Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 

        :return: The buyer_items_total_before_discount of this OrderDTO.
        :rtype: float
        """
        return self._buyer_items_total_before_discount

    @buyer_items_total_before_discount.setter
    def buyer_items_total_before_discount(self, buyer_items_total_before_discount):
        """Sets the buyer_items_total_before_discount of this OrderDTO.

        Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 

        :param buyer_items_total_before_discount: The buyer_items_total_before_discount of this OrderDTO.
        :type buyer_items_total_before_discount: float
        """

        self._buyer_items_total_before_discount = buyer_items_total_before_discount

    @property
    def buyer_total_before_discount(self):
        """Gets the buyer_total_before_discount of this OrderDTO.

        {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). 

        :return: The buyer_total_before_discount of this OrderDTO.
        :rtype: float
        """
        return self._buyer_total_before_discount

    @buyer_total_before_discount.setter
    def buyer_total_before_discount(self, buyer_total_before_discount):
        """Sets the buyer_total_before_discount of this OrderDTO.

        {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). 

        :param buyer_total_before_discount: The buyer_total_before_discount of this OrderDTO.
        :type buyer_total_before_discount: float
        """

        self._buyer_total_before_discount = buyer_total_before_discount

    @property
    def payment_type(self):
        """Gets the payment_type of this OrderDTO.


        :return: The payment_type of this OrderDTO.
        :rtype: OrderPaymentType
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this OrderDTO.


        :param payment_type: The payment_type of this OrderDTO.
        :type payment_type: OrderPaymentType
        """

        self._payment_type = payment_type

    @property
    def payment_method(self):
        """Gets the payment_method of this OrderDTO.


        :return: The payment_method of this OrderDTO.
        :rtype: OrderPaymentMethodType
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this OrderDTO.


        :param payment_method: The payment_method of this OrderDTO.
        :type payment_method: OrderPaymentMethodType
        """

        self._payment_method = payment_method

    @property
    def fake(self):
        """Gets the fake of this OrderDTO.

        Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 

        :return: The fake of this OrderDTO.
        :rtype: bool
        """
        return self._fake

    @fake.setter
    def fake(self, fake):
        """Sets the fake of this OrderDTO.

        Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 

        :param fake: The fake of this OrderDTO.
        :type fake: bool
        """

        self._fake = fake

    @property
    def items(self):
        """Gets the items of this OrderDTO.

        Список товаров в заказе.

        :return: The items of this OrderDTO.
        :rtype: List[OrderItemDTO]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrderDTO.

        Список товаров в заказе.

        :param items: The items of this OrderDTO.
        :type items: List[OrderItemDTO]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def subsidies(self):
        """Gets the subsidies of this OrderDTO.

        Список субсидий по типам.

        :return: The subsidies of this OrderDTO.
        :rtype: List[OrderSubsidyDTO]
        """
        return self._subsidies

    @subsidies.setter
    def subsidies(self, subsidies):
        """Sets the subsidies of this OrderDTO.

        Список субсидий по типам.

        :param subsidies: The subsidies of this OrderDTO.
        :type subsidies: List[OrderSubsidyDTO]
        """

        self._subsidies = subsidies

    @property
    def delivery(self):
        """Gets the delivery of this OrderDTO.


        :return: The delivery of this OrderDTO.
        :rtype: OrderDeliveryDTO
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this OrderDTO.


        :param delivery: The delivery of this OrderDTO.
        :type delivery: OrderDeliveryDTO
        """

        self._delivery = delivery

    @property
    def buyer(self):
        """Gets the buyer of this OrderDTO.


        :return: The buyer of this OrderDTO.
        :rtype: OrderBuyerDTO
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this OrderDTO.


        :param buyer: The buyer of this OrderDTO.
        :type buyer: OrderBuyerDTO
        """

        self._buyer = buyer

    @property
    def notes(self):
        """Gets the notes of this OrderDTO.

        Комментарий к заказу.

        :return: The notes of this OrderDTO.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this OrderDTO.

        Комментарий к заказу.

        :param notes: The notes of this OrderDTO.
        :type notes: str
        """

        self._notes = notes

    @property
    def tax_system(self):
        """Gets the tax_system of this OrderDTO.


        :return: The tax_system of this OrderDTO.
        :rtype: OrderTaxSystemType
        """
        return self._tax_system

    @tax_system.setter
    def tax_system(self, tax_system):
        """Sets the tax_system of this OrderDTO.


        :param tax_system: The tax_system of this OrderDTO.
        :type tax_system: OrderTaxSystemType
        """

        self._tax_system = tax_system

    @property
    def cancel_requested(self):
        """Gets the cancel_requested of this OrderDTO.

        **Только для модели DBS**  Запрошена ли отмена. 

        :return: The cancel_requested of this OrderDTO.
        :rtype: bool
        """
        return self._cancel_requested

    @cancel_requested.setter
    def cancel_requested(self, cancel_requested):
        """Sets the cancel_requested of this OrderDTO.

        **Только для модели DBS**  Запрошена ли отмена. 

        :param cancel_requested: The cancel_requested of this OrderDTO.
        :type cancel_requested: bool
        """

        self._cancel_requested = cancel_requested

    @property
    def expiry_date(self):
        """Gets the expiry_date of this OrderDTO.


        :return: The expiry_date of this OrderDTO.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this OrderDTO.


        :param expiry_date: The expiry_date of this OrderDTO.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date
