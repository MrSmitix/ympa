# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.currency_type import CurrencyType
from ympa_python_aiohttp_server import util


class GetPriceWithDiscountDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value: float=None, currency_id: CurrencyType=None, discount_base: float=None, updated_at: datetime=None):
        """GetPriceWithDiscountDTO - a model defined in OpenAPI

        :param value: The value of this GetPriceWithDiscountDTO.
        :param currency_id: The currency_id of this GetPriceWithDiscountDTO.
        :param discount_base: The discount_base of this GetPriceWithDiscountDTO.
        :param updated_at: The updated_at of this GetPriceWithDiscountDTO.
        """
        self.openapi_types = {
            'value': float,
            'currency_id': CurrencyType,
            'discount_base': float,
            'updated_at': datetime
        }

        self.attribute_map = {
            'value': 'value',
            'currency_id': 'currencyId',
            'discount_base': 'discountBase',
            'updated_at': 'updatedAt'
        }

        self._value = value
        self._currency_id = currency_id
        self._discount_base = discount_base
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPriceWithDiscountDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPriceWithDiscountDTO of this GetPriceWithDiscountDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this GetPriceWithDiscountDTO.

        Значение.

        :return: The value of this GetPriceWithDiscountDTO.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GetPriceWithDiscountDTO.

        Значение.

        :param value: The value of this GetPriceWithDiscountDTO.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")
        if value is not None and value <= 0:
            raise ValueError("Invalid value for `value`, must be a value greater than `0`")

        self._value = value

    @property
    def currency_id(self):
        """Gets the currency_id of this GetPriceWithDiscountDTO.


        :return: The currency_id of this GetPriceWithDiscountDTO.
        :rtype: CurrencyType
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this GetPriceWithDiscountDTO.


        :param currency_id: The currency_id of this GetPriceWithDiscountDTO.
        :type currency_id: CurrencyType
        """
        if currency_id is None:
            raise ValueError("Invalid value for `currency_id`, must not be `None`")

        self._currency_id = currency_id

    @property
    def discount_base(self):
        """Gets the discount_base of this GetPriceWithDiscountDTO.

        Цена до скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. 

        :return: The discount_base of this GetPriceWithDiscountDTO.
        :rtype: float
        """
        return self._discount_base

    @discount_base.setter
    def discount_base(self, discount_base):
        """Sets the discount_base of this GetPriceWithDiscountDTO.

        Цена до скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. 

        :param discount_base: The discount_base of this GetPriceWithDiscountDTO.
        :type discount_base: float
        """
        if discount_base is not None and discount_base <= 0:
            raise ValueError("Invalid value for `discount_base`, must be a value greater than `0`")

        self._discount_base = discount_base

    @property
    def updated_at(self):
        """Gets the updated_at of this GetPriceWithDiscountDTO.

        Время последнего обновления.

        :return: The updated_at of this GetPriceWithDiscountDTO.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetPriceWithDiscountDTO.

        Время последнего обновления.

        :param updated_at: The updated_at of this GetPriceWithDiscountDTO.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
