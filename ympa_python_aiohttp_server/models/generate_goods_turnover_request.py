# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class GenerateGoodsTurnoverRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_id: int=None, _date: date=None):
        """GenerateGoodsTurnoverRequest - a model defined in OpenAPI

        :param campaign_id: The campaign_id of this GenerateGoodsTurnoverRequest.
        :param _date: The _date of this GenerateGoodsTurnoverRequest.
        """
        self.openapi_types = {
            'campaign_id': int,
            '_date': date
        }

        self.attribute_map = {
            'campaign_id': 'campaignId',
            '_date': 'date'
        }

        self._campaign_id = campaign_id
        self.__date = _date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateGoodsTurnoverRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateGoodsTurnoverRequest of this GenerateGoodsTurnoverRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_id(self):
        """Gets the campaign_id of this GenerateGoodsTurnoverRequest.

        Идентификатор кампании.

        :return: The campaign_id of this GenerateGoodsTurnoverRequest.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this GenerateGoodsTurnoverRequest.

        Идентификатор кампании.

        :param campaign_id: The campaign_id of this GenerateGoodsTurnoverRequest.
        :type campaign_id: int
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")

        self._campaign_id = campaign_id

    @property
    def _date(self):
        """Gets the _date of this GenerateGoodsTurnoverRequest.

        Дата, за которую нужно рассчитать оборачиваемость. Если параметр не указан, используется текущая дата.

        :return: The _date of this GenerateGoodsTurnoverRequest.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GenerateGoodsTurnoverRequest.

        Дата, за которую нужно рассчитать оборачиваемость. Если параметр не указан, используется текущая дата.

        :param _date: The _date of this GenerateGoodsTurnoverRequest.
        :type _date: date
        """

        self.__date = _date
