# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.base_price_dto import BasePriceDTO
from ympa_python_aiohttp_server import util


class PriceCompetitivenessThresholdsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, optimal_price: BasePriceDTO=None, average_price: BasePriceDTO=None):
        """PriceCompetitivenessThresholdsDTO - a model defined in OpenAPI

        :param optimal_price: The optimal_price of this PriceCompetitivenessThresholdsDTO.
        :param average_price: The average_price of this PriceCompetitivenessThresholdsDTO.
        """
        self.openapi_types = {
            'optimal_price': BasePriceDTO,
            'average_price': BasePriceDTO
        }

        self.attribute_map = {
            'optimal_price': 'optimalPrice',
            'average_price': 'averagePrice'
        }

        self._optimal_price = optimal_price
        self._average_price = average_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PriceCompetitivenessThresholdsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PriceCompetitivenessThresholdsDTO of this PriceCompetitivenessThresholdsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def optimal_price(self):
        """Gets the optimal_price of this PriceCompetitivenessThresholdsDTO.


        :return: The optimal_price of this PriceCompetitivenessThresholdsDTO.
        :rtype: BasePriceDTO
        """
        return self._optimal_price

    @optimal_price.setter
    def optimal_price(self, optimal_price):
        """Sets the optimal_price of this PriceCompetitivenessThresholdsDTO.


        :param optimal_price: The optimal_price of this PriceCompetitivenessThresholdsDTO.
        :type optimal_price: BasePriceDTO
        """

        self._optimal_price = optimal_price

    @property
    def average_price(self):
        """Gets the average_price of this PriceCompetitivenessThresholdsDTO.


        :return: The average_price of this PriceCompetitivenessThresholdsDTO.
        :rtype: BasePriceDTO
        """
        return self._average_price

    @average_price.setter
    def average_price(self, average_price):
        """Sets the average_price of this PriceCompetitivenessThresholdsDTO.


        :param average_price: The average_price of this PriceCompetitivenessThresholdsDTO.
        :type average_price: BasePriceDTO
        """

        self._average_price = average_price
