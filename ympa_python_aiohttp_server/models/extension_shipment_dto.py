# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.shipment_action_type import ShipmentActionType
from ympa_python_aiohttp_server.models.shipment_status_change_dto import ShipmentStatusChangeDTO
from ympa_python_aiohttp_server import util


class ExtensionShipmentDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_status: ShipmentStatusChangeDTO=None, available_actions: list[ShipmentActionType]=None):
        """ExtensionShipmentDTO - a model defined in OpenAPI

        :param current_status: The current_status of this ExtensionShipmentDTO.
        :param available_actions: The available_actions of this ExtensionShipmentDTO.
        """
        self.openapi_types = {
            'current_status': ShipmentStatusChangeDTO,
            'available_actions': list[ShipmentActionType]
        }

        self.attribute_map = {
            'current_status': 'currentStatus',
            'available_actions': 'availableActions'
        }

        self._current_status = current_status
        self._available_actions = available_actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtensionShipmentDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtensionShipmentDTO of this ExtensionShipmentDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_status(self):
        """Gets the current_status of this ExtensionShipmentDTO.


        :return: The current_status of this ExtensionShipmentDTO.
        :rtype: ShipmentStatusChangeDTO
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this ExtensionShipmentDTO.


        :param current_status: The current_status of this ExtensionShipmentDTO.
        :type current_status: ShipmentStatusChangeDTO
        """

        self._current_status = current_status

    @property
    def available_actions(self):
        """Gets the available_actions of this ExtensionShipmentDTO.

        Доступные действия над отгрузкой.

        :return: The available_actions of this ExtensionShipmentDTO.
        :rtype: list[ShipmentActionType]
        """
        return self._available_actions

    @available_actions.setter
    def available_actions(self, available_actions):
        """Sets the available_actions of this ExtensionShipmentDTO.

        Доступные действия над отгрузкой.

        :param available_actions: The available_actions of this ExtensionShipmentDTO.
        :type available_actions: list[ShipmentActionType]
        """
        if available_actions is None:
            raise ValueError("Invalid value for `available_actions`, must not be `None`")

        self._available_actions = available_actions
