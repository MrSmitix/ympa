# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.warehouse_offer_dto import WarehouseOfferDTO
from ympa_python_aiohttp_server import util


class WarehouseOffersDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, warehouse_id: int=None, offers: List[WarehouseOfferDTO]=None):
        """WarehouseOffersDTO - a model defined in OpenAPI

        :param warehouse_id: The warehouse_id of this WarehouseOffersDTO.
        :param offers: The offers of this WarehouseOffersDTO.
        """
        self.openapi_types = {
            'warehouse_id': int,
            'offers': List[WarehouseOfferDTO]
        }

        self.attribute_map = {
            'warehouse_id': 'warehouseId',
            'offers': 'offers'
        }

        self._warehouse_id = warehouse_id
        self._offers = offers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WarehouseOffersDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WarehouseOffersDTO of this WarehouseOffersDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this WarehouseOffersDTO.

        Идентификатор склада.

        :return: The warehouse_id of this WarehouseOffersDTO.
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this WarehouseOffersDTO.

        Идентификатор склада.

        :param warehouse_id: The warehouse_id of this WarehouseOffersDTO.
        :type warehouse_id: int
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")

        self._warehouse_id = warehouse_id

    @property
    def offers(self):
        """Gets the offers of this WarehouseOffersDTO.

        Информация об остатках.

        :return: The offers of this WarehouseOffersDTO.
        :rtype: List[WarehouseOfferDTO]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this WarehouseOffersDTO.

        Информация об остатках.

        :param offers: The offers of this WarehouseOffersDTO.
        :type offers: List[WarehouseOfferDTO]
        """
        if offers is None:
            raise ValueError("Invalid value for `offers`, must not be `None`")

        self._offers = offers
