# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.order_stats_status_type import OrderStatsStatusType
from ympa_python_aiohttp_server.models.orders_stats_commission_dto import OrdersStatsCommissionDTO
from ympa_python_aiohttp_server.models.orders_stats_delivery_region_dto import OrdersStatsDeliveryRegionDTO
from ympa_python_aiohttp_server.models.orders_stats_item_dto import OrdersStatsItemDTO
from ympa_python_aiohttp_server.models.orders_stats_order_payment_type import OrdersStatsOrderPaymentType
from ympa_python_aiohttp_server.models.orders_stats_payment_dto import OrdersStatsPaymentDTO
from ympa_python_aiohttp_server import util


class OrdersStatsOrderDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, creation_date: date=None, status_update_date: datetime=None, status: OrderStatsStatusType=None, partner_order_id: str=None, payment_type: OrdersStatsOrderPaymentType=None, fake: bool=None, delivery_region: OrdersStatsDeliveryRegionDTO=None, items: List[OrdersStatsItemDTO]=None, initial_items: List[OrdersStatsItemDTO]=None, payments: List[OrdersStatsPaymentDTO]=None, commissions: List[OrdersStatsCommissionDTO]=None):
        """OrdersStatsOrderDTO - a model defined in OpenAPI

        :param id: The id of this OrdersStatsOrderDTO.
        :param creation_date: The creation_date of this OrdersStatsOrderDTO.
        :param status_update_date: The status_update_date of this OrdersStatsOrderDTO.
        :param status: The status of this OrdersStatsOrderDTO.
        :param partner_order_id: The partner_order_id of this OrdersStatsOrderDTO.
        :param payment_type: The payment_type of this OrdersStatsOrderDTO.
        :param fake: The fake of this OrdersStatsOrderDTO.
        :param delivery_region: The delivery_region of this OrdersStatsOrderDTO.
        :param items: The items of this OrdersStatsOrderDTO.
        :param initial_items: The initial_items of this OrdersStatsOrderDTO.
        :param payments: The payments of this OrdersStatsOrderDTO.
        :param commissions: The commissions of this OrdersStatsOrderDTO.
        """
        self.openapi_types = {
            'id': int,
            'creation_date': date,
            'status_update_date': datetime,
            'status': OrderStatsStatusType,
            'partner_order_id': str,
            'payment_type': OrdersStatsOrderPaymentType,
            'fake': bool,
            'delivery_region': OrdersStatsDeliveryRegionDTO,
            'items': List[OrdersStatsItemDTO],
            'initial_items': List[OrdersStatsItemDTO],
            'payments': List[OrdersStatsPaymentDTO],
            'commissions': List[OrdersStatsCommissionDTO]
        }

        self.attribute_map = {
            'id': 'id',
            'creation_date': 'creationDate',
            'status_update_date': 'statusUpdateDate',
            'status': 'status',
            'partner_order_id': 'partnerOrderId',
            'payment_type': 'paymentType',
            'fake': 'fake',
            'delivery_region': 'deliveryRegion',
            'items': 'items',
            'initial_items': 'initialItems',
            'payments': 'payments',
            'commissions': 'commissions'
        }

        self._id = id
        self._creation_date = creation_date
        self._status_update_date = status_update_date
        self._status = status
        self._partner_order_id = partner_order_id
        self._payment_type = payment_type
        self._fake = fake
        self._delivery_region = delivery_region
        self._items = items
        self._initial_items = initial_items
        self._payments = payments
        self._commissions = commissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrdersStatsOrderDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrdersStatsOrderDTO of this OrdersStatsOrderDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OrdersStatsOrderDTO.

        Идентификатор заказа.

        :return: The id of this OrdersStatsOrderDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrdersStatsOrderDTO.

        Идентификатор заказа.

        :param id: The id of this OrdersStatsOrderDTO.
        :type id: int
        """

        self._id = id

    @property
    def creation_date(self):
        """Gets the creation_date of this OrdersStatsOrderDTO.

        Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`. 

        :return: The creation_date of this OrdersStatsOrderDTO.
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this OrdersStatsOrderDTO.

        Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`. 

        :param creation_date: The creation_date of this OrdersStatsOrderDTO.
        :type creation_date: date
        """

        self._creation_date = creation_date

    @property
    def status_update_date(self):
        """Gets the status_update_date of this OrdersStatsOrderDTO.

        Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва). 

        :return: The status_update_date of this OrdersStatsOrderDTO.
        :rtype: datetime
        """
        return self._status_update_date

    @status_update_date.setter
    def status_update_date(self, status_update_date):
        """Sets the status_update_date of this OrdersStatsOrderDTO.

        Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва). 

        :param status_update_date: The status_update_date of this OrdersStatsOrderDTO.
        :type status_update_date: datetime
        """

        self._status_update_date = status_update_date

    @property
    def status(self):
        """Gets the status of this OrdersStatsOrderDTO.


        :return: The status of this OrdersStatsOrderDTO.
        :rtype: OrderStatsStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrdersStatsOrderDTO.


        :param status: The status of this OrdersStatsOrderDTO.
        :type status: OrderStatsStatusType
        """

        self._status = status

    @property
    def partner_order_id(self):
        """Gets the partner_order_id of this OrdersStatsOrderDTO.

        Идентификатор заказа в информационной системе магазина.

        :return: The partner_order_id of this OrdersStatsOrderDTO.
        :rtype: str
        """
        return self._partner_order_id

    @partner_order_id.setter
    def partner_order_id(self, partner_order_id):
        """Sets the partner_order_id of this OrdersStatsOrderDTO.

        Идентификатор заказа в информационной системе магазина.

        :param partner_order_id: The partner_order_id of this OrdersStatsOrderDTO.
        :type partner_order_id: str
        """

        self._partner_order_id = partner_order_id

    @property
    def payment_type(self):
        """Gets the payment_type of this OrdersStatsOrderDTO.


        :return: The payment_type of this OrdersStatsOrderDTO.
        :rtype: OrdersStatsOrderPaymentType
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this OrdersStatsOrderDTO.


        :param payment_type: The payment_type of this OrdersStatsOrderDTO.
        :type payment_type: OrdersStatsOrderPaymentType
        """

        self._payment_type = payment_type

    @property
    def fake(self):
        """Gets the fake of this OrdersStatsOrderDTO.

        Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 

        :return: The fake of this OrdersStatsOrderDTO.
        :rtype: bool
        """
        return self._fake

    @fake.setter
    def fake(self, fake):
        """Sets the fake of this OrdersStatsOrderDTO.

        Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 

        :param fake: The fake of this OrdersStatsOrderDTO.
        :type fake: bool
        """

        self._fake = fake

    @property
    def delivery_region(self):
        """Gets the delivery_region of this OrdersStatsOrderDTO.


        :return: The delivery_region of this OrdersStatsOrderDTO.
        :rtype: OrdersStatsDeliveryRegionDTO
        """
        return self._delivery_region

    @delivery_region.setter
    def delivery_region(self, delivery_region):
        """Sets the delivery_region of this OrdersStatsOrderDTO.


        :param delivery_region: The delivery_region of this OrdersStatsOrderDTO.
        :type delivery_region: OrdersStatsDeliveryRegionDTO
        """

        self._delivery_region = delivery_region

    @property
    def items(self):
        """Gets the items of this OrdersStatsOrderDTO.

        Список товаров в заказе после возможных изменений.

        :return: The items of this OrdersStatsOrderDTO.
        :rtype: List[OrdersStatsItemDTO]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrdersStatsOrderDTO.

        Список товаров в заказе после возможных изменений.

        :param items: The items of this OrdersStatsOrderDTO.
        :type items: List[OrdersStatsItemDTO]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def initial_items(self):
        """Gets the initial_items of this OrdersStatsOrderDTO.

        Список товаров в заказе до изменений.

        :return: The initial_items of this OrdersStatsOrderDTO.
        :rtype: List[OrdersStatsItemDTO]
        """
        return self._initial_items

    @initial_items.setter
    def initial_items(self, initial_items):
        """Sets the initial_items of this OrdersStatsOrderDTO.

        Список товаров в заказе до изменений.

        :param initial_items: The initial_items of this OrdersStatsOrderDTO.
        :type initial_items: List[OrdersStatsItemDTO]
        """

        self._initial_items = initial_items

    @property
    def payments(self):
        """Gets the payments of this OrdersStatsOrderDTO.

        Информация о денежных переводах по заказу.

        :return: The payments of this OrdersStatsOrderDTO.
        :rtype: List[OrdersStatsPaymentDTO]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this OrdersStatsOrderDTO.

        Информация о денежных переводах по заказу.

        :param payments: The payments of this OrdersStatsOrderDTO.
        :type payments: List[OrdersStatsPaymentDTO]
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")

        self._payments = payments

    @property
    def commissions(self):
        """Gets the commissions of this OrdersStatsOrderDTO.

        Информация о комиссиях за заказ.

        :return: The commissions of this OrdersStatsOrderDTO.
        :rtype: List[OrdersStatsCommissionDTO]
        """
        return self._commissions

    @commissions.setter
    def commissions(self, commissions):
        """Sets the commissions of this OrdersStatsOrderDTO.

        Информация о комиссиях за заказ.

        :param commissions: The commissions of this OrdersStatsOrderDTO.
        :type commissions: List[OrdersStatsCommissionDTO]
        """
        if commissions is None:
            raise ValueError("Invalid value for `commissions`, must not be `None`")

        self._commissions = commissions
