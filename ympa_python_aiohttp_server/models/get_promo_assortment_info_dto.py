# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class GetPromoAssortmentInfoDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_offers: int=None, potential_offers: int=None, processing: bool=None):
        """GetPromoAssortmentInfoDTO - a model defined in OpenAPI

        :param active_offers: The active_offers of this GetPromoAssortmentInfoDTO.
        :param potential_offers: The potential_offers of this GetPromoAssortmentInfoDTO.
        :param processing: The processing of this GetPromoAssortmentInfoDTO.
        """
        self.openapi_types = {
            'active_offers': int,
            'potential_offers': int,
            'processing': bool
        }

        self.attribute_map = {
            'active_offers': 'activeOffers',
            'potential_offers': 'potentialOffers',
            'processing': 'processing'
        }

        self._active_offers = active_offers
        self._potential_offers = potential_offers
        self._processing = processing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPromoAssortmentInfoDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPromoAssortmentInfoDTO of this GetPromoAssortmentInfoDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_offers(self):
        """Gets the active_offers of this GetPromoAssortmentInfoDTO.

        Количество товаров, которые участвуют или участвовали в акции.  Учитываются только товары, которые были добавлены вручную.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 

        :return: The active_offers of this GetPromoAssortmentInfoDTO.
        :rtype: int
        """
        return self._active_offers

    @active_offers.setter
    def active_offers(self, active_offers):
        """Sets the active_offers of this GetPromoAssortmentInfoDTO.

        Количество товаров, которые участвуют или участвовали в акции.  Учитываются только товары, которые были добавлены вручную.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 

        :param active_offers: The active_offers of this GetPromoAssortmentInfoDTO.
        :type active_offers: int
        """
        if active_offers is None:
            raise ValueError("Invalid value for `active_offers`, must not be `None`")

        self._active_offers = active_offers

    @property
    def potential_offers(self):
        """Gets the potential_offers of this GetPromoAssortmentInfoDTO.

        Количество доступных товаров в акции.  Параметр возвращается только для текущих и будущих акций. 

        :return: The potential_offers of this GetPromoAssortmentInfoDTO.
        :rtype: int
        """
        return self._potential_offers

    @potential_offers.setter
    def potential_offers(self, potential_offers):
        """Sets the potential_offers of this GetPromoAssortmentInfoDTO.

        Количество доступных товаров в акции.  Параметр возвращается только для текущих и будущих акций. 

        :param potential_offers: The potential_offers of this GetPromoAssortmentInfoDTO.
        :type potential_offers: int
        """

        self._potential_offers = potential_offers

    @property
    def processing(self):
        """Gets the processing of this GetPromoAssortmentInfoDTO.

        Есть ли изменения в ассортименте, которые еще не применились. Сохранение изменений занимает некоторое время.  Параметр возвращается только для текущих и будущих акций. 

        :return: The processing of this GetPromoAssortmentInfoDTO.
        :rtype: bool
        """
        return self._processing

    @processing.setter
    def processing(self, processing):
        """Sets the processing of this GetPromoAssortmentInfoDTO.

        Есть ли изменения в ассортименте, которые еще не применились. Сохранение изменений занимает некоторое время.  Параметр возвращается только для текущих и будущих акций. 

        :param processing: The processing of this GetPromoAssortmentInfoDTO.
        :type processing: bool
        """

        self._processing = processing
