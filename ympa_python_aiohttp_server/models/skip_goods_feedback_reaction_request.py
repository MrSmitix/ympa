# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server import util


class SkipGoodsFeedbackReactionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feedback_ids: list[int]=None):
        """SkipGoodsFeedbackReactionRequest - a model defined in OpenAPI

        :param feedback_ids: The feedback_ids of this SkipGoodsFeedbackReactionRequest.
        """
        self.openapi_types = {
            'feedback_ids': list[int]
        }

        self.attribute_map = {
            'feedback_ids': 'feedbackIds'
        }

        self._feedback_ids = feedback_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkipGoodsFeedbackReactionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkipGoodsFeedbackReactionRequest of this SkipGoodsFeedbackReactionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feedback_ids(self):
        """Gets the feedback_ids of this SkipGoodsFeedbackReactionRequest.

        Список идентификаторов отзывов, на которые магазин не будет отвечать.

        :return: The feedback_ids of this SkipGoodsFeedbackReactionRequest.
        :rtype: list[int]
        """
        return self._feedback_ids

    @feedback_ids.setter
    def feedback_ids(self, feedback_ids):
        """Sets the feedback_ids of this SkipGoodsFeedbackReactionRequest.

        Список идентификаторов отзывов, на которые магазин не будет отвечать.

        :param feedback_ids: The feedback_ids of this SkipGoodsFeedbackReactionRequest.
        :type feedback_ids: list[int]
        """
        if feedback_ids is None:
            raise ValueError("Invalid value for `feedback_ids`, must not be `None`")
        if feedback_ids is not None and len(feedback_ids) > 50:
            raise ValueError("Invalid value for `feedback_ids`, number of items must be less than or equal to `50`")
        if feedback_ids is not None and len(feedback_ids) < 1:
            raise ValueError("Invalid value for `feedback_ids`, number of items must be greater than or equal to `1`")

        self._feedback_ids = feedback_ids
