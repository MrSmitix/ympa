# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.enriched_model_dto import EnrichedModelDTO
from ympa_python_aiohttp_server import util


class EnrichedModelsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, models: List[EnrichedModelDTO]=None):
        """EnrichedModelsDTO - a model defined in OpenAPI

        :param models: The models of this EnrichedModelsDTO.
        """
        self.openapi_types = {
            'models': List[EnrichedModelDTO]
        }

        self.attribute_map = {
            'models': 'models'
        }

        self._models = models

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnrichedModelsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnrichedModelsDTO of this EnrichedModelsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def models(self):
        """Gets the models of this EnrichedModelsDTO.

        Список моделей товаров.

        :return: The models of this EnrichedModelsDTO.
        :rtype: List[EnrichedModelDTO]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this EnrichedModelsDTO.

        Список моделей товаров.

        :param models: The models of this EnrichedModelsDTO.
        :type models: List[EnrichedModelDTO]
        """
        if models is None:
            raise ValueError("Invalid value for `models`, must not be `None`")

        self._models = models
