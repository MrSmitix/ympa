# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.order_delivery_date_dto import OrderDeliveryDateDTO
from ympa_python_aiohttp_server.models.order_delivery_date_reason_type import OrderDeliveryDateReasonType
from ympa_python_aiohttp_server import util


class SetOrderDeliveryDateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dates: OrderDeliveryDateDTO=None, reason: OrderDeliveryDateReasonType=None):
        """SetOrderDeliveryDateRequest - a model defined in OpenAPI

        :param dates: The dates of this SetOrderDeliveryDateRequest.
        :param reason: The reason of this SetOrderDeliveryDateRequest.
        """
        self.openapi_types = {
            'dates': OrderDeliveryDateDTO,
            'reason': OrderDeliveryDateReasonType
        }

        self.attribute_map = {
            'dates': 'dates',
            'reason': 'reason'
        }

        self._dates = dates
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetOrderDeliveryDateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetOrderDeliveryDateRequest of this SetOrderDeliveryDateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dates(self):
        """Gets the dates of this SetOrderDeliveryDateRequest.


        :return: The dates of this SetOrderDeliveryDateRequest.
        :rtype: OrderDeliveryDateDTO
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this SetOrderDeliveryDateRequest.


        :param dates: The dates of this SetOrderDeliveryDateRequest.
        :type dates: OrderDeliveryDateDTO
        """
        if dates is None:
            raise ValueError("Invalid value for `dates`, must not be `None`")

        self._dates = dates

    @property
    def reason(self):
        """Gets the reason of this SetOrderDeliveryDateRequest.


        :return: The reason of this SetOrderDeliveryDateRequest.
        :rtype: OrderDeliveryDateReasonType
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this SetOrderDeliveryDateRequest.


        :param reason: The reason of this SetOrderDeliveryDateRequest.
        :type reason: OrderDeliveryDateReasonType
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason
