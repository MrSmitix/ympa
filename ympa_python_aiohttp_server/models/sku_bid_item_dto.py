# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
import re
from ympa_python_aiohttp_server import util


class SkuBidItemDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sku: str=None, bid: int=None):
        """SkuBidItemDTO - a model defined in OpenAPI

        :param sku: The sku of this SkuBidItemDTO.
        :param bid: The bid of this SkuBidItemDTO.
        """
        self.openapi_types = {
            'sku': str,
            'bid': int
        }

        self.attribute_map = {
            'sku': 'sku',
            'bid': 'bid'
        }

        self._sku = sku
        self._bid = bid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkuBidItemDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkuBidItemDTO of this SkuBidItemDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sku(self):
        """Gets the sku of this SkuBidItemDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 

        :return: The sku of this SkuBidItemDTO.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this SkuBidItemDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 

        :param sku: The sku of this SkuBidItemDTO.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")
        if sku is not None and len(sku) > 255:
            raise ValueError("Invalid value for `sku`, length must be less than or equal to `255`")
        if sku is not None and len(sku) < 1:
            raise ValueError("Invalid value for `sku`, length must be greater than or equal to `1`")
        if sku is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', sku):
            raise ValueError("Invalid value for `sku`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")

        self._sku = sku

    @property
    def bid(self):
        """Gets the bid of this SkuBidItemDTO.

        Значение ставки.

        :return: The bid of this SkuBidItemDTO.
        :rtype: int
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this SkuBidItemDTO.

        Значение ставки.

        :param bid: The bid of this SkuBidItemDTO.
        :type bid: int
        """
        if bid is None:
            raise ValueError("Invalid value for `bid`, must not be `None`")
        if bid is not None and bid > 9999:
            raise ValueError("Invalid value for `bid`, must be a value less than or equal to `9999`")
        if bid is not None and bid < 0:
            raise ValueError("Invalid value for `bid`, must be a value greater than or equal to `0`")

        self._bid = bid
