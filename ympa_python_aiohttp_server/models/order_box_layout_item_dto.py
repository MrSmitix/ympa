# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.brief_order_item_instance_dto import BriefOrderItemInstanceDTO
from ympa_python_aiohttp_server.models.order_box_layout_partial_count_dto import OrderBoxLayoutPartialCountDTO
from ympa_python_aiohttp_server import util


class OrderBoxLayoutItemDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, full_count: int=None, partial_count: OrderBoxLayoutPartialCountDTO=None, instances: List[BriefOrderItemInstanceDTO]=None):
        """OrderBoxLayoutItemDTO - a model defined in OpenAPI

        :param id: The id of this OrderBoxLayoutItemDTO.
        :param full_count: The full_count of this OrderBoxLayoutItemDTO.
        :param partial_count: The partial_count of this OrderBoxLayoutItemDTO.
        :param instances: The instances of this OrderBoxLayoutItemDTO.
        """
        self.openapi_types = {
            'id': int,
            'full_count': int,
            'partial_count': OrderBoxLayoutPartialCountDTO,
            'instances': List[BriefOrderItemInstanceDTO]
        }

        self.attribute_map = {
            'id': 'id',
            'full_count': 'fullCount',
            'partial_count': 'partialCount',
            'instances': 'instances'
        }

        self._id = id
        self._full_count = full_count
        self._partial_count = partial_count
        self._instances = instances

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderBoxLayoutItemDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderBoxLayoutItemDTO of this OrderBoxLayoutItemDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OrderBoxLayoutItemDTO.

        Идентификатор товара в заказе.  {% cut \"Где его взять\" %}  Идентификатор приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`.  {% endcut %}   

        :return: The id of this OrderBoxLayoutItemDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderBoxLayoutItemDTO.

        Идентификатор товара в заказе.  {% cut \"Где его взять\" %}  Идентификатор приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`.  {% endcut %}   

        :param id: The id of this OrderBoxLayoutItemDTO.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def full_count(self):
        """Gets the full_count of this OrderBoxLayoutItemDTO.

        Количество единиц товара в коробке.  Используйте это поле, если в коробке поедут целые товары, не разделенные на части. Не используйте это поле одновременно с `partialCount`. 

        :return: The full_count of this OrderBoxLayoutItemDTO.
        :rtype: int
        """
        return self._full_count

    @full_count.setter
    def full_count(self, full_count):
        """Sets the full_count of this OrderBoxLayoutItemDTO.

        Количество единиц товара в коробке.  Используйте это поле, если в коробке поедут целые товары, не разделенные на части. Не используйте это поле одновременно с `partialCount`. 

        :param full_count: The full_count of this OrderBoxLayoutItemDTO.
        :type full_count: int
        """
        if full_count is not None and full_count < 1:
            raise ValueError("Invalid value for `full_count`, must be a value greater than or equal to `1`")

        self._full_count = full_count

    @property
    def partial_count(self):
        """Gets the partial_count of this OrderBoxLayoutItemDTO.


        :return: The partial_count of this OrderBoxLayoutItemDTO.
        :rtype: OrderBoxLayoutPartialCountDTO
        """
        return self._partial_count

    @partial_count.setter
    def partial_count(self, partial_count):
        """Sets the partial_count of this OrderBoxLayoutItemDTO.


        :param partial_count: The partial_count of this OrderBoxLayoutItemDTO.
        :type partial_count: OrderBoxLayoutPartialCountDTO
        """

        self._partial_count = partial_count

    @property
    def instances(self):
        """Gets the instances of this OrderBoxLayoutItemDTO.

        Переданные вами коды маркировки.

        :return: The instances of this OrderBoxLayoutItemDTO.
        :rtype: List[BriefOrderItemInstanceDTO]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this OrderBoxLayoutItemDTO.

        Переданные вами коды маркировки.

        :param instances: The instances of this OrderBoxLayoutItemDTO.
        :type instances: List[BriefOrderItemInstanceDTO]
        """

        self._instances = instances
