# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.parcel_box_label_dto import ParcelBoxLabelDTO
from ympa_python_aiohttp_server import util


class OrderLabelDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, order_id: int=None, places_number: int=None, url: str=None, parcel_box_labels: List[ParcelBoxLabelDTO]=None):
        """OrderLabelDTO - a model defined in OpenAPI

        :param order_id: The order_id of this OrderLabelDTO.
        :param places_number: The places_number of this OrderLabelDTO.
        :param url: The url of this OrderLabelDTO.
        :param parcel_box_labels: The parcel_box_labels of this OrderLabelDTO.
        """
        self.openapi_types = {
            'order_id': int,
            'places_number': int,
            'url': str,
            'parcel_box_labels': List[ParcelBoxLabelDTO]
        }

        self.attribute_map = {
            'order_id': 'orderId',
            'places_number': 'placesNumber',
            'url': 'url',
            'parcel_box_labels': 'parcelBoxLabels'
        }

        self._order_id = order_id
        self._places_number = places_number
        self._url = url
        self._parcel_box_labels = parcel_box_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLabelDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderLabelDTO of this OrderLabelDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order_id(self):
        """Gets the order_id of this OrderLabelDTO.

        Идентификатор заказа.

        :return: The order_id of this OrderLabelDTO.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderLabelDTO.

        Идентификатор заказа.

        :param order_id: The order_id of this OrderLabelDTO.
        :type order_id: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def places_number(self):
        """Gets the places_number of this OrderLabelDTO.

        Количество коробок в заказе.

        :return: The places_number of this OrderLabelDTO.
        :rtype: int
        """
        return self._places_number

    @places_number.setter
    def places_number(self, places_number):
        """Sets the places_number of this OrderLabelDTO.

        Количество коробок в заказе.

        :param places_number: The places_number of this OrderLabelDTO.
        :type places_number: int
        """
        if places_number is None:
            raise ValueError("Invalid value for `places_number`, must not be `None`")

        self._places_number = places_number

    @property
    def url(self):
        """Gets the url of this OrderLabelDTO.

        URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md). 

        :return: The url of this OrderLabelDTO.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OrderLabelDTO.

        URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md). 

        :param url: The url of this OrderLabelDTO.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def parcel_box_labels(self):
        """Gets the parcel_box_labels of this OrderLabelDTO.

        Информация на ярлыке.

        :return: The parcel_box_labels of this OrderLabelDTO.
        :rtype: List[ParcelBoxLabelDTO]
        """
        return self._parcel_box_labels

    @parcel_box_labels.setter
    def parcel_box_labels(self, parcel_box_labels):
        """Sets the parcel_box_labels of this OrderLabelDTO.

        Информация на ярлыке.

        :param parcel_box_labels: The parcel_box_labels of this OrderLabelDTO.
        :type parcel_box_labels: List[ParcelBoxLabelDTO]
        """
        if parcel_box_labels is None:
            raise ValueError("Invalid value for `parcel_box_labels`, must not be `None`")

        self._parcel_box_labels = parcel_box_labels
