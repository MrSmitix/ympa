# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.turnover_dto import TurnoverDTO
from ympa_python_aiohttp_server.models.warehouse_stock_dto import WarehouseStockDTO
import re
from ympa_python_aiohttp_server import util


class WarehouseOfferDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer_id: str=None, turnover_summary: TurnoverDTO=None, stocks: List[WarehouseStockDTO]=None, updated_at: datetime=None):
        """WarehouseOfferDTO - a model defined in OpenAPI

        :param offer_id: The offer_id of this WarehouseOfferDTO.
        :param turnover_summary: The turnover_summary of this WarehouseOfferDTO.
        :param stocks: The stocks of this WarehouseOfferDTO.
        :param updated_at: The updated_at of this WarehouseOfferDTO.
        """
        self.openapi_types = {
            'offer_id': str,
            'turnover_summary': TurnoverDTO,
            'stocks': List[WarehouseStockDTO],
            'updated_at': datetime
        }

        self.attribute_map = {
            'offer_id': 'offerId',
            'turnover_summary': 'turnoverSummary',
            'stocks': 'stocks',
            'updated_at': 'updatedAt'
        }

        self._offer_id = offer_id
        self._turnover_summary = turnover_summary
        self._stocks = stocks
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WarehouseOfferDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WarehouseOfferDTO of this WarehouseOfferDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_id(self):
        """Gets the offer_id of this WarehouseOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 

        :return: The offer_id of this WarehouseOfferDTO.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this WarehouseOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 

        :param offer_id: The offer_id of this WarehouseOfferDTO.
        :type offer_id: str
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")
        if offer_id is not None and len(offer_id) > 255:
            raise ValueError("Invalid value for `offer_id`, length must be less than or equal to `255`")
        if offer_id is not None and len(offer_id) < 1:
            raise ValueError("Invalid value for `offer_id`, length must be greater than or equal to `1`")
        if offer_id is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', offer_id):
            raise ValueError("Invalid value for `offer_id`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")

        self._offer_id = offer_id

    @property
    def turnover_summary(self):
        """Gets the turnover_summary of this WarehouseOfferDTO.


        :return: The turnover_summary of this WarehouseOfferDTO.
        :rtype: TurnoverDTO
        """
        return self._turnover_summary

    @turnover_summary.setter
    def turnover_summary(self, turnover_summary):
        """Sets the turnover_summary of this WarehouseOfferDTO.


        :param turnover_summary: The turnover_summary of this WarehouseOfferDTO.
        :type turnover_summary: TurnoverDTO
        """

        self._turnover_summary = turnover_summary

    @property
    def stocks(self):
        """Gets the stocks of this WarehouseOfferDTO.

        Информация об остатках.

        :return: The stocks of this WarehouseOfferDTO.
        :rtype: List[WarehouseStockDTO]
        """
        return self._stocks

    @stocks.setter
    def stocks(self, stocks):
        """Sets the stocks of this WarehouseOfferDTO.

        Информация об остатках.

        :param stocks: The stocks of this WarehouseOfferDTO.
        :type stocks: List[WarehouseStockDTO]
        """
        if stocks is None:
            raise ValueError("Invalid value for `stocks`, must not be `None`")

        self._stocks = stocks

    @property
    def updated_at(self):
        """Gets the updated_at of this WarehouseOfferDTO.

        Дата и время последнего обновления информации об остатках.  Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2023-11-21T00:42:42+03:00`. 

        :return: The updated_at of this WarehouseOfferDTO.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this WarehouseOfferDTO.

        Дата и время последнего обновления информации об остатках.  Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2023-11-21T00:42:42+03:00`. 

        :param updated_at: The updated_at of this WarehouseOfferDTO.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
