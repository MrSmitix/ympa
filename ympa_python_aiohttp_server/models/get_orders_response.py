# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ympa_python_aiohttp_server.models.base_model import Model
from ympa_python_aiohttp_server.models.flipping_pager_dto import FlippingPagerDTO
from ympa_python_aiohttp_server.models.forward_scrolling_pager_dto import ForwardScrollingPagerDTO
from ympa_python_aiohttp_server.models.order_dto import OrderDTO
from ympa_python_aiohttp_server import util


class GetOrdersResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pager: FlippingPagerDTO=None, orders: List[OrderDTO]=None, paging: ForwardScrollingPagerDTO=None):
        """GetOrdersResponse - a model defined in OpenAPI

        :param pager: The pager of this GetOrdersResponse.
        :param orders: The orders of this GetOrdersResponse.
        :param paging: The paging of this GetOrdersResponse.
        """
        self.openapi_types = {
            'pager': FlippingPagerDTO,
            'orders': List[OrderDTO],
            'paging': ForwardScrollingPagerDTO
        }

        self.attribute_map = {
            'pager': 'pager',
            'orders': 'orders',
            'paging': 'paging'
        }

        self._pager = pager
        self._orders = orders
        self._paging = paging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrdersResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetOrdersResponse of this GetOrdersResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pager(self):
        """Gets the pager of this GetOrdersResponse.


        :return: The pager of this GetOrdersResponse.
        :rtype: FlippingPagerDTO
        """
        return self._pager

    @pager.setter
    def pager(self, pager):
        """Sets the pager of this GetOrdersResponse.


        :param pager: The pager of this GetOrdersResponse.
        :type pager: FlippingPagerDTO
        """

        self._pager = pager

    @property
    def orders(self):
        """Gets the orders of this GetOrdersResponse.

        Модель заказа. 

        :return: The orders of this GetOrdersResponse.
        :rtype: List[OrderDTO]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this GetOrdersResponse.

        Модель заказа. 

        :param orders: The orders of this GetOrdersResponse.
        :type orders: List[OrderDTO]
        """
        if orders is None:
            raise ValueError("Invalid value for `orders`, must not be `None`")

        self._orders = orders

    @property
    def paging(self):
        """Gets the paging of this GetOrdersResponse.


        :return: The paging of this GetOrdersResponse.
        :rtype: ForwardScrollingPagerDTO
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this GetOrdersResponse.


        :param paging: The paging of this GetOrdersResponse.
        :type paging: ForwardScrollingPagerDTO
        """

        self._paging = paging
