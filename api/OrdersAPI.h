#include <stdlib.h>
#include <stdio.h>
#include "../include/apiClient.h"
#include "../include/list.h"
#include "../external/cJSON.h"
#include "../include/keyValuePair.h"
#include "../include/binary.h"
#include "../model/accept_order_cancellation_request.h"
#include "../model/api_client_data_error_response.h"
#include "../model/api_forbidden_error_response.h"
#include "../model/api_limit_error_response.h"
#include "../model/api_not_found_error_response.h"
#include "../model/api_server_error_response.h"
#include "../model/api_unauthorized_error_response.h"
#include "../model/empty_api_response.h"
#include "../model/get_order_response.h"
#include "../model/get_orders_response.h"
#include "../model/order_buyer_type.h"
#include "../model/order_delivery_dispatch_type.h"
#include "../model/order_status_type.h"
#include "../model/order_substatus_type.h"
#include "../model/provide_order_digital_codes_request.h"
#include "../model/provide_order_item_identifiers_request.h"
#include "../model/provide_order_item_identifiers_response.h"
#include "../model/set_order_box_layout_request.h"
#include "../model/set_order_box_layout_response.h"
#include "../model/set_order_shipment_boxes_request.h"
#include "../model/set_order_shipment_boxes_response.h"
#include "../model/update_order_item_request.h"
#include "../model/update_order_status_request.h"
#include "../model/update_order_status_response.h"
#include "../model/update_order_statuses_request.h"
#include "../model/update_order_statuses_response.h"

// Enum STATUS for OrdersAPI_getOrders
typedef enum  { _api__getOrders_STATUS_NULL = 0, _api__getOrders_STATUS_PLACING, _api__getOrders_STATUS_RESERVED, _api__getOrders_STATUS_UNPAID, _api__getOrders_STATUS_PROCESSING, _api__getOrders_STATUS_DELIVERY, _api__getOrders_STATUS_PICKUP, _api__getOrders_STATUS_DELIVERED, _api__getOrders_STATUS_CANCELLED, _api__getOrders_STATUS_PENDING, _api__getOrders_STATUS_PARTIALLY_RETURNED, _api__getOrders_STATUS_RETURNED, _api__getOrders_STATUS_UNKNOWN } _api__getOrders_status_e;

// Enum SUBSTATUS for OrdersAPI_getOrders
typedef enum  { _api__getOrders_SUBSTATUS_NULL = 0, _api__getOrders_SUBSTATUS_RESERVATION_EXPIRED, _api__getOrders_SUBSTATUS_USER_NOT_PAID, _api__getOrders_SUBSTATUS_USER_UNREACHABLE, _api__getOrders_SUBSTATUS_USER_CHANGED_MIND, _api__getOrders_SUBSTATUS_USER_REFUSED_DELIVERY, _api__getOrders_SUBSTATUS_USER_REFUSED_PRODUCT, _api__getOrders_SUBSTATUS_SHOP_FAILED, _api__getOrders_SUBSTATUS_USER_REFUSED_QUALITY, _api__getOrders_SUBSTATUS_REPLACING_ORDER, _api__getOrders_SUBSTATUS_PROCESSING_EXPIRED, _api__getOrders_SUBSTATUS_PENDING_EXPIRED, _api__getOrders_SUBSTATUS_SHOP_PENDING_CANCELLED, _api__getOrders_SUBSTATUS_PENDING_CANCELLED, _api__getOrders_SUBSTATUS_USER_FRAUD, _api__getOrders_SUBSTATUS_RESERVATION_FAILED, _api__getOrders_SUBSTATUS_USER_PLACED_OTHER_ORDER, _api__getOrders_SUBSTATUS_USER_BOUGHT_CHEAPER, _api__getOrders_SUBSTATUS_MISSING_ITEM, _api__getOrders_SUBSTATUS_BROKEN_ITEM, _api__getOrders_SUBSTATUS_WRONG_ITEM, _api__getOrders_SUBSTATUS_PICKUP_EXPIRED, _api__getOrders_SUBSTATUS_DELIVERY_PROBLEMS, _api__getOrders_SUBSTATUS_LATE_CONTACT, _api__getOrders_SUBSTATUS_CUSTOM, _api__getOrders_SUBSTATUS_DELIVERY_SERVICE_FAILED, _api__getOrders_SUBSTATUS_WAREHOUSE_FAILED_TO_SHIP, _api__getOrders_SUBSTATUS_DELIVERY_SERIVCE_UNDELIVERED, _api__getOrders_SUBSTATUS_DELIVERY_SERVICE_UNDELIVERED, _api__getOrders_SUBSTATUS_PREORDER, _api__getOrders_SUBSTATUS_AWAIT_CONFIRMATION, _api__getOrders_SUBSTATUS_STARTED, _api__getOrders_SUBSTATUS_PACKAGING, _api__getOrders_SUBSTATUS_READY_TO_SHIP, _api__getOrders_SUBSTATUS_SHIPPED, _api__getOrders_SUBSTATUS_ASYNC_PROCESSING, _api__getOrders_SUBSTATUS_USER_REFUSED_TO_PROVIDE_PERSONAL_DATA, _api__getOrders_SUBSTATUS_WAITING_USER_INPUT, _api__getOrders_SUBSTATUS_WAITING_BANK_DECISION, _api__getOrders_SUBSTATUS_BANK_REJECT_CREDIT_OFFER, _api__getOrders_SUBSTATUS_CUSTOMER_REJECT_CREDIT_OFFER, _api__getOrders_SUBSTATUS_CREDIT_OFFER_FAILED, _api__getOrders_SUBSTATUS_AWAIT_DELIVERY_DATES_CONFIRMATION, _api__getOrders_SUBSTATUS_SERVICE_FAULT, _api__getOrders_SUBSTATUS_DELIVERY_SERVICE_RECEIVED, _api__getOrders_SUBSTATUS_USER_RECEIVED, _api__getOrders_SUBSTATUS_WAITING_FOR_STOCKS, _api__getOrders_SUBSTATUS_AS_PART_OF_MULTI_ORDER, _api__getOrders_SUBSTATUS_READY_FOR_LAST_MILE, _api__getOrders_SUBSTATUS_LAST_MILE_STARTED, _api__getOrders_SUBSTATUS_ANTIFRAUD, _api__getOrders_SUBSTATUS_DELIVERY_USER_NOT_RECEIVED, _api__getOrders_SUBSTATUS_DELIVERY_SERVICE_DELIVERED, _api__getOrders_SUBSTATUS_DELIVERED_USER_NOT_RECEIVED, _api__getOrders_SUBSTATUS_USER_WANTED_ANOTHER_PAYMENT_METHOD, _api__getOrders_SUBSTATUS_USER_RECEIVED_TECHNICAL_ERROR, _api__getOrders_SUBSTATUS_USER_FORGOT_TO_USE_BONUS, _api__getOrders_SUBSTATUS_RECEIVED_ON_DISTRIBUTION_CENTER, _api__getOrders_SUBSTATUS_DELIVERY_SERVICE_NOT_RECEIVED, _api__getOrders_SUBSTATUS_DELIVERY_SERVICE_LOST, _api__getOrders_SUBSTATUS_SHIPPED_TO_WRONG_DELIVERY_SERVICE, _api__getOrders_SUBSTATUS_DELIVERED_USER_RECEIVED, _api__getOrders_SUBSTATUS_WAITING_TINKOFF_DECISION, _api__getOrders_SUBSTATUS_COURIER_SEARCH, _api__getOrders_SUBSTATUS_COURIER_FOUND, _api__getOrders_SUBSTATUS_COURIER_IN_TRANSIT_TO_SENDER, _api__getOrders_SUBSTATUS_COURIER_ARRIVED_TO_SENDER, _api__getOrders_SUBSTATUS_COURIER_RECEIVED, _api__getOrders_SUBSTATUS_COURIER_NOT_FOUND, _api__getOrders_SUBSTATUS_COURIER_NOT_DELIVER_ORDER, _api__getOrders_SUBSTATUS_COURIER_RETURNS_ORDER, _api__getOrders_SUBSTATUS_COURIER_RETURNED_ORDER, _api__getOrders_SUBSTATUS_WAITING_USER_DELIVERY_INPUT, _api__getOrders_SUBSTATUS_PICKUP_SERVICE_RECEIVED, _api__getOrders_SUBSTATUS_PICKUP_USER_RECEIVED, _api__getOrders_SUBSTATUS_CANCELLED_COURIER_NOT_FOUND, _api__getOrders_SUBSTATUS_COURIER_NOT_COME_FOR_ORDER, _api__getOrders_SUBSTATUS_DELIVERY_NOT_MANAGED_REGION, _api__getOrders_SUBSTATUS_INCOMPLETE_CONTACT_INFORMATION, _api__getOrders_SUBSTATUS_INCOMPLETE_MULTI_ORDER, _api__getOrders_SUBSTATUS_INAPPROPRIATE_WEIGHT_SIZE, _api__getOrders_SUBSTATUS_TECHNICAL_ERROR, _api__getOrders_SUBSTATUS_SORTING_CENTER_LOST, _api__getOrders_SUBSTATUS_COURIER_SEARCH_NOT_STARTED, _api__getOrders_SUBSTATUS_LOST, _api__getOrders_SUBSTATUS_AWAIT_PAYMENT, _api__getOrders_SUBSTATUS_AWAIT_LAVKA_RESERVATION, _api__getOrders_SUBSTATUS_USER_WANTS_TO_CHANGE_ADDRESS, _api__getOrders_SUBSTATUS_FULL_NOT_RANSOM, _api__getOrders_SUBSTATUS_PRESCRIPTION_MISMATCH, _api__getOrders_SUBSTATUS_DROPOFF_LOST, _api__getOrders_SUBSTATUS_DROPOFF_CLOSED, _api__getOrders_SUBSTATUS_DELIVERY_TO_STORE_STARTED, _api__getOrders_SUBSTATUS_USER_WANTS_TO_CHANGE_DELIVERY_DATE, _api__getOrders_SUBSTATUS_WRONG_ITEM_DELIVERED, _api__getOrders_SUBSTATUS_DAMAGED_BOX, _api__getOrders_SUBSTATUS_AWAIT_DELIVERY_DATES, _api__getOrders_SUBSTATUS_LAST_MILE_COURIER_SEARCH, _api__getOrders_SUBSTATUS_PICKUP_POINT_CLOSED, _api__getOrders_SUBSTATUS_LEGAL_INFO_CHANGED, _api__getOrders_SUBSTATUS_USER_HAS_NO_TIME_TO_PICKUP_ORDER, _api__getOrders_SUBSTATUS_DELIVERY_CUSTOMS_ARRIVED, _api__getOrders_SUBSTATUS_DELIVERY_CUSTOMS_CLEARED, _api__getOrders_SUBSTATUS_FIRST_MILE_DELIVERY_SERVICE_RECEIVED, _api__getOrders_SUBSTATUS_AWAIT_AUTO_DELIVERY_DATES, _api__getOrders_SUBSTATUS_AWAIT_USER_PERSONAL_DATA, _api__getOrders_SUBSTATUS_NO_PERSONAL_DATA_EXPIRED, _api__getOrders_SUBSTATUS_CUSTOMS_PROBLEMS, _api__getOrders_SUBSTATUS_AWAIT_CASHIER, _api__getOrders_SUBSTATUS_WAITING_POSTPAID_BUDGET_RESERVATION, _api__getOrders_SUBSTATUS_AWAIT_SERVICEABLE_CONFIRMATION, _api__getOrders_SUBSTATUS_POSTPAID_BUDGET_RESERVATION_FAILED, _api__getOrders_SUBSTATUS_AWAIT_CUSTOM_PRICE_CONFIRMATION, _api__getOrders_SUBSTATUS_READY_FOR_PICKUP, _api__getOrders_SUBSTATUS_UNKNOWN } _api__getOrders_substatus_e;

// Enum  for OrdersAPI_getOrders
typedef enum  { _api__getOrders__NULL = 0, _api__getOrders__UNKNOWN, _api__getOrders__BUYER, _api__getOrders__MARKET_PARTNER_OUTLET, _api__getOrders__MARKET_BRANDED_OUTLET, _api__getOrders__SHOP_OUTLET, _api__getOrders__DROPOFF } _api__getOrders_dispatchType_e;

// Enum  for OrdersAPI_getOrders
typedef enum  { _api__getOrders__NULL = 0, _api__getOrders__PERSON, _api__getOrders__BUSINESS } _api__getOrders_buyerType_e;


// Отмена заказа покупателем
//
// Подтверждает или отклоняет запрос покупателя на отмену заказа, который передан службе доставки.  Покупатель может отменить заказ в течение его обработки или доставки. Если заказ еще обрабатывается (имеет статус PROCESSING), вам не нужно подтверждать отмену заказа — он будет отменен автоматически.  Если заказ уже передан службе доставки (принимает статус `DELIVERY` или `PICKUP`) и пользователь отменил его, вы можете предупредить службу об отмене в течение 48 часов. Если служба доставки узнала об отмене до передачи заказа покупателю, подтвердите отмену с помощью запроса [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation.md). Если заказ уже доставлен, отклоните отмену с помощью этого же запроса. Тогда у покупателя останется заказ, и деньги за него возвращаться не будут.  Чтобы узнать, какие заказы были отменены в статусе `DELIVERY` или `PICKUP`, отправьте запрос [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md). В его URL добавьте входной параметр `onlyWaitingForCancellationApprove=true`. Вы также можете узнать об отмененных заказах в кабинете или через почту — на нее придет уведомление об отмене.  Если в течение 48 часов вы не подтвердите или отклоните отмену, заказ будет отменен автоматически.  |**⚙️ Лимит:** 500 запросов в час| |-| 
//
empty_api_response_t*
OrdersAPI_acceptOrderCancellation(apiClient_t *apiClient, long campaignId, long orderId, accept_order_cancellation_request_t *accept_order_cancellation_request);


// Информация об одном заказе
//
// Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
//
get_order_response_t*
OrdersAPI_getOrder(apiClient_t *apiClient, long campaignId, long orderId);


// Информация о нескольких заказах
//
// Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры `page_token` и `limit`.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
//
get_orders_response_t*
OrdersAPI_getOrders(apiClient_t *apiClient, long campaignId, list_t *orderIds, list_t *status, list_t *substatus, char fromDate, char toDate, char supplierShipmentDateFrom, char supplierShipmentDateTo, char updatedAtFrom, char updatedAtTo, order_delivery_dispatch_type_e dispatchType, int *fake, int *hasCis, int *onlyWaitingForCancellationApprove, int *onlyEstimatedDelivery, order_buyer_type_e buyerType, int *page, int *pageSize, char *page_token, int *limit);


// Передача ключей цифровых товаров
//
// Передает ключи цифровых товаров, которые покупатель заказал и оплатил. После выполнения запроса Маркет отправит ему письмо с ключами и инструкциями по активации, а также переведет заказ в финальный статус `DELIVERED`.  Ключ нужно передать в течение 30 минут после перехода заказа в статус `PROCESSING`.  Если в один заказ входят несколько ключей, передавайте их все в одном запросе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
//
empty_api_response_t*
OrdersAPI_provideOrderDigitalCodes(apiClient_t *apiClient, long campaignId, long orderId, provide_order_digital_codes_request_t *provide_order_digital_codes_request);


// Передача кодов маркировки единиц товара
//
// {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Передает Маркету коды маркировки для единиц товара в указанном заказе.  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  {% note warning %}  Прежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).  {% endnote %}  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
//
provide_order_item_identifiers_response_t*
OrdersAPI_provideOrderItemIdentifiers(apiClient_t *apiClient, long campaignId, long orderId, provide_order_item_identifiers_request_t *provide_order_item_identifiers_request);


// Подготовка заказа
//
// {% note tip \"Подходит и для DBS\" %}  Запрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.  {% endnote %}  Позволяет выполнить три операции:  * передать Маркету информацию о распределении товаров по коробкам; * передать Маркету коды маркировки для товаров; * удалить товар из заказа, если его не оказалось на складе.  Если нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.  ## Как передать информацию о распределении товаров  В этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:  * **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.  * **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.  ⚠️ Одна коробка не может содержать и товары целиком, и части товаров.  ## Как передавать коды маркировки  Если в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  Если товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.  ## Как удалить товар из заказа  Чтобы удалить товар из заказа:  1. Добавьте в запрос `allowRemove: true`. 2. Передайте распределение по коробкам без товара, который нужно удалить.  {% note warning \"Удаление нельзя отменить\" %}  Эта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.  {% endnote %}  Чтобы удалить позицию целиком, не передавайте соответствующий `OrderBoxLayoutItemDTO`. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле `fullCount`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  ## Примеры  {% cut \"Товар умещается в коробку\" %}  Вот как будет выглядеть запрос, если в одной коробке едут:    * три единицы одного товара, требующего маркировки;   * одна единица другого товара, не требущего маркировки.    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"fullCount\": 3,                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           },                           {                               \"cis\": \"010304109478gftJ14545762!\\u001dhGt264\"                           },                           {                               \"cis\": \"010304109478fRs28323ks23!\\u001dhet201\"                           }                       ]                   },                   {                       \"id\": 654321,                       \"fullCount\": 1                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Товар едет в разных коробках\" %}  Вот как будет выглядеть запрос, если товар едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Одинаковые товары, где каждый едет в нескольких коробках\" %}  Вот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
//
set_order_box_layout_response_t*
OrdersAPI_setOrderBoxLayout(apiClient_t *apiClient, long campaignId, long orderId, set_order_box_layout_request_t *set_order_box_layout_request);


// Передача количества грузовых мест в заказе
//
// {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Отгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.  Количество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).  Метод устроен немного нестандартно: количество задается длиной массива пустых объектов.  Раньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.  {% cut \"Как было раньше\" %}  Структура тела PUT-запроса:  ``` {   \"boxes\":   [     {       \"fulfilmentId\": \"{string}\",       \"weight\": {int64},       \"width\": {int64},       \"height\": {int64},       \"depth\": {int64},       \"items\":       [         {           \"id\": {int64},           \"count\": {int32}         },         ...       ]     },     ...   ] } ``` | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `boxes`       |           | Список грузовых мест.       |  **Параметры, вложенные в `boxes`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `fulfilmentId`       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: `номер заказа на Маркете-номер грузового места`. Например, `7206821‑1, 7206821‑2` и т. д. | | `weight`       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. | | `width`       | Int64   | Ширина грузового места в сантиметрах.       | | `height`       | Int64   | Высота грузового места в сантиметрах.       | | `depth`       | Int64   | Глубина грузового места в сантиметрах.        | | `items`       | Int64   | Список товаров в грузовом месте.       |  **Параметры, вложенные в `items`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `id`       | Int64     | Идентификатор товара в рамках заказа.   | | `count`    | Int32     | Количество единиц товара в грузовом месте.       |  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
//
set_order_shipment_boxes_response_t*
OrdersAPI_setOrderShipmentBoxes(apiClient_t *apiClient, long campaignId, long orderId, long shipmentId, set_order_shipment_boxes_request_t *set_order_shipment_boxes_request);


// Удаление товара из заказа или уменьшение числа единиц
//
// {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Изменяет состав заказа, если позволяет выбранная служба доставки, в случаях:  * покупатель уменьшил количество товара; * магазин не может поставить все товары в заказе.  Для этого заказ должен находится в статусе `\"status\": \"PROCESSING\"` этапа обработки `\"substatus\": \"STARTED\"`. После передачи статуса `\"substatus\": \"READY_TO_SHIP\"` изменить состав невозможно.  Если одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте `count` параметра `item`.  Чтобы полностью удалить товар из заказа:  * передайте значение `0`; или * не передавайте параметр `item`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  **Возврат денег покупателю**  Если покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:  * при оплате банковской картой — с момента, когда магазин переведет заказ в статус `SHIPPED`;  * при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
//
void
OrdersAPI_updateOrderItems(apiClient_t *apiClient, long campaignId, long orderId, update_order_item_request_t *update_order_item_request);


// Изменение статуса одного заказа
//
// Изменяет статус заказа. Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
//
update_order_status_response_t*
OrdersAPI_updateOrderStatus(apiClient_t *apiClient, long campaignId, long orderId, update_order_status_request_t *update_order_status_request);


// Изменение статусов нескольких заказов
//
// Изменяет статусы нескольких заказов.  Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"`и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  Максимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
//
update_order_statuses_response_t*
OrdersAPI_updateOrderStatuses(apiClient_t *apiClient, long campaignId, update_order_statuses_request_t *update_order_statuses_request);


