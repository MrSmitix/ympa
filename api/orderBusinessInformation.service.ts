/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { GetBusinessBuyerInfoResponse } from '../model/getBusinessBuyerInfoResponse';
import { GetBusinessDocumentsInfoResponse } from '../model/getBusinessDocumentsInfoResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class OrderBusinessInformationService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Информация о покупателе — юридическом лице
     * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60;, &#x60;PICKUP&#x60; или &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param orderId Идентификатор заказа.
     
     */
    public getOrderBusinessBuyerInfo(campaignId: number, orderId: number, observe?: 'body', headers?: Headers): Observable<GetBusinessBuyerInfoResponse>;
    public getOrderBusinessBuyerInfo(campaignId: number, orderId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetBusinessBuyerInfoResponse>>;
    public getOrderBusinessBuyerInfo(campaignId: number, orderId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling getOrderBusinessBuyerInfo.');
        }

        if (orderId === null || orderId === undefined){
            throw new Error('Required parameter orderId was null or undefined when calling getOrderBusinessBuyerInfo.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetBusinessBuyerInfoResponse>> = this.httpClient.post(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/orders/${encodeURIComponent(String(orderId))}/business-buyer`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetBusinessBuyerInfoResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Информация о документах
     * Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param orderId Идентификатор заказа.
     
     */
    public getOrderBusinessDocumentsInfo(campaignId: number, orderId: number, observe?: 'body', headers?: Headers): Observable<GetBusinessDocumentsInfoResponse>;
    public getOrderBusinessDocumentsInfo(campaignId: number, orderId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetBusinessDocumentsInfoResponse>>;
    public getOrderBusinessDocumentsInfo(campaignId: number, orderId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling getOrderBusinessDocumentsInfo.');
        }

        if (orderId === null || orderId === undefined){
            throw new Error('Required parameter orderId was null or undefined when calling getOrderBusinessDocumentsInfo.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetBusinessDocumentsInfoResponse>> = this.httpClient.post(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/orders/${encodeURIComponent(String(orderId))}/documents`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetBusinessDocumentsInfoResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
