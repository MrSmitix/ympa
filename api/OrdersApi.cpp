/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "OrdersApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

OrdersApiException::OrdersApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int OrdersApiException::getStatus() const
{
    return m_status;
}
const char* OrdersApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace OrdersApiResources {
CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/cancellation/accept");
	this->set_method_handler("PUT",
		std::bind(&CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto acceptOrderCancellationRequest = extractJsonModelBodyParam<AcceptOrderCancellationRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t orderId = request->get_path_parameter("orderId", 0L);
    
    int status_code = 500;
    EmptyApiResponse resultObject = EmptyApiResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PUT(campaignId, orderId, acceptOrderCancellationRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, EmptyApiResponse> CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handler_PUT(
        int64_t & campaignId, int64_t & orderId, AcceptOrderCancellationRequest & acceptOrderCancellationRequest)
{
    return handler_PUT_func(campaignId, orderId, acceptOrderCancellationRequest);
}


std::string CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdOrdersOrderIdResource::CampaignsCampaignIdOrdersOrderIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}");
	this->set_method_handler("GET",
		std::bind(&CampaignsCampaignIdOrdersOrderIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOrdersOrderIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOrdersOrderIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOrdersOrderIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOrdersOrderIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t orderId = request->get_path_parameter("orderId", 0L);
    
    int status_code = 500;
    GetOrderResponse resultObject = GetOrderResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, orderId);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, GetOrderResponse> CampaignsCampaignIdOrdersOrderIdResource::handler_GET(
        int64_t & campaignId, int64_t & orderId)
{
    return handler_GET_func(campaignId, orderId);
}


std::string CampaignsCampaignIdOrdersOrderIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOrdersOrderIdResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdOrdersResource::CampaignsCampaignIdOrdersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders");
	this->set_method_handler("GET",
		std::bind(&CampaignsCampaignIdOrdersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOrdersResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOrdersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOrdersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOrdersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOrdersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    // Getting the query params
    std::string orderIds_raw = request->get_query_parameter("orderIds");
    std::vector<int64_t> orderIds;
    std::vector<std::string> orderIds_temp;
    boost::split(orderIds_temp, orderIds_raw, boost::is_any_of(","));
    std::transform(orderIds_temp.begin(), orderIds_temp.end(), std::back_inserter(orderIds), [](const auto& i){ int64_t ret; ret.fromString(i); return ret;});
    std::string status_raw = request->get_query_parameter("status");
    std::set<OrderStatusType> status;
    std::vector<std::string> status_temp;
    boost::split(status_temp, status_raw, boost::is_any_of(","));
    std::transform(status_temp.begin(), status_temp.end(), std::back_inserter(status), [](const auto& i){ OrderStatusType ret; ret.fromString(i); return ret;});
    std::string substatus_raw = request->get_query_parameter("substatus");
    std::set<OrderSubstatusType> substatus;
    std::vector<std::string> substatus_temp;
    boost::split(substatus_temp, substatus_raw, boost::is_any_of(","));
    std::transform(substatus_temp.begin(), substatus_temp.end(), std::back_inserter(substatus), [](const auto& i){ OrderSubstatusType ret; ret.fromString(i); return ret;});
    std::string fromDate = request->get_query_parameter("fromDate", "");
    std::string toDate = request->get_query_parameter("toDate", "");
    std::string supplierShipmentDateFrom = request->get_query_parameter("supplierShipmentDateFrom", "");
    std::string supplierShipmentDateTo = request->get_query_parameter("supplierShipmentDateTo", "");
    std::string updatedAtFrom = request->get_query_parameter("updatedAtFrom", "");
    std::string updatedAtTo = request->get_query_parameter("updatedAtTo", "");
    bool fake = request->get_query_parameter("fake", false);
    bool hasCis = request->get_query_parameter("hasCis", false);
    bool onlyWaitingForCancellationApprove = request->get_query_parameter("onlyWaitingForCancellationApprove", false);
    bool onlyEstimatedDelivery = request->get_query_parameter("onlyEstimatedDelivery", false);
    int32_t page = request->get_query_parameter("page", 1);
    int32_t pageSize = request->get_query_parameter("pageSize", 0);
    std::string pageToken = request->get_query_parameter("pageToken", "");
    int32_t limit = request->get_query_parameter("limit", 0);
    
    int status_code = 500;
    GetOrdersResponse resultObject = GetOrdersResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, orderIds, status, substatus, fromDate, toDate, supplierShipmentDateFrom, supplierShipmentDateTo, updatedAtFrom, updatedAtTo, dispatchType, fake, hasCis, onlyWaitingForCancellationApprove, onlyEstimatedDelivery, buyerType, page, pageSize, pageToken, limit);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, GetOrdersResponse> CampaignsCampaignIdOrdersResource::handler_GET(
        int64_t & campaignId, std::vector<int64_t> & orderIds, std::set<OrderStatusType> & status, std::set<OrderSubstatusType> & substatus, std::string & fromDate, std::string & toDate, std::string & supplierShipmentDateFrom, std::string & supplierShipmentDateTo, std::string & updatedAtFrom, std::string & updatedAtTo, OrderDeliveryDispatchType & dispatchType, bool & fake, bool & hasCis, bool & onlyWaitingForCancellationApprove, bool & onlyEstimatedDelivery, OrderBuyerType & buyerType, int32_t & page, int32_t & pageSize, std::string & pageToken, int32_t & limit)
{
    return handler_GET_func(campaignId, orderIds, status, substatus, fromDate, toDate, supplierShipmentDateFrom, supplierShipmentDateTo, updatedAtFrom, updatedAtTo, dispatchType, fake, hasCis, onlyWaitingForCancellationApprove, onlyEstimatedDelivery, buyerType, page, pageSize, pageToken, limit);
}


std::string CampaignsCampaignIdOrdersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOrdersResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/deliverDigitalGoods");
	this->set_method_handler("POST",
		std::bind(&CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto provideOrderDigitalCodesRequest = extractJsonModelBodyParam<ProvideOrderDigitalCodesRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t orderId = request->get_path_parameter("orderId", 0L);
    
    int status_code = 500;
    EmptyApiResponse resultObject = EmptyApiResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(campaignId, orderId, provideOrderDigitalCodesRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, EmptyApiResponse> CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handler_POST(
        int64_t & campaignId, int64_t & orderId, ProvideOrderDigitalCodesRequest & provideOrderDigitalCodesRequest)
{
    return handler_POST_func(campaignId, orderId, provideOrderDigitalCodesRequest);
}


std::string CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdOrdersOrderIdIdentifiersResource::CampaignsCampaignIdOrdersOrderIdIdentifiersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/identifiers");
	this->set_method_handler("PUT",
		std::bind(&CampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOrdersOrderIdIdentifiersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOrdersOrderIdIdentifiersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOrdersOrderIdIdentifiersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto provideOrderItemIdentifiersRequest = extractJsonModelBodyParam<ProvideOrderItemIdentifiersRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t orderId = request->get_path_parameter("orderId", 0L);
    
    int status_code = 500;
    ProvideOrderItemIdentifiersResponse resultObject = ProvideOrderItemIdentifiersResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PUT(campaignId, orderId, provideOrderItemIdentifiersRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ProvideOrderItemIdentifiersResponse> CampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT(
        int64_t & campaignId, int64_t & orderId, ProvideOrderItemIdentifiersRequest & provideOrderItemIdentifiersRequest)
{
    return handler_PUT_func(campaignId, orderId, provideOrderItemIdentifiersRequest);
}


std::string CampaignsCampaignIdOrdersOrderIdIdentifiersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOrdersOrderIdIdentifiersResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdOrdersOrderIdBoxesResource::CampaignsCampaignIdOrdersOrderIdBoxesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/boxes");
	this->set_method_handler("PUT",
		std::bind(&CampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdBoxesResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdBoxesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdBoxesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOrdersOrderIdBoxesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOrdersOrderIdBoxesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOrdersOrderIdBoxesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto setOrderBoxLayoutRequest = extractJsonModelBodyParam<SetOrderBoxLayoutRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t orderId = request->get_path_parameter("orderId", 0L);
    
    int status_code = 500;
    SetOrderBoxLayoutResponse resultObject = SetOrderBoxLayoutResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PUT(campaignId, orderId, setOrderBoxLayoutRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, SetOrderBoxLayoutResponse> CampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT(
        int64_t & campaignId, int64_t & orderId, SetOrderBoxLayoutRequest & setOrderBoxLayoutRequest)
{
    return handler_PUT_func(campaignId, orderId, setOrderBoxLayoutRequest);
}


std::string CampaignsCampaignIdOrdersOrderIdBoxesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOrdersOrderIdBoxesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/shipments/{shipmentId: .*}/boxes");
	this->set_method_handler("PUT",
		std::bind(&CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto setOrderShipmentBoxesRequest = extractJsonModelBodyParam<SetOrderShipmentBoxesRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t orderId = request->get_path_parameter("orderId", 0L);
    int64_t shipmentId = request->get_path_parameter("shipmentId", 0L);
    
    int status_code = 500;
    SetOrderShipmentBoxesResponse resultObject = SetOrderShipmentBoxesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PUT(campaignId, orderId, shipmentId, setOrderShipmentBoxesRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, SetOrderShipmentBoxesResponse> CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT(
        int64_t & campaignId, int64_t & orderId, int64_t & shipmentId, SetOrderShipmentBoxesRequest & setOrderShipmentBoxesRequest)
{
    return handler_PUT_func(campaignId, orderId, shipmentId, setOrderShipmentBoxesRequest);
}


std::string CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdOrdersOrderIdItemsResource::CampaignsCampaignIdOrdersOrderIdItemsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/items");
	this->set_method_handler("PUT",
		std::bind(&CampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdItemsResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdItemsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdItemsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOrdersOrderIdItemsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOrdersOrderIdItemsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOrdersOrderIdItemsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto updateOrderItemRequest = extractJsonModelBodyParam<UpdateOrderItemRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t orderId = request->get_path_parameter("orderId", 0L);
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_PUT(campaignId, orderId, updateOrderItemRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


int CampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT(
        int64_t & campaignId, int64_t & orderId, UpdateOrderItemRequest & updateOrderItemRequest)
{
    return handler_PUT_func(campaignId, orderId, updateOrderItemRequest);
}


std::string CampaignsCampaignIdOrdersOrderIdItemsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOrdersOrderIdItemsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdOrdersOrderIdStatusResource::CampaignsCampaignIdOrdersOrderIdStatusResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/status");
	this->set_method_handler("PUT",
		std::bind(&CampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdStatusResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdStatusResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersOrderIdStatusResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOrdersOrderIdStatusResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOrdersOrderIdStatusResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOrdersOrderIdStatusResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto updateOrderStatusRequest = extractJsonModelBodyParam<UpdateOrderStatusRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    int64_t orderId = request->get_path_parameter("orderId", 0L);
    
    int status_code = 500;
    UpdateOrderStatusResponse resultObject = UpdateOrderStatusResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PUT(campaignId, orderId, updateOrderStatusRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, UpdateOrderStatusResponse> CampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT(
        int64_t & campaignId, int64_t & orderId, UpdateOrderStatusRequest & updateOrderStatusRequest)
{
    return handler_PUT_func(campaignId, orderId, updateOrderStatusRequest);
}


std::string CampaignsCampaignIdOrdersOrderIdStatusResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOrdersOrderIdStatusResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CampaignsCampaignIdOrdersStatus_updateResource::CampaignsCampaignIdOrdersStatus_updateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/status-update");
	this->set_method_handler("POST",
		std::bind(&CampaignsCampaignIdOrdersStatus_updateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CampaignsCampaignIdOrdersStatus_updateResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersStatus_updateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CampaignsCampaignIdOrdersStatus_updateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CampaignsCampaignIdOrdersStatus_updateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CampaignsCampaignIdOrdersStatus_updateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CampaignsCampaignIdOrdersStatus_updateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CampaignsCampaignIdOrdersStatus_updateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto updateOrderStatusesRequest = extractJsonModelBodyParam<UpdateOrderStatusesRequest>(bodyContent);
    // Getting the path params
    int64_t campaignId = request->get_path_parameter("campaignId", 0L);
    
    int status_code = 500;
    UpdateOrderStatusesResponse resultObject = UpdateOrderStatusesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(campaignId, updateOrderStatusesRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, UpdateOrderStatusesResponse> CampaignsCampaignIdOrdersStatus_updateResource::handler_POST(
        int64_t & campaignId, UpdateOrderStatusesRequest & updateOrderStatusesRequest)
{
    return handler_POST_func(campaignId, updateOrderStatusesRequest);
}


std::string CampaignsCampaignIdOrdersStatus_updateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CampaignsCampaignIdOrdersStatus_updateResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace OrdersApiResources */

OrdersApi::OrdersApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

OrdersApi::~OrdersApi() {}

std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> OrdersApi::getCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource() {
    if (!m_spCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource>());
    }
    return m_spCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource;
}
std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdResource> OrdersApi::getCampaignsCampaignIdOrdersOrderIdResource() {
    if (!m_spCampaignsCampaignIdOrdersOrderIdResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdResource>());
    }
    return m_spCampaignsCampaignIdOrdersOrderIdResource;
}
std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersResource> OrdersApi::getCampaignsCampaignIdOrdersResource() {
    if (!m_spCampaignsCampaignIdOrdersResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersResource>());
    }
    return m_spCampaignsCampaignIdOrdersResource;
}
std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> OrdersApi::getCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource() {
    if (!m_spCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource>());
    }
    return m_spCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource;
}
std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource> OrdersApi::getCampaignsCampaignIdOrdersOrderIdIdentifiersResource() {
    if (!m_spCampaignsCampaignIdOrdersOrderIdIdentifiersResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource>());
    }
    return m_spCampaignsCampaignIdOrdersOrderIdIdentifiersResource;
}
std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource> OrdersApi::getCampaignsCampaignIdOrdersOrderIdBoxesResource() {
    if (!m_spCampaignsCampaignIdOrdersOrderIdBoxesResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource>());
    }
    return m_spCampaignsCampaignIdOrdersOrderIdBoxesResource;
}
std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> OrdersApi::getCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource() {
    if (!m_spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource>());
    }
    return m_spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource;
}
std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource> OrdersApi::getCampaignsCampaignIdOrdersOrderIdItemsResource() {
    if (!m_spCampaignsCampaignIdOrdersOrderIdItemsResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource>());
    }
    return m_spCampaignsCampaignIdOrdersOrderIdItemsResource;
}
std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource> OrdersApi::getCampaignsCampaignIdOrdersOrderIdStatusResource() {
    if (!m_spCampaignsCampaignIdOrdersOrderIdStatusResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource>());
    }
    return m_spCampaignsCampaignIdOrdersOrderIdStatusResource;
}
std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersStatus_updateResource> OrdersApi::getCampaignsCampaignIdOrdersStatus_updateResource() {
    if (!m_spCampaignsCampaignIdOrdersStatus_updateResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersStatus_updateResource>());
    }
    return m_spCampaignsCampaignIdOrdersStatus_updateResource;
}
void OrdersApi::setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> resource) {
    m_spCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource);
}
void OrdersApi::setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdResource> resource) {
    m_spCampaignsCampaignIdOrdersOrderIdResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdResource);
}
void OrdersApi::setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersResource> resource) {
    m_spCampaignsCampaignIdOrdersResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOrdersResource);
}
void OrdersApi::setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> resource) {
    m_spCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource);
}
void OrdersApi::setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource> resource) {
    m_spCampaignsCampaignIdOrdersOrderIdIdentifiersResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdIdentifiersResource);
}
void OrdersApi::setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource> resource) {
    m_spCampaignsCampaignIdOrdersOrderIdBoxesResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdBoxesResource);
}
void OrdersApi::setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> resource) {
    m_spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource);
}
void OrdersApi::setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource> resource) {
    m_spCampaignsCampaignIdOrdersOrderIdItemsResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdItemsResource);
}
void OrdersApi::setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource> resource) {
    m_spCampaignsCampaignIdOrdersOrderIdStatusResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdStatusResource);
}
void OrdersApi::setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersStatus_updateResource> resource) {
    m_spCampaignsCampaignIdOrdersStatus_updateResource = resource;
    m_service->publish(m_spCampaignsCampaignIdOrdersStatus_updateResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> spCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource) {
    m_spCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource = spCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdResource> spCampaignsCampaignIdOrdersOrderIdResource) {
    m_spCampaignsCampaignIdOrdersOrderIdResource = spCampaignsCampaignIdOrdersOrderIdResource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersResource> spCampaignsCampaignIdOrdersResource) {
    m_spCampaignsCampaignIdOrdersResource = spCampaignsCampaignIdOrdersResource;
    m_service->publish(m_spCampaignsCampaignIdOrdersResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> spCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource) {
    m_spCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource = spCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource> spCampaignsCampaignIdOrdersOrderIdIdentifiersResource) {
    m_spCampaignsCampaignIdOrdersOrderIdIdentifiersResource = spCampaignsCampaignIdOrdersOrderIdIdentifiersResource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdIdentifiersResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource> spCampaignsCampaignIdOrdersOrderIdBoxesResource) {
    m_spCampaignsCampaignIdOrdersOrderIdBoxesResource = spCampaignsCampaignIdOrdersOrderIdBoxesResource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdBoxesResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource) {
    m_spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource = spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource> spCampaignsCampaignIdOrdersOrderIdItemsResource) {
    m_spCampaignsCampaignIdOrdersOrderIdItemsResource = spCampaignsCampaignIdOrdersOrderIdItemsResource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdItemsResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource> spCampaignsCampaignIdOrdersOrderIdStatusResource) {
    m_spCampaignsCampaignIdOrdersOrderIdStatusResource = spCampaignsCampaignIdOrdersOrderIdStatusResource;
    m_service->publish(m_spCampaignsCampaignIdOrdersOrderIdStatusResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersStatus_updateResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersStatus_updateResource> spCampaignsCampaignIdOrdersStatus_updateResource) {
    m_spCampaignsCampaignIdOrdersStatus_updateResource = spCampaignsCampaignIdOrdersStatus_updateResource;
    m_service->publish(m_spCampaignsCampaignIdOrdersStatus_updateResource);
}


void OrdersApi::publishDefaultResources() {
    if (!m_spCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource>());
    }
    if (!m_spCampaignsCampaignIdOrdersOrderIdResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdResource>());
    }
    if (!m_spCampaignsCampaignIdOrdersResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersResource>());
    }
    if (!m_spCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource>());
    }
    if (!m_spCampaignsCampaignIdOrdersOrderIdIdentifiersResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource>());
    }
    if (!m_spCampaignsCampaignIdOrdersOrderIdBoxesResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource>());
    }
    if (!m_spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource>());
    }
    if (!m_spCampaignsCampaignIdOrdersOrderIdItemsResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource>());
    }
    if (!m_spCampaignsCampaignIdOrdersOrderIdStatusResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource>());
    }
    if (!m_spCampaignsCampaignIdOrdersStatus_updateResource) {
        setResource(std::make_shared<OrdersApiResources::CampaignsCampaignIdOrdersStatus_updateResource>());
    }
}

std::shared_ptr<restbed::Service> OrdersApi::service() {
    return m_service;
}


}
}
}
}

