/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "OrdersApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

OrdersApiException::OrdersApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int OrdersApiException::getStatus() const
{
    return m_status;
}
const char* OrdersApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/cancellation/accept/");
	this->set_method_handler("PUT",
		std::bind(&OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::~OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource()
{
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto acceptOrderCancellationRequest = extractJsonModelBodyParam<AcceptOrderCancellationRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, acceptOrderCancellationRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Ответ на отмену заказа был успешно передан." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<AcceptOrderCancellationRequest> const & acceptOrderCancellationRequest)
{
    throw OrdersApiException(501, "Not implemented");
}


std::string OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrdersApiCampaignsCampaignIdOrdersOrderIdResource::OrdersApiCampaignsCampaignIdOrdersOrderIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/");
	this->set_method_handler("GET",
		std::bind(&OrdersApiCampaignsCampaignIdOrdersOrderIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

OrdersApiCampaignsCampaignIdOrdersOrderIdResource::~OrdersApiCampaignsCampaignIdOrdersOrderIdResource()
{
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<GetOrderResponse> resultObject = std::make_shared<GetOrderResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о заказе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrderResponse>> OrdersApiCampaignsCampaignIdOrdersOrderIdResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId)
{
    throw OrdersApiException(501, "Not implemented");
}


std::string OrdersApiCampaignsCampaignIdOrdersOrderIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrdersApiCampaignsCampaignIdOrdersResource::OrdersApiCampaignsCampaignIdOrdersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/");
	this->set_method_handler("GET",
		std::bind(&OrdersApiCampaignsCampaignIdOrdersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

OrdersApiCampaignsCampaignIdOrdersResource::~OrdersApiCampaignsCampaignIdOrdersResource()
{
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrdersApiCampaignsCampaignIdOrdersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrdersApiCampaignsCampaignIdOrdersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrdersApiCampaignsCampaignIdOrdersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrdersApiCampaignsCampaignIdOrdersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string fromDate = getQueryParam_fromDate(request);
    const std::string toDate = getQueryParam_toDate(request);
    const std::string supplierShipmentDateFrom = getQueryParam_supplierShipmentDateFrom(request);
    const std::string supplierShipmentDateTo = getQueryParam_supplierShipmentDateTo(request);
    const std::string updatedAtFrom = getQueryParam_updatedAtFrom(request);
    const std::string updatedAtTo = getQueryParam_updatedAtTo(request);
    const bool fake = getQueryParam_fake(request);
    const bool hasCis = getQueryParam_hasCis(request);
    const bool onlyWaitingForCancellationApprove = getQueryParam_onlyWaitingForCancellationApprove(request);
    const bool onlyEstimatedDelivery = getQueryParam_onlyEstimatedDelivery(request);
    const int32_t page = getQueryParam_page(request);
    const int32_t pageSize = getQueryParam_pageSize(request);
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOrdersResponse> resultObject = std::make_shared<GetOrdersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderIds, status, substatus, fromDate, toDate, supplierShipmentDateFrom, supplierShipmentDateTo, updatedAtFrom, updatedAtTo, dispatchType, fake, hasCis, onlyWaitingForCancellationApprove, onlyEstimatedDelivery, buyerType, page, pageSize, pageToken, limit);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о заказах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrdersResponse>> OrdersApiCampaignsCampaignIdOrdersResource::handler_GET(
        int64_t const & campaignId, std::vector<int64_t> const & orderIds, Set<std::shared_ptr<OrderStatusType>> const & status, Set<std::shared_ptr<OrderSubstatusType>> const & substatus, std::string const & fromDate, std::string const & toDate, std::string const & supplierShipmentDateFrom, std::string const & supplierShipmentDateTo, std::string const & updatedAtFrom, std::string const & updatedAtTo, std::shared_ptr<OrderDeliveryDispatchType> const & dispatchType, bool const & fake, bool const & hasCis, bool const & onlyWaitingForCancellationApprove, bool const & onlyEstimatedDelivery, std::shared_ptr<OrderBuyerType> const & buyerType, int32_t const & page, int32_t const & pageSize, std::string const & pageToken, int32_t const & limit)
{
    throw OrdersApiException(501, "Not implemented");
}


std::string OrdersApiCampaignsCampaignIdOrdersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/deliverDigitalGoods/");
	this->set_method_handler("POST",
		std::bind(&OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::~OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource()
{
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto provideOrderDigitalCodesRequest = extractJsonModelBodyParam<ProvideOrderDigitalCodesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, orderId, provideOrderDigitalCodesRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handler_POST(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<ProvideOrderDigitalCodesRequest> const & provideOrderDigitalCodesRequest)
{
    throw OrdersApiException(501, "Not implemented");
}


std::string OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/identifiers/");
	this->set_method_handler("PUT",
		std::bind(&OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::~OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource()
{
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto provideOrderItemIdentifiersRequest = extractJsonModelBodyParam<ProvideOrderItemIdentifiersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<ProvideOrderItemIdentifiersResponse> resultObject = std::make_shared<ProvideOrderItemIdentifiersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, provideOrderItemIdentifiersRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<ProvideOrderItemIdentifiersResponse>> OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<ProvideOrderItemIdentifiersRequest> const & provideOrderItemIdentifiersRequest)
{
    throw OrdersApiException(501, "Not implemented");
}


std::string OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/boxes/");
	this->set_method_handler("PUT",
		std::bind(&OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::~OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource()
{
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setOrderBoxLayoutRequest = extractJsonModelBodyParam<SetOrderBoxLayoutRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<SetOrderBoxLayoutResponse> resultObject = std::make_shared<SetOrderBoxLayoutResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, setOrderBoxLayoutRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<SetOrderBoxLayoutResponse>> OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<SetOrderBoxLayoutRequest> const & setOrderBoxLayoutRequest)
{
    throw OrdersApiException(501, "Not implemented");
}


std::string OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/shipments/{shipmentId: .*}/boxes/");
	this->set_method_handler("PUT",
		std::bind(&OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::~OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource()
{
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setOrderShipmentBoxesRequest = extractJsonModelBodyParam<SetOrderShipmentBoxesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::shared_ptr<SetOrderShipmentBoxesResponse> resultObject = std::make_shared<SetOrderShipmentBoxesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, shipmentId, setOrderShipmentBoxesRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество грузомест записано." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<SetOrderShipmentBoxesResponse>> OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & shipmentId, std::shared_ptr<SetOrderShipmentBoxesRequest> const & setOrderShipmentBoxesRequest)
{
    throw OrdersApiException(501, "Not implemented");
}


std::string OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/items/");
	this->set_method_handler("PUT",
		std::bind(&OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::~OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource()
{
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOrderItemRequest = extractJsonModelBodyParam<UpdateOrderItemRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_PUT(campaignId, orderId, updateOrderItemRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Маркет успешно обработал ваш запрос. Выходные данные не ожидаются." : result, contentType);
        return;
    }
    if (status_code == 400) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<UpdateOrderItemRequest> const & updateOrderItemRequest)
{
    throw OrdersApiException(501, "Not implemented");
}


std::string OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/status/");
	this->set_method_handler("PUT",
		std::bind(&OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::~OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource()
{
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOrderStatusRequest = extractJsonModelBodyParam<UpdateOrderStatusRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<UpdateOrderStatusResponse> resultObject = std::make_shared<UpdateOrderStatusResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, updateOrderStatusRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В случае успешного изменения статуса заказа возвращается обновленная информация о заказе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateOrderStatusResponse>> OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<UpdateOrderStatusRequest> const & updateOrderStatusRequest)
{
    throw OrdersApiException(501, "Not implemented");
}


std::string OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::OrdersApiCampaignsCampaignIdOrdersStatus-updateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/status-update/");
	this->set_method_handler("POST",
		std::bind(&OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::~OrdersApiCampaignsCampaignIdOrdersStatus-updateResource()
{
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::handleOrdersApiException(const OrdersApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOrderStatusesRequest = extractJsonModelBodyParam<UpdateOrderStatusesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<UpdateOrderStatusesResponse> resultObject = std::make_shared<UpdateOrderStatusesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, updateOrderStatusesRequest);
    }
    catch(const OrdersApiException& e) {
        std::tie(status_code, result) = handleOrdersApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Возвращается информация об обновленных статусах заказов." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateOrderStatusesResponse>> OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateOrderStatusesRequest> const & updateOrderStatusesRequest)
{
    throw OrdersApiException(501, "Not implemented");
}


std::string OrdersApiCampaignsCampaignIdOrdersStatus-updateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

OrdersApi::OrdersApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

OrdersApi::~OrdersApi() {}

void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(std::shared_ptr<OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource) {
    m_spOrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource = spOrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource;
    m_service->publish(m_spOrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdResource(std::shared_ptr<OrdersApiCampaignsCampaignIdOrdersOrderIdResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdResource) {
    m_spOrdersApiCampaignsCampaignIdOrdersOrderIdResource = spOrdersApiCampaignsCampaignIdOrdersOrderIdResource;
    m_service->publish(m_spOrdersApiCampaignsCampaignIdOrdersOrderIdResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersResource(std::shared_ptr<OrdersApiCampaignsCampaignIdOrdersResource> spOrdersApiCampaignsCampaignIdOrdersResource) {
    m_spOrdersApiCampaignsCampaignIdOrdersResource = spOrdersApiCampaignsCampaignIdOrdersResource;
    m_service->publish(m_spOrdersApiCampaignsCampaignIdOrdersResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(std::shared_ptr<OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource) {
    m_spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource = spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource;
    m_service->publish(m_spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(std::shared_ptr<OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource) {
    m_spOrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource = spOrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource;
    m_service->publish(m_spOrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource(std::shared_ptr<OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource) {
    m_spOrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource = spOrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource;
    m_service->publish(m_spOrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(std::shared_ptr<OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource) {
    m_spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource = spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource;
    m_service->publish(m_spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource(std::shared_ptr<OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource) {
    m_spOrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource = spOrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource;
    m_service->publish(m_spOrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource(std::shared_ptr<OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource) {
    m_spOrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource = spOrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource;
    m_service->publish(m_spOrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource);
}
void OrdersApi::setOrdersApiCampaignsCampaignIdOrdersStatus-updateResource(std::shared_ptr<OrdersApiCampaignsCampaignIdOrdersStatus-updateResource> spOrdersApiCampaignsCampaignIdOrdersStatus-updateResource) {
    m_spOrdersApiCampaignsCampaignIdOrdersStatus-updateResource = spOrdersApiCampaignsCampaignIdOrdersStatus-updateResource;
    m_service->publish(m_spOrdersApiCampaignsCampaignIdOrdersStatus-updateResource);
}


void OrdersApi::publishDefaultResources() {
    if (!m_spOrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource) {
        setOrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(std::make_shared<OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource>());
    }
    if (!m_spOrdersApiCampaignsCampaignIdOrdersOrderIdResource) {
        setOrdersApiCampaignsCampaignIdOrdersOrderIdResource(std::make_shared<OrdersApiCampaignsCampaignIdOrdersOrderIdResource>());
    }
    if (!m_spOrdersApiCampaignsCampaignIdOrdersResource) {
        setOrdersApiCampaignsCampaignIdOrdersResource(std::make_shared<OrdersApiCampaignsCampaignIdOrdersResource>());
    }
    if (!m_spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource) {
        setOrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(std::make_shared<OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource>());
    }
    if (!m_spOrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource) {
        setOrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(std::make_shared<OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource>());
    }
    if (!m_spOrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource) {
        setOrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource(std::make_shared<OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource>());
    }
    if (!m_spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource) {
        setOrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(std::make_shared<OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource>());
    }
    if (!m_spOrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource) {
        setOrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource(std::make_shared<OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource>());
    }
    if (!m_spOrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource) {
        setOrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource(std::make_shared<OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource>());
    }
    if (!m_spOrdersApiCampaignsCampaignIdOrdersStatus-updateResource) {
        setOrdersApiCampaignsCampaignIdOrdersStatus-updateResource(std::make_shared<OrdersApiCampaignsCampaignIdOrdersStatus-updateResource>());
    }
}

std::shared_ptr<restbed::Service> OrdersApi::service() {
    return m_service;
}


}
}
}
}

