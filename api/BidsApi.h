/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BidsApi.h
 *
 * 
 */

#ifndef BidsApi_H_
#define BidsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetBidsInfoRequest.h"
#include "GetBidsInfoResponse.h"
#include "GetBidsRecommendationsRequest.h"
#include "GetBidsRecommendationsResponse.h"
#include "PutSkuBidsRequest.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BidsApiException: public std::exception
{
public:
    BidsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace BidsApiResources {
/// <summary>
/// Информация об установленных ставках
/// </summary>
/// <remarks>
/// Возвращает значения ставок для заданных товаров.  {% note warning \&quot;\&quot; %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdBidsInfoResource: public restbed::Resource
{
public:
    BusinessesBusinessIdBidsInfoResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdBidsInfoResource() = default;

    BusinessesBusinessIdBidsInfoResource(
        const BusinessesBusinessIdBidsInfoResource& other) = default; // copy constructor
    BusinessesBusinessIdBidsInfoResource(BusinessesBusinessIdBidsInfoResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdBidsInfoResource& operator=(const BusinessesBusinessIdBidsInfoResource& other) = default; // copy assignment
    BusinessesBusinessIdBidsInfoResource& operator=(BusinessesBusinessIdBidsInfoResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetBidsInfoResponse>(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetBidsInfoRequest & getBidsInfoRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetBidsInfoRequest &) -> std::pair<int, GetBidsInfoResponse>
                { throw BidsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetBidsInfoResponse> handler_POST(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetBidsInfoRequest & getBidsInfoRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBidsApiException(const BidsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Рекомендованные ставки для заданных товаров
/// </summary>
/// <remarks>
/// Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdBidsRecommendationsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdBidsRecommendationsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdBidsRecommendationsResource() = default;

    BusinessesBusinessIdBidsRecommendationsResource(
        const BusinessesBusinessIdBidsRecommendationsResource& other) = default; // copy constructor
    BusinessesBusinessIdBidsRecommendationsResource(BusinessesBusinessIdBidsRecommendationsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdBidsRecommendationsResource& operator=(const BusinessesBusinessIdBidsRecommendationsResource& other) = default; // copy assignment
    BusinessesBusinessIdBidsRecommendationsResource& operator=(BusinessesBusinessIdBidsRecommendationsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetBidsRecommendationsResponse>(
        int64_t & businessId, GetBidsRecommendationsRequest & getBidsRecommendationsRequest)> handler_POST_func =
            [](int64_t &, GetBidsRecommendationsRequest &) -> std::pair<int, GetBidsRecommendationsResponse>
                { throw BidsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetBidsRecommendationsResponse> handler_POST(
        int64_t & businessId, GetBidsRecommendationsRequest & getBidsRecommendationsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBidsApiException(const BidsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Включение буста продаж и установка ставок
/// </summary>
/// <remarks>
/// Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \&quot;Как в кабинете выглядит кампания, созданная через API\&quot; %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdBidsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdBidsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdBidsResource() = default;

    BusinessesBusinessIdBidsResource(
        const BusinessesBusinessIdBidsResource& other) = default; // copy constructor
    BusinessesBusinessIdBidsResource(BusinessesBusinessIdBidsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdBidsResource& operator=(const BusinessesBusinessIdBidsResource& other) = default; // copy assignment
    BusinessesBusinessIdBidsResource& operator=(BusinessesBusinessIdBidsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, PutSkuBidsRequest & putSkuBidsRequest)> handler_PUT_func =
            [](int64_t &, PutSkuBidsRequest &) -> std::pair<int, EmptyApiResponse>
                { throw BidsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & businessId, PutSkuBidsRequest & putSkuBidsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBidsApiException(const BidsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Включение буста продаж и установка ставок для магазина
/// </summary>
/// <remarks>
/// Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdBidsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdBidsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdBidsResource() = default;

    CampaignsCampaignIdBidsResource(
        const CampaignsCampaignIdBidsResource& other) = default; // copy constructor
    CampaignsCampaignIdBidsResource(CampaignsCampaignIdBidsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdBidsResource& operator=(const CampaignsCampaignIdBidsResource& other) = default; // copy assignment
    CampaignsCampaignIdBidsResource& operator=(CampaignsCampaignIdBidsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, PutSkuBidsRequest & putSkuBidsRequest)> handler_PUT_func =
            [](int64_t &, PutSkuBidsRequest &) -> std::pair<int, EmptyApiResponse>
                { throw BidsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, PutSkuBidsRequest & putSkuBidsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBidsApiException(const BidsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace BidsApiResources */

using BidsApiBusinessesBusinessIdBidsInfoResource [[deprecated]] = BidsApiResources::BusinessesBusinessIdBidsInfoResource;
using BidsApiBusinessesBusinessIdBidsRecommendationsResource [[deprecated]] = BidsApiResources::BusinessesBusinessIdBidsRecommendationsResource;
using BidsApiBusinessesBusinessIdBidsResource [[deprecated]] = BidsApiResources::BusinessesBusinessIdBidsResource;
using BidsApiCampaignsCampaignIdBidsResource [[deprecated]] = BidsApiResources::CampaignsCampaignIdBidsResource;

//
// The restbed service to actually implement the REST server
//
class  BidsApi
{
public:
    explicit BidsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~BidsApi();

    std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsInfoResource> getBusinessesBusinessIdBidsInfoResource();
    std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsRecommendationsResource> getBusinessesBusinessIdBidsRecommendationsResource();
    std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsResource> getBusinessesBusinessIdBidsResource();
    std::shared_ptr<BidsApiResources::CampaignsCampaignIdBidsResource> getCampaignsCampaignIdBidsResource();

    void setResource(std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsInfoResource> resource);
    void setResource(std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsRecommendationsResource> resource);
    void setResource(std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsResource> resource);
    void setResource(std::shared_ptr<BidsApiResources::CampaignsCampaignIdBidsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setBidsApiBusinessesBusinessIdBidsInfoResource(std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsInfoResource> spBidsApiBusinessesBusinessIdBidsInfoResource);
    [[deprecated("use setResource()")]]
    virtual void setBidsApiBusinessesBusinessIdBidsRecommendationsResource(std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsRecommendationsResource> spBidsApiBusinessesBusinessIdBidsRecommendationsResource);
    [[deprecated("use setResource()")]]
    virtual void setBidsApiBusinessesBusinessIdBidsResource(std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsResource> spBidsApiBusinessesBusinessIdBidsResource);
    [[deprecated("use setResource()")]]
    virtual void setBidsApiCampaignsCampaignIdBidsResource(std::shared_ptr<BidsApiResources::CampaignsCampaignIdBidsResource> spBidsApiCampaignsCampaignIdBidsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsInfoResource> m_spBusinessesBusinessIdBidsInfoResource;
    std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsRecommendationsResource> m_spBusinessesBusinessIdBidsRecommendationsResource;
    std::shared_ptr<BidsApiResources::BusinessesBusinessIdBidsResource> m_spBusinessesBusinessIdBidsResource;
    std::shared_ptr<BidsApiResources::CampaignsCampaignIdBidsResource> m_spCampaignsCampaignIdBidsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BidsApi_H_ */

