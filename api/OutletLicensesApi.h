/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OutletLicensesApi.h
 *
 * 
 */

#ifndef OutletLicensesApi_H_
#define OutletLicensesApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetOutletLicensesResponse.h"
#include "UpdateOutletLicenseRequest.h"
#include <set>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OutletLicensesApiException: public std::exception
{
public:
    OutletLicensesApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace OutletLicensesApiResources {
/// <summary>
/// Удаление лицензий для точек продаж
/// </summary>
/// <remarks>
/// Удаляет информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOutletsLicensesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOutletsLicensesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOutletsLicensesResource() = default;

    CampaignsCampaignIdOutletsLicensesResource(
        const CampaignsCampaignIdOutletsLicensesResource& other) = default; // copy constructor
    CampaignsCampaignIdOutletsLicensesResource(CampaignsCampaignIdOutletsLicensesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOutletsLicensesResource& operator=(const CampaignsCampaignIdOutletsLicensesResource& other) = default; // copy assignment
    CampaignsCampaignIdOutletsLicensesResource& operator=(CampaignsCampaignIdOutletsLicensesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, std::set<int64_t> & ids)> handler_DELETE_func =
            [](int64_t &, std::set<int64_t> &) -> std::pair<int, EmptyApiResponse>
                { throw OutletLicensesApiException(501, "Not implemented"); };

    std::function<std::pair<int, GetOutletLicensesResponse>(
        int64_t & campaignId, std::set<int64_t> & outletIds, std::set<int64_t> & ids)> handler_GET_func =
            [](int64_t &, std::set<int64_t> &, std::set<int64_t> &) -> std::pair<int, GetOutletLicensesResponse>
                { throw OutletLicensesApiException(501, "Not implemented"); };

    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, UpdateOutletLicenseRequest & updateOutletLicenseRequest)> handler_POST_func =
            [](int64_t &, UpdateOutletLicenseRequest &) -> std::pair<int, EmptyApiResponse>
                { throw OutletLicensesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_DELETE(
        int64_t & campaignId, std::set<int64_t> & ids);

    virtual std::pair<int, GetOutletLicensesResponse> handler_GET(
        int64_t & campaignId, std::set<int64_t> & outletIds, std::set<int64_t> & ids);
    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, UpdateOutletLicenseRequest & updateOutletLicenseRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOutletLicensesApiException(const OutletLicensesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace OutletLicensesApiResources */

using OutletLicensesApiCampaignsCampaignIdOutletsLicensesResource [[deprecated]] = OutletLicensesApiResources::CampaignsCampaignIdOutletsLicensesResource;

//
// The restbed service to actually implement the REST server
//
class  OutletLicensesApi
{
public:
    explicit OutletLicensesApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OutletLicensesApi();

    std::shared_ptr<OutletLicensesApiResources::CampaignsCampaignIdOutletsLicensesResource> getCampaignsCampaignIdOutletsLicensesResource();

    void setResource(std::shared_ptr<OutletLicensesApiResources::CampaignsCampaignIdOutletsLicensesResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setOutletLicensesApiCampaignsCampaignIdOutletsLicensesResource(std::shared_ptr<OutletLicensesApiResources::CampaignsCampaignIdOutletsLicensesResource> spOutletLicensesApiCampaignsCampaignIdOutletsLicensesResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OutletLicensesApiResources::CampaignsCampaignIdOutletsLicensesResource> m_spCampaignsCampaignIdOutletsLicensesResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OutletLicensesApi_H_ */

