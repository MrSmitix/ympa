/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferMappingsApi.h
 *
 * 
 */

#ifndef OfferMappingsApi_H_
#define OfferMappingsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetOfferMappingEntriesResponse.h"
#include "GetSuggestedOfferMappingEntriesRequest.h"
#include "GetSuggestedOfferMappingEntriesResponse.h"
#include "OfferAvailabilityStatusType.h"
#include "OfferMappingKindType.h"
#include "OfferProcessingStatusType.h"
#include "UpdateOfferMappingEntryRequest.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OfferMappingsApiException: public std::exception
{
public:
    OfferMappingsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace OfferMappingsApiResources {
/// <summary>
/// Список товаров в каталоге
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
/// </remarks>
class  CampaignsCampaignIdOffer_mapping_entriesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_mapping_entriesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_mapping_entriesResource() = default;

    CampaignsCampaignIdOffer_mapping_entriesResource(
        const CampaignsCampaignIdOffer_mapping_entriesResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_mapping_entriesResource(CampaignsCampaignIdOffer_mapping_entriesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_mapping_entriesResource& operator=(const CampaignsCampaignIdOffer_mapping_entriesResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_mapping_entriesResource& operator=(CampaignsCampaignIdOffer_mapping_entriesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOfferMappingEntriesResponse>(
        int64_t & campaignId, std::vector<std::string> & offerId, std::vector<std::string> & shopSku, OfferMappingKindType & mappingKind, std::vector<OfferProcessingStatusType> & status, std::vector<OfferAvailabilityStatusType> & availability, std::vector<int32_t> & categoryId, std::vector<std::string> & vendor, std::string & pageToken, int32_t & limit)> handler_GET_func =
            [](int64_t &, std::vector<std::string> &, std::vector<std::string> &, OfferMappingKindType &, std::vector<OfferProcessingStatusType> &, std::vector<OfferAvailabilityStatusType> &, std::vector<int32_t> &, std::vector<std::string> &, std::string &, int32_t &) -> std::pair<int, GetOfferMappingEntriesResponse>
                { throw OfferMappingsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOfferMappingEntriesResponse> handler_GET(
        int64_t & campaignId, std::vector<std::string> & offerId, std::vector<std::string> & shopSku, OfferMappingKindType & mappingKind, std::vector<OfferProcessingStatusType> & status, std::vector<OfferAvailabilityStatusType> & availability, std::vector<int32_t> & categoryId, std::vector<std::string> & vendor, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOfferMappingsApiException(const OfferMappingsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Рекомендованные карточки для товаров
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku&#x3D;», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource() = default;

    CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource(
        const CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource(CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource& operator=(const CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource& operator=(CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetSuggestedOfferMappingEntriesResponse>(
        int64_t & campaignId, GetSuggestedOfferMappingEntriesRequest & getSuggestedOfferMappingEntriesRequest)> handler_POST_func =
            [](int64_t &, GetSuggestedOfferMappingEntriesRequest &) -> std::pair<int, GetSuggestedOfferMappingEntriesResponse>
                { throw OfferMappingsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetSuggestedOfferMappingEntriesResponse> handler_POST(
        int64_t & campaignId, GetSuggestedOfferMappingEntriesRequest & getSuggestedOfferMappingEntriesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOfferMappingsApiException(const OfferMappingsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Добавление и редактирование товаров в каталоге
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре &#x60;shopSku&#x60; ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре &#x60;shopSku&#x60; ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус &#x60;NEED_CONTENT&#x60; (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус &#x60;NEED_INFO&#x60; (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdOffer_mapping_entriesUpdatesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffer_mapping_entriesUpdatesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffer_mapping_entriesUpdatesResource() = default;

    CampaignsCampaignIdOffer_mapping_entriesUpdatesResource(
        const CampaignsCampaignIdOffer_mapping_entriesUpdatesResource& other) = default; // copy constructor
    CampaignsCampaignIdOffer_mapping_entriesUpdatesResource(CampaignsCampaignIdOffer_mapping_entriesUpdatesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffer_mapping_entriesUpdatesResource& operator=(const CampaignsCampaignIdOffer_mapping_entriesUpdatesResource& other) = default; // copy assignment
    CampaignsCampaignIdOffer_mapping_entriesUpdatesResource& operator=(CampaignsCampaignIdOffer_mapping_entriesUpdatesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, UpdateOfferMappingEntryRequest & updateOfferMappingEntryRequest)> handler_POST_func =
            [](int64_t &, UpdateOfferMappingEntryRequest &) -> std::pair<int, EmptyApiResponse>
                { throw OfferMappingsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, UpdateOfferMappingEntryRequest & updateOfferMappingEntryRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOfferMappingsApiException(const OfferMappingsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace OfferMappingsApiResources */

using OfferMappingsApiCampaignsCampaignIdOffer_mapping_entriesResource [[deprecated]] = OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesResource;
using OfferMappingsApiCampaignsCampaignIdOffer_mapping_entriesSuggestionsResource [[deprecated]] = OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource;
using OfferMappingsApiCampaignsCampaignIdOffer_mapping_entriesUpdatesResource [[deprecated]] = OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesUpdatesResource;

//
// The restbed service to actually implement the REST server
//
class  OfferMappingsApi
{
public:
    explicit OfferMappingsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OfferMappingsApi();

    std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesResource> getCampaignsCampaignIdOffer_mapping_entriesResource();
    std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource> getCampaignsCampaignIdOffer_mapping_entriesSuggestionsResource();
    std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesUpdatesResource> getCampaignsCampaignIdOffer_mapping_entriesUpdatesResource();

    void setResource(std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesResource> resource);
    void setResource(std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource> resource);
    void setResource(std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesUpdatesResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setOfferMappingsApiCampaignsCampaignIdOffer_mapping_entriesResource(std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesResource> spOfferMappingsApiCampaignsCampaignIdOffer_mapping_entriesResource);
    [[deprecated("use setResource()")]]
    virtual void setOfferMappingsApiCampaignsCampaignIdOffer_mapping_entriesSuggestionsResource(std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource> spOfferMappingsApiCampaignsCampaignIdOffer_mapping_entriesSuggestionsResource);
    [[deprecated("use setResource()")]]
    virtual void setOfferMappingsApiCampaignsCampaignIdOffer_mapping_entriesUpdatesResource(std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesUpdatesResource> spOfferMappingsApiCampaignsCampaignIdOffer_mapping_entriesUpdatesResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesResource> m_spCampaignsCampaignIdOffer_mapping_entriesResource;
    std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesSuggestionsResource> m_spCampaignsCampaignIdOffer_mapping_entriesSuggestionsResource;
    std::shared_ptr<OfferMappingsApiResources::CampaignsCampaignIdOffer_mapping_entriesUpdatesResource> m_spCampaignsCampaignIdOffer_mapping_entriesUpdatesResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OfferMappingsApi_H_ */

