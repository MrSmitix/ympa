/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FbyApi.h
 *
 * 
 */

#ifndef FbyApi_H_
#define FbyApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AddHiddenOffersRequest.h"
#include "AddOffersToArchiveRequest.h"
#include "AddOffersToArchiveResponse.h"
#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "CalculateTariffsRequest.h"
#include "CalculateTariffsResponse.h"
#include "ConfirmPricesRequest.h"
#include "CreateChatRequest.h"
#include "CreateChatResponse.h"
#include "CurrencyType.h"
#include "DeleteCampaignOffersRequest.h"
#include "DeleteCampaignOffersResponse.h"
#include "DeleteGoodsFeedbackCommentRequest.h"
#include "DeleteHiddenOffersRequest.h"
#include "DeleteOffersFromArchiveRequest.h"
#include "DeleteOffersFromArchiveResponse.h"
#include "DeleteOffersRequest.h"
#include "DeleteOffersResponse.h"
#include "DeletePromoOffersRequest.h"
#include "DeletePromoOffersResponse.h"
#include "EmptyApiResponse.h"
#include "FeedIndexLogsStatusType.h"
#include "GenerateBoostConsolidatedRequest.h"
#include "GenerateCompetitorsPositionReportRequest.h"
#include "GenerateGoodsFeedbackRequest.h"
#include "GenerateGoodsMovementReportRequest.h"
#include "GenerateGoodsRealizationReportRequest.h"
#include "GenerateGoodsTurnoverRequest.h"
#include "GeneratePricesReportRequest.h"
#include "GenerateReportResponse.h"
#include "GenerateShelfsStatisticsRequest.h"
#include "GenerateShowsSalesReportRequest.h"
#include "GenerateStocksOnWarehousesReportRequest.h"
#include "GenerateUnitedMarketplaceServicesReportRequest.h"
#include "GenerateUnitedNettingReportRequest.h"
#include "GenerateUnitedOrdersRequest.h"
#include "GetAllOffersResponse.h"
#include "GetBidsInfoRequest.h"
#include "GetBidsInfoResponse.h"
#include "GetBidsRecommendationsRequest.h"
#include "GetBidsRecommendationsResponse.h"
#include "GetBusinessBuyerInfoResponse.h"
#include "GetBusinessDocumentsInfoResponse.h"
#include "GetBusinessSettingsResponse.h"
#include "GetCampaignLoginsResponse.h"
#include "GetCampaignOffersRequest.h"
#include "GetCampaignOffersResponse.h"
#include "GetCampaignRegionResponse.h"
#include "GetCampaignResponse.h"
#include "GetCampaignSettingsResponse.h"
#include "GetCampaignsResponse.h"
#include "GetCategoriesMaxSaleQuantumRequest.h"
#include "GetCategoriesMaxSaleQuantumResponse.h"
#include "GetCategoriesRequest.h"
#include "GetCategoriesResponse.h"
#include "GetCategoryContentParametersResponse.h"
#include "GetChatHistoryRequest.h"
#include "GetChatHistoryResponse.h"
#include "GetChatsRequest.h"
#include "GetChatsResponse.h"
#include "GetFeedIndexLogsResponse.h"
#include "GetFeedResponse.h"
#include "GetFeedbackListResponse.h"
#include "GetFeedsResponse.h"
#include "GetFulfillmentWarehousesResponse.h"
#include "GetGoodsFeedbackCommentsRequest.h"
#include "GetGoodsFeedbackCommentsResponse.h"
#include "GetGoodsFeedbackRequest.h"
#include "GetGoodsFeedbackResponse.h"
#include "GetGoodsStatsRequest.h"
#include "GetGoodsStatsResponse.h"
#include "GetHiddenOffersResponse.h"
#include "GetOfferCardsContentStatusRequest.h"
#include "GetOfferCardsContentStatusResponse.h"
#include "GetOfferMappingEntriesResponse.h"
#include "GetOfferMappingsRequest.h"
#include "GetOfferMappingsResponse.h"
#include "GetOfferRecommendationsRequest.h"
#include "GetOfferRecommendationsResponse.h"
#include "GetOffersResponse.h"
#include "GetOrderResponse.h"
#include "GetOrdersResponse.h"
#include "GetOrdersStatsRequest.h"
#include "GetOrdersStatsResponse.h"
#include "GetPricesByOfferIdsRequest.h"
#include "GetPricesByOfferIdsResponse.h"
#include "GetPricesResponse.h"
#include "GetPromoOffersRequest.h"
#include "GetPromoOffersResponse.h"
#include "GetPromosRequest.h"
#include "GetPromosResponse.h"
#include "GetQualityRatingRequest.h"
#include "GetQualityRatingResponse.h"
#include "GetQuarantineOffersRequest.h"
#include "GetQuarantineOffersResponse.h"
#include "GetRegionWithChildrenResponse.h"
#include "GetRegionsResponse.h"
#include "GetReportInfoResponse.h"
#include "GetReturnResponse.h"
#include "GetReturnsResponse.h"
#include "GetSuggestedOfferMappingEntriesRequest.h"
#include "GetSuggestedOfferMappingEntriesResponse.h"
#include "GetSuggestedOfferMappingsRequest.h"
#include "GetSuggestedOfferMappingsResponse.h"
#include "GetWarehouseStocksRequest.h"
#include "GetWarehouseStocksResponse.h"
#include "OfferAvailabilityStatusType.h"
#include "OfferMappingKindType.h"
#include "OfferProcessingStatusType.h"
#include "OrderBuyerType.h"
#include "OrderDeliveryDispatchType.h"
#include "OrderStatusType.h"
#include "OrderSubstatusType.h"
#include "PutSkuBidsRequest.h"
#include "RefundStatusType.h"
#include "ReportFormatType.h"
#include "ReturnType.h"
#include "SendMessageToChatRequest.h"
#include "Set.h"
#include "SetFeedParamsRequest.h"
#include "SkipGoodsFeedbackReactionRequest.h"
#include "SuggestPricesRequest.h"
#include "SuggestPricesResponse.h"
#include "UpdateBusinessPricesRequest.h"
#include "UpdateCampaignOffersRequest.h"
#include "UpdateGoodsFeedbackCommentRequest.h"
#include "UpdateGoodsFeedbackCommentResponse.h"
#include "UpdateOfferContentRequest.h"
#include "UpdateOfferContentResponse.h"
#include "UpdateOfferMappingEntryRequest.h"
#include "UpdateOfferMappingsRequest.h"
#include "UpdateOfferMappingsResponse.h"
#include "UpdatePricesRequest.h"
#include "UpdatePromoOffersRequest.h"
#include "UpdatePromoOffersResponse.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  FbyApiException: public std::exception
{
public:
    FbyApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Скрытие товаров и настройки скрытия
/// </summary>
/// <remarks>
/// Скрывает товары магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdHidden-offersResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdHidden-offersResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdHidden-offersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<AddHiddenOffersRequest> const & addHiddenOffersRequest);

    virtual std::pair<int, std::shared_ptr<GetHiddenOffersResponse>> handler_GET(
        int64_t const & campaignId, std::vector<std::shared_ptr<std::string>> const & offerId, std::string const & pageToken, int32_t const & limit, int32_t const & offset, int32_t const & page, int32_t const & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }


    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }
    virtual std::string getQueryParam_pageToken_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }
    virtual int32_t getQueryParam_limit_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }
    virtual int32_t getQueryParam_offset_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("offset", 0);
    }
    virtual int32_t getQueryParam_page_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }
    virtual int32_t getQueryParam_pageSize_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }

    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление товаров в архив
/// </summary>
/// <remarks>
/// Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \&quot;В архив нельзя отправить товар, который хранится на складе Маркета\&quot; %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdOffer-mappingsArchiveResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdOffer-mappingsArchiveResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdOffer-mappingsArchiveResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<AddOffersToArchiveResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<AddOffersToArchiveRequest> const & addOffersToArchiveRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Калькулятор стоимости услуг
/// </summary>
/// <remarks>
/// Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр &#x60;campaignId&#x60;, либо &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  FbyApiTariffsCalculateResource: public restbed::Resource
{
public:
    FbyApiTariffsCalculateResource(const std::string& context = "");
    virtual ~FbyApiTariffsCalculateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<CalculateTariffsResponse>> handler_POST(
        std::shared_ptr<CalculateTariffsRequest> const & calculateTariffsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товара из карантина по цене в кабинете
/// </summary>
/// <remarks>
/// Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdPrice-quarantineConfirmResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdPrice-quarantineConfirmResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdPrice-quarantineConfirmResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<ConfirmPricesRequest> const & confirmPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товара из карантина по цене в магазине
/// </summary>
/// <remarks>
/// Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdPrice-quarantineConfirmResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdPrice-quarantineConfirmResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdPrice-quarantineConfirmResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<ConfirmPricesRequest> const & confirmPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Создание нового чата с покупателем
/// </summary>
/// <remarks>
/// Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdChatsNewResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdChatsNewResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdChatsNewResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<CreateChatResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<CreateChatRequest> const & createChatRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товаров из ассортимента магазина
/// </summary>
/// <remarks>
/// Удаляет заданные товары из заданного магазина.  {% note warning \&quot;Запрос удаляет товары именно из конкретного магазина\&quot; %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOffersDeleteResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOffersDeleteResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOffersDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<DeleteCampaignOffersResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<DeleteCampaignOffersRequest> const & deleteCampaignOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление комментария к отзыву
/// </summary>
/// <remarks>
/// Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteGoodsFeedbackCommentRequest> const & deleteGoodsFeedbackCommentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Возобновление показа товаров
/// </summary>
/// <remarks>
/// Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdHidden-offersDeleteResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdHidden-offersDeleteResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdHidden-offersDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<DeleteHiddenOffersRequest> const & deleteHiddenOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товаров из каталога
/// </summary>
/// <remarks>
/// Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdOffer-mappingsDeleteResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdOffer-mappingsDeleteResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdOffer-mappingsDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<DeleteOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteOffersRequest> const & deleteOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товаров из архива
/// </summary>
/// <remarks>
/// Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdOffer-mappingsUnarchiveResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdOffer-mappingsUnarchiveResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<DeleteOffersFromArchiveResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteOffersFromArchiveRequest> const & deleteOffersFromArchiveRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товаров из акции
/// </summary>
/// <remarks>
/// Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdPromosOffersDeleteResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdPromosOffersDeleteResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdPromosOffersDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<DeletePromoOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<DeletePromoOffersRequest> const & deletePromoOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по бусту продаж
/// </summary>
/// <remarks>
/// Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsBoost-consolidatedGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsBoost-consolidatedGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsBoost-consolidatedGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateBoostConsolidatedRequest> const & generateBoostConsolidatedRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет «Конкурентная позиция»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsCompetitors-positionGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsCompetitors-positionGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsCompetitors-positionGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateCompetitorsPositionReportRequest> const & generateCompetitorsPositionReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по отзывам о товарах
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsGoods-feedbackGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsGoods-feedbackGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsGoods-feedbackGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateGoodsFeedbackRequest> const & generateGoodsFeedbackRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по движению товаров
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsGoods-movementGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsGoods-movementGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsGoods-movementGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateGoodsMovementReportRequest> const & generateGoodsMovementReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по реализации
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsGoods-realizationGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsGoods-realizationGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsGoods-realizationGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateGoodsRealizationReportRequest> const & generateGoodsRealizationReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по оборачиваемости
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsGoods-turnoverGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsGoods-turnoverGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsGoods-turnoverGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateGoodsTurnoverRequest> const & generateGoodsTurnoverRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет «Цены на рынке»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsPricesGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsPricesGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsPricesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GeneratePricesReportRequest> const & generatePricesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по полкам
/// </summary>
/// <remarks>
/// Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsShelf-statisticsGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsShelf-statisticsGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsShelf-statisticsGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateShelfsStatisticsRequest> const & generateShelfsStatisticsRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет «Аналитика продаж»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsShows-salesGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsShows-salesGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsShows-salesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateShowsSalesReportRequest> const & generateShowsSalesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по остаткам на складах
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsStocks-on-warehousesGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsStocks-on-warehousesGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsStocks-on-warehousesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateStocksOnWarehousesReportRequest> const & generateStocksOnWarehousesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по стоимости услуг
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsUnited-marketplace-servicesGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsUnited-marketplace-servicesGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsUnited-marketplace-servicesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateUnitedMarketplaceServicesReportRequest> const & generateUnitedMarketplaceServicesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по платежам
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsUnited-nettingGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsUnited-nettingGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsUnited-nettingGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateUnitedNettingReportRequest> const & generateUnitedNettingReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по заказам
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiReportsUnited-ordersGenerateResource: public restbed::Resource
{
public:
    FbyApiReportsUnited-ordersGenerateResource(const std::string& context = "");
    virtual ~FbyApiReportsUnited-ordersGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateUnitedOrdersRequest> const & generateUnitedOrdersRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Все предложения магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
/// </remarks>
class  FbyApiCampaignsCampaignIdOffersAllResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOffersAllResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOffersAllResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetAllOffersResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & feedId, int32_t const & chunk);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getQueryParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("feedId", 0L);
    }

    virtual int32_t getQueryParam_chunk(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chunk", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация об установленных ставках
/// </summary>
/// <remarks>
/// Возвращает значения ставок для заданных товаров.  {% note warning \&quot;\&quot; %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdBidsInfoResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdBidsInfoResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdBidsInfoResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBidsInfoResponse>> handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetBidsInfoRequest> const & getBidsInfoRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Рекомендованные ставки для заданных товаров
/// </summary>
/// <remarks>
/// Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdBidsRecommendationsResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdBidsRecommendationsResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdBidsRecommendationsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBidsRecommendationsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetBidsRecommendationsRequest> const & getBidsRecommendationsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список товаров, находящихся в карантине по цене в кабинете
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdPrice-quarantineResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdPrice-quarantineResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdPrice-quarantineResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetQuarantineOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetQuarantineOffersRequest> const & getQuarantineOffersRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Настройки кабинета
/// </summary>
/// <remarks>
/// Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdSettingsResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdSettingsResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdSettingsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBusinessSettingsResponse>> handler_POST(
        int64_t const & businessId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о магазине
/// </summary>
/// <remarks>
/// Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignResponse>> handler_GET(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Логины, связанные с магазином
/// </summary>
/// <remarks>
/// Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdLoginsResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdLoginsResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdLoginsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignLoginsResponse>> handler_GET(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о товарах, которые размещены в заданном магазине
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOffersResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOffersResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOffersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignOffersResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetCampaignOffersRequest> const & getCampaignOffersRequest, std::string const & pageToken, int32_t const & limit);

    virtual std::pair<int, std::shared_ptr<GetOffersResponse>> handler_GET(
        int64_t const & campaignId, std::string const & query, int64_t const & feedId, std::string const & shopCategoryId, std::shared_ptr<CurrencyType> const & currency, bool const & matched, int32_t const & page, int32_t const & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }


    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }
    virtual std::string getQueryParam_query_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("query", "");
    }
    virtual int64_t getQueryParam_feedId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("feedId", 0L);
    }
    virtual std::string getQueryParam_shopCategoryId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("shopCategoryId", "");
    }
    virtual bool getQueryParam_matched_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("matched", false);
    }
    virtual int32_t getQueryParam_page_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }
    virtual int32_t getQueryParam_pageSize_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }

    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список товаров, находящихся в карантине по цене в магазине
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdPrice-quarantineResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdPrice-quarantineResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdPrice-quarantineResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetQuarantineOffersResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetQuarantineOffersRequest> const & getQuarantineOffersRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Регион магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdRegionResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdRegionResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdRegionResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignRegionResponse>> handler_GET(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Настройки магазина
/// </summary>
/// <remarks>
/// Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdSettingsResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdSettingsResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdSettingsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignSettingsResponse>> handler_GET(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список магазинов пользователя
/// </summary>
/// <remarks>
/// Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsResource: public restbed::Resource
{
public:
    FbyApiCampaignsResource(const std::string& context = "");
    virtual ~FbyApiCampaignsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignsResponse>> handler_GET(
        int32_t const & page, int32_t const & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int32_t getQueryParam_page(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Магазины, доступные логину
/// </summary>
/// <remarks>
/// Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsBy_loginLoginResource: public restbed::Resource
{
public:
    FbyApiCampaignsBy_loginLoginResource(const std::string& context = "");
    virtual ~FbyApiCampaignsBy_loginLoginResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignsResponse>> handler_GET(
        std::string const & login, int32_t const & page, int32_t const & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_login(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("login", "");
    }

    virtual int32_t getQueryParam_page(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Лимит на установку кванта продажи и минимального количества товаров в заказе
/// </summary>
/// <remarks>
/// Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCategoriesMax-sale-quantumResource: public restbed::Resource
{
public:
    FbyApiCategoriesMax-sale-quantumResource(const std::string& context = "");
    virtual ~FbyApiCategoriesMax-sale-quantumResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCategoriesMaxSaleQuantumResponse>> handler_POST(
        std::shared_ptr<GetCategoriesMaxSaleQuantumRequest> const & getCategoriesMaxSaleQuantumRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Дерево категорий
/// </summary>
/// <remarks>
/// Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCategoriesTreeResource: public restbed::Resource
{
public:
    FbyApiCategoriesTreeResource(const std::string& context = "");
    virtual ~FbyApiCategoriesTreeResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCategoriesResponse>> handler_POST(
        std::shared_ptr<GetCategoriesRequest> const & getCategoriesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Списки характеристик товаров по категориям
/// </summary>
/// <remarks>
/// Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
/// </remarks>
class  FbyApiCategoryCategoryIdParametersResource: public restbed::Resource
{
public:
    FbyApiCategoryCategoryIdParametersResource(const std::string& context = "");
    virtual ~FbyApiCategoryCategoryIdParametersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCategoryContentParametersResponse>> handler_POST(
        int64_t const & categoryId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_categoryId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("categoryId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение истории сообщений в чате
/// </summary>
/// <remarks>
/// Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdChatsHistoryResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdChatsHistoryResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdChatsHistoryResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetChatHistoryResponse>> handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::shared_ptr<GetChatHistoryRequest> const & getChatHistoryRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual int64_t getQueryParam_chatId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chatId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение доступных чатов
/// </summary>
/// <remarks>
/// Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdChatsResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdChatsResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdChatsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetChatsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetChatsRequest> const & getChatsRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о прайс-листе
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdFeedsFeedIdResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdFeedsFeedIdResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdFeedsFeedIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetFeedResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & feedId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по индексации прайс-листа
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра &#x60;generationId&#x60;.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetFeedIndexLogsResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & feedId, int32_t const & limit, std::string const & publishedTimeFrom, std::string const & publishedTimeTo, std::shared_ptr<FeedIndexLogsStatusType> const & status);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", 0L);
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }

    virtual std::string getQueryParam_publishedTimeFrom(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("publishedTimeFrom", "");
    }

    virtual std::string getQueryParam_publishedTimeTo(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("publishedTimeTo", "");
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Новые и обновленные отзывы о магазине
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdFeedbackUpdatesResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdFeedbackUpdatesResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdFeedbackUpdatesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetFeedbackListResponse>> handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::string const & fromDate);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }

    virtual std::string getQueryParam_fromDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fromDate", "");
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список прайс-листов магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdFeedsResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdFeedsResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdFeedsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetFeedsResponse>> handler_GET(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Идентификаторы складов Маркета (FBY)
/// </summary>
/// <remarks>
/// Возвращает список складов Маркета с их идентификаторами.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  FbyApiWarehousesResource: public restbed::Resource
{
public:
    FbyApiWarehousesResource(const std::string& context = "");
    virtual ~FbyApiWarehousesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetFulfillmentWarehousesResponse>> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение комментариев к отзыву
/// </summary>
/// <remarks>
/// Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdGoods-feedbackCommentsResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdGoods-feedbackCommentsResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdGoods-feedbackCommentsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetGoodsFeedbackCommentsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetGoodsFeedbackCommentsRequest> const & getGoodsFeedbackCommentsRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение отзывов о товарах продавца
/// </summary>
/// <remarks>
/// Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdGoods-feedbackResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdGoods-feedbackResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdGoods-feedbackResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetGoodsFeedbackResponse>> handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetGoodsFeedbackRequest> const & getGoodsFeedbackRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по товарам
/// </summary>
/// <remarks>
/// Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdStatsSkusResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdStatsSkusResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdStatsSkusResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetGoodsStatsResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetGoodsStatsRequest> const & getGoodsStatsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение информации о заполненности карточек магазина
/// </summary>
/// <remarks>
/// Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdOffer-cardsResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdOffer-cardsResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdOffer-cardsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOfferCardsContentStatusResponse>> handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOfferCardsContentStatusRequest> const & getOfferCardsContentStatusRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список товаров в каталоге
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
/// </remarks>
class  FbyApiCampaignsCampaignIdOffer-mapping-entriesResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOffer-mapping-entriesResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOffer-mapping-entriesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOfferMappingEntriesResponse>> handler_GET(
        int64_t const & campaignId, std::vector<std::string> const & offerId, std::vector<std::shared_ptr<std::string>> const & shopSku, std::shared_ptr<OfferMappingKindType> const & mappingKind, std::vector<std::shared_ptr<OfferProcessingStatusType>> const & status, std::vector<std::shared_ptr<OfferAvailabilityStatusType>> const & availability, std::vector<int32_t> const & categoryId, std::vector<std::string> const & vendor, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о товарах в каталоге
/// </summary>
/// <remarks>
/// Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdOffer-mappingsResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdOffer-mappingsResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdOffer-mappingsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOfferMappingsResponse>> handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOfferMappingsRequest> const & getOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Рекомендации Маркета, касающиеся цен
/// </summary>
/// <remarks>
/// Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdOffersRecommendationsResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdOffersRecommendationsResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdOffersRecommendationsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOfferRecommendationsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetOfferRecommendationsRequest> const & getOfferRecommendationsRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация об одном заказе
/// </summary>
/// <remarks>
/// Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOrdersOrderIdResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOrdersOrderIdResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOrdersOrderIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOrderResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о покупателе — юридическом лице
/// </summary>
/// <remarks>
/// Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60;, &#x60;PICKUP&#x60; или &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBusinessBuyerInfoResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о документах
/// </summary>
/// <remarks>
/// Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOrdersOrderIdDocumentsResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOrdersOrderIdDocumentsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBusinessDocumentsInfoResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о нескольких заказах
/// </summary>
/// <remarks>
/// Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры &#x60;page_token&#x60; и &#x60;limit&#x60;.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOrdersResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOrdersResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOrdersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOrdersResponse>> handler_GET(
        int64_t const & campaignId, std::vector<int64_t> const & orderIds, Set<std::shared_ptr<OrderStatusType>> const & status, Set<std::shared_ptr<OrderSubstatusType>> const & substatus, std::string const & fromDate, std::string const & toDate, std::string const & supplierShipmentDateFrom, std::string const & supplierShipmentDateTo, std::string const & updatedAtFrom, std::string const & updatedAtTo, std::shared_ptr<OrderDeliveryDispatchType> const & dispatchType, bool const & fake, bool const & hasCis, bool const & onlyWaitingForCancellationApprove, bool const & onlyEstimatedDelivery, std::shared_ptr<OrderBuyerType> const & buyerType, int32_t const & page, int32_t const & pageSize, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_fromDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fromDate", "");
    }

    virtual std::string getQueryParam_toDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("toDate", "");
    }

    virtual std::string getQueryParam_supplierShipmentDateFrom(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("supplierShipmentDateFrom", "");
    }

    virtual std::string getQueryParam_supplierShipmentDateTo(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("supplierShipmentDateTo", "");
    }

    virtual std::string getQueryParam_updatedAtFrom(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("updatedAtFrom", "");
    }

    virtual std::string getQueryParam_updatedAtTo(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("updatedAtTo", "");
    }

    virtual bool getQueryParam_fake(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fake", false);
    }

    virtual bool getQueryParam_hasCis(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("hasCis", false);
    }

    virtual bool getQueryParam_onlyWaitingForCancellationApprove(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("onlyWaitingForCancellationApprove", false);
    }

    virtual bool getQueryParam_onlyEstimatedDelivery(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("onlyEstimatedDelivery", false);
    }

    virtual int32_t getQueryParam_page(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Детальная информация по заказам
/// </summary>
/// <remarks>
/// Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \&quot;\&quot; %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdStatsOrdersResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdStatsOrdersResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdStatsOrdersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOrdersStatsResponse>> handler_POST(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOrdersStatsRequest> const & getOrdersStatsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список цен
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** &#x60;&#x60;&#x60;(количество товаров партнера на витрине) * 25&#x60;&#x60;&#x60; товаров в сутки| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOffer-pricesResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOffer-pricesResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOffer-pricesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetPricesResponse>> handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, bool const & archived);

    virtual std::pair<int, std::shared_ptr<GetPricesByOfferIdsResponse>> handler_POST(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetPricesByOfferIdsRequest> const & getPricesByOfferIdsRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }

    virtual bool getQueryParam_archived(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("archived", false);
    }


    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }
    virtual std::string getQueryParam_pageToken_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }
    virtual int32_t getQueryParam_limit_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }

    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение списка товаров, которые участвуют или могут участвовать в акции
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре &#x60;limit&#x60; не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdPromosOffersResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdPromosOffersResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdPromosOffersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetPromoOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetPromoOffersRequest> const & getPromoOffersRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение списка акций
/// </summary>
/// <remarks>
/// Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр &#x60;participation&#x60;.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdPromosResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdPromosResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdPromosResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetPromosResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetPromosRequest> const & getPromosRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Индекс качества магазинов
/// </summary>
/// <remarks>
/// Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdRatingsQualityResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdRatingsQualityResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdRatingsQualityResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetQualityRatingResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetQualityRatingRequest> const & getQualityRatingRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение заданного отчета
/// </summary>
/// <remarks>
/// Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  FbyApiReportsInfoReportIdResource: public restbed::Resource
{
public:
    FbyApiReportsInfoReportIdResource(const std::string& context = "");
    virtual ~FbyApiReportsInfoReportIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetReportInfoResponse>> handler_GET(
        std::string const & reportId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_reportId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("reportId", "");
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о невыкупе или возврате
/// </summary>
/// <remarks>
/// Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetReturnResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_returnId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("returnId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение фотографии возврата
/// </summary>
/// <remarks>
/// Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId, int64_t const & itemId, std::string const & imageHash);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_returnId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("returnId", 0L);
    }

    virtual int64_t getPathParam_itemId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("itemId", 0L);
    }

    virtual std::string getPathParam_imageHash(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("imageHash", "");
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список невыкупов и возвратов
/// </summary>
/// <remarks>
/// Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdReturnsResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdReturnsResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdReturnsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetReturnsResponse>> handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::vector<int64_t> const & orderIds, std::vector<std::shared_ptr<RefundStatusType>> const & statuses, std::shared_ptr<ReturnType> const & type, std::string const & fromDate, std::string const & toDate, std::string const & fromDate2, std::string const & toDate2);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }

    virtual std::string getQueryParam_fromDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fromDate", "");
    }

    virtual std::string getQueryParam_toDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("toDate", "");
    }

    virtual std::string getQueryParam_fromDate2(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fromDate2", "");
    }

    virtual std::string getQueryParam_toDate2(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("toDate2", "");
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация об остатках и оборачиваемости
/// </summary>
/// <remarks>
/// Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \&quot;По умолчанию данные по оборачивамости не возращаются\&quot; %}  Чтобы они были в ответе, передавайте &#x60;true&#x60; в поле &#x60;withTurnover&#x60;.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: &lt;&gt; (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
/// </remarks>
class  FbyApiCampaignsCampaignIdOffersStocksResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOffersStocksResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOffersStocksResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetWarehouseStocksResponse>> handler_POST(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetWarehouseStocksRequest> const & getWarehouseStocksRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Рекомендованные карточки для товаров
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku&#x3D;», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetSuggestedOfferMappingEntriesResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetSuggestedOfferMappingEntriesRequest> const & getSuggestedOfferMappingEntriesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Просмотр карточек на Маркете, которые подходят вашим товарам
/// </summary>
/// <remarks>
/// Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида &#x60;https://market.yandex.ru/product/&lt;marketModelId&gt;?sku&#x3D;&lt;marketSku&gt;&#x60;. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать &#x60;marketSKU&#x60;, который ему подходит по вашему мнению.  {% note info \&quot;𝓠 Как определить &#x60;marketSku&#x60; товара, найденного на Маркете?\&quot; %}  𝓐 Он есть в адресе страницы товара — расположен после &#x60;sku&#x3D;&#x60;.  Например, &#x60;https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016&#x60;  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdOffer-mappingsSuggestionsResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdOffer-mappingsSuggestionsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetSuggestedOfferMappingsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetSuggestedOfferMappingsRequest> const & getSuggestedOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Цены для продвижения товаров
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \&quot;\&quot; %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOffer-pricesSuggestionsResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOffer-pricesSuggestionsResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOffer-pricesSuggestionsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<SuggestPricesResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<SuggestPricesRequest> const & suggestPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Включение буста продаж и установка ставок
/// </summary>
/// <remarks>
/// Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \&quot;Как в кабинете выглядит кампания, созданная через API\&quot; %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdBidsResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdBidsResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdBidsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_PUT(
        int64_t const & businessId, std::shared_ptr<PutSkuBidsRequest> const & putSkuBidsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Включение буста продаж и установка ставок для магазина
/// </summary>
/// <remarks>
/// Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdBidsResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdBidsResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdBidsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_PUT(
        int64_t const & campaignId, std::shared_ptr<PutSkuBidsRequest> const & putSkuBidsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Сообщить, что прайс-лист обновился
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом &#x60;POST campaigns/{campaignId}/feeds/{feedId}/refresh&#x60;. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — &#x60;200 OK&#x60;. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdFeedsFeedIdRefreshResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdFeedsFeedIdRefreshResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdFeedsFeedIdRefreshResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & feedId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о дочерних регионах
/// </summary>
/// <remarks>
/// Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  FbyApiRegionsRegionIdChildrenResource: public restbed::Resource
{
public:
    FbyApiRegionsRegionIdChildrenResource(const std::string& context = "");
    virtual ~FbyApiRegionsRegionIdChildrenResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetRegionWithChildrenResponse>> handler_GET(
        int64_t const & regionId, int32_t const & page, int32_t const & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_regionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("regionId", 0L);
    }

    virtual int32_t getQueryParam_page(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о регионе
/// </summary>
/// <remarks>
/// Возвращает информацию о регионе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  FbyApiRegionsRegionIdResource: public restbed::Resource
{
public:
    FbyApiRegionsRegionIdResource(const std::string& context = "");
    virtual ~FbyApiRegionsRegionIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetRegionsResponse>> handler_GET(
        int64_t const & regionId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_regionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("regionId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Поиск регионов по их имени
/// </summary>
/// <remarks>
/// Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  FbyApiRegionsResource: public restbed::Resource
{
public:
    FbyApiRegionsResource(const std::string& context = "");
    virtual ~FbyApiRegionsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetRegionsResponse>> handler_GET(
        std::string const & name, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getQueryParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("name", "");
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отправка файла в чат
/// </summary>
/// <remarks>
/// Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdChatsFileSendResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdChatsFileSendResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdChatsFileSendResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::string const & file);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual int64_t getQueryParam_chatId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chatId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отправка сообщения в чат
/// </summary>
/// <remarks>
/// Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdChatsMessageResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdChatsMessageResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdChatsMessageResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::shared_ptr<SendMessageToChatRequest> const & sendMessageToChatRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual int64_t getQueryParam_chatId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chatId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Изменение параметров прайс-листа
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;value&#x60; (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;delete&#x3D;true&#x60; (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdFeedsFeedIdParamsResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdFeedsFeedIdParamsResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdFeedsFeedIdParamsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & feedId, std::shared_ptr<SetFeedParamsRequest> const & setFeedParamsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отказ от ответа на отзывы
/// </summary>
/// <remarks>
/// Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<SkipGoodsFeedbackReactionRequest> const & skipGoodsFeedbackReactionRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Установка цен на товары во всех магазинах
/// </summary>
/// <remarks>
/// Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdOffer-pricesUpdatesResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdOffer-pricesUpdatesResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdOffer-pricesUpdatesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateBusinessPricesRequest> const & updateBusinessPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Изменение условий продажи товаров в магазине
/// </summary>
/// <remarks>
/// Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOffersUpdateResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOffersUpdateResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOffersUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateCampaignOffersRequest> const & updateCampaignOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление нового или изменение созданного комментария
/// </summary>
/// <remarks>
/// Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdateGoodsFeedbackCommentResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateGoodsFeedbackCommentRequest> const & updateGoodsFeedbackCommentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Редактирование категорийных характеристик товара
/// </summary>
/// <remarks>
/// Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \&quot;Здесь только то, что относится к конкретной категории\&quot; %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdOffer-cardsUpdateResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdOffer-cardsUpdateResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdOffer-cardsUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdateOfferContentResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateOfferContentRequest> const & updateOfferContentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление и редактирование товаров в каталоге
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре &#x60;shopSku&#x60; ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре &#x60;shopSku&#x60; ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус &#x60;NEED_CONTENT&#x60; (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус &#x60;NEED_INFO&#x60; (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateOfferMappingEntryRequest> const & updateOfferMappingEntryRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление товаров в каталог и изменение информации о них
/// </summary>
/// <remarks>
/// Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле &#x60;marketSKU&#x60;.  Для **новых товаров** обязательно укажите параметры: &#x60;offerId&#x60;, &#x60;name&#x60;, &#x60;marketCategoryId&#x60; или &#x60;category&#x60;, &#x60;pictures&#x60;, &#x60;vendor&#x60;, &#x60;description&#x60;.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в &#x60;offerId&#x60; соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  Параметр &#x60;offerId&#x60; должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \&quot;Правила использования SKU\&quot; %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdOffer-mappingsUpdateResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdOffer-mappingsUpdateResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdOffer-mappingsUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdateOfferMappingsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateOfferMappingsRequest> const & updateOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Установка цен на товары в конкретном магазине
/// </summary>
/// <remarks>
/// Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \&quot;Метод только для отдельных магазинов\&quot; %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbyApiCampaignsCampaignIdOffer-pricesUpdatesResource: public restbed::Resource
{
public:
    FbyApiCampaignsCampaignIdOffer-pricesUpdatesResource(const std::string& context = "");
    virtual ~FbyApiCampaignsCampaignIdOffer-pricesUpdatesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdatePricesRequest> const & updatePricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление товаров в акцию или изменение их цен
/// </summary>
/// <remarks>
/// Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbyApiBusinessesBusinessIdPromosOffersUpdateResource: public restbed::Resource
{
public:
    FbyApiBusinessesBusinessIdPromosOffersUpdateResource(const std::string& context = "");
    virtual ~FbyApiBusinessesBusinessIdPromosOffersUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdatePromoOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdatePromoOffersRequest> const & updatePromoOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbyApiException(const FbyApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  FbyApi
{
public:
    explicit FbyApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~FbyApi();

    virtual void setFbyApiCampaignsCampaignIdHidden-offersResource(std::shared_ptr<FbyApiCampaignsCampaignIdHidden-offersResource> spFbyApiCampaignsCampaignIdHidden-offersResource);
    virtual void setFbyApiBusinessesBusinessIdOffer-mappingsArchiveResource(std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsArchiveResource> spFbyApiBusinessesBusinessIdOffer-mappingsArchiveResource);
    virtual void setFbyApiTariffsCalculateResource(std::shared_ptr<FbyApiTariffsCalculateResource> spFbyApiTariffsCalculateResource);
    virtual void setFbyApiBusinessesBusinessIdPrice-quarantineConfirmResource(std::shared_ptr<FbyApiBusinessesBusinessIdPrice-quarantineConfirmResource> spFbyApiBusinessesBusinessIdPrice-quarantineConfirmResource);
    virtual void setFbyApiCampaignsCampaignIdPrice-quarantineConfirmResource(std::shared_ptr<FbyApiCampaignsCampaignIdPrice-quarantineConfirmResource> spFbyApiCampaignsCampaignIdPrice-quarantineConfirmResource);
    virtual void setFbyApiBusinessesBusinessIdChatsNewResource(std::shared_ptr<FbyApiBusinessesBusinessIdChatsNewResource> spFbyApiBusinessesBusinessIdChatsNewResource);
    virtual void setFbyApiCampaignsCampaignIdOffersDeleteResource(std::shared_ptr<FbyApiCampaignsCampaignIdOffersDeleteResource> spFbyApiCampaignsCampaignIdOffersDeleteResource);
    virtual void setFbyApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(std::shared_ptr<FbyApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource> spFbyApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource);
    virtual void setFbyApiCampaignsCampaignIdHidden-offersDeleteResource(std::shared_ptr<FbyApiCampaignsCampaignIdHidden-offersDeleteResource> spFbyApiCampaignsCampaignIdHidden-offersDeleteResource);
    virtual void setFbyApiBusinessesBusinessIdOffer-mappingsDeleteResource(std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsDeleteResource> spFbyApiBusinessesBusinessIdOffer-mappingsDeleteResource);
    virtual void setFbyApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsUnarchiveResource> spFbyApiBusinessesBusinessIdOffer-mappingsUnarchiveResource);
    virtual void setFbyApiBusinessesBusinessIdPromosOffersDeleteResource(std::shared_ptr<FbyApiBusinessesBusinessIdPromosOffersDeleteResource> spFbyApiBusinessesBusinessIdPromosOffersDeleteResource);
    virtual void setFbyApiReportsBoost-consolidatedGenerateResource(std::shared_ptr<FbyApiReportsBoost-consolidatedGenerateResource> spFbyApiReportsBoost-consolidatedGenerateResource);
    virtual void setFbyApiReportsCompetitors-positionGenerateResource(std::shared_ptr<FbyApiReportsCompetitors-positionGenerateResource> spFbyApiReportsCompetitors-positionGenerateResource);
    virtual void setFbyApiReportsGoods-feedbackGenerateResource(std::shared_ptr<FbyApiReportsGoods-feedbackGenerateResource> spFbyApiReportsGoods-feedbackGenerateResource);
    virtual void setFbyApiReportsGoods-movementGenerateResource(std::shared_ptr<FbyApiReportsGoods-movementGenerateResource> spFbyApiReportsGoods-movementGenerateResource);
    virtual void setFbyApiReportsGoods-realizationGenerateResource(std::shared_ptr<FbyApiReportsGoods-realizationGenerateResource> spFbyApiReportsGoods-realizationGenerateResource);
    virtual void setFbyApiReportsGoods-turnoverGenerateResource(std::shared_ptr<FbyApiReportsGoods-turnoverGenerateResource> spFbyApiReportsGoods-turnoverGenerateResource);
    virtual void setFbyApiReportsPricesGenerateResource(std::shared_ptr<FbyApiReportsPricesGenerateResource> spFbyApiReportsPricesGenerateResource);
    virtual void setFbyApiReportsShelf-statisticsGenerateResource(std::shared_ptr<FbyApiReportsShelf-statisticsGenerateResource> spFbyApiReportsShelf-statisticsGenerateResource);
    virtual void setFbyApiReportsShows-salesGenerateResource(std::shared_ptr<FbyApiReportsShows-salesGenerateResource> spFbyApiReportsShows-salesGenerateResource);
    virtual void setFbyApiReportsStocks-on-warehousesGenerateResource(std::shared_ptr<FbyApiReportsStocks-on-warehousesGenerateResource> spFbyApiReportsStocks-on-warehousesGenerateResource);
    virtual void setFbyApiReportsUnited-marketplace-servicesGenerateResource(std::shared_ptr<FbyApiReportsUnited-marketplace-servicesGenerateResource> spFbyApiReportsUnited-marketplace-servicesGenerateResource);
    virtual void setFbyApiReportsUnited-nettingGenerateResource(std::shared_ptr<FbyApiReportsUnited-nettingGenerateResource> spFbyApiReportsUnited-nettingGenerateResource);
    virtual void setFbyApiReportsUnited-ordersGenerateResource(std::shared_ptr<FbyApiReportsUnited-ordersGenerateResource> spFbyApiReportsUnited-ordersGenerateResource);
    virtual void setFbyApiCampaignsCampaignIdOffersAllResource(std::shared_ptr<FbyApiCampaignsCampaignIdOffersAllResource> spFbyApiCampaignsCampaignIdOffersAllResource);
    virtual void setFbyApiBusinessesBusinessIdBidsInfoResource(std::shared_ptr<FbyApiBusinessesBusinessIdBidsInfoResource> spFbyApiBusinessesBusinessIdBidsInfoResource);
    virtual void setFbyApiBusinessesBusinessIdBidsRecommendationsResource(std::shared_ptr<FbyApiBusinessesBusinessIdBidsRecommendationsResource> spFbyApiBusinessesBusinessIdBidsRecommendationsResource);
    virtual void setFbyApiBusinessesBusinessIdPrice-quarantineResource(std::shared_ptr<FbyApiBusinessesBusinessIdPrice-quarantineResource> spFbyApiBusinessesBusinessIdPrice-quarantineResource);
    virtual void setFbyApiBusinessesBusinessIdSettingsResource(std::shared_ptr<FbyApiBusinessesBusinessIdSettingsResource> spFbyApiBusinessesBusinessIdSettingsResource);
    virtual void setFbyApiCampaignsCampaignIdResource(std::shared_ptr<FbyApiCampaignsCampaignIdResource> spFbyApiCampaignsCampaignIdResource);
    virtual void setFbyApiCampaignsCampaignIdLoginsResource(std::shared_ptr<FbyApiCampaignsCampaignIdLoginsResource> spFbyApiCampaignsCampaignIdLoginsResource);
    virtual void setFbyApiCampaignsCampaignIdOffersResource(std::shared_ptr<FbyApiCampaignsCampaignIdOffersResource> spFbyApiCampaignsCampaignIdOffersResource);
    virtual void setFbyApiCampaignsCampaignIdPrice-quarantineResource(std::shared_ptr<FbyApiCampaignsCampaignIdPrice-quarantineResource> spFbyApiCampaignsCampaignIdPrice-quarantineResource);
    virtual void setFbyApiCampaignsCampaignIdRegionResource(std::shared_ptr<FbyApiCampaignsCampaignIdRegionResource> spFbyApiCampaignsCampaignIdRegionResource);
    virtual void setFbyApiCampaignsCampaignIdSettingsResource(std::shared_ptr<FbyApiCampaignsCampaignIdSettingsResource> spFbyApiCampaignsCampaignIdSettingsResource);
    virtual void setFbyApiCampaignsResource(std::shared_ptr<FbyApiCampaignsResource> spFbyApiCampaignsResource);
    virtual void setFbyApiCampaignsBy_loginLoginResource(std::shared_ptr<FbyApiCampaignsBy_loginLoginResource> spFbyApiCampaignsBy_loginLoginResource);
    virtual void setFbyApiCategoriesMax-sale-quantumResource(std::shared_ptr<FbyApiCategoriesMax-sale-quantumResource> spFbyApiCategoriesMax-sale-quantumResource);
    virtual void setFbyApiCategoriesTreeResource(std::shared_ptr<FbyApiCategoriesTreeResource> spFbyApiCategoriesTreeResource);
    virtual void setFbyApiCategoryCategoryIdParametersResource(std::shared_ptr<FbyApiCategoryCategoryIdParametersResource> spFbyApiCategoryCategoryIdParametersResource);
    virtual void setFbyApiBusinessesBusinessIdChatsHistoryResource(std::shared_ptr<FbyApiBusinessesBusinessIdChatsHistoryResource> spFbyApiBusinessesBusinessIdChatsHistoryResource);
    virtual void setFbyApiBusinessesBusinessIdChatsResource(std::shared_ptr<FbyApiBusinessesBusinessIdChatsResource> spFbyApiBusinessesBusinessIdChatsResource);
    virtual void setFbyApiCampaignsCampaignIdFeedsFeedIdResource(std::shared_ptr<FbyApiCampaignsCampaignIdFeedsFeedIdResource> spFbyApiCampaignsCampaignIdFeedsFeedIdResource);
    virtual void setFbyApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource(std::shared_ptr<FbyApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource> spFbyApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource);
    virtual void setFbyApiCampaignsCampaignIdFeedbackUpdatesResource(std::shared_ptr<FbyApiCampaignsCampaignIdFeedbackUpdatesResource> spFbyApiCampaignsCampaignIdFeedbackUpdatesResource);
    virtual void setFbyApiCampaignsCampaignIdFeedsResource(std::shared_ptr<FbyApiCampaignsCampaignIdFeedsResource> spFbyApiCampaignsCampaignIdFeedsResource);
    virtual void setFbyApiWarehousesResource(std::shared_ptr<FbyApiWarehousesResource> spFbyApiWarehousesResource);
    virtual void setFbyApiBusinessesBusinessIdGoods-feedbackCommentsResource(std::shared_ptr<FbyApiBusinessesBusinessIdGoods-feedbackCommentsResource> spFbyApiBusinessesBusinessIdGoods-feedbackCommentsResource);
    virtual void setFbyApiBusinessesBusinessIdGoods-feedbackResource(std::shared_ptr<FbyApiBusinessesBusinessIdGoods-feedbackResource> spFbyApiBusinessesBusinessIdGoods-feedbackResource);
    virtual void setFbyApiCampaignsCampaignIdStatsSkusResource(std::shared_ptr<FbyApiCampaignsCampaignIdStatsSkusResource> spFbyApiCampaignsCampaignIdStatsSkusResource);
    virtual void setFbyApiBusinessesBusinessIdOffer-cardsResource(std::shared_ptr<FbyApiBusinessesBusinessIdOffer-cardsResource> spFbyApiBusinessesBusinessIdOffer-cardsResource);
    virtual void setFbyApiCampaignsCampaignIdOffer-mapping-entriesResource(std::shared_ptr<FbyApiCampaignsCampaignIdOffer-mapping-entriesResource> spFbyApiCampaignsCampaignIdOffer-mapping-entriesResource);
    virtual void setFbyApiBusinessesBusinessIdOffer-mappingsResource(std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsResource> spFbyApiBusinessesBusinessIdOffer-mappingsResource);
    virtual void setFbyApiBusinessesBusinessIdOffersRecommendationsResource(std::shared_ptr<FbyApiBusinessesBusinessIdOffersRecommendationsResource> spFbyApiBusinessesBusinessIdOffersRecommendationsResource);
    virtual void setFbyApiCampaignsCampaignIdOrdersOrderIdResource(std::shared_ptr<FbyApiCampaignsCampaignIdOrdersOrderIdResource> spFbyApiCampaignsCampaignIdOrdersOrderIdResource);
    virtual void setFbyApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(std::shared_ptr<FbyApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource> spFbyApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource);
    virtual void setFbyApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(std::shared_ptr<FbyApiCampaignsCampaignIdOrdersOrderIdDocumentsResource> spFbyApiCampaignsCampaignIdOrdersOrderIdDocumentsResource);
    virtual void setFbyApiCampaignsCampaignIdOrdersResource(std::shared_ptr<FbyApiCampaignsCampaignIdOrdersResource> spFbyApiCampaignsCampaignIdOrdersResource);
    virtual void setFbyApiCampaignsCampaignIdStatsOrdersResource(std::shared_ptr<FbyApiCampaignsCampaignIdStatsOrdersResource> spFbyApiCampaignsCampaignIdStatsOrdersResource);
    virtual void setFbyApiCampaignsCampaignIdOffer-pricesResource(std::shared_ptr<FbyApiCampaignsCampaignIdOffer-pricesResource> spFbyApiCampaignsCampaignIdOffer-pricesResource);
    virtual void setFbyApiBusinessesBusinessIdPromosOffersResource(std::shared_ptr<FbyApiBusinessesBusinessIdPromosOffersResource> spFbyApiBusinessesBusinessIdPromosOffersResource);
    virtual void setFbyApiBusinessesBusinessIdPromosResource(std::shared_ptr<FbyApiBusinessesBusinessIdPromosResource> spFbyApiBusinessesBusinessIdPromosResource);
    virtual void setFbyApiBusinessesBusinessIdRatingsQualityResource(std::shared_ptr<FbyApiBusinessesBusinessIdRatingsQualityResource> spFbyApiBusinessesBusinessIdRatingsQualityResource);
    virtual void setFbyApiReportsInfoReportIdResource(std::shared_ptr<FbyApiReportsInfoReportIdResource> spFbyApiReportsInfoReportIdResource);
    virtual void setFbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(std::shared_ptr<FbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> spFbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource);
    virtual void setFbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(std::shared_ptr<FbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> spFbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource);
    virtual void setFbyApiCampaignsCampaignIdReturnsResource(std::shared_ptr<FbyApiCampaignsCampaignIdReturnsResource> spFbyApiCampaignsCampaignIdReturnsResource);
    virtual void setFbyApiCampaignsCampaignIdOffersStocksResource(std::shared_ptr<FbyApiCampaignsCampaignIdOffersStocksResource> spFbyApiCampaignsCampaignIdOffersStocksResource);
    virtual void setFbyApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(std::shared_ptr<FbyApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource> spFbyApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource);
    virtual void setFbyApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsSuggestionsResource> spFbyApiBusinessesBusinessIdOffer-mappingsSuggestionsResource);
    virtual void setFbyApiCampaignsCampaignIdOffer-pricesSuggestionsResource(std::shared_ptr<FbyApiCampaignsCampaignIdOffer-pricesSuggestionsResource> spFbyApiCampaignsCampaignIdOffer-pricesSuggestionsResource);
    virtual void setFbyApiBusinessesBusinessIdBidsResource(std::shared_ptr<FbyApiBusinessesBusinessIdBidsResource> spFbyApiBusinessesBusinessIdBidsResource);
    virtual void setFbyApiCampaignsCampaignIdBidsResource(std::shared_ptr<FbyApiCampaignsCampaignIdBidsResource> spFbyApiCampaignsCampaignIdBidsResource);
    virtual void setFbyApiCampaignsCampaignIdFeedsFeedIdRefreshResource(std::shared_ptr<FbyApiCampaignsCampaignIdFeedsFeedIdRefreshResource> spFbyApiCampaignsCampaignIdFeedsFeedIdRefreshResource);
    virtual void setFbyApiRegionsRegionIdChildrenResource(std::shared_ptr<FbyApiRegionsRegionIdChildrenResource> spFbyApiRegionsRegionIdChildrenResource);
    virtual void setFbyApiRegionsRegionIdResource(std::shared_ptr<FbyApiRegionsRegionIdResource> spFbyApiRegionsRegionIdResource);
    virtual void setFbyApiRegionsResource(std::shared_ptr<FbyApiRegionsResource> spFbyApiRegionsResource);
    virtual void setFbyApiBusinessesBusinessIdChatsFileSendResource(std::shared_ptr<FbyApiBusinessesBusinessIdChatsFileSendResource> spFbyApiBusinessesBusinessIdChatsFileSendResource);
    virtual void setFbyApiBusinessesBusinessIdChatsMessageResource(std::shared_ptr<FbyApiBusinessesBusinessIdChatsMessageResource> spFbyApiBusinessesBusinessIdChatsMessageResource);
    virtual void setFbyApiCampaignsCampaignIdFeedsFeedIdParamsResource(std::shared_ptr<FbyApiCampaignsCampaignIdFeedsFeedIdParamsResource> spFbyApiCampaignsCampaignIdFeedsFeedIdParamsResource);
    virtual void setFbyApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(std::shared_ptr<FbyApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource> spFbyApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource);
    virtual void setFbyApiBusinessesBusinessIdOffer-pricesUpdatesResource(std::shared_ptr<FbyApiBusinessesBusinessIdOffer-pricesUpdatesResource> spFbyApiBusinessesBusinessIdOffer-pricesUpdatesResource);
    virtual void setFbyApiCampaignsCampaignIdOffersUpdateResource(std::shared_ptr<FbyApiCampaignsCampaignIdOffersUpdateResource> spFbyApiCampaignsCampaignIdOffersUpdateResource);
    virtual void setFbyApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(std::shared_ptr<FbyApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource> spFbyApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource);
    virtual void setFbyApiBusinessesBusinessIdOffer-cardsUpdateResource(std::shared_ptr<FbyApiBusinessesBusinessIdOffer-cardsUpdateResource> spFbyApiBusinessesBusinessIdOffer-cardsUpdateResource);
    virtual void setFbyApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(std::shared_ptr<FbyApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource> spFbyApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource);
    virtual void setFbyApiBusinessesBusinessIdOffer-mappingsUpdateResource(std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsUpdateResource> spFbyApiBusinessesBusinessIdOffer-mappingsUpdateResource);
    virtual void setFbyApiCampaignsCampaignIdOffer-pricesUpdatesResource(std::shared_ptr<FbyApiCampaignsCampaignIdOffer-pricesUpdatesResource> spFbyApiCampaignsCampaignIdOffer-pricesUpdatesResource);
    virtual void setFbyApiBusinessesBusinessIdPromosOffersUpdateResource(std::shared_ptr<FbyApiBusinessesBusinessIdPromosOffersUpdateResource> spFbyApiBusinessesBusinessIdPromosOffersUpdateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<FbyApiCampaignsCampaignIdHidden-offersResource> m_spFbyApiCampaignsCampaignIdHidden-offersResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsArchiveResource> m_spFbyApiBusinessesBusinessIdOffer-mappingsArchiveResource;
    std::shared_ptr<FbyApiTariffsCalculateResource> m_spFbyApiTariffsCalculateResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdPrice-quarantineConfirmResource> m_spFbyApiBusinessesBusinessIdPrice-quarantineConfirmResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdPrice-quarantineConfirmResource> m_spFbyApiCampaignsCampaignIdPrice-quarantineConfirmResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdChatsNewResource> m_spFbyApiBusinessesBusinessIdChatsNewResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOffersDeleteResource> m_spFbyApiCampaignsCampaignIdOffersDeleteResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource> m_spFbyApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdHidden-offersDeleteResource> m_spFbyApiCampaignsCampaignIdHidden-offersDeleteResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsDeleteResource> m_spFbyApiBusinessesBusinessIdOffer-mappingsDeleteResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsUnarchiveResource> m_spFbyApiBusinessesBusinessIdOffer-mappingsUnarchiveResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdPromosOffersDeleteResource> m_spFbyApiBusinessesBusinessIdPromosOffersDeleteResource;
    std::shared_ptr<FbyApiReportsBoost-consolidatedGenerateResource> m_spFbyApiReportsBoost-consolidatedGenerateResource;
    std::shared_ptr<FbyApiReportsCompetitors-positionGenerateResource> m_spFbyApiReportsCompetitors-positionGenerateResource;
    std::shared_ptr<FbyApiReportsGoods-feedbackGenerateResource> m_spFbyApiReportsGoods-feedbackGenerateResource;
    std::shared_ptr<FbyApiReportsGoods-movementGenerateResource> m_spFbyApiReportsGoods-movementGenerateResource;
    std::shared_ptr<FbyApiReportsGoods-realizationGenerateResource> m_spFbyApiReportsGoods-realizationGenerateResource;
    std::shared_ptr<FbyApiReportsGoods-turnoverGenerateResource> m_spFbyApiReportsGoods-turnoverGenerateResource;
    std::shared_ptr<FbyApiReportsPricesGenerateResource> m_spFbyApiReportsPricesGenerateResource;
    std::shared_ptr<FbyApiReportsShelf-statisticsGenerateResource> m_spFbyApiReportsShelf-statisticsGenerateResource;
    std::shared_ptr<FbyApiReportsShows-salesGenerateResource> m_spFbyApiReportsShows-salesGenerateResource;
    std::shared_ptr<FbyApiReportsStocks-on-warehousesGenerateResource> m_spFbyApiReportsStocks-on-warehousesGenerateResource;
    std::shared_ptr<FbyApiReportsUnited-marketplace-servicesGenerateResource> m_spFbyApiReportsUnited-marketplace-servicesGenerateResource;
    std::shared_ptr<FbyApiReportsUnited-nettingGenerateResource> m_spFbyApiReportsUnited-nettingGenerateResource;
    std::shared_ptr<FbyApiReportsUnited-ordersGenerateResource> m_spFbyApiReportsUnited-ordersGenerateResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOffersAllResource> m_spFbyApiCampaignsCampaignIdOffersAllResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdBidsInfoResource> m_spFbyApiBusinessesBusinessIdBidsInfoResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdBidsRecommendationsResource> m_spFbyApiBusinessesBusinessIdBidsRecommendationsResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdPrice-quarantineResource> m_spFbyApiBusinessesBusinessIdPrice-quarantineResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdSettingsResource> m_spFbyApiBusinessesBusinessIdSettingsResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdResource> m_spFbyApiCampaignsCampaignIdResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdLoginsResource> m_spFbyApiCampaignsCampaignIdLoginsResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOffersResource> m_spFbyApiCampaignsCampaignIdOffersResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdPrice-quarantineResource> m_spFbyApiCampaignsCampaignIdPrice-quarantineResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdRegionResource> m_spFbyApiCampaignsCampaignIdRegionResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdSettingsResource> m_spFbyApiCampaignsCampaignIdSettingsResource;
    std::shared_ptr<FbyApiCampaignsResource> m_spFbyApiCampaignsResource;
    std::shared_ptr<FbyApiCampaignsBy_loginLoginResource> m_spFbyApiCampaignsBy_loginLoginResource;
    std::shared_ptr<FbyApiCategoriesMax-sale-quantumResource> m_spFbyApiCategoriesMax-sale-quantumResource;
    std::shared_ptr<FbyApiCategoriesTreeResource> m_spFbyApiCategoriesTreeResource;
    std::shared_ptr<FbyApiCategoryCategoryIdParametersResource> m_spFbyApiCategoryCategoryIdParametersResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdChatsHistoryResource> m_spFbyApiBusinessesBusinessIdChatsHistoryResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdChatsResource> m_spFbyApiBusinessesBusinessIdChatsResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdFeedsFeedIdResource> m_spFbyApiCampaignsCampaignIdFeedsFeedIdResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource> m_spFbyApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdFeedbackUpdatesResource> m_spFbyApiCampaignsCampaignIdFeedbackUpdatesResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdFeedsResource> m_spFbyApiCampaignsCampaignIdFeedsResource;
    std::shared_ptr<FbyApiWarehousesResource> m_spFbyApiWarehousesResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdGoods-feedbackCommentsResource> m_spFbyApiBusinessesBusinessIdGoods-feedbackCommentsResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdGoods-feedbackResource> m_spFbyApiBusinessesBusinessIdGoods-feedbackResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdStatsSkusResource> m_spFbyApiCampaignsCampaignIdStatsSkusResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdOffer-cardsResource> m_spFbyApiBusinessesBusinessIdOffer-cardsResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOffer-mapping-entriesResource> m_spFbyApiCampaignsCampaignIdOffer-mapping-entriesResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsResource> m_spFbyApiBusinessesBusinessIdOffer-mappingsResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdOffersRecommendationsResource> m_spFbyApiBusinessesBusinessIdOffersRecommendationsResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOrdersOrderIdResource> m_spFbyApiCampaignsCampaignIdOrdersOrderIdResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource> m_spFbyApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOrdersOrderIdDocumentsResource> m_spFbyApiCampaignsCampaignIdOrdersOrderIdDocumentsResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOrdersResource> m_spFbyApiCampaignsCampaignIdOrdersResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdStatsOrdersResource> m_spFbyApiCampaignsCampaignIdStatsOrdersResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOffer-pricesResource> m_spFbyApiCampaignsCampaignIdOffer-pricesResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdPromosOffersResource> m_spFbyApiBusinessesBusinessIdPromosOffersResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdPromosResource> m_spFbyApiBusinessesBusinessIdPromosResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdRatingsQualityResource> m_spFbyApiBusinessesBusinessIdRatingsQualityResource;
    std::shared_ptr<FbyApiReportsInfoReportIdResource> m_spFbyApiReportsInfoReportIdResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> m_spFbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> m_spFbyApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdReturnsResource> m_spFbyApiCampaignsCampaignIdReturnsResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOffersStocksResource> m_spFbyApiCampaignsCampaignIdOffersStocksResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource> m_spFbyApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsSuggestionsResource> m_spFbyApiBusinessesBusinessIdOffer-mappingsSuggestionsResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOffer-pricesSuggestionsResource> m_spFbyApiCampaignsCampaignIdOffer-pricesSuggestionsResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdBidsResource> m_spFbyApiBusinessesBusinessIdBidsResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdBidsResource> m_spFbyApiCampaignsCampaignIdBidsResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdFeedsFeedIdRefreshResource> m_spFbyApiCampaignsCampaignIdFeedsFeedIdRefreshResource;
    std::shared_ptr<FbyApiRegionsRegionIdChildrenResource> m_spFbyApiRegionsRegionIdChildrenResource;
    std::shared_ptr<FbyApiRegionsRegionIdResource> m_spFbyApiRegionsRegionIdResource;
    std::shared_ptr<FbyApiRegionsResource> m_spFbyApiRegionsResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdChatsFileSendResource> m_spFbyApiBusinessesBusinessIdChatsFileSendResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdChatsMessageResource> m_spFbyApiBusinessesBusinessIdChatsMessageResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdFeedsFeedIdParamsResource> m_spFbyApiCampaignsCampaignIdFeedsFeedIdParamsResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource> m_spFbyApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdOffer-pricesUpdatesResource> m_spFbyApiBusinessesBusinessIdOffer-pricesUpdatesResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOffersUpdateResource> m_spFbyApiCampaignsCampaignIdOffersUpdateResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource> m_spFbyApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdOffer-cardsUpdateResource> m_spFbyApiBusinessesBusinessIdOffer-cardsUpdateResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource> m_spFbyApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdOffer-mappingsUpdateResource> m_spFbyApiBusinessesBusinessIdOffer-mappingsUpdateResource;
    std::shared_ptr<FbyApiCampaignsCampaignIdOffer-pricesUpdatesResource> m_spFbyApiCampaignsCampaignIdOffer-pricesUpdatesResource;
    std::shared_ptr<FbyApiBusinessesBusinessIdPromosOffersUpdateResource> m_spFbyApiBusinessesBusinessIdPromosOffersUpdateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* FbyApi_H_ */

