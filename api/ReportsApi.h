/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ReportsApi.h
 *
 * 
 */

#ifndef ReportsApi_H_
#define ReportsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GenerateBoostConsolidatedRequest.h"
#include "GenerateCompetitorsPositionReportRequest.h"
#include "GenerateGoodsFeedbackRequest.h"
#include "GenerateGoodsMovementReportRequest.h"
#include "GenerateGoodsRealizationReportRequest.h"
#include "GenerateGoodsTurnoverRequest.h"
#include "GenerateMassOrderLabelsRequest.h"
#include "GeneratePricesReportRequest.h"
#include "GenerateReportResponse.h"
#include "GenerateShelfsStatisticsRequest.h"
#include "GenerateShipmentListDocumentReportRequest.h"
#include "GenerateShowsSalesReportRequest.h"
#include "GenerateStocksOnWarehousesReportRequest.h"
#include "GenerateUnitedMarketplaceServicesReportRequest.h"
#include "GenerateUnitedNettingReportRequest.h"
#include "GenerateUnitedOrdersRequest.h"
#include "GetReportInfoResponse.h"
#include "PageFormatType.h"
#include "ReportFormatType.h"
#include <string>

namespace org::openapitools::server::api
{

class  ReportsApi : public ApiBase {
public:
    explicit ReportsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~ReportsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void generate_boost_consolidated_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_competitors_position_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_goods_feedback_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_goods_movement_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_goods_realization_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_goods_turnover_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_mass_order_labels_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_prices_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_shelfs_statistics_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_shipment_list_document_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_shows_sales_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_stocks_on_warehouses_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_united_marketplace_services_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_united_netting_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void generate_united_orders_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_report_info_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void reports_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Отчет по бусту продаж
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateBoostConsolidatedRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_boost_consolidated_report(const org::openapitools::server::model::GenerateBoostConsolidatedRequest &generateBoostConsolidatedRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет «Конкурентная позиция»
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateCompetitorsPositionReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_competitors_position_report(const org::openapitools::server::model::GenerateCompetitorsPositionReportRequest &generateCompetitorsPositionReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет по отзывам о товарах
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateGoodsFeedbackRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_goods_feedback_report(const org::openapitools::server::model::GenerateGoodsFeedbackRequest &generateGoodsFeedbackRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет по движению товаров
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateGoodsMovementReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_goods_movement_report(const org::openapitools::server::model::GenerateGoodsMovementReportRequest &generateGoodsMovementReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет по реализации
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateGoodsRealizationReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_goods_realization_report(const org::openapitools::server::model::GenerateGoodsRealizationReportRequest &generateGoodsRealizationReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет по оборачиваемости
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateGoodsTurnoverRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_goods_turnover_report(const org::openapitools::server::model::GenerateGoodsTurnoverRequest &generateGoodsTurnoverRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Готовые ярлыки‑наклейки на все коробки в нескольких заказах
    /// </summary>
    /// <remarks>
    /// Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateMassOrderLabelsRequest"></param>
    /// <param name="format">Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7. (optional, default to std::make_shared&lt;PageFormatType&gt;())</param>
    virtual void generate_mass_order_labels_report(const org::openapitools::server::model::GenerateMassOrderLabelsRequest &generateMassOrderLabelsRequest, const std::optional<org::openapitools::server::model::PageFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет «Цены на рынке»
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generatePricesReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_prices_report(const org::openapitools::server::model::GeneratePricesReportRequest &generatePricesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет по полкам
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateShelfsStatisticsRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_shelfs_statistics_report(const org::openapitools::server::model::GenerateShelfsStatisticsRequest &generateShelfsStatisticsRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Получение листа сборки
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateShipmentListDocumentReportRequest"></param>
    virtual void generate_shipment_list_document_report(const org::openapitools::server::model::GenerateShipmentListDocumentReportRequest &generateShipmentListDocumentReportRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет «Аналитика продаж»
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateShowsSalesReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_shows_sales_report(const org::openapitools::server::model::GenerateShowsSalesReportRequest &generateShowsSalesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет по остаткам на складах
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateStocksOnWarehousesReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_stocks_on_warehouses_report(const org::openapitools::server::model::GenerateStocksOnWarehousesReportRequest &generateStocksOnWarehousesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет по стоимости услуг
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateUnitedMarketplaceServicesReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_united_marketplace_services_report(const org::openapitools::server::model::GenerateUnitedMarketplaceServicesReportRequest &generateUnitedMarketplaceServicesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет по платежам
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateUnitedNettingReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_united_netting_report(const org::openapitools::server::model::GenerateUnitedNettingReportRequest &generateUnitedNettingReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отчет по заказам
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateUnitedOrdersRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to std::make_shared&lt;ReportFormatType&gt;())</param>
    virtual void generate_united_orders_report(const org::openapitools::server::model::GenerateUnitedOrdersRequest &generateUnitedOrdersRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Получение заданного отчета
    /// </summary>
    /// <remarks>
    /// Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    /// </remarks>
    /// <param name="reportId">Идентификатор отчета, который вы получили после запуска генерации. </param>
    virtual void get_report_info(const std::string &reportId, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* ReportsApi_H_ */

