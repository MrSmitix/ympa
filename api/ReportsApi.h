/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReportsApi.h
 *
 * 
 */

#ifndef ReportsApi_H_
#define ReportsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GenerateBoostConsolidatedRequest.h"
#include "GenerateCompetitorsPositionReportRequest.h"
#include "GenerateGoodsFeedbackRequest.h"
#include "GenerateGoodsMovementReportRequest.h"
#include "GenerateGoodsRealizationReportRequest.h"
#include "GenerateGoodsTurnoverRequest.h"
#include "GenerateMassOrderLabelsRequest.h"
#include "GeneratePricesReportRequest.h"
#include "GenerateReportResponse.h"
#include "GenerateShelfsStatisticsRequest.h"
#include "GenerateShipmentListDocumentReportRequest.h"
#include "GenerateShowsSalesReportRequest.h"
#include "GenerateStocksOnWarehousesReportRequest.h"
#include "GenerateUnitedMarketplaceServicesReportRequest.h"
#include "GenerateUnitedNettingReportRequest.h"
#include "GenerateUnitedOrdersRequest.h"
#include "GetReportInfoResponse.h"
#include "PageFormatType.h"
#include "ReportFormatType.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ReportsApiException: public std::exception
{
public:
    ReportsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace ReportsApiResources {
/// <summary>
/// Отчет по бусту продаж
/// </summary>
/// <remarks>
/// Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsBoost_consolidatedGenerateResource: public restbed::Resource
{
public:
    ReportsBoost_consolidatedGenerateResource(const std::string& context = "");
    virtual ~ReportsBoost_consolidatedGenerateResource() = default;

    ReportsBoost_consolidatedGenerateResource(
        const ReportsBoost_consolidatedGenerateResource& other) = default; // copy constructor
    ReportsBoost_consolidatedGenerateResource(ReportsBoost_consolidatedGenerateResource&& other) noexcept = default; // move constructor

    ReportsBoost_consolidatedGenerateResource& operator=(const ReportsBoost_consolidatedGenerateResource& other) = default; // copy assignment
    ReportsBoost_consolidatedGenerateResource& operator=(ReportsBoost_consolidatedGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateBoostConsolidatedRequest & generateBoostConsolidatedRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateBoostConsolidatedRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateBoostConsolidatedRequest & generateBoostConsolidatedRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет «Конкурентная позиция»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
/// </remarks>
class  ReportsCompetitors_positionGenerateResource: public restbed::Resource
{
public:
    ReportsCompetitors_positionGenerateResource(const std::string& context = "");
    virtual ~ReportsCompetitors_positionGenerateResource() = default;

    ReportsCompetitors_positionGenerateResource(
        const ReportsCompetitors_positionGenerateResource& other) = default; // copy constructor
    ReportsCompetitors_positionGenerateResource(ReportsCompetitors_positionGenerateResource&& other) noexcept = default; // move constructor

    ReportsCompetitors_positionGenerateResource& operator=(const ReportsCompetitors_positionGenerateResource& other) = default; // copy assignment
    ReportsCompetitors_positionGenerateResource& operator=(ReportsCompetitors_positionGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateCompetitorsPositionReportRequest & generateCompetitorsPositionReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateCompetitorsPositionReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateCompetitorsPositionReportRequest & generateCompetitorsPositionReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по отзывам о товарах
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsGoods_feedbackGenerateResource: public restbed::Resource
{
public:
    ReportsGoods_feedbackGenerateResource(const std::string& context = "");
    virtual ~ReportsGoods_feedbackGenerateResource() = default;

    ReportsGoods_feedbackGenerateResource(
        const ReportsGoods_feedbackGenerateResource& other) = default; // copy constructor
    ReportsGoods_feedbackGenerateResource(ReportsGoods_feedbackGenerateResource&& other) noexcept = default; // move constructor

    ReportsGoods_feedbackGenerateResource& operator=(const ReportsGoods_feedbackGenerateResource& other) = default; // copy assignment
    ReportsGoods_feedbackGenerateResource& operator=(ReportsGoods_feedbackGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateGoodsFeedbackRequest & generateGoodsFeedbackRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateGoodsFeedbackRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateGoodsFeedbackRequest & generateGoodsFeedbackRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по движению товаров
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsGoods_movementGenerateResource: public restbed::Resource
{
public:
    ReportsGoods_movementGenerateResource(const std::string& context = "");
    virtual ~ReportsGoods_movementGenerateResource() = default;

    ReportsGoods_movementGenerateResource(
        const ReportsGoods_movementGenerateResource& other) = default; // copy constructor
    ReportsGoods_movementGenerateResource(ReportsGoods_movementGenerateResource&& other) noexcept = default; // move constructor

    ReportsGoods_movementGenerateResource& operator=(const ReportsGoods_movementGenerateResource& other) = default; // copy assignment
    ReportsGoods_movementGenerateResource& operator=(ReportsGoods_movementGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateGoodsMovementReportRequest & generateGoodsMovementReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateGoodsMovementReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateGoodsMovementReportRequest & generateGoodsMovementReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по реализации
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsGoods_realizationGenerateResource: public restbed::Resource
{
public:
    ReportsGoods_realizationGenerateResource(const std::string& context = "");
    virtual ~ReportsGoods_realizationGenerateResource() = default;

    ReportsGoods_realizationGenerateResource(
        const ReportsGoods_realizationGenerateResource& other) = default; // copy constructor
    ReportsGoods_realizationGenerateResource(ReportsGoods_realizationGenerateResource&& other) noexcept = default; // move constructor

    ReportsGoods_realizationGenerateResource& operator=(const ReportsGoods_realizationGenerateResource& other) = default; // copy assignment
    ReportsGoods_realizationGenerateResource& operator=(ReportsGoods_realizationGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateGoodsRealizationReportRequest & generateGoodsRealizationReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateGoodsRealizationReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateGoodsRealizationReportRequest & generateGoodsRealizationReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по оборачиваемости
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsGoods_turnoverGenerateResource: public restbed::Resource
{
public:
    ReportsGoods_turnoverGenerateResource(const std::string& context = "");
    virtual ~ReportsGoods_turnoverGenerateResource() = default;

    ReportsGoods_turnoverGenerateResource(
        const ReportsGoods_turnoverGenerateResource& other) = default; // copy constructor
    ReportsGoods_turnoverGenerateResource(ReportsGoods_turnoverGenerateResource&& other) noexcept = default; // move constructor

    ReportsGoods_turnoverGenerateResource& operator=(const ReportsGoods_turnoverGenerateResource& other) = default; // copy assignment
    ReportsGoods_turnoverGenerateResource& operator=(ReportsGoods_turnoverGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateGoodsTurnoverRequest & generateGoodsTurnoverRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateGoodsTurnoverRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateGoodsTurnoverRequest & generateGoodsTurnoverRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Готовые ярлыки‑наклейки на все коробки в нескольких заказах
/// </summary>
/// <remarks>
/// Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  ReportsDocumentsLabelsGenerateResource: public restbed::Resource
{
public:
    ReportsDocumentsLabelsGenerateResource(const std::string& context = "");
    virtual ~ReportsDocumentsLabelsGenerateResource() = default;

    ReportsDocumentsLabelsGenerateResource(
        const ReportsDocumentsLabelsGenerateResource& other) = default; // copy constructor
    ReportsDocumentsLabelsGenerateResource(ReportsDocumentsLabelsGenerateResource&& other) noexcept = default; // move constructor

    ReportsDocumentsLabelsGenerateResource& operator=(const ReportsDocumentsLabelsGenerateResource& other) = default; // copy assignment
    ReportsDocumentsLabelsGenerateResource& operator=(ReportsDocumentsLabelsGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateMassOrderLabelsRequest & generateMassOrderLabelsRequest, PageFormatType & format)> handler_POST_func =
            [](GenerateMassOrderLabelsRequest &, PageFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateMassOrderLabelsRequest & generateMassOrderLabelsRequest, PageFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет «Цены на рынке»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsPricesGenerateResource: public restbed::Resource
{
public:
    ReportsPricesGenerateResource(const std::string& context = "");
    virtual ~ReportsPricesGenerateResource() = default;

    ReportsPricesGenerateResource(
        const ReportsPricesGenerateResource& other) = default; // copy constructor
    ReportsPricesGenerateResource(ReportsPricesGenerateResource&& other) noexcept = default; // move constructor

    ReportsPricesGenerateResource& operator=(const ReportsPricesGenerateResource& other) = default; // copy assignment
    ReportsPricesGenerateResource& operator=(ReportsPricesGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GeneratePricesReportRequest & generatePricesReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GeneratePricesReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GeneratePricesReportRequest & generatePricesReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по полкам
/// </summary>
/// <remarks>
/// Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsShelf_statisticsGenerateResource: public restbed::Resource
{
public:
    ReportsShelf_statisticsGenerateResource(const std::string& context = "");
    virtual ~ReportsShelf_statisticsGenerateResource() = default;

    ReportsShelf_statisticsGenerateResource(
        const ReportsShelf_statisticsGenerateResource& other) = default; // copy constructor
    ReportsShelf_statisticsGenerateResource(ReportsShelf_statisticsGenerateResource&& other) noexcept = default; // move constructor

    ReportsShelf_statisticsGenerateResource& operator=(const ReportsShelf_statisticsGenerateResource& other) = default; // copy assignment
    ReportsShelf_statisticsGenerateResource& operator=(ReportsShelf_statisticsGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateShelfsStatisticsRequest & generateShelfsStatisticsRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateShelfsStatisticsRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateShelfsStatisticsRequest & generateShelfsStatisticsRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение листа сборки
/// </summary>
/// <remarks>
/// Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsDocumentsShipment_listGenerateResource: public restbed::Resource
{
public:
    ReportsDocumentsShipment_listGenerateResource(const std::string& context = "");
    virtual ~ReportsDocumentsShipment_listGenerateResource() = default;

    ReportsDocumentsShipment_listGenerateResource(
        const ReportsDocumentsShipment_listGenerateResource& other) = default; // copy constructor
    ReportsDocumentsShipment_listGenerateResource(ReportsDocumentsShipment_listGenerateResource&& other) noexcept = default; // move constructor

    ReportsDocumentsShipment_listGenerateResource& operator=(const ReportsDocumentsShipment_listGenerateResource& other) = default; // copy assignment
    ReportsDocumentsShipment_listGenerateResource& operator=(ReportsDocumentsShipment_listGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateShipmentListDocumentReportRequest & generateShipmentListDocumentReportRequest)> handler_POST_func =
            [](GenerateShipmentListDocumentReportRequest &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateShipmentListDocumentReportRequest & generateShipmentListDocumentReportRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет «Аналитика продаж»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
/// </remarks>
class  ReportsShows_salesGenerateResource: public restbed::Resource
{
public:
    ReportsShows_salesGenerateResource(const std::string& context = "");
    virtual ~ReportsShows_salesGenerateResource() = default;

    ReportsShows_salesGenerateResource(
        const ReportsShows_salesGenerateResource& other) = default; // copy constructor
    ReportsShows_salesGenerateResource(ReportsShows_salesGenerateResource&& other) noexcept = default; // move constructor

    ReportsShows_salesGenerateResource& operator=(const ReportsShows_salesGenerateResource& other) = default; // copy assignment
    ReportsShows_salesGenerateResource& operator=(ReportsShows_salesGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateShowsSalesReportRequest & generateShowsSalesReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateShowsSalesReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateShowsSalesReportRequest & generateShowsSalesReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по остаткам на складах
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsStocks_on_warehousesGenerateResource: public restbed::Resource
{
public:
    ReportsStocks_on_warehousesGenerateResource(const std::string& context = "");
    virtual ~ReportsStocks_on_warehousesGenerateResource() = default;

    ReportsStocks_on_warehousesGenerateResource(
        const ReportsStocks_on_warehousesGenerateResource& other) = default; // copy constructor
    ReportsStocks_on_warehousesGenerateResource(ReportsStocks_on_warehousesGenerateResource&& other) noexcept = default; // move constructor

    ReportsStocks_on_warehousesGenerateResource& operator=(const ReportsStocks_on_warehousesGenerateResource& other) = default; // copy assignment
    ReportsStocks_on_warehousesGenerateResource& operator=(ReportsStocks_on_warehousesGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateStocksOnWarehousesReportRequest & generateStocksOnWarehousesReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateStocksOnWarehousesReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateStocksOnWarehousesReportRequest & generateStocksOnWarehousesReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по стоимости услуг
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsUnited_marketplace_servicesGenerateResource: public restbed::Resource
{
public:
    ReportsUnited_marketplace_servicesGenerateResource(const std::string& context = "");
    virtual ~ReportsUnited_marketplace_servicesGenerateResource() = default;

    ReportsUnited_marketplace_servicesGenerateResource(
        const ReportsUnited_marketplace_servicesGenerateResource& other) = default; // copy constructor
    ReportsUnited_marketplace_servicesGenerateResource(ReportsUnited_marketplace_servicesGenerateResource&& other) noexcept = default; // move constructor

    ReportsUnited_marketplace_servicesGenerateResource& operator=(const ReportsUnited_marketplace_servicesGenerateResource& other) = default; // copy assignment
    ReportsUnited_marketplace_servicesGenerateResource& operator=(ReportsUnited_marketplace_servicesGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateUnitedMarketplaceServicesReportRequest & generateUnitedMarketplaceServicesReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateUnitedMarketplaceServicesReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateUnitedMarketplaceServicesReportRequest & generateUnitedMarketplaceServicesReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по платежам
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsUnited_nettingGenerateResource: public restbed::Resource
{
public:
    ReportsUnited_nettingGenerateResource(const std::string& context = "");
    virtual ~ReportsUnited_nettingGenerateResource() = default;

    ReportsUnited_nettingGenerateResource(
        const ReportsUnited_nettingGenerateResource& other) = default; // copy constructor
    ReportsUnited_nettingGenerateResource(ReportsUnited_nettingGenerateResource&& other) noexcept = default; // move constructor

    ReportsUnited_nettingGenerateResource& operator=(const ReportsUnited_nettingGenerateResource& other) = default; // copy assignment
    ReportsUnited_nettingGenerateResource& operator=(ReportsUnited_nettingGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateUnitedNettingReportRequest & generateUnitedNettingReportRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateUnitedNettingReportRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateUnitedNettingReportRequest & generateUnitedNettingReportRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отчет по заказам
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsUnited_ordersGenerateResource: public restbed::Resource
{
public:
    ReportsUnited_ordersGenerateResource(const std::string& context = "");
    virtual ~ReportsUnited_ordersGenerateResource() = default;

    ReportsUnited_ordersGenerateResource(
        const ReportsUnited_ordersGenerateResource& other) = default; // copy constructor
    ReportsUnited_ordersGenerateResource(ReportsUnited_ordersGenerateResource&& other) noexcept = default; // move constructor

    ReportsUnited_ordersGenerateResource& operator=(const ReportsUnited_ordersGenerateResource& other) = default; // copy assignment
    ReportsUnited_ordersGenerateResource& operator=(ReportsUnited_ordersGenerateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GenerateReportResponse>(
        GenerateUnitedOrdersRequest & generateUnitedOrdersRequest, ReportFormatType & format)> handler_POST_func =
            [](GenerateUnitedOrdersRequest &, ReportFormatType &) -> std::pair<int, GenerateReportResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GenerateReportResponse> handler_POST(
        GenerateUnitedOrdersRequest & generateUnitedOrdersRequest, ReportFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение заданного отчета
/// </summary>
/// <remarks>
/// Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  ReportsInfoReportIdResource: public restbed::Resource
{
public:
    ReportsInfoReportIdResource(const std::string& context = "");
    virtual ~ReportsInfoReportIdResource() = default;

    ReportsInfoReportIdResource(
        const ReportsInfoReportIdResource& other) = default; // copy constructor
    ReportsInfoReportIdResource(ReportsInfoReportIdResource&& other) noexcept = default; // move constructor

    ReportsInfoReportIdResource& operator=(const ReportsInfoReportIdResource& other) = default; // copy assignment
    ReportsInfoReportIdResource& operator=(ReportsInfoReportIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetReportInfoResponse>(
        std::string & reportId)> handler_GET_func =
            [](std::string &) -> std::pair<int, GetReportInfoResponse>
                { throw ReportsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetReportInfoResponse> handler_GET(
        std::string & reportId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace ReportsApiResources */

using ReportsApiReportsBoost_consolidatedGenerateResource [[deprecated]] = ReportsApiResources::ReportsBoost_consolidatedGenerateResource;
using ReportsApiReportsCompetitors_positionGenerateResource [[deprecated]] = ReportsApiResources::ReportsCompetitors_positionGenerateResource;
using ReportsApiReportsGoods_feedbackGenerateResource [[deprecated]] = ReportsApiResources::ReportsGoods_feedbackGenerateResource;
using ReportsApiReportsGoods_movementGenerateResource [[deprecated]] = ReportsApiResources::ReportsGoods_movementGenerateResource;
using ReportsApiReportsGoods_realizationGenerateResource [[deprecated]] = ReportsApiResources::ReportsGoods_realizationGenerateResource;
using ReportsApiReportsGoods_turnoverGenerateResource [[deprecated]] = ReportsApiResources::ReportsGoods_turnoverGenerateResource;
using ReportsApiReportsDocumentsLabelsGenerateResource [[deprecated]] = ReportsApiResources::ReportsDocumentsLabelsGenerateResource;
using ReportsApiReportsPricesGenerateResource [[deprecated]] = ReportsApiResources::ReportsPricesGenerateResource;
using ReportsApiReportsShelf_statisticsGenerateResource [[deprecated]] = ReportsApiResources::ReportsShelf_statisticsGenerateResource;
using ReportsApiReportsDocumentsShipment_listGenerateResource [[deprecated]] = ReportsApiResources::ReportsDocumentsShipment_listGenerateResource;
using ReportsApiReportsShows_salesGenerateResource [[deprecated]] = ReportsApiResources::ReportsShows_salesGenerateResource;
using ReportsApiReportsStocks_on_warehousesGenerateResource [[deprecated]] = ReportsApiResources::ReportsStocks_on_warehousesGenerateResource;
using ReportsApiReportsUnited_marketplace_servicesGenerateResource [[deprecated]] = ReportsApiResources::ReportsUnited_marketplace_servicesGenerateResource;
using ReportsApiReportsUnited_nettingGenerateResource [[deprecated]] = ReportsApiResources::ReportsUnited_nettingGenerateResource;
using ReportsApiReportsUnited_ordersGenerateResource [[deprecated]] = ReportsApiResources::ReportsUnited_ordersGenerateResource;
using ReportsApiReportsInfoReportIdResource [[deprecated]] = ReportsApiResources::ReportsInfoReportIdResource;

//
// The restbed service to actually implement the REST server
//
class  ReportsApi
{
public:
    explicit ReportsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ReportsApi();

    std::shared_ptr<ReportsApiResources::ReportsBoost_consolidatedGenerateResource> getReportsBoost_consolidatedGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsCompetitors_positionGenerateResource> getReportsCompetitors_positionGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsGoods_feedbackGenerateResource> getReportsGoods_feedbackGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsGoods_movementGenerateResource> getReportsGoods_movementGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsGoods_realizationGenerateResource> getReportsGoods_realizationGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsGoods_turnoverGenerateResource> getReportsGoods_turnoverGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsDocumentsLabelsGenerateResource> getReportsDocumentsLabelsGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsPricesGenerateResource> getReportsPricesGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsShelf_statisticsGenerateResource> getReportsShelf_statisticsGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsDocumentsShipment_listGenerateResource> getReportsDocumentsShipment_listGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsShows_salesGenerateResource> getReportsShows_salesGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsStocks_on_warehousesGenerateResource> getReportsStocks_on_warehousesGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsUnited_marketplace_servicesGenerateResource> getReportsUnited_marketplace_servicesGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsUnited_nettingGenerateResource> getReportsUnited_nettingGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsUnited_ordersGenerateResource> getReportsUnited_ordersGenerateResource();
    std::shared_ptr<ReportsApiResources::ReportsInfoReportIdResource> getReportsInfoReportIdResource();

    void setResource(std::shared_ptr<ReportsApiResources::ReportsBoost_consolidatedGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsCompetitors_positionGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsGoods_feedbackGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsGoods_movementGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsGoods_realizationGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsGoods_turnoverGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsDocumentsLabelsGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsPricesGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsShelf_statisticsGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsDocumentsShipment_listGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsShows_salesGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsStocks_on_warehousesGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsUnited_marketplace_servicesGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsUnited_nettingGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsUnited_ordersGenerateResource> resource);
    void setResource(std::shared_ptr<ReportsApiResources::ReportsInfoReportIdResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsBoost_consolidatedGenerateResource(std::shared_ptr<ReportsApiResources::ReportsBoost_consolidatedGenerateResource> spReportsApiReportsBoost_consolidatedGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsCompetitors_positionGenerateResource(std::shared_ptr<ReportsApiResources::ReportsCompetitors_positionGenerateResource> spReportsApiReportsCompetitors_positionGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsGoods_feedbackGenerateResource(std::shared_ptr<ReportsApiResources::ReportsGoods_feedbackGenerateResource> spReportsApiReportsGoods_feedbackGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsGoods_movementGenerateResource(std::shared_ptr<ReportsApiResources::ReportsGoods_movementGenerateResource> spReportsApiReportsGoods_movementGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsGoods_realizationGenerateResource(std::shared_ptr<ReportsApiResources::ReportsGoods_realizationGenerateResource> spReportsApiReportsGoods_realizationGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsGoods_turnoverGenerateResource(std::shared_ptr<ReportsApiResources::ReportsGoods_turnoverGenerateResource> spReportsApiReportsGoods_turnoverGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsDocumentsLabelsGenerateResource(std::shared_ptr<ReportsApiResources::ReportsDocumentsLabelsGenerateResource> spReportsApiReportsDocumentsLabelsGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsPricesGenerateResource(std::shared_ptr<ReportsApiResources::ReportsPricesGenerateResource> spReportsApiReportsPricesGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsShelf_statisticsGenerateResource(std::shared_ptr<ReportsApiResources::ReportsShelf_statisticsGenerateResource> spReportsApiReportsShelf_statisticsGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsDocumentsShipment_listGenerateResource(std::shared_ptr<ReportsApiResources::ReportsDocumentsShipment_listGenerateResource> spReportsApiReportsDocumentsShipment_listGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsShows_salesGenerateResource(std::shared_ptr<ReportsApiResources::ReportsShows_salesGenerateResource> spReportsApiReportsShows_salesGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsStocks_on_warehousesGenerateResource(std::shared_ptr<ReportsApiResources::ReportsStocks_on_warehousesGenerateResource> spReportsApiReportsStocks_on_warehousesGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsUnited_marketplace_servicesGenerateResource(std::shared_ptr<ReportsApiResources::ReportsUnited_marketplace_servicesGenerateResource> spReportsApiReportsUnited_marketplace_servicesGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsUnited_nettingGenerateResource(std::shared_ptr<ReportsApiResources::ReportsUnited_nettingGenerateResource> spReportsApiReportsUnited_nettingGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsUnited_ordersGenerateResource(std::shared_ptr<ReportsApiResources::ReportsUnited_ordersGenerateResource> spReportsApiReportsUnited_ordersGenerateResource);
    [[deprecated("use setResource()")]]
    virtual void setReportsApiReportsInfoReportIdResource(std::shared_ptr<ReportsApiResources::ReportsInfoReportIdResource> spReportsApiReportsInfoReportIdResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ReportsApiResources::ReportsBoost_consolidatedGenerateResource> m_spReportsBoost_consolidatedGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsCompetitors_positionGenerateResource> m_spReportsCompetitors_positionGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsGoods_feedbackGenerateResource> m_spReportsGoods_feedbackGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsGoods_movementGenerateResource> m_spReportsGoods_movementGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsGoods_realizationGenerateResource> m_spReportsGoods_realizationGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsGoods_turnoverGenerateResource> m_spReportsGoods_turnoverGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsDocumentsLabelsGenerateResource> m_spReportsDocumentsLabelsGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsPricesGenerateResource> m_spReportsPricesGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsShelf_statisticsGenerateResource> m_spReportsShelf_statisticsGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsDocumentsShipment_listGenerateResource> m_spReportsDocumentsShipment_listGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsShows_salesGenerateResource> m_spReportsShows_salesGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsStocks_on_warehousesGenerateResource> m_spReportsStocks_on_warehousesGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsUnited_marketplace_servicesGenerateResource> m_spReportsUnited_marketplace_servicesGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsUnited_nettingGenerateResource> m_spReportsUnited_nettingGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsUnited_ordersGenerateResource> m_spReportsUnited_ordersGenerateResource;
    std::shared_ptr<ReportsApiResources::ReportsInfoReportIdResource> m_spReportsInfoReportIdResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ReportsApi_H_ */

