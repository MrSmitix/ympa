/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReportsApi.h
 *
 * 
 */

#ifndef ReportsApi_H_
#define ReportsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GenerateBoostConsolidatedRequest.h"
#include "GenerateCompetitorsPositionReportRequest.h"
#include "GenerateGoodsFeedbackRequest.h"
#include "GenerateGoodsMovementReportRequest.h"
#include "GenerateGoodsRealizationReportRequest.h"
#include "GenerateGoodsTurnoverRequest.h"
#include "GenerateMassOrderLabelsRequest.h"
#include "GeneratePricesReportRequest.h"
#include "GenerateReportResponse.h"
#include "GenerateShelfsStatisticsRequest.h"
#include "GenerateShipmentListDocumentReportRequest.h"
#include "GenerateShowsSalesReportRequest.h"
#include "GenerateStocksOnWarehousesReportRequest.h"
#include "GenerateUnitedMarketplaceServicesReportRequest.h"
#include "GenerateUnitedNettingReportRequest.h"
#include "GenerateUnitedOrdersRequest.h"
#include "GetReportInfoResponse.h"
#include "PageFormatType.h"
#include "ReportFormatType.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ReportsApiException: public std::exception
{
public:
    ReportsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Отчет по бусту продаж
/// </summary>
/// <remarks>
/// Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsBoost-consolidatedGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsBoost-consolidatedGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsBoost-consolidatedGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateBoostConsolidatedRequest> const & generateBoostConsolidatedRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет «Конкурентная позиция»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsCompetitors-positionGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsCompetitors-positionGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsCompetitors-positionGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateCompetitorsPositionReportRequest> const & generateCompetitorsPositionReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по отзывам о товарах
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsGoods-feedbackGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsGoods-feedbackGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsGoods-feedbackGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateGoodsFeedbackRequest> const & generateGoodsFeedbackRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по движению товаров
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsGoods-movementGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsGoods-movementGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsGoods-movementGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateGoodsMovementReportRequest> const & generateGoodsMovementReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по реализации
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsGoods-realizationGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsGoods-realizationGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsGoods-realizationGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateGoodsRealizationReportRequest> const & generateGoodsRealizationReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по оборачиваемости
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsGoods-turnoverGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsGoods-turnoverGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsGoods-turnoverGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateGoodsTurnoverRequest> const & generateGoodsTurnoverRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Готовые ярлыки‑наклейки на все коробки в нескольких заказах
/// </summary>
/// <remarks>
/// Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsDocumentsLabelsGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsDocumentsLabelsGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsDocumentsLabelsGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateMassOrderLabelsRequest> const & generateMassOrderLabelsRequest, std::shared_ptr<PageFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет «Цены на рынке»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsPricesGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsPricesGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsPricesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GeneratePricesReportRequest> const & generatePricesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по полкам
/// </summary>
/// <remarks>
/// Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsShelf-statisticsGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsShelf-statisticsGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsShelf-statisticsGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateShelfsStatisticsRequest> const & generateShelfsStatisticsRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение листа сборки
/// </summary>
/// <remarks>
/// Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsDocumentsShipment-listGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsDocumentsShipment-listGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsDocumentsShipment-listGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateShipmentListDocumentReportRequest> const & generateShipmentListDocumentReportRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет «Аналитика продаж»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsShows-salesGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsShows-salesGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsShows-salesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateShowsSalesReportRequest> const & generateShowsSalesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по остаткам на складах
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsStocks-on-warehousesGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsStocks-on-warehousesGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsStocks-on-warehousesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateStocksOnWarehousesReportRequest> const & generateStocksOnWarehousesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по стоимости услуг
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsUnited-marketplace-servicesGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsUnited-marketplace-servicesGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsUnited-marketplace-servicesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateUnitedMarketplaceServicesReportRequest> const & generateUnitedMarketplaceServicesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по платежам
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsUnited-nettingGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsUnited-nettingGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsUnited-nettingGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateUnitedNettingReportRequest> const & generateUnitedNettingReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по заказам
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ReportsApiReportsUnited-ordersGenerateResource: public restbed::Resource
{
public:
    ReportsApiReportsUnited-ordersGenerateResource(const std::string& context = "");
    virtual ~ReportsApiReportsUnited-ordersGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateUnitedOrdersRequest> const & generateUnitedOrdersRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение заданного отчета
/// </summary>
/// <remarks>
/// Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  ReportsApiReportsInfoReportIdResource: public restbed::Resource
{
public:
    ReportsApiReportsInfoReportIdResource(const std::string& context = "");
    virtual ~ReportsApiReportsInfoReportIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetReportInfoResponse>> handler_GET(
        std::string const & reportId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_reportId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("reportId", "");
    }



    virtual std::pair<int, std::string> handleReportsApiException(const ReportsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  ReportsApi
{
public:
    explicit ReportsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ReportsApi();

    virtual void setReportsApiReportsBoost-consolidatedGenerateResource(std::shared_ptr<ReportsApiReportsBoost-consolidatedGenerateResource> spReportsApiReportsBoost-consolidatedGenerateResource);
    virtual void setReportsApiReportsCompetitors-positionGenerateResource(std::shared_ptr<ReportsApiReportsCompetitors-positionGenerateResource> spReportsApiReportsCompetitors-positionGenerateResource);
    virtual void setReportsApiReportsGoods-feedbackGenerateResource(std::shared_ptr<ReportsApiReportsGoods-feedbackGenerateResource> spReportsApiReportsGoods-feedbackGenerateResource);
    virtual void setReportsApiReportsGoods-movementGenerateResource(std::shared_ptr<ReportsApiReportsGoods-movementGenerateResource> spReportsApiReportsGoods-movementGenerateResource);
    virtual void setReportsApiReportsGoods-realizationGenerateResource(std::shared_ptr<ReportsApiReportsGoods-realizationGenerateResource> spReportsApiReportsGoods-realizationGenerateResource);
    virtual void setReportsApiReportsGoods-turnoverGenerateResource(std::shared_ptr<ReportsApiReportsGoods-turnoverGenerateResource> spReportsApiReportsGoods-turnoverGenerateResource);
    virtual void setReportsApiReportsDocumentsLabelsGenerateResource(std::shared_ptr<ReportsApiReportsDocumentsLabelsGenerateResource> spReportsApiReportsDocumentsLabelsGenerateResource);
    virtual void setReportsApiReportsPricesGenerateResource(std::shared_ptr<ReportsApiReportsPricesGenerateResource> spReportsApiReportsPricesGenerateResource);
    virtual void setReportsApiReportsShelf-statisticsGenerateResource(std::shared_ptr<ReportsApiReportsShelf-statisticsGenerateResource> spReportsApiReportsShelf-statisticsGenerateResource);
    virtual void setReportsApiReportsDocumentsShipment-listGenerateResource(std::shared_ptr<ReportsApiReportsDocumentsShipment-listGenerateResource> spReportsApiReportsDocumentsShipment-listGenerateResource);
    virtual void setReportsApiReportsShows-salesGenerateResource(std::shared_ptr<ReportsApiReportsShows-salesGenerateResource> spReportsApiReportsShows-salesGenerateResource);
    virtual void setReportsApiReportsStocks-on-warehousesGenerateResource(std::shared_ptr<ReportsApiReportsStocks-on-warehousesGenerateResource> spReportsApiReportsStocks-on-warehousesGenerateResource);
    virtual void setReportsApiReportsUnited-marketplace-servicesGenerateResource(std::shared_ptr<ReportsApiReportsUnited-marketplace-servicesGenerateResource> spReportsApiReportsUnited-marketplace-servicesGenerateResource);
    virtual void setReportsApiReportsUnited-nettingGenerateResource(std::shared_ptr<ReportsApiReportsUnited-nettingGenerateResource> spReportsApiReportsUnited-nettingGenerateResource);
    virtual void setReportsApiReportsUnited-ordersGenerateResource(std::shared_ptr<ReportsApiReportsUnited-ordersGenerateResource> spReportsApiReportsUnited-ordersGenerateResource);
    virtual void setReportsApiReportsInfoReportIdResource(std::shared_ptr<ReportsApiReportsInfoReportIdResource> spReportsApiReportsInfoReportIdResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ReportsApiReportsBoost-consolidatedGenerateResource> m_spReportsApiReportsBoost-consolidatedGenerateResource;
    std::shared_ptr<ReportsApiReportsCompetitors-positionGenerateResource> m_spReportsApiReportsCompetitors-positionGenerateResource;
    std::shared_ptr<ReportsApiReportsGoods-feedbackGenerateResource> m_spReportsApiReportsGoods-feedbackGenerateResource;
    std::shared_ptr<ReportsApiReportsGoods-movementGenerateResource> m_spReportsApiReportsGoods-movementGenerateResource;
    std::shared_ptr<ReportsApiReportsGoods-realizationGenerateResource> m_spReportsApiReportsGoods-realizationGenerateResource;
    std::shared_ptr<ReportsApiReportsGoods-turnoverGenerateResource> m_spReportsApiReportsGoods-turnoverGenerateResource;
    std::shared_ptr<ReportsApiReportsDocumentsLabelsGenerateResource> m_spReportsApiReportsDocumentsLabelsGenerateResource;
    std::shared_ptr<ReportsApiReportsPricesGenerateResource> m_spReportsApiReportsPricesGenerateResource;
    std::shared_ptr<ReportsApiReportsShelf-statisticsGenerateResource> m_spReportsApiReportsShelf-statisticsGenerateResource;
    std::shared_ptr<ReportsApiReportsDocumentsShipment-listGenerateResource> m_spReportsApiReportsDocumentsShipment-listGenerateResource;
    std::shared_ptr<ReportsApiReportsShows-salesGenerateResource> m_spReportsApiReportsShows-salesGenerateResource;
    std::shared_ptr<ReportsApiReportsStocks-on-warehousesGenerateResource> m_spReportsApiReportsStocks-on-warehousesGenerateResource;
    std::shared_ptr<ReportsApiReportsUnited-marketplace-servicesGenerateResource> m_spReportsApiReportsUnited-marketplace-servicesGenerateResource;
    std::shared_ptr<ReportsApiReportsUnited-nettingGenerateResource> m_spReportsApiReportsUnited-nettingGenerateResource;
    std::shared_ptr<ReportsApiReportsUnited-ordersGenerateResource> m_spReportsApiReportsUnited-ordersGenerateResource;
    std::shared_ptr<ReportsApiReportsInfoReportIdResource> m_spReportsApiReportsInfoReportIdResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ReportsApi_H_ */

