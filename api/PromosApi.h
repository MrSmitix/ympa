/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PromosApi.h
 *
 * 
 */

#ifndef PromosApi_H_
#define PromosApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "DeletePromoOffersRequest.h"
#include "DeletePromoOffersResponse.h"
#include "GetPromoOffersRequest.h"
#include "GetPromoOffersResponse.h"
#include "GetPromosRequest.h"
#include "GetPromosResponse.h"
#include "UpdatePromoOffersRequest.h"
#include "UpdatePromoOffersResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  PromosApiException: public std::exception
{
public:
    PromosApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Удаление товаров из акции
/// </summary>
/// <remarks>
/// Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  PromosApiBusinessesBusinessIdPromosOffersDeleteResource: public restbed::Resource
{
public:
    PromosApiBusinessesBusinessIdPromosOffersDeleteResource(const std::string& context = "");
    virtual ~PromosApiBusinessesBusinessIdPromosOffersDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<DeletePromoOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<DeletePromoOffersRequest> const & deletePromoOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handlePromosApiException(const PromosApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение списка товаров, которые участвуют или могут участвовать в акции
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре &#x60;limit&#x60; не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  PromosApiBusinessesBusinessIdPromosOffersResource: public restbed::Resource
{
public:
    PromosApiBusinessesBusinessIdPromosOffersResource(const std::string& context = "");
    virtual ~PromosApiBusinessesBusinessIdPromosOffersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetPromoOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetPromoOffersRequest> const & getPromoOffersRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handlePromosApiException(const PromosApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение списка акций
/// </summary>
/// <remarks>
/// Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр &#x60;participation&#x60;.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  PromosApiBusinessesBusinessIdPromosResource: public restbed::Resource
{
public:
    PromosApiBusinessesBusinessIdPromosResource(const std::string& context = "");
    virtual ~PromosApiBusinessesBusinessIdPromosResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetPromosResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetPromosRequest> const & getPromosRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handlePromosApiException(const PromosApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление товаров в акцию или изменение их цен
/// </summary>
/// <remarks>
/// Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  PromosApiBusinessesBusinessIdPromosOffersUpdateResource: public restbed::Resource
{
public:
    PromosApiBusinessesBusinessIdPromosOffersUpdateResource(const std::string& context = "");
    virtual ~PromosApiBusinessesBusinessIdPromosOffersUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdatePromoOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdatePromoOffersRequest> const & updatePromoOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handlePromosApiException(const PromosApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  PromosApi
{
public:
    explicit PromosApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~PromosApi();

    virtual void setPromosApiBusinessesBusinessIdPromosOffersDeleteResource(std::shared_ptr<PromosApiBusinessesBusinessIdPromosOffersDeleteResource> spPromosApiBusinessesBusinessIdPromosOffersDeleteResource);
    virtual void setPromosApiBusinessesBusinessIdPromosOffersResource(std::shared_ptr<PromosApiBusinessesBusinessIdPromosOffersResource> spPromosApiBusinessesBusinessIdPromosOffersResource);
    virtual void setPromosApiBusinessesBusinessIdPromosResource(std::shared_ptr<PromosApiBusinessesBusinessIdPromosResource> spPromosApiBusinessesBusinessIdPromosResource);
    virtual void setPromosApiBusinessesBusinessIdPromosOffersUpdateResource(std::shared_ptr<PromosApiBusinessesBusinessIdPromosOffersUpdateResource> spPromosApiBusinessesBusinessIdPromosOffersUpdateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<PromosApiBusinessesBusinessIdPromosOffersDeleteResource> m_spPromosApiBusinessesBusinessIdPromosOffersDeleteResource;
    std::shared_ptr<PromosApiBusinessesBusinessIdPromosOffersResource> m_spPromosApiBusinessesBusinessIdPromosOffersResource;
    std::shared_ptr<PromosApiBusinessesBusinessIdPromosResource> m_spPromosApiBusinessesBusinessIdPromosResource;
    std::shared_ptr<PromosApiBusinessesBusinessIdPromosOffersUpdateResource> m_spPromosApiBusinessesBusinessIdPromosOffersUpdateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* PromosApi_H_ */

