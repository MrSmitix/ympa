/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PromosApi.h
 *
 * 
 */

#ifndef PromosApi_H_
#define PromosApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "DeletePromoOffersRequest.h"
#include "DeletePromoOffersResponse.h"
#include "GetPromoOffersRequest.h"
#include "GetPromoOffersResponse.h"
#include "GetPromosRequest.h"
#include "GetPromosResponse.h"
#include "UpdatePromoOffersRequest.h"
#include "UpdatePromoOffersResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  PromosApiException: public std::exception
{
public:
    PromosApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace PromosApiResources {
/// <summary>
/// Удаление товаров из акции
/// </summary>
/// <remarks>
/// Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdPromosOffersDeleteResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPromosOffersDeleteResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPromosOffersDeleteResource() = default;

    BusinessesBusinessIdPromosOffersDeleteResource(
        const BusinessesBusinessIdPromosOffersDeleteResource& other) = default; // copy constructor
    BusinessesBusinessIdPromosOffersDeleteResource(BusinessesBusinessIdPromosOffersDeleteResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPromosOffersDeleteResource& operator=(const BusinessesBusinessIdPromosOffersDeleteResource& other) = default; // copy assignment
    BusinessesBusinessIdPromosOffersDeleteResource& operator=(BusinessesBusinessIdPromosOffersDeleteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeletePromoOffersResponse>(
        int64_t & businessId, DeletePromoOffersRequest & deletePromoOffersRequest)> handler_POST_func =
            [](int64_t &, DeletePromoOffersRequest &) -> std::pair<int, DeletePromoOffersResponse>
                { throw PromosApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeletePromoOffersResponse> handler_POST(
        int64_t & businessId, DeletePromoOffersRequest & deletePromoOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePromosApiException(const PromosApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение списка товаров, которые участвуют или могут участвовать в акции
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре &#x60;limit&#x60; не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdPromosOffersResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPromosOffersResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPromosOffersResource() = default;

    BusinessesBusinessIdPromosOffersResource(
        const BusinessesBusinessIdPromosOffersResource& other) = default; // copy constructor
    BusinessesBusinessIdPromosOffersResource(BusinessesBusinessIdPromosOffersResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPromosOffersResource& operator=(const BusinessesBusinessIdPromosOffersResource& other) = default; // copy assignment
    BusinessesBusinessIdPromosOffersResource& operator=(BusinessesBusinessIdPromosOffersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetPromoOffersResponse>(
        int64_t & businessId, GetPromoOffersRequest & getPromoOffersRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetPromoOffersRequest &, std::string &, int32_t &) -> std::pair<int, GetPromoOffersResponse>
                { throw PromosApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetPromoOffersResponse> handler_POST(
        int64_t & businessId, GetPromoOffersRequest & getPromoOffersRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePromosApiException(const PromosApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение списка акций
/// </summary>
/// <remarks>
/// Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр &#x60;participation&#x60;.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdPromosResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPromosResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPromosResource() = default;

    BusinessesBusinessIdPromosResource(
        const BusinessesBusinessIdPromosResource& other) = default; // copy constructor
    BusinessesBusinessIdPromosResource(BusinessesBusinessIdPromosResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPromosResource& operator=(const BusinessesBusinessIdPromosResource& other) = default; // copy assignment
    BusinessesBusinessIdPromosResource& operator=(BusinessesBusinessIdPromosResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetPromosResponse>(
        int64_t & businessId, GetPromosRequest & getPromosRequest)> handler_POST_func =
            [](int64_t &, GetPromosRequest &) -> std::pair<int, GetPromosResponse>
                { throw PromosApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetPromosResponse> handler_POST(
        int64_t & businessId, GetPromosRequest & getPromosRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePromosApiException(const PromosApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Добавление товаров в акцию или изменение их цен
/// </summary>
/// <remarks>
/// Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdPromosOffersUpdateResource: public restbed::Resource
{
public:
    BusinessesBusinessIdPromosOffersUpdateResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdPromosOffersUpdateResource() = default;

    BusinessesBusinessIdPromosOffersUpdateResource(
        const BusinessesBusinessIdPromosOffersUpdateResource& other) = default; // copy constructor
    BusinessesBusinessIdPromosOffersUpdateResource(BusinessesBusinessIdPromosOffersUpdateResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdPromosOffersUpdateResource& operator=(const BusinessesBusinessIdPromosOffersUpdateResource& other) = default; // copy assignment
    BusinessesBusinessIdPromosOffersUpdateResource& operator=(BusinessesBusinessIdPromosOffersUpdateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdatePromoOffersResponse>(
        int64_t & businessId, UpdatePromoOffersRequest & updatePromoOffersRequest)> handler_POST_func =
            [](int64_t &, UpdatePromoOffersRequest &) -> std::pair<int, UpdatePromoOffersResponse>
                { throw PromosApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdatePromoOffersResponse> handler_POST(
        int64_t & businessId, UpdatePromoOffersRequest & updatePromoOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePromosApiException(const PromosApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace PromosApiResources */

using PromosApiBusinessesBusinessIdPromosOffersDeleteResource [[deprecated]] = PromosApiResources::BusinessesBusinessIdPromosOffersDeleteResource;
using PromosApiBusinessesBusinessIdPromosOffersResource [[deprecated]] = PromosApiResources::BusinessesBusinessIdPromosOffersResource;
using PromosApiBusinessesBusinessIdPromosResource [[deprecated]] = PromosApiResources::BusinessesBusinessIdPromosResource;
using PromosApiBusinessesBusinessIdPromosOffersUpdateResource [[deprecated]] = PromosApiResources::BusinessesBusinessIdPromosOffersUpdateResource;

//
// The restbed service to actually implement the REST server
//
class  PromosApi
{
public:
    explicit PromosApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~PromosApi();

    std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersDeleteResource> getBusinessesBusinessIdPromosOffersDeleteResource();
    std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersResource> getBusinessesBusinessIdPromosOffersResource();
    std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosResource> getBusinessesBusinessIdPromosResource();
    std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersUpdateResource> getBusinessesBusinessIdPromosOffersUpdateResource();

    void setResource(std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersDeleteResource> resource);
    void setResource(std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersResource> resource);
    void setResource(std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosResource> resource);
    void setResource(std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersUpdateResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setPromosApiBusinessesBusinessIdPromosOffersDeleteResource(std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersDeleteResource> spPromosApiBusinessesBusinessIdPromosOffersDeleteResource);
    [[deprecated("use setResource()")]]
    virtual void setPromosApiBusinessesBusinessIdPromosOffersResource(std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersResource> spPromosApiBusinessesBusinessIdPromosOffersResource);
    [[deprecated("use setResource()")]]
    virtual void setPromosApiBusinessesBusinessIdPromosResource(std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosResource> spPromosApiBusinessesBusinessIdPromosResource);
    [[deprecated("use setResource()")]]
    virtual void setPromosApiBusinessesBusinessIdPromosOffersUpdateResource(std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersUpdateResource> spPromosApiBusinessesBusinessIdPromosOffersUpdateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersDeleteResource> m_spBusinessesBusinessIdPromosOffersDeleteResource;
    std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersResource> m_spBusinessesBusinessIdPromosOffersResource;
    std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosResource> m_spBusinessesBusinessIdPromosResource;
    std::shared_ptr<PromosApiResources::BusinessesBusinessIdPromosOffersUpdateResource> m_spBusinessesBusinessIdPromosOffersUpdateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* PromosApi_H_ */

