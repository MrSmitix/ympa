/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "BusinessOfferMappingsApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string BusinessOfferMappingsApi::base = "";

BusinessOfferMappingsApi::BusinessOfferMappingsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void BusinessOfferMappingsApi::init() {
    setupRoutes();
}

void BusinessOfferMappingsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(*router, base + "/businesses/:businessId/offer-mappings/archive", Routes::bind(&BusinessOfferMappingsApi::add_offers_to_archive_handler, this));
    Routes::Post(*router, base + "/businesses/:businessId/offer-mappings/delete", Routes::bind(&BusinessOfferMappingsApi::delete_offers_handler, this));
    Routes::Post(*router, base + "/businesses/:businessId/offer-mappings/unarchive", Routes::bind(&BusinessOfferMappingsApi::delete_offers_from_archive_handler, this));
    Routes::Post(*router, base + "/businesses/:businessId/offer-mappings", Routes::bind(&BusinessOfferMappingsApi::get_offer_mappings_handler, this));
    Routes::Post(*router, base + "/businesses/:businessId/offer-mappings/suggestions", Routes::bind(&BusinessOfferMappingsApi::get_suggested_offer_mappings_handler, this));
    Routes::Post(*router, base + "/businesses/:businessId/offer-mappings/update", Routes::bind(&BusinessOfferMappingsApi::update_offer_mappings_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&BusinessOfferMappingsApi::business_offer_mappings_api_default_handler, this));
}

void BusinessOfferMappingsApi::handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleParsingException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> BusinessOfferMappingsApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

void BusinessOfferMappingsApi::handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleOperationException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> BusinessOfferMappingsApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void BusinessOfferMappingsApi::add_offers_to_archive_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto businessId = request.param(":businessId").as<int64_t>();
    
    // Getting the body param
    
    AddOffersToArchiveRequest addOffersToArchiveRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(addOffersToArchiveRequest);
        addOffersToArchiveRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->add_offers_to_archive(businessId, addOffersToArchiveRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BusinessOfferMappingsApi::delete_offers_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto businessId = request.param(":businessId").as<int64_t>();
    
    // Getting the body param
    
    DeleteOffersRequest deleteOffersRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(deleteOffersRequest);
        deleteOffersRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->delete_offers(businessId, deleteOffersRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BusinessOfferMappingsApi::delete_offers_from_archive_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto businessId = request.param(":businessId").as<int64_t>();
    
    // Getting the body param
    
    DeleteOffersFromArchiveRequest deleteOffersFromArchiveRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(deleteOffersFromArchiveRequest);
        deleteOffersFromArchiveRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->delete_offers_from_archive(businessId, deleteOffersFromArchiveRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BusinessOfferMappingsApi::get_offer_mappings_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto businessId = request.param(":businessId").as<int64_t>();
    
    // Getting the body param
    
    GetOfferMappingsRequest getOfferMappingsRequest;
    
    // Getting the query params
    auto pageTokenQuery = request.query().get("page_token");
    std::optional<std::string> pageToken;
    if(pageTokenQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(pageTokenQuery.value(), valueQuery_instance)){
            pageToken = valueQuery_instance;
        }
    }
    auto limitQuery = request.query().get("limit");
    std::optional<int32_t> limit;
    if(limitQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(limitQuery.value(), valueQuery_instance)){
            limit = valueQuery_instance;
        }
    }
    
    try {
        nlohmann::json::parse(request.body()).get_to(getOfferMappingsRequest);
        getOfferMappingsRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->get_offer_mappings(businessId, pageToken, limit, getOfferMappingsRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BusinessOfferMappingsApi::get_suggested_offer_mappings_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto businessId = request.param(":businessId").as<int64_t>();
    
    // Getting the body param
    
    GetSuggestedOfferMappingsRequest getSuggestedOfferMappingsRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(getSuggestedOfferMappingsRequest);
        getSuggestedOfferMappingsRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->get_suggested_offer_mappings(businessId, getSuggestedOfferMappingsRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BusinessOfferMappingsApi::update_offer_mappings_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto businessId = request.param(":businessId").as<int64_t>();
    
    // Getting the body param
    
    UpdateOfferMappingsRequest updateOfferMappingsRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(updateOfferMappingsRequest);
        updateOfferMappingsRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->update_offer_mappings(businessId, updateOfferMappingsRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void BusinessOfferMappingsApi::business_offer_mappings_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

