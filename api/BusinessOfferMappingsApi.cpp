/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "BusinessOfferMappingsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

BusinessOfferMappingsApiException::BusinessOfferMappingsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int BusinessOfferMappingsApiException::getStatus() const
{
    return m_status;
}
const char* BusinessOfferMappingsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/archive/");
	this->set_method_handler("POST",
		std::bind(&BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handler_POST_internal, this,
			std::placeholders::_1));
}

BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::~BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource()
{
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto addOffersToArchiveRequest = extractJsonModelBodyParam<AddOffersToArchiveRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<AddOffersToArchiveResponse> resultObject = std::make_shared<AddOffersToArchiveResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, addOffersToArchiveRequest);
    }
    catch(const BusinessOfferMappingsApiException& e) {
        std::tie(status_code, result) = handleBusinessOfferMappingsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<AddOffersToArchiveResponse>> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<AddOffersToArchiveRequest> const & addOffersToArchiveRequest)
{
    throw BusinessOfferMappingsApiException(501, "Not implemented");
}


std::string BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/delete/");
	this->set_method_handler("POST",
		std::bind(&BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::~BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource()
{
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteOffersRequest = extractJsonModelBodyParam<DeleteOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<DeleteOffersResponse> resultObject = std::make_shared<DeleteOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, deleteOffersRequest);
    }
    catch(const BusinessOfferMappingsApiException& e) {
        std::tie(status_code, result) = handleBusinessOfferMappingsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<DeleteOffersResponse>> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteOffersRequest> const & deleteOffersRequest)
{
    throw BusinessOfferMappingsApiException(501, "Not implemented");
}


std::string BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/unarchive/");
	this->set_method_handler("POST",
		std::bind(&BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handler_POST_internal, this,
			std::placeholders::_1));
}

BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::~BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource()
{
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteOffersFromArchiveRequest = extractJsonModelBodyParam<DeleteOffersFromArchiveRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<DeleteOffersFromArchiveResponse> resultObject = std::make_shared<DeleteOffersFromArchiveResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, deleteOffersFromArchiveRequest);
    }
    catch(const BusinessOfferMappingsApiException& e) {
        std::tie(status_code, result) = handleBusinessOfferMappingsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<DeleteOffersFromArchiveResponse>> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteOffersFromArchiveRequest> const & deleteOffersFromArchiveRequest)
{
    throw BusinessOfferMappingsApiException(501, "Not implemented");
}


std::string BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/");
	this->set_method_handler("POST",
		std::bind(&BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::~BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource()
{
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getOfferMappingsRequest = extractJsonModelBodyParam<GetOfferMappingsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOfferMappingsResponse> resultObject = std::make_shared<GetOfferMappingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, pageToken, limit, getOfferMappingsRequest);
    }
    catch(const BusinessOfferMappingsApiException& e) {
        std::tie(status_code, result) = handleBusinessOfferMappingsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о товарах в каталоге." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOfferMappingsResponse>> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOfferMappingsRequest> const & getOfferMappingsRequest)
{
    throw BusinessOfferMappingsApiException(501, "Not implemented");
}


std::string BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/suggestions/");
	this->set_method_handler("POST",
		std::bind(&BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::~BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource()
{
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getSuggestedOfferMappingsRequest = extractJsonModelBodyParam<GetSuggestedOfferMappingsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetSuggestedOfferMappingsResponse> resultObject = std::make_shared<GetSuggestedOfferMappingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getSuggestedOfferMappingsRequest);
    }
    catch(const BusinessOfferMappingsApiException& e) {
        std::tie(status_code, result) = handleBusinessOfferMappingsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetSuggestedOfferMappingsResponse>> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetSuggestedOfferMappingsRequest> const & getSuggestedOfferMappingsRequest)
{
    throw BusinessOfferMappingsApiException(501, "Not implemented");
}


std::string BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/update/");
	this->set_method_handler("POST",
		std::bind(&BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::~BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource()
{
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOfferMappingsRequest = extractJsonModelBodyParam<UpdateOfferMappingsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<UpdateOfferMappingsResponse> resultObject = std::make_shared<UpdateOfferMappingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updateOfferMappingsRequest);
    }
    catch(const BusinessOfferMappingsApiException& e) {
        std::tie(status_code, result) = handleBusinessOfferMappingsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateOfferMappingsResponse>> BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateOfferMappingsRequest> const & updateOfferMappingsRequest)
{
    throw BusinessOfferMappingsApiException(501, "Not implemented");
}


std::string BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

BusinessOfferMappingsApi::BusinessOfferMappingsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

BusinessOfferMappingsApi::~BusinessOfferMappingsApi() {}

void BusinessOfferMappingsApi::setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource(std::shared_ptr<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource) {
    m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource = spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource;
    m_service->publish(m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource);
}
void BusinessOfferMappingsApi::setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource(std::shared_ptr<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource) {
    m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource = spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource;
    m_service->publish(m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource);
}
void BusinessOfferMappingsApi::setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(std::shared_ptr<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource) {
    m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource = spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource;
    m_service->publish(m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource);
}
void BusinessOfferMappingsApi::setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource(std::shared_ptr<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource) {
    m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource = spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource;
    m_service->publish(m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource);
}
void BusinessOfferMappingsApi::setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(std::shared_ptr<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource) {
    m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource = spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource;
    m_service->publish(m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource);
}
void BusinessOfferMappingsApi::setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource(std::shared_ptr<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource) {
    m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource = spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource;
    m_service->publish(m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource);
}


void BusinessOfferMappingsApi::publishDefaultResources() {
    if (!m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource) {
        setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource(std::make_shared<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsArchiveResource>());
    }
    if (!m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource) {
        setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource(std::make_shared<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsDeleteResource>());
    }
    if (!m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource) {
        setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(std::make_shared<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource>());
    }
    if (!m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource) {
        setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource(std::make_shared<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsResource>());
    }
    if (!m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource) {
        setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(std::make_shared<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource>());
    }
    if (!m_spBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource) {
        setBusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource(std::make_shared<BusinessOfferMappingsApiBusinessesBusinessIdOffer-mappingsUpdateResource>());
    }
}

std::shared_ptr<restbed::Service> BusinessOfferMappingsApi::service() {
    return m_service;
}


}
}
}
}

