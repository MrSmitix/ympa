/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatsApi.h
 *
 * 
 */

#ifndef ChatsApi_H_
#define ChatsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "CreateChatRequest.h"
#include "CreateChatResponse.h"
#include "EmptyApiResponse.h"
#include "GetChatHistoryRequest.h"
#include "GetChatHistoryResponse.h"
#include "GetChatsRequest.h"
#include "GetChatsResponse.h"
#include "SendMessageToChatRequest.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ChatsApiException: public std::exception
{
public:
    ChatsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace ChatsApiResources {
/// <summary>
/// Создание нового чата с покупателем
/// </summary>
/// <remarks>
/// Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdChatsNewResource: public restbed::Resource
{
public:
    BusinessesBusinessIdChatsNewResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdChatsNewResource() = default;

    BusinessesBusinessIdChatsNewResource(
        const BusinessesBusinessIdChatsNewResource& other) = default; // copy constructor
    BusinessesBusinessIdChatsNewResource(BusinessesBusinessIdChatsNewResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdChatsNewResource& operator=(const BusinessesBusinessIdChatsNewResource& other) = default; // copy assignment
    BusinessesBusinessIdChatsNewResource& operator=(BusinessesBusinessIdChatsNewResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateChatResponse>(
        int64_t & businessId, CreateChatRequest & createChatRequest)> handler_POST_func =
            [](int64_t &, CreateChatRequest &) -> std::pair<int, CreateChatResponse>
                { throw ChatsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateChatResponse> handler_POST(
        int64_t & businessId, CreateChatRequest & createChatRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleChatsApiException(const ChatsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение истории сообщений в чате
/// </summary>
/// <remarks>
/// Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdChatsHistoryResource: public restbed::Resource
{
public:
    BusinessesBusinessIdChatsHistoryResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdChatsHistoryResource() = default;

    BusinessesBusinessIdChatsHistoryResource(
        const BusinessesBusinessIdChatsHistoryResource& other) = default; // copy constructor
    BusinessesBusinessIdChatsHistoryResource(BusinessesBusinessIdChatsHistoryResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdChatsHistoryResource& operator=(const BusinessesBusinessIdChatsHistoryResource& other) = default; // copy assignment
    BusinessesBusinessIdChatsHistoryResource& operator=(BusinessesBusinessIdChatsHistoryResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetChatHistoryResponse>(
        int64_t & businessId, int64_t & chatId, GetChatHistoryRequest & getChatHistoryRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, int64_t &, GetChatHistoryRequest &, std::string &, int32_t &) -> std::pair<int, GetChatHistoryResponse>
                { throw ChatsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetChatHistoryResponse> handler_POST(
        int64_t & businessId, int64_t & chatId, GetChatHistoryRequest & getChatHistoryRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleChatsApiException(const ChatsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение доступных чатов
/// </summary>
/// <remarks>
/// Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdChatsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdChatsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdChatsResource() = default;

    BusinessesBusinessIdChatsResource(
        const BusinessesBusinessIdChatsResource& other) = default; // copy constructor
    BusinessesBusinessIdChatsResource(BusinessesBusinessIdChatsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdChatsResource& operator=(const BusinessesBusinessIdChatsResource& other) = default; // copy assignment
    BusinessesBusinessIdChatsResource& operator=(BusinessesBusinessIdChatsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetChatsResponse>(
        int64_t & businessId, GetChatsRequest & getChatsRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetChatsRequest &, std::string &, int32_t &) -> std::pair<int, GetChatsResponse>
                { throw ChatsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetChatsResponse> handler_POST(
        int64_t & businessId, GetChatsRequest & getChatsRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleChatsApiException(const ChatsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отправка файла в чат
/// </summary>
/// <remarks>
/// Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdChatsFileSendResource: public restbed::Resource
{
public:
    BusinessesBusinessIdChatsFileSendResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdChatsFileSendResource() = default;

    BusinessesBusinessIdChatsFileSendResource(
        const BusinessesBusinessIdChatsFileSendResource& other) = default; // copy constructor
    BusinessesBusinessIdChatsFileSendResource(BusinessesBusinessIdChatsFileSendResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdChatsFileSendResource& operator=(const BusinessesBusinessIdChatsFileSendResource& other) = default; // copy assignment
    BusinessesBusinessIdChatsFileSendResource& operator=(BusinessesBusinessIdChatsFileSendResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, int64_t & chatId, std::string & file)> handler_POST_func =
            [](int64_t &, int64_t &, std::string &) -> std::pair<int, EmptyApiResponse>
                { throw ChatsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, int64_t & chatId, std::string & file);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleChatsApiException(const ChatsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отправка сообщения в чат
/// </summary>
/// <remarks>
/// Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdChatsMessageResource: public restbed::Resource
{
public:
    BusinessesBusinessIdChatsMessageResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdChatsMessageResource() = default;

    BusinessesBusinessIdChatsMessageResource(
        const BusinessesBusinessIdChatsMessageResource& other) = default; // copy constructor
    BusinessesBusinessIdChatsMessageResource(BusinessesBusinessIdChatsMessageResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdChatsMessageResource& operator=(const BusinessesBusinessIdChatsMessageResource& other) = default; // copy assignment
    BusinessesBusinessIdChatsMessageResource& operator=(BusinessesBusinessIdChatsMessageResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, int64_t & chatId, SendMessageToChatRequest & sendMessageToChatRequest)> handler_POST_func =
            [](int64_t &, int64_t &, SendMessageToChatRequest &) -> std::pair<int, EmptyApiResponse>
                { throw ChatsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, int64_t & chatId, SendMessageToChatRequest & sendMessageToChatRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleChatsApiException(const ChatsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace ChatsApiResources */

using ChatsApiBusinessesBusinessIdChatsNewResource [[deprecated]] = ChatsApiResources::BusinessesBusinessIdChatsNewResource;
using ChatsApiBusinessesBusinessIdChatsHistoryResource [[deprecated]] = ChatsApiResources::BusinessesBusinessIdChatsHistoryResource;
using ChatsApiBusinessesBusinessIdChatsResource [[deprecated]] = ChatsApiResources::BusinessesBusinessIdChatsResource;
using ChatsApiBusinessesBusinessIdChatsFileSendResource [[deprecated]] = ChatsApiResources::BusinessesBusinessIdChatsFileSendResource;
using ChatsApiBusinessesBusinessIdChatsMessageResource [[deprecated]] = ChatsApiResources::BusinessesBusinessIdChatsMessageResource;

//
// The restbed service to actually implement the REST server
//
class  ChatsApi
{
public:
    explicit ChatsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ChatsApi();

    std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsNewResource> getBusinessesBusinessIdChatsNewResource();
    std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsHistoryResource> getBusinessesBusinessIdChatsHistoryResource();
    std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsResource> getBusinessesBusinessIdChatsResource();
    std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsFileSendResource> getBusinessesBusinessIdChatsFileSendResource();
    std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsMessageResource> getBusinessesBusinessIdChatsMessageResource();

    void setResource(std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsNewResource> resource);
    void setResource(std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsHistoryResource> resource);
    void setResource(std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsResource> resource);
    void setResource(std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsFileSendResource> resource);
    void setResource(std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsMessageResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setChatsApiBusinessesBusinessIdChatsNewResource(std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsNewResource> spChatsApiBusinessesBusinessIdChatsNewResource);
    [[deprecated("use setResource()")]]
    virtual void setChatsApiBusinessesBusinessIdChatsHistoryResource(std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsHistoryResource> spChatsApiBusinessesBusinessIdChatsHistoryResource);
    [[deprecated("use setResource()")]]
    virtual void setChatsApiBusinessesBusinessIdChatsResource(std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsResource> spChatsApiBusinessesBusinessIdChatsResource);
    [[deprecated("use setResource()")]]
    virtual void setChatsApiBusinessesBusinessIdChatsFileSendResource(std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsFileSendResource> spChatsApiBusinessesBusinessIdChatsFileSendResource);
    [[deprecated("use setResource()")]]
    virtual void setChatsApiBusinessesBusinessIdChatsMessageResource(std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsMessageResource> spChatsApiBusinessesBusinessIdChatsMessageResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsNewResource> m_spBusinessesBusinessIdChatsNewResource;
    std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsHistoryResource> m_spBusinessesBusinessIdChatsHistoryResource;
    std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsResource> m_spBusinessesBusinessIdChatsResource;
    std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsFileSendResource> m_spBusinessesBusinessIdChatsFileSendResource;
    std::shared_ptr<ChatsApiResources::BusinessesBusinessIdChatsMessageResource> m_spBusinessesBusinessIdChatsMessageResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ChatsApi_H_ */

