/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatsApi.h
 *
 * 
 */

#ifndef ChatsApi_H_
#define ChatsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "CreateChatRequest.h"
#include "CreateChatResponse.h"
#include "EmptyApiResponse.h"
#include "GetChatHistoryRequest.h"
#include "GetChatHistoryResponse.h"
#include "GetChatsRequest.h"
#include "GetChatsResponse.h"
#include "SendMessageToChatRequest.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ChatsApiException: public std::exception
{
public:
    ChatsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Создание нового чата с покупателем
/// </summary>
/// <remarks>
/// Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  ChatsApiBusinessesBusinessIdChatsNewResource: public restbed::Resource
{
public:
    ChatsApiBusinessesBusinessIdChatsNewResource(const std::string& context = "");
    virtual ~ChatsApiBusinessesBusinessIdChatsNewResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<CreateChatResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<CreateChatRequest> const & createChatRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleChatsApiException(const ChatsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение истории сообщений в чате
/// </summary>
/// <remarks>
/// Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  ChatsApiBusinessesBusinessIdChatsHistoryResource: public restbed::Resource
{
public:
    ChatsApiBusinessesBusinessIdChatsHistoryResource(const std::string& context = "");
    virtual ~ChatsApiBusinessesBusinessIdChatsHistoryResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetChatHistoryResponse>> handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::shared_ptr<GetChatHistoryRequest> const & getChatHistoryRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual int64_t getQueryParam_chatId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chatId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleChatsApiException(const ChatsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение доступных чатов
/// </summary>
/// <remarks>
/// Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  ChatsApiBusinessesBusinessIdChatsResource: public restbed::Resource
{
public:
    ChatsApiBusinessesBusinessIdChatsResource(const std::string& context = "");
    virtual ~ChatsApiBusinessesBusinessIdChatsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetChatsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetChatsRequest> const & getChatsRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleChatsApiException(const ChatsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отправка файла в чат
/// </summary>
/// <remarks>
/// Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  ChatsApiBusinessesBusinessIdChatsFileSendResource: public restbed::Resource
{
public:
    ChatsApiBusinessesBusinessIdChatsFileSendResource(const std::string& context = "");
    virtual ~ChatsApiBusinessesBusinessIdChatsFileSendResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::string const & file);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual int64_t getQueryParam_chatId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chatId", 0L);
    }



    virtual std::pair<int, std::string> handleChatsApiException(const ChatsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отправка сообщения в чат
/// </summary>
/// <remarks>
/// Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  ChatsApiBusinessesBusinessIdChatsMessageResource: public restbed::Resource
{
public:
    ChatsApiBusinessesBusinessIdChatsMessageResource(const std::string& context = "");
    virtual ~ChatsApiBusinessesBusinessIdChatsMessageResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::shared_ptr<SendMessageToChatRequest> const & sendMessageToChatRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual int64_t getQueryParam_chatId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chatId", 0L);
    }



    virtual std::pair<int, std::string> handleChatsApiException(const ChatsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  ChatsApi
{
public:
    explicit ChatsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ChatsApi();

    virtual void setChatsApiBusinessesBusinessIdChatsNewResource(std::shared_ptr<ChatsApiBusinessesBusinessIdChatsNewResource> spChatsApiBusinessesBusinessIdChatsNewResource);
    virtual void setChatsApiBusinessesBusinessIdChatsHistoryResource(std::shared_ptr<ChatsApiBusinessesBusinessIdChatsHistoryResource> spChatsApiBusinessesBusinessIdChatsHistoryResource);
    virtual void setChatsApiBusinessesBusinessIdChatsResource(std::shared_ptr<ChatsApiBusinessesBusinessIdChatsResource> spChatsApiBusinessesBusinessIdChatsResource);
    virtual void setChatsApiBusinessesBusinessIdChatsFileSendResource(std::shared_ptr<ChatsApiBusinessesBusinessIdChatsFileSendResource> spChatsApiBusinessesBusinessIdChatsFileSendResource);
    virtual void setChatsApiBusinessesBusinessIdChatsMessageResource(std::shared_ptr<ChatsApiBusinessesBusinessIdChatsMessageResource> spChatsApiBusinessesBusinessIdChatsMessageResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ChatsApiBusinessesBusinessIdChatsNewResource> m_spChatsApiBusinessesBusinessIdChatsNewResource;
    std::shared_ptr<ChatsApiBusinessesBusinessIdChatsHistoryResource> m_spChatsApiBusinessesBusinessIdChatsHistoryResource;
    std::shared_ptr<ChatsApiBusinessesBusinessIdChatsResource> m_spChatsApiBusinessesBusinessIdChatsResource;
    std::shared_ptr<ChatsApiBusinessesBusinessIdChatsFileSendResource> m_spChatsApiBusinessesBusinessIdChatsFileSendResource;
    std::shared_ptr<ChatsApiBusinessesBusinessIdChatsMessageResource> m_spChatsApiBusinessesBusinessIdChatsMessageResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ChatsApi_H_ */

