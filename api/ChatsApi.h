/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ChatsApi.h
 *
 * 
 */

#ifndef ChatsApi_H_
#define ChatsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "CreateChatRequest.h"
#include "CreateChatResponse.h"
#include "EmptyApiResponse.h"
#include "GetChatHistoryRequest.h"
#include "GetChatHistoryResponse.h"
#include "GetChatsRequest.h"
#include "GetChatsResponse.h"
#include "SendMessageToChatRequest.h"
#include <string>

namespace org::openapitools::server::api
{

class  ChatsApi : public ApiBase {
public:
    explicit ChatsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~ChatsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void create_chat_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_chat_history_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_chats_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void send_file_to_chat_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void send_message_to_chat_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void chats_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Создание нового чата с покупателем
    /// </summary>
    /// <remarks>
    /// Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="createChatRequest">description</param>
    virtual void create_chat(const int64_t &businessId, const org::openapitools::server::model::CreateChatRequest &createChatRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Получение истории сообщений в чате
    /// </summary>
    /// <remarks>
    /// Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    /// </remarks>
    /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="chatId">Идентификатор чата.</param>
    /// <param name="getChatHistoryRequest">description</param>
    /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional, default to &quot;&quot;)</param>
    /// <param name="limit">Количество значений на одной странице.  (optional, default to 0)</param>
    virtual void get_chat_history(const int64_t &businessId, const std::optional<int64_t> &chatId, const org::openapitools::server::model::GetChatHistoryRequest &getChatHistoryRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Получение доступных чатов
    /// </summary>
    /// <remarks>
    /// Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    /// </remarks>
    /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="getChatsRequest">description</param>
    /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional, default to &quot;&quot;)</param>
    /// <param name="limit">Количество значений на одной странице.  (optional, default to 0)</param>
    virtual void get_chats(const int64_t &businessId, const org::openapitools::server::model::GetChatsRequest &getChatsRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отправка файла в чат
    /// </summary>
    /// <remarks>
    /// Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    virtual void send_file_to_chat(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Отправка сообщения в чат
    /// </summary>
    /// <remarks>
    /// Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="chatId">Идентификатор чата.</param>
    /// <param name="sendMessageToChatRequest">description</param>
    virtual void send_message_to_chat(const int64_t &businessId, const std::optional<int64_t> &chatId, const org::openapitools::server::model::SendMessageToChatRequest &sendMessageToChatRequest, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* ChatsApi_H_ */

