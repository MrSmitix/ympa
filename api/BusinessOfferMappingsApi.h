/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BusinessOfferMappingsApi.h
 *
 * 
 */

#ifndef BusinessOfferMappingsApi_H_
#define BusinessOfferMappingsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AddOffersToArchiveRequest.h"
#include "AddOffersToArchiveResponse.h"
#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "DeleteOffersFromArchiveRequest.h"
#include "DeleteOffersFromArchiveResponse.h"
#include "DeleteOffersRequest.h"
#include "DeleteOffersResponse.h"
#include "GetOfferMappingsRequest.h"
#include "GetOfferMappingsResponse.h"
#include "GetSuggestedOfferMappingsRequest.h"
#include "GetSuggestedOfferMappingsResponse.h"
#include "UpdateOfferMappingsRequest.h"
#include "UpdateOfferMappingsResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BusinessOfferMappingsApiException: public std::exception
{
public:
    BusinessOfferMappingsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace BusinessOfferMappingsApiResources {
/// <summary>
/// Добавление товаров в архив
/// </summary>
/// <remarks>
/// Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \&quot;В архив нельзя отправить товар, который хранится на складе Маркета\&quot; %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsArchiveResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsArchiveResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsArchiveResource() = default;

    BusinessesBusinessIdOffer_mappingsArchiveResource(
        const BusinessesBusinessIdOffer_mappingsArchiveResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsArchiveResource(BusinessesBusinessIdOffer_mappingsArchiveResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsArchiveResource& operator=(const BusinessesBusinessIdOffer_mappingsArchiveResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsArchiveResource& operator=(BusinessesBusinessIdOffer_mappingsArchiveResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AddOffersToArchiveResponse>(
        int64_t & businessId, AddOffersToArchiveRequest & addOffersToArchiveRequest)> handler_POST_func =
            [](int64_t &, AddOffersToArchiveRequest &) -> std::pair<int, AddOffersToArchiveResponse>
                { throw BusinessOfferMappingsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AddOffersToArchiveResponse> handler_POST(
        int64_t & businessId, AddOffersToArchiveRequest & addOffersToArchiveRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление товаров из каталога
/// </summary>
/// <remarks>
/// Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsDeleteResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsDeleteResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsDeleteResource() = default;

    BusinessesBusinessIdOffer_mappingsDeleteResource(
        const BusinessesBusinessIdOffer_mappingsDeleteResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsDeleteResource(BusinessesBusinessIdOffer_mappingsDeleteResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsDeleteResource& operator=(const BusinessesBusinessIdOffer_mappingsDeleteResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsDeleteResource& operator=(BusinessesBusinessIdOffer_mappingsDeleteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteOffersResponse>(
        int64_t & businessId, DeleteOffersRequest & deleteOffersRequest)> handler_POST_func =
            [](int64_t &, DeleteOffersRequest &) -> std::pair<int, DeleteOffersResponse>
                { throw BusinessOfferMappingsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteOffersResponse> handler_POST(
        int64_t & businessId, DeleteOffersRequest & deleteOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление товаров из архива
/// </summary>
/// <remarks>
/// Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsUnarchiveResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsUnarchiveResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsUnarchiveResource() = default;

    BusinessesBusinessIdOffer_mappingsUnarchiveResource(
        const BusinessesBusinessIdOffer_mappingsUnarchiveResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsUnarchiveResource(BusinessesBusinessIdOffer_mappingsUnarchiveResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsUnarchiveResource& operator=(const BusinessesBusinessIdOffer_mappingsUnarchiveResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsUnarchiveResource& operator=(BusinessesBusinessIdOffer_mappingsUnarchiveResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteOffersFromArchiveResponse>(
        int64_t & businessId, DeleteOffersFromArchiveRequest & deleteOffersFromArchiveRequest)> handler_POST_func =
            [](int64_t &, DeleteOffersFromArchiveRequest &) -> std::pair<int, DeleteOffersFromArchiveResponse>
                { throw BusinessOfferMappingsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteOffersFromArchiveResponse> handler_POST(
        int64_t & businessId, DeleteOffersFromArchiveRequest & deleteOffersFromArchiveRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о товарах в каталоге
/// </summary>
/// <remarks>
/// Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsResource() = default;

    BusinessesBusinessIdOffer_mappingsResource(
        const BusinessesBusinessIdOffer_mappingsResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsResource(BusinessesBusinessIdOffer_mappingsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsResource& operator=(const BusinessesBusinessIdOffer_mappingsResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsResource& operator=(BusinessesBusinessIdOffer_mappingsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOfferMappingsResponse>(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetOfferMappingsRequest & getOfferMappingsRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetOfferMappingsRequest &) -> std::pair<int, GetOfferMappingsResponse>
                { throw BusinessOfferMappingsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOfferMappingsResponse> handler_POST(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetOfferMappingsRequest & getOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Просмотр карточек на Маркете, которые подходят вашим товарам
/// </summary>
/// <remarks>
/// Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида &#x60;https://market.yandex.ru/product/&lt;marketModelId&gt;?sku&#x3D;&lt;marketSku&gt;&#x60;. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать &#x60;marketSKU&#x60;, который ему подходит по вашему мнению.  {% note info \&quot;𝓠 Как определить &#x60;marketSku&#x60; товара, найденного на Маркете?\&quot; %}  𝓐 Он есть в адресе страницы товара — расположен после &#x60;sku&#x3D;&#x60;.  Например, &#x60;https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016&#x60;  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsSuggestionsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsSuggestionsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsSuggestionsResource() = default;

    BusinessesBusinessIdOffer_mappingsSuggestionsResource(
        const BusinessesBusinessIdOffer_mappingsSuggestionsResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsSuggestionsResource(BusinessesBusinessIdOffer_mappingsSuggestionsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsSuggestionsResource& operator=(const BusinessesBusinessIdOffer_mappingsSuggestionsResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsSuggestionsResource& operator=(BusinessesBusinessIdOffer_mappingsSuggestionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetSuggestedOfferMappingsResponse>(
        int64_t & businessId, GetSuggestedOfferMappingsRequest & getSuggestedOfferMappingsRequest)> handler_POST_func =
            [](int64_t &, GetSuggestedOfferMappingsRequest &) -> std::pair<int, GetSuggestedOfferMappingsResponse>
                { throw BusinessOfferMappingsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetSuggestedOfferMappingsResponse> handler_POST(
        int64_t & businessId, GetSuggestedOfferMappingsRequest & getSuggestedOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Добавление товаров в каталог и изменение информации о них
/// </summary>
/// <remarks>
/// Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле &#x60;marketSKU&#x60;.  Для **новых товаров** обязательно укажите параметры: &#x60;offerId&#x60;, &#x60;name&#x60;, &#x60;marketCategoryId&#x60; или &#x60;category&#x60;, &#x60;pictures&#x60;, &#x60;vendor&#x60;, &#x60;description&#x60;.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в &#x60;offerId&#x60; соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  Параметр &#x60;offerId&#x60; должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \&quot;Правила использования SKU\&quot; %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  BusinessesBusinessIdOffer_mappingsUpdateResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffer_mappingsUpdateResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffer_mappingsUpdateResource() = default;

    BusinessesBusinessIdOffer_mappingsUpdateResource(
        const BusinessesBusinessIdOffer_mappingsUpdateResource& other) = default; // copy constructor
    BusinessesBusinessIdOffer_mappingsUpdateResource(BusinessesBusinessIdOffer_mappingsUpdateResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffer_mappingsUpdateResource& operator=(const BusinessesBusinessIdOffer_mappingsUpdateResource& other) = default; // copy assignment
    BusinessesBusinessIdOffer_mappingsUpdateResource& operator=(BusinessesBusinessIdOffer_mappingsUpdateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdateOfferMappingsResponse>(
        int64_t & businessId, UpdateOfferMappingsRequest & updateOfferMappingsRequest)> handler_POST_func =
            [](int64_t &, UpdateOfferMappingsRequest &) -> std::pair<int, UpdateOfferMappingsResponse>
                { throw BusinessOfferMappingsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdateOfferMappingsResponse> handler_POST(
        int64_t & businessId, UpdateOfferMappingsRequest & updateOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessOfferMappingsApiException(const BusinessOfferMappingsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace BusinessOfferMappingsApiResources */

using BusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsArchiveResource [[deprecated]] = BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsArchiveResource;
using BusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsDeleteResource [[deprecated]] = BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsDeleteResource;
using BusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsUnarchiveResource [[deprecated]] = BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsUnarchiveResource;
using BusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsResource [[deprecated]] = BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsResource;
using BusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsSuggestionsResource [[deprecated]] = BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsSuggestionsResource;
using BusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsUpdateResource [[deprecated]] = BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsUpdateResource;

//
// The restbed service to actually implement the REST server
//
class  BusinessOfferMappingsApi
{
public:
    explicit BusinessOfferMappingsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~BusinessOfferMappingsApi();

    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsArchiveResource> getBusinessesBusinessIdOffer_mappingsArchiveResource();
    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsDeleteResource> getBusinessesBusinessIdOffer_mappingsDeleteResource();
    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsUnarchiveResource> getBusinessesBusinessIdOffer_mappingsUnarchiveResource();
    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsResource> getBusinessesBusinessIdOffer_mappingsResource();
    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsSuggestionsResource> getBusinessesBusinessIdOffer_mappingsSuggestionsResource();
    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsUpdateResource> getBusinessesBusinessIdOffer_mappingsUpdateResource();

    void setResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsArchiveResource> resource);
    void setResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsDeleteResource> resource);
    void setResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsUnarchiveResource> resource);
    void setResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsResource> resource);
    void setResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsSuggestionsResource> resource);
    void setResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsUpdateResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsArchiveResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsArchiveResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsArchiveResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsDeleteResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsDeleteResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsDeleteResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsUnarchiveResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsUnarchiveResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsUnarchiveResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsSuggestionsResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsSuggestionsResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsSuggestionsResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsUpdateResource(std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsUpdateResource> spBusinessOfferMappingsApiBusinessesBusinessIdOffer_mappingsUpdateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsArchiveResource> m_spBusinessesBusinessIdOffer_mappingsArchiveResource;
    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsDeleteResource> m_spBusinessesBusinessIdOffer_mappingsDeleteResource;
    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsUnarchiveResource> m_spBusinessesBusinessIdOffer_mappingsUnarchiveResource;
    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsResource> m_spBusinessesBusinessIdOffer_mappingsResource;
    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsSuggestionsResource> m_spBusinessesBusinessIdOffer_mappingsSuggestionsResource;
    std::shared_ptr<BusinessOfferMappingsApiResources::BusinessesBusinessIdOffer_mappingsUpdateResource> m_spBusinessesBusinessIdOffer_mappingsUpdateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BusinessOfferMappingsApi_H_ */

