/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OutletsApi.h
 *
 * 
 */

#ifndef OutletsApi_H_
#define OutletsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "ChangeOutletRequest.h"
#include "CreateOutletResponse.h"
#include "EmptyApiResponse.h"
#include "GetOutletResponse.h"
#include "GetOutletsResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OutletsApiException: public std::exception
{
public:
    OutletsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Создание точки продаж
/// </summary>
/// <remarks>
/// Создает точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
/// </remarks>
class  OutletsApiCampaignsCampaignIdOutletsResource: public restbed::Resource
{
public:
    OutletsApiCampaignsCampaignIdOutletsResource(const std::string& context = "");
    virtual ~OutletsApiCampaignsCampaignIdOutletsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<CreateOutletResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<ChangeOutletRequest> const & changeOutletRequest);

    virtual std::pair<int, std::shared_ptr<GetOutletsResponse>> handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int64_t const & regionId, std::string const & shopOutletCode, int64_t const & regionId2);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }


    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }
    virtual std::string getQueryParam_pageToken_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }
    virtual int64_t getQueryParam_regionId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("regionId", 0L);
    }
    virtual std::string getQueryParam_shopOutletCode_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("shopOutletCode", "");
    }
    virtual int64_t getQueryParam_regionId2_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("regionId2", 0L);
    }

    virtual std::pair<int, std::string> handleOutletsApiException(const OutletsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление точки продаж
/// </summary>
/// <remarks>
/// Удаляет точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
/// </remarks>
class  OutletsApiCampaignsCampaignIdOutletsOutletIdResource: public restbed::Resource
{
public:
    OutletsApiCampaignsCampaignIdOutletsOutletIdResource(const std::string& context = "");
    virtual ~OutletsApiCampaignsCampaignIdOutletsOutletIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_DELETE(
        int64_t const & campaignId, int64_t const & outletId);

    virtual std::pair<int, std::shared_ptr<GetOutletResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & outletId);
    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_PUT(
        int64_t const & campaignId, int64_t const & outletId, std::shared_ptr<ChangeOutletRequest> const & changeOutletRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_outletId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("outletId", 0L);
    }


    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }
    virtual int64_t getPathParam_outletId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("outletId", 0L);
    }
    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }
    virtual int64_t getPathParam_outletId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("outletId", 0L);
    }

    virtual std::pair<int, std::string> handleOutletsApiException(const OutletsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  OutletsApi
{
public:
    explicit OutletsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OutletsApi();

    virtual void setOutletsApiCampaignsCampaignIdOutletsResource(std::shared_ptr<OutletsApiCampaignsCampaignIdOutletsResource> spOutletsApiCampaignsCampaignIdOutletsResource);
    virtual void setOutletsApiCampaignsCampaignIdOutletsOutletIdResource(std::shared_ptr<OutletsApiCampaignsCampaignIdOutletsOutletIdResource> spOutletsApiCampaignsCampaignIdOutletsOutletIdResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OutletsApiCampaignsCampaignIdOutletsResource> m_spOutletsApiCampaignsCampaignIdOutletsResource;
    std::shared_ptr<OutletsApiCampaignsCampaignIdOutletsOutletIdResource> m_spOutletsApiCampaignsCampaignIdOutletsOutletIdResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OutletsApi_H_ */

