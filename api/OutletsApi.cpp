/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "OutletsApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string OutletsApi::base = "";

OutletsApi::OutletsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void OutletsApi::init() {
    setupRoutes();
}

void OutletsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(*router, base + "/campaigns/:campaignId/outlets", Routes::bind(&OutletsApi::create_outlet_handler, this));
    Routes::Delete(*router, base + "/campaigns/:campaignId/outlets/:outletId", Routes::bind(&OutletsApi::delete_outlet_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/outlets/:outletId", Routes::bind(&OutletsApi::get_outlet_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/outlets", Routes::bind(&OutletsApi::get_outlets_handler, this));
    Routes::Put(*router, base + "/campaigns/:campaignId/outlets/:outletId", Routes::bind(&OutletsApi::update_outlet_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&OutletsApi::outlets_api_default_handler, this));
}

void OutletsApi::handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleParsingException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> OutletsApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

void OutletsApi::handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleOperationException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> OutletsApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void OutletsApi::create_outlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    
    // Getting the body param
    
    ChangeOutletRequest changeOutletRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(changeOutletRequest);
        changeOutletRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->create_outlet(campaignId, changeOutletRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void OutletsApi::delete_outlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto outletId = request.param(":outletId").as<int64_t>();
    
    try {
        this->delete_outlet(campaignId, outletId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void OutletsApi::get_outlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto outletId = request.param(":outletId").as<int64_t>();
    
    try {
        this->get_outlet(campaignId, outletId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void OutletsApi::get_outlets_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    
    // Getting the query params
    auto pageTokenQuery = request.query().get("page_token");
    std::optional<std::string> pageToken;
    if(pageTokenQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(pageTokenQuery.value(), valueQuery_instance)){
            pageToken = valueQuery_instance;
        }
    }
    auto regionIdQuery = request.query().get("region_id");
    std::optional<int64_t> regionId;
    if(regionIdQuery.has_value()){
        int64_t valueQuery_instance;
        if(fromStringValue(regionIdQuery.value(), valueQuery_instance)){
            regionId = valueQuery_instance;
        }
    }
    auto shopOutletCodeQuery = request.query().get("shop_outlet_code");
    std::optional<std::string> shopOutletCode;
    if(shopOutletCodeQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(shopOutletCodeQuery.value(), valueQuery_instance)){
            shopOutletCode = valueQuery_instance;
        }
    }
    auto regionId2Query = request.query().get("regionId");
    std::optional<int64_t> regionId2;
    if(regionId2Query.has_value()){
        int64_t valueQuery_instance;
        if(fromStringValue(regionId2Query.value(), valueQuery_instance)){
            regionId2 = valueQuery_instance;
        }
    }
    
    try {
        this->get_outlets(campaignId, pageToken, regionId, shopOutletCode, regionId2, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void OutletsApi::update_outlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto outletId = request.param(":outletId").as<int64_t>();
    
    // Getting the body param
    
    ChangeOutletRequest changeOutletRequest;
    
    try {
        nlohmann::json::parse(request.body()).get_to(changeOutletRequest);
        changeOutletRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->update_outlet(campaignId, outletId, changeOutletRequest, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void OutletsApi::outlets_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

