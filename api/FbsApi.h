/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FbsApi.h
 *
 * 
 */

#ifndef FbsApi_H_
#define FbsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AddHiddenOffersRequest.h"
#include "AddOffersToArchiveRequest.h"
#include "AddOffersToArchiveResponse.h"
#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "CalculateTariffsRequest.h"
#include "CalculateTariffsResponse.h"
#include "ConfirmPricesRequest.h"
#include "ConfirmShipmentRequest.h"
#include "CreateChatRequest.h"
#include "CreateChatResponse.h"
#include "CurrencyType.h"
#include "DeleteCampaignOffersRequest.h"
#include "DeleteCampaignOffersResponse.h"
#include "DeleteGoodsFeedbackCommentRequest.h"
#include "DeleteHiddenOffersRequest.h"
#include "DeleteOffersFromArchiveRequest.h"
#include "DeleteOffersFromArchiveResponse.h"
#include "DeleteOffersRequest.h"
#include "DeleteOffersResponse.h"
#include "DeletePromoOffersRequest.h"
#include "DeletePromoOffersResponse.h"
#include "EmptyApiResponse.h"
#include "FeedIndexLogsStatusType.h"
#include "GenerateBoostConsolidatedRequest.h"
#include "GenerateCompetitorsPositionReportRequest.h"
#include "GenerateGoodsFeedbackRequest.h"
#include "GenerateGoodsRealizationReportRequest.h"
#include "GenerateMassOrderLabelsRequest.h"
#include "GeneratePricesReportRequest.h"
#include "GenerateReportResponse.h"
#include "GenerateShelfsStatisticsRequest.h"
#include "GenerateShipmentListDocumentReportRequest.h"
#include "GenerateShowsSalesReportRequest.h"
#include "GenerateStocksOnWarehousesReportRequest.h"
#include "GenerateUnitedMarketplaceServicesReportRequest.h"
#include "GenerateUnitedNettingReportRequest.h"
#include "GenerateUnitedOrdersRequest.h"
#include "GetAllOffersResponse.h"
#include "GetBidsInfoRequest.h"
#include "GetBidsInfoResponse.h"
#include "GetBidsRecommendationsRequest.h"
#include "GetBidsRecommendationsResponse.h"
#include "GetBusinessBuyerInfoResponse.h"
#include "GetBusinessDocumentsInfoResponse.h"
#include "GetBusinessSettingsResponse.h"
#include "GetCampaignLoginsResponse.h"
#include "GetCampaignOffersRequest.h"
#include "GetCampaignOffersResponse.h"
#include "GetCampaignRegionResponse.h"
#include "GetCampaignResponse.h"
#include "GetCampaignSettingsResponse.h"
#include "GetCampaignsResponse.h"
#include "GetCategoriesMaxSaleQuantumRequest.h"
#include "GetCategoriesMaxSaleQuantumResponse.h"
#include "GetCategoriesRequest.h"
#include "GetCategoriesResponse.h"
#include "GetCategoryContentParametersResponse.h"
#include "GetChatHistoryRequest.h"
#include "GetChatHistoryResponse.h"
#include "GetChatsRequest.h"
#include "GetChatsResponse.h"
#include "GetDeliveryServicesResponse.h"
#include "GetFeedIndexLogsResponse.h"
#include "GetFeedResponse.h"
#include "GetFeedbackListResponse.h"
#include "GetFeedsResponse.h"
#include "GetGoodsFeedbackCommentsRequest.h"
#include "GetGoodsFeedbackCommentsResponse.h"
#include "GetGoodsFeedbackRequest.h"
#include "GetGoodsFeedbackResponse.h"
#include "GetGoodsStatsRequest.h"
#include "GetGoodsStatsResponse.h"
#include "GetHiddenOffersResponse.h"
#include "GetOfferCardsContentStatusRequest.h"
#include "GetOfferCardsContentStatusResponse.h"
#include "GetOfferMappingEntriesResponse.h"
#include "GetOfferMappingsRequest.h"
#include "GetOfferMappingsResponse.h"
#include "GetOfferRecommendationsRequest.h"
#include "GetOfferRecommendationsResponse.h"
#include "GetOffersResponse.h"
#include "GetOrderLabelsDataResponse.h"
#include "GetOrderResponse.h"
#include "GetOrdersResponse.h"
#include "GetOrdersStatsRequest.h"
#include "GetOrdersStatsResponse.h"
#include "GetPricesByOfferIdsRequest.h"
#include "GetPricesByOfferIdsResponse.h"
#include "GetPricesResponse.h"
#include "GetPromoOffersRequest.h"
#include "GetPromoOffersResponse.h"
#include "GetPromosRequest.h"
#include "GetPromosResponse.h"
#include "GetQualityRatingDetailsResponse.h"
#include "GetQualityRatingRequest.h"
#include "GetQualityRatingResponse.h"
#include "GetQuarantineOffersRequest.h"
#include "GetQuarantineOffersResponse.h"
#include "GetRegionWithChildrenResponse.h"
#include "GetRegionsResponse.h"
#include "GetReportInfoResponse.h"
#include "GetReturnResponse.h"
#include "GetReturnsResponse.h"
#include "GetShipmentOrdersInfoResponse.h"
#include "GetShipmentResponse.h"
#include "GetSuggestedOfferMappingEntriesRequest.h"
#include "GetSuggestedOfferMappingEntriesResponse.h"
#include "GetSuggestedOfferMappingsRequest.h"
#include "GetSuggestedOfferMappingsResponse.h"
#include "GetWarehouseStocksRequest.h"
#include "GetWarehouseStocksResponse.h"
#include "GetWarehousesResponse.h"
#include "OfferAvailabilityStatusType.h"
#include "OfferMappingKindType.h"
#include "OfferProcessingStatusType.h"
#include "OrderBuyerType.h"
#include "OrderDeliveryDispatchType.h"
#include "OrderStatusType.h"
#include "OrderSubstatusType.h"
#include "PageFormatType.h"
#include "ProvideOrderItemIdentifiersRequest.h"
#include "ProvideOrderItemIdentifiersResponse.h"
#include "PutSkuBidsRequest.h"
#include "RefundStatusType.h"
#include "ReportFormatType.h"
#include "ReturnType.h"
#include "SearchShipmentsRequest.h"
#include "SearchShipmentsResponse.h"
#include "SendMessageToChatRequest.h"
#include "Set.h"
#include "SetFeedParamsRequest.h"
#include "SetOrderBoxLayoutRequest.h"
#include "SetOrderBoxLayoutResponse.h"
#include "SetOrderShipmentBoxesRequest.h"
#include "SetOrderShipmentBoxesResponse.h"
#include "SetShipmentPalletsCountRequest.h"
#include "ShipmentPalletLabelPageFormatType.h"
#include "SkipGoodsFeedbackReactionRequest.h"
#include "SuggestPricesRequest.h"
#include "SuggestPricesResponse.h"
#include "TransferOrdersFromShipmentRequest.h"
#include "UpdateBusinessPricesRequest.h"
#include "UpdateCampaignOffersRequest.h"
#include "UpdateGoodsFeedbackCommentRequest.h"
#include "UpdateGoodsFeedbackCommentResponse.h"
#include "UpdateOfferContentRequest.h"
#include "UpdateOfferContentResponse.h"
#include "UpdateOfferMappingEntryRequest.h"
#include "UpdateOfferMappingsRequest.h"
#include "UpdateOfferMappingsResponse.h"
#include "UpdateOrderItemRequest.h"
#include "UpdateOrderStatusRequest.h"
#include "UpdateOrderStatusResponse.h"
#include "UpdateOrderStatusesRequest.h"
#include "UpdateOrderStatusesResponse.h"
#include "UpdatePricesRequest.h"
#include "UpdatePromoOffersRequest.h"
#include "UpdatePromoOffersResponse.h"
#include "UpdateStocksRequest.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  FbsApiException: public std::exception
{
public:
    FbsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Скрытие товаров и настройки скрытия
/// </summary>
/// <remarks>
/// Скрывает товары магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdHidden-offersResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdHidden-offersResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdHidden-offersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<AddHiddenOffersRequest> const & addHiddenOffersRequest);

    virtual std::pair<int, std::shared_ptr<GetHiddenOffersResponse>> handler_GET(
        int64_t const & campaignId, std::vector<std::shared_ptr<std::string>> const & offerId, std::string const & pageToken, int32_t const & limit, int32_t const & offset, int32_t const & page, int32_t const & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }


    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }
    virtual std::string getQueryParam_pageToken_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }
    virtual int32_t getQueryParam_limit_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }
    virtual int32_t getQueryParam_offset_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("offset", 0);
    }
    virtual int32_t getQueryParam_page_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }
    virtual int32_t getQueryParam_pageSize_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }

    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление товаров в архив
/// </summary>
/// <remarks>
/// Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \&quot;В архив нельзя отправить товар, который хранится на складе Маркета\&quot; %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<AddOffersToArchiveResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<AddOffersToArchiveRequest> const & addOffersToArchiveRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Калькулятор стоимости услуг
/// </summary>
/// <remarks>
/// Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр &#x60;campaignId&#x60;, либо &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  FbsApiTariffsCalculateResource: public restbed::Resource
{
public:
    FbsApiTariffsCalculateResource(const std::string& context = "");
    virtual ~FbsApiTariffsCalculateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<CalculateTariffsResponse>> handler_POST(
        std::shared_ptr<CalculateTariffsRequest> const & calculateTariffsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товара из карантина по цене в кабинете
/// </summary>
/// <remarks>
/// Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<ConfirmPricesRequest> const & confirmPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товара из карантина по цене в магазине
/// </summary>
/// <remarks>
/// Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<ConfirmPricesRequest> const & confirmPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Подтверждение отгрузки
/// </summary>
/// <remarks>
/// Подтверждает отгрузку товаров в сортировочный центр или пункт приема заказов. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<ConfirmShipmentRequest> const & confirmShipmentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Создание нового чата с покупателем
/// </summary>
/// <remarks>
/// Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdChatsNewResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdChatsNewResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdChatsNewResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<CreateChatResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<CreateChatRequest> const & createChatRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товаров из ассортимента магазина
/// </summary>
/// <remarks>
/// Удаляет заданные товары из заданного магазина.  {% note warning \&quot;Запрос удаляет товары именно из конкретного магазина\&quot; %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOffersDeleteResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOffersDeleteResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOffersDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<DeleteCampaignOffersResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<DeleteCampaignOffersRequest> const & deleteCampaignOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление комментария к отзыву
/// </summary>
/// <remarks>
/// Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteGoodsFeedbackCommentRequest> const & deleteGoodsFeedbackCommentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Возобновление показа товаров
/// </summary>
/// <remarks>
/// Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdHidden-offersDeleteResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdHidden-offersDeleteResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdHidden-offersDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<DeleteHiddenOffersRequest> const & deleteHiddenOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товаров из каталога
/// </summary>
/// <remarks>
/// Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<DeleteOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteOffersRequest> const & deleteOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товаров из архива
/// </summary>
/// <remarks>
/// Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<DeleteOffersFromArchiveResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteOffersFromArchiveRequest> const & deleteOffersFromArchiveRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товаров из акции
/// </summary>
/// <remarks>
/// Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdPromosOffersDeleteResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdPromosOffersDeleteResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdPromosOffersDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<DeletePromoOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<DeletePromoOffersRequest> const & deletePromoOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение акта приема-передачи
/// </summary>
/// <remarks>
/// {% note warning \&quot;Экспресс‑доставка\&quot; %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам Яндекс Go, подготавливать акт приема‑передачи не нужно.  {% endnote %}  Запрос формирует акт приема-передачи заказов, входящих в отгрузку, и возвращает акт в формате PDF. В акте содержатся собранные и готовые к отправке заказы.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \&quot;Данные, из которых Маркет формирует акт\&quot; %}  | **Данные в акте**                                         | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Дата                                                      | Дата запроса.                                                                                                                                                                                                                                                        | | Отправитель                                               | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                               | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                         | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика)       | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                      | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Вес                                                       | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                           | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение акта расхождений
/// </summary>
/// <remarks>
/// Возвращает акт расхождений для заданной отгрузки. |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение фактического акта приема-передачи
/// </summary>
/// <remarks>
/// Возвращает фактический акт приема-передачи для заданной отгрузки.  Такой акт становится доступен спустя несколько часов после завершения отгрузки. Он может понадобиться, если после отгрузки обнаружатся расхождения.  |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Ярлыки для доверительной приемки (FBS)
/// </summary>
/// <remarks>
/// PDF-файл с ярлыками на каждый короб или палету в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Распечатайте по несколько копий каждого ярлыка: на одну тару нужно наклеить минимум 2 ярлыка с разных сторон.  Количество упаковок в отгрузке задается в запросе [PUT campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets](../../reference/shipments/setShipmentPalletsCount.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<ShipmentPalletLabelPageFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
/// </summary>
/// <remarks>
/// Запрос подтверждает ближайшую отгрузку и возвращает акт приема-передачи в формате PDF.  {% note warning \&quot;Экспресс‑доставка\&quot; %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам [Яндекс Go](https://go.yandex/), подготавливать акт приема‑передачи не нужно.  {% endnote %}  В акт входят собранные и готовые к отправке заказы, которые отгружаются в сортировочный центр или пункт приема или курьерам Маркета.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \&quot;Данные, из которых Маркет формирует акт\&quot; %}  | **Данные в акте**                                   | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Отправитель                                         | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                         | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                   | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика) | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Стоимость всех товаров в заказе                     | Стоимость всех заказанных товаров.                                                                                                                                                                                                                                   | | Вес                                                 | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                     | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int32_t const & warehouseId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int32_t getQueryParam_warehouseId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("warehouseId", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение транспортной накладной
/// </summary>
/// <remarks>
/// Возвращает транспортную накладную для заданной отгрузки.  Транспортная накладная понадобится, если вы отгружаете товары непосредственно со своего склада. [Подробно об этом способе отгрузки](https://yandex.ru/support/marketplace/orders/fbs/settings/shipment.html#at-your-warehouse)  |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по бусту продаж
/// </summary>
/// <remarks>
/// Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsBoost-consolidatedGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsBoost-consolidatedGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsBoost-consolidatedGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateBoostConsolidatedRequest> const & generateBoostConsolidatedRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет «Конкурентная позиция»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsCompetitors-positionGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsCompetitors-positionGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsCompetitors-positionGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateCompetitorsPositionReportRequest> const & generateCompetitorsPositionReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по отзывам о товарах
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsGoods-feedbackGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsGoods-feedbackGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsGoods-feedbackGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateGoodsFeedbackRequest> const & generateGoodsFeedbackRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по реализации
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsGoods-realizationGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsGoods-realizationGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsGoods-realizationGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateGoodsRealizationReportRequest> const & generateGoodsRealizationReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Готовые ярлыки‑наклейки на все коробки в нескольких заказах
/// </summary>
/// <remarks>
/// Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsDocumentsLabelsGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsDocumentsLabelsGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsDocumentsLabelsGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateMassOrderLabelsRequest> const & generateMassOrderLabelsRequest, std::shared_ptr<PageFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Готовый ярлык‑наклейка для коробки в заказе
/// </summary>
/// <remarks>
/// Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & shipmentId, int64_t const & boxId, std::shared_ptr<PageFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }

    virtual int64_t getPathParam_boxId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("boxId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Готовые ярлыки‑наклейки на все коробки в одном заказе
/// </summary>
/// <remarks>
/// Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<PageFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет «Цены на рынке»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsPricesGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsPricesGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsPricesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GeneratePricesReportRequest> const & generatePricesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по полкам
/// </summary>
/// <remarks>
/// Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsShelf-statisticsGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsShelf-statisticsGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsShelf-statisticsGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateShelfsStatisticsRequest> const & generateShelfsStatisticsRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение листа сборки
/// </summary>
/// <remarks>
/// Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsDocumentsShipment-listGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsDocumentsShipment-listGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsDocumentsShipment-listGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateShipmentListDocumentReportRequest> const & generateShipmentListDocumentReportRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет «Аналитика продаж»
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsShows-salesGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsShows-salesGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsShows-salesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateShowsSalesReportRequest> const & generateShowsSalesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по остаткам на складах
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsStocks-on-warehousesGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsStocks-on-warehousesGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsStocks-on-warehousesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateStocksOnWarehousesReportRequest> const & generateStocksOnWarehousesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по стоимости услуг
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsUnited-marketplace-servicesGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsUnited-marketplace-servicesGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsUnited-marketplace-servicesGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateUnitedMarketplaceServicesReportRequest> const & generateUnitedMarketplaceServicesReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по платежам
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsUnited-nettingGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsUnited-nettingGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsUnited-nettingGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateUnitedNettingReportRequest> const & generateUnitedNettingReportRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по заказам
/// </summary>
/// <remarks>
/// Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiReportsUnited-ordersGenerateResource: public restbed::Resource
{
public:
    FbsApiReportsUnited-ordersGenerateResource(const std::string& context = "");
    virtual ~FbsApiReportsUnited-ordersGenerateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GenerateReportResponse>> handler_POST(
        std::shared_ptr<GenerateUnitedOrdersRequest> const & generateUnitedOrdersRequest, std::shared_ptr<ReportFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Все предложения магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
/// </remarks>
class  FbsApiCampaignsCampaignIdOffersAllResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOffersAllResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOffersAllResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetAllOffersResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & feedId, int32_t const & chunk);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getQueryParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("feedId", 0L);
    }

    virtual int32_t getQueryParam_chunk(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chunk", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация об установленных ставках
/// </summary>
/// <remarks>
/// Возвращает значения ставок для заданных товаров.  {% note warning \&quot;\&quot; %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdBidsInfoResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdBidsInfoResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdBidsInfoResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBidsInfoResponse>> handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetBidsInfoRequest> const & getBidsInfoRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Рекомендованные ставки для заданных товаров
/// </summary>
/// <remarks>
/// Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdBidsRecommendationsResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdBidsRecommendationsResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdBidsRecommendationsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBidsRecommendationsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetBidsRecommendationsRequest> const & getBidsRecommendationsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список товаров, находящихся в карантине по цене в кабинете
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdPrice-quarantineResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdPrice-quarantineResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdPrice-quarantineResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetQuarantineOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetQuarantineOffersRequest> const & getQuarantineOffersRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Настройки кабинета
/// </summary>
/// <remarks>
/// Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdSettingsResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdSettingsResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdSettingsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBusinessSettingsResponse>> handler_POST(
        int64_t const & businessId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о магазине
/// </summary>
/// <remarks>
/// Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignResponse>> handler_GET(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Логины, связанные с магазином
/// </summary>
/// <remarks>
/// Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdLoginsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdLoginsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdLoginsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignLoginsResponse>> handler_GET(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о товарах, которые размещены в заданном магазине
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOffersResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOffersResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOffersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignOffersResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetCampaignOffersRequest> const & getCampaignOffersRequest, std::string const & pageToken, int32_t const & limit);

    virtual std::pair<int, std::shared_ptr<GetOffersResponse>> handler_GET(
        int64_t const & campaignId, std::string const & query, int64_t const & feedId, std::string const & shopCategoryId, std::shared_ptr<CurrencyType> const & currency, bool const & matched, int32_t const & page, int32_t const & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }


    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }
    virtual std::string getQueryParam_query_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("query", "");
    }
    virtual int64_t getQueryParam_feedId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("feedId", 0L);
    }
    virtual std::string getQueryParam_shopCategoryId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("shopCategoryId", "");
    }
    virtual bool getQueryParam_matched_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("matched", false);
    }
    virtual int32_t getQueryParam_page_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }
    virtual int32_t getQueryParam_pageSize_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }

    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список товаров, находящихся в карантине по цене в магазине
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdPrice-quarantineResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdPrice-quarantineResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdPrice-quarantineResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetQuarantineOffersResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetQuarantineOffersRequest> const & getQuarantineOffersRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Регион магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdRegionResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdRegionResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdRegionResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignRegionResponse>> handler_GET(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Настройки магазина
/// </summary>
/// <remarks>
/// Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdSettingsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdSettingsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdSettingsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignSettingsResponse>> handler_GET(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список магазинов пользователя
/// </summary>
/// <remarks>
/// Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsResource: public restbed::Resource
{
public:
    FbsApiCampaignsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignsResponse>> handler_GET(
        int32_t const & page, int32_t const & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int32_t getQueryParam_page(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Магазины, доступные логину
/// </summary>
/// <remarks>
/// Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsBy_loginLoginResource: public restbed::Resource
{
public:
    FbsApiCampaignsBy_loginLoginResource(const std::string& context = "");
    virtual ~FbsApiCampaignsBy_loginLoginResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignsResponse>> handler_GET(
        std::string const & login, int32_t const & page, int32_t const & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_login(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("login", "");
    }

    virtual int32_t getQueryParam_page(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Лимит на установку кванта продажи и минимального количества товаров в заказе
/// </summary>
/// <remarks>
/// Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCategoriesMax-sale-quantumResource: public restbed::Resource
{
public:
    FbsApiCategoriesMax-sale-quantumResource(const std::string& context = "");
    virtual ~FbsApiCategoriesMax-sale-quantumResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCategoriesMaxSaleQuantumResponse>> handler_POST(
        std::shared_ptr<GetCategoriesMaxSaleQuantumRequest> const & getCategoriesMaxSaleQuantumRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Дерево категорий
/// </summary>
/// <remarks>
/// Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCategoriesTreeResource: public restbed::Resource
{
public:
    FbsApiCategoriesTreeResource(const std::string& context = "");
    virtual ~FbsApiCategoriesTreeResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCategoriesResponse>> handler_POST(
        std::shared_ptr<GetCategoriesRequest> const & getCategoriesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Списки характеристик товаров по категориям
/// </summary>
/// <remarks>
/// Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
/// </remarks>
class  FbsApiCategoryCategoryIdParametersResource: public restbed::Resource
{
public:
    FbsApiCategoryCategoryIdParametersResource(const std::string& context = "");
    virtual ~FbsApiCategoryCategoryIdParametersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCategoryContentParametersResponse>> handler_POST(
        int64_t const & categoryId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_categoryId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("categoryId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение истории сообщений в чате
/// </summary>
/// <remarks>
/// Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdChatsHistoryResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdChatsHistoryResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdChatsHistoryResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetChatHistoryResponse>> handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::shared_ptr<GetChatHistoryRequest> const & getChatHistoryRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual int64_t getQueryParam_chatId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chatId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение доступных чатов
/// </summary>
/// <remarks>
/// Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdChatsResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdChatsResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdChatsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetChatsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetChatsRequest> const & getChatsRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Справочник служб доставки
/// </summary>
/// <remarks>
/// Возвращает справочник служб доставки: идентификаторы и наименования. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
/// </remarks>
class  FbsApiDeliveryServicesResource: public restbed::Resource
{
public:
    FbsApiDeliveryServicesResource(const std::string& context = "");
    virtual ~FbsApiDeliveryServicesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetDeliveryServicesResponse>> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о прайс-листе
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFeedsFeedIdResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFeedsFeedIdResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFeedsFeedIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetFeedResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & feedId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по индексации прайс-листа
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра &#x60;generationId&#x60;.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetFeedIndexLogsResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & feedId, int32_t const & limit, std::string const & publishedTimeFrom, std::string const & publishedTimeTo, std::shared_ptr<FeedIndexLogsStatusType> const & status);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", 0L);
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }

    virtual std::string getQueryParam_publishedTimeFrom(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("publishedTimeFrom", "");
    }

    virtual std::string getQueryParam_publishedTimeTo(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("publishedTimeTo", "");
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Новые и обновленные отзывы о магазине
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFeedbackUpdatesResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFeedbackUpdatesResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFeedbackUpdatesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetFeedbackListResponse>> handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::string const & fromDate);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }

    virtual std::string getQueryParam_fromDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fromDate", "");
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список прайс-листов магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFeedsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFeedsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFeedsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetFeedsResponse>> handler_GET(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение комментариев к отзыву
/// </summary>
/// <remarks>
/// Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetGoodsFeedbackCommentsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetGoodsFeedbackCommentsRequest> const & getGoodsFeedbackCommentsRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение отзывов о товарах продавца
/// </summary>
/// <remarks>
/// Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdGoods-feedbackResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdGoods-feedbackResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdGoods-feedbackResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetGoodsFeedbackResponse>> handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetGoodsFeedbackRequest> const & getGoodsFeedbackRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отчет по товарам
/// </summary>
/// <remarks>
/// Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdStatsSkusResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdStatsSkusResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdStatsSkusResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetGoodsStatsResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetGoodsStatsRequest> const & getGoodsStatsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение информации о заполненности карточек магазина
/// </summary>
/// <remarks>
/// Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdOffer-cardsResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdOffer-cardsResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdOffer-cardsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOfferCardsContentStatusResponse>> handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOfferCardsContentStatusRequest> const & getOfferCardsContentStatusRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список товаров в каталоге
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
/// </remarks>
class  FbsApiCampaignsCampaignIdOffer-mapping-entriesResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOffer-mapping-entriesResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOffer-mapping-entriesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOfferMappingEntriesResponse>> handler_GET(
        int64_t const & campaignId, std::vector<std::string> const & offerId, std::vector<std::shared_ptr<std::string>> const & shopSku, std::shared_ptr<OfferMappingKindType> const & mappingKind, std::vector<std::shared_ptr<OfferProcessingStatusType>> const & status, std::vector<std::shared_ptr<OfferAvailabilityStatusType>> const & availability, std::vector<int32_t> const & categoryId, std::vector<std::string> const & vendor, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о товарах в каталоге
/// </summary>
/// <remarks>
/// Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdOffer-mappingsResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdOffer-mappingsResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdOffer-mappingsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOfferMappingsResponse>> handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOfferMappingsRequest> const & getOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Рекомендации Маркета, касающиеся цен
/// </summary>
/// <remarks>
/// Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdOffersRecommendationsResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdOffersRecommendationsResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdOffersRecommendationsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOfferRecommendationsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetOfferRecommendationsRequest> const & getOfferRecommendationsRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация об одном заказе
/// </summary>
/// <remarks>
/// Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOrderResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о покупателе — юридическом лице
/// </summary>
/// <remarks>
/// Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60;, &#x60;PICKUP&#x60; или &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBusinessBuyerInfoResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о документах
/// </summary>
/// <remarks>
/// Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetBusinessDocumentsInfoResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Данные для самостоятельного изготовления ярлыков
/// </summary>
/// <remarks>
/// Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOrderLabelsDataResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о нескольких заказах
/// </summary>
/// <remarks>
/// Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры &#x60;page_token&#x60; и &#x60;limit&#x60;.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOrdersResponse>> handler_GET(
        int64_t const & campaignId, std::vector<int64_t> const & orderIds, Set<std::shared_ptr<OrderStatusType>> const & status, Set<std::shared_ptr<OrderSubstatusType>> const & substatus, std::string const & fromDate, std::string const & toDate, std::string const & supplierShipmentDateFrom, std::string const & supplierShipmentDateTo, std::string const & updatedAtFrom, std::string const & updatedAtTo, std::shared_ptr<OrderDeliveryDispatchType> const & dispatchType, bool const & fake, bool const & hasCis, bool const & onlyWaitingForCancellationApprove, bool const & onlyEstimatedDelivery, std::shared_ptr<OrderBuyerType> const & buyerType, int32_t const & page, int32_t const & pageSize, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_fromDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fromDate", "");
    }

    virtual std::string getQueryParam_toDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("toDate", "");
    }

    virtual std::string getQueryParam_supplierShipmentDateFrom(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("supplierShipmentDateFrom", "");
    }

    virtual std::string getQueryParam_supplierShipmentDateTo(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("supplierShipmentDateTo", "");
    }

    virtual std::string getQueryParam_updatedAtFrom(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("updatedAtFrom", "");
    }

    virtual std::string getQueryParam_updatedAtTo(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("updatedAtTo", "");
    }

    virtual bool getQueryParam_fake(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fake", false);
    }

    virtual bool getQueryParam_hasCis(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("hasCis", false);
    }

    virtual bool getQueryParam_onlyWaitingForCancellationApprove(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("onlyWaitingForCancellationApprove", false);
    }

    virtual bool getQueryParam_onlyEstimatedDelivery(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("onlyEstimatedDelivery", false);
    }

    virtual int32_t getQueryParam_page(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Детальная информация по заказам
/// </summary>
/// <remarks>
/// Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \&quot;\&quot; %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdStatsOrdersResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdStatsOrdersResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdStatsOrdersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOrdersStatsResponse>> handler_POST(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOrdersStatsRequest> const & getOrdersStatsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список цен
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** &#x60;&#x60;&#x60;(количество товаров партнера на витрине) * 25&#x60;&#x60;&#x60; товаров в сутки| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOffer-pricesResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOffer-pricesResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOffer-pricesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetPricesResponse>> handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, bool const & archived);

    virtual std::pair<int, std::shared_ptr<GetPricesByOfferIdsResponse>> handler_POST(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetPricesByOfferIdsRequest> const & getPricesByOfferIdsRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }

    virtual bool getQueryParam_archived(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("archived", false);
    }


    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }
    virtual std::string getQueryParam_pageToken_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }
    virtual int32_t getQueryParam_limit_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }

    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение списка товаров, которые участвуют или могут участвовать в акции
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре &#x60;limit&#x60; не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdPromosOffersResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdPromosOffersResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdPromosOffersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetPromoOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetPromoOffersRequest> const & getPromoOffersRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение списка акций
/// </summary>
/// <remarks>
/// Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр &#x60;participation&#x60;.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdPromosResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdPromosResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdPromosResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetPromosResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetPromosRequest> const & getPromosRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Заказы, которые повлияли на индекс качества
/// </summary>
/// <remarks>
/// Возвращает список заказов, которые повлияли на индекс качества магазина. Чтобы узнать значение индекса качества, выполните запрос [POST businesses/{businessId}/ratings/quality](../../reference/ratings/getQualityRatings.md).  |**⚙️ Лимит:** 100000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdRatingsQualityDetailsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdRatingsQualityDetailsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdRatingsQualityDetailsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetQualityRatingDetailsResponse>> handler_POST(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Индекс качества магазинов
/// </summary>
/// <remarks>
/// Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdRatingsQualityResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdRatingsQualityResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdRatingsQualityResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetQualityRatingResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetQualityRatingRequest> const & getQualityRatingRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение заданного отчета
/// </summary>
/// <remarks>
/// Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  FbsApiReportsInfoReportIdResource: public restbed::Resource
{
public:
    FbsApiReportsInfoReportIdResource(const std::string& context = "");
    virtual ~FbsApiReportsInfoReportIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetReportInfoResponse>> handler_GET(
        std::string const & reportId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_reportId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("reportId", "");
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о невыкупе или возврате
/// </summary>
/// <remarks>
/// Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetReturnResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_returnId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("returnId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение заявления на возврат
/// </summary>
/// <remarks>
/// Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_returnId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("returnId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение фотографии возврата
/// </summary>
/// <remarks>
/// Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId, int64_t const & itemId, std::string const & imageHash);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_returnId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("returnId", 0L);
    }

    virtual int64_t getPathParam_itemId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("itemId", 0L);
    }

    virtual std::string getPathParam_imageHash(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("imageHash", "");
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список невыкупов и возвратов
/// </summary>
/// <remarks>
/// Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdReturnsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdReturnsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdReturnsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetReturnsResponse>> handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::vector<int64_t> const & orderIds, std::vector<std::shared_ptr<RefundStatusType>> const & statuses, std::shared_ptr<ReturnType> const & type, std::string const & fromDate, std::string const & toDate, std::string const & fromDate2, std::string const & toDate2);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }

    virtual std::string getQueryParam_fromDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fromDate", "");
    }

    virtual std::string getQueryParam_toDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("toDate", "");
    }

    virtual std::string getQueryParam_fromDate2(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fromDate2", "");
    }

    virtual std::string getQueryParam_toDate2(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("toDate2", "");
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение информации об одной отгрузке
/// </summary>
/// <remarks>
/// Возвращает информацию об отгрузке по ее идентификатору. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetShipmentResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId, bool const & cancelledOrders);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }

    virtual bool getQueryParam_cancelledOrders(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("cancelledOrders", true);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение информации о возможности печати ярлыков (FBS)
/// </summary>
/// <remarks>
/// Возвращает информацию о возможности печати ярлыков-наклеек для заказов в отгрузке. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetShipmentOrdersInfoResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация об остатках и оборачиваемости
/// </summary>
/// <remarks>
/// Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \&quot;По умолчанию данные по оборачивамости не возращаются\&quot; %}  Чтобы они были в ответе, передавайте &#x60;true&#x60; в поле &#x60;withTurnover&#x60;.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: &lt;&gt; (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
/// </remarks>
class  FbsApiCampaignsCampaignIdOffersStocksResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOffersStocksResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOffersStocksResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetWarehouseStocksResponse>> handler_POST(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetWarehouseStocksRequest> const & getWarehouseStocksRequest);

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_PUT(
        int64_t const & campaignId, std::shared_ptr<UpdateStocksRequest> const & updateStocksRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }


    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Рекомендованные карточки для товаров
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku&#x3D;», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetSuggestedOfferMappingEntriesResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetSuggestedOfferMappingEntriesRequest> const & getSuggestedOfferMappingEntriesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Просмотр карточек на Маркете, которые подходят вашим товарам
/// </summary>
/// <remarks>
/// Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида &#x60;https://market.yandex.ru/product/&lt;marketModelId&gt;?sku&#x3D;&lt;marketSku&gt;&#x60;. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать &#x60;marketSKU&#x60;, который ему подходит по вашему мнению.  {% note info \&quot;𝓠 Как определить &#x60;marketSku&#x60; товара, найденного на Маркете?\&quot; %}  𝓐 Он есть в адресе страницы товара — расположен после &#x60;sku&#x3D;&#x60;.  Например, &#x60;https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016&#x60;  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetSuggestedOfferMappingsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetSuggestedOfferMappingsRequest> const & getSuggestedOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Цены для продвижения товаров
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \&quot;\&quot; %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<SuggestPricesResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<SuggestPricesRequest> const & suggestPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список складов и групп складов
/// </summary>
/// <remarks>
/// Возвращает список складов и, если склады объединены, список групп складов. [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)  Среди прочего запрос позволяет определить идентификатор, который нужно использовать при передаче остатков для группы складов.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdWarehousesResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdWarehousesResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdWarehousesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetWarehousesResponse>> handler_GET(
        int64_t const & businessId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Передача кодов маркировки единиц товара
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Передает Маркету коды маркировки для единиц товара в указанном заказе.  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  {% note warning %}  Прежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).  {% endnote %}  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<ProvideOrderItemIdentifiersResponse>> handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<ProvideOrderItemIdentifiersRequest> const & provideOrderItemIdentifiersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Включение буста продаж и установка ставок
/// </summary>
/// <remarks>
/// Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \&quot;Как в кабинете выглядит кампания, созданная через API\&quot; %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdBidsResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdBidsResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdBidsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_PUT(
        int64_t const & businessId, std::shared_ptr<PutSkuBidsRequest> const & putSkuBidsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Включение буста продаж и установка ставок для магазина
/// </summary>
/// <remarks>
/// Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdBidsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdBidsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdBidsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_PUT(
        int64_t const & campaignId, std::shared_ptr<PutSkuBidsRequest> const & putSkuBidsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Сообщить, что прайс-лист обновился
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом &#x60;POST campaigns/{campaignId}/feeds/{feedId}/refresh&#x60;. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — &#x60;200 OK&#x60;. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & feedId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о дочерних регионах
/// </summary>
/// <remarks>
/// Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  FbsApiRegionsRegionIdChildrenResource: public restbed::Resource
{
public:
    FbsApiRegionsRegionIdChildrenResource(const std::string& context = "");
    virtual ~FbsApiRegionsRegionIdChildrenResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetRegionWithChildrenResponse>> handler_GET(
        int64_t const & regionId, int32_t const & page, int32_t const & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_regionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("regionId", 0L);
    }

    virtual int32_t getQueryParam_page(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о регионе
/// </summary>
/// <remarks>
/// Возвращает информацию о регионе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  FbsApiRegionsRegionIdResource: public restbed::Resource
{
public:
    FbsApiRegionsRegionIdResource(const std::string& context = "");
    virtual ~FbsApiRegionsRegionIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetRegionsResponse>> handler_GET(
        int64_t const & regionId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_regionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("regionId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Поиск регионов по их имени
/// </summary>
/// <remarks>
/// Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
/// </remarks>
class  FbsApiRegionsResource: public restbed::Resource
{
public:
    FbsApiRegionsResource(const std::string& context = "");
    virtual ~FbsApiRegionsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetRegionsResponse>> handler_GET(
        std::string const & name, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getQueryParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("name", "");
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение информации о нескольких отгрузках
/// </summary>
/// <remarks>
/// Возвращает информацию об отгрузках по заданным параметрам:  * дате; * статусу; * идентификаторам заказов.  Результаты возвращаются постранично. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFirst-mileShipmentsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFirst-mileShipmentsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFirst-mileShipmentsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<SearchShipmentsResponse>> handler_PUT(
        int64_t const & campaignId, std::shared_ptr<SearchShipmentsRequest> const & searchShipmentsRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отправка файла в чат
/// </summary>
/// <remarks>
/// Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdChatsFileSendResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdChatsFileSendResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdChatsFileSendResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::string const & file);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual int64_t getQueryParam_chatId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chatId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отправка сообщения в чат
/// </summary>
/// <remarks>
/// Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdChatsMessageResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdChatsMessageResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdChatsMessageResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::shared_ptr<SendMessageToChatRequest> const & sendMessageToChatRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual int64_t getQueryParam_chatId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chatId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Изменение параметров прайс-листа
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;value&#x60; (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;delete&#x3D;true&#x60; (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & feedId, std::shared_ptr<SetFeedParamsRequest> const & setFeedParamsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Подготовка заказа
/// </summary>
/// <remarks>
/// {% note tip \&quot;Подходит и для DBS\&quot; %}  Запрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.  {% endnote %}  Позволяет выполнить три операции:  * передать Маркету информацию о распределении товаров по коробкам; * передать Маркету коды маркировки для товаров; * удалить товар из заказа, если его не оказалось на складе.  Если нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.  ## Как передать информацию о распределении товаров  В этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:  * **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.  * **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.  ⚠️ Одна коробка не может содержать и товары целиком, и части товаров.  ## Как передавать коды маркировки  Если в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  Если товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.  ## Как удалить товар из заказа  Чтобы удалить товар из заказа:  1. Добавьте в запрос &#x60;allowRemove: true&#x60;. 2. Передайте распределение по коробкам без товара, который нужно удалить.  {% note warning \&quot;Удаление нельзя отменить\&quot; %}  Эта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.  {% endnote %}  Чтобы удалить позицию целиком, не передавайте соответствующий &#x60;OrderBoxLayoutItemDTO&#x60;. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле &#x60;fullCount&#x60;.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.  {% note info \&quot;Увеличить заказ нельзя\&quot; %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  ## Примеры  {% cut \&quot;Товар умещается в коробку\&quot; %}  Вот как будет выглядеть запрос, если в одной коробке едут:    * три единицы одного товара, требующего маркировки;   * одна единица другого товара, не требущего маркировки.    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;fullCount\&quot;: 3,                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           },                           {                               \&quot;cis\&quot;: \&quot;010304109478gftJ14545762!\\u001dhGt264\&quot;                           },                           {                               \&quot;cis\&quot;: \&quot;010304109478fRs28323ks23!\\u001dhet201\&quot;                           }                       ]                   },                   {                       \&quot;id\&quot;: 654321,                       \&quot;fullCount\&quot;: 1                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  {% cut \&quot;Товар едет в разных коробках\&quot; %}  Вот как будет выглядеть запрос, если товар едет в двух коробках:    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  {% cut \&quot;Одинаковые товары, где каждый едет в нескольких коробках\&quot; %}  Вот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<SetOrderBoxLayoutResponse>> handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<SetOrderBoxLayoutRequest> const & setOrderBoxLayoutRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Передача количества грузовых мест в заказе
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Отгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.  Количество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).  Метод устроен немного нестандартно: количество задается длиной массива пустых объектов.  Раньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.  {% cut \&quot;Как было раньше\&quot; %}  Структура тела PUT-запроса:  &#x60;&#x60;&#x60; {   \&quot;boxes\&quot;:   [     {       \&quot;fulfilmentId\&quot;: \&quot;{string}\&quot;,       \&quot;weight\&quot;: {int64},       \&quot;width\&quot;: {int64},       \&quot;height\&quot;: {int64},       \&quot;depth\&quot;: {int64},       \&quot;items\&quot;:       [         {           \&quot;id\&quot;: {int64},           \&quot;count\&quot;: {int32}         },         ...       ]     },     ...   ] } &#x60;&#x60;&#x60; | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | &#x60;boxes&#x60;       |           | Список грузовых мест.       |  **Параметры, вложенные в &#x60;boxes&#x60;** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | &#x60;fulfilmentId&#x60;       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: &#x60;номер заказа на Маркете-номер грузового места&#x60;. Например, &#x60;7206821‑1, 7206821‑2&#x60; и т. д. | | &#x60;weight&#x60;       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. | | &#x60;width&#x60;       | Int64   | Ширина грузового места в сантиметрах.       | | &#x60;height&#x60;       | Int64   | Высота грузового места в сантиметрах.       | | &#x60;depth&#x60;       | Int64   | Глубина грузового места в сантиметрах.        | | &#x60;items&#x60;       | Int64   | Список товаров в грузовом месте.       |  **Параметры, вложенные в &#x60;items&#x60;** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | &#x60;id&#x60;       | Int64     | Идентификатор товара в рамках заказа.   | | &#x60;count&#x60;    | Int32     | Количество единиц товара в грузовом месте.       |  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<SetOrderShipmentBoxesResponse>> handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & shipmentId, std::shared_ptr<SetOrderShipmentBoxesRequest> const & setOrderShipmentBoxesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Передача количества упаковок в отгрузке
/// </summary>
/// <remarks>
/// Передает Маркету количество коробов или палет в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Получить PDF-файл с ярлыками для упаковок можно с помощью запроса [GET campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels](../../reference/shipments/downloadShipmentPalletLabels.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_PUT(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<SetShipmentPalletsCountRequest> const & setShipmentPalletsCountRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отказ от ответа на отзывы
/// </summary>
/// <remarks>
/// Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<SkipGoodsFeedbackReactionRequest> const & skipGoodsFeedbackReactionRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Перенос заказов в следующую отгрузку
/// </summary>
/// <remarks>
/// Переносит указанные заказы из указанной отгрузки в следующую отгрузку. [Что такое отгрузка?](https://yandex.ru/support/marketplace/orders/fbs/process.html#ship)  Используйте этот запрос, если не успеваете собрать и упаковать заказы вовремя.  {% note warning \&quot;Такие переносы снижают индекс качества магазина\&quot; %}  Этот запрос предназначен для исключительных случаев. Если вы будете переносить заказы слишком часто, магазин столкнется с ограничениями. [Что за ограничения?](https://yandex.ru/support/marketplace/quality/score/fbs.html)  {% endnote %}  Переносить заказы можно, если до формирования отгрузки осталось больше получаса.  Перенос происходит не мгновенно, а занимает несколько минут.  |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<TransferOrdersFromShipmentRequest> const & transferOrdersFromShipmentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Установка цен на товары во всех магазинах
/// </summary>
/// <remarks>
/// Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateBusinessPricesRequest> const & updateBusinessPricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Изменение условий продажи товаров в магазине
/// </summary>
/// <remarks>
/// Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOffersUpdateResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOffersUpdateResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOffersUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateCampaignOffersRequest> const & updateCampaignOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление нового или изменение созданного комментария
/// </summary>
/// <remarks>
/// Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdateGoodsFeedbackCommentResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateGoodsFeedbackCommentRequest> const & updateGoodsFeedbackCommentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Редактирование категорийных характеристик товара
/// </summary>
/// <remarks>
/// Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \&quot;Здесь только то, что относится к конкретной категории\&quot; %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdOffer-cardsUpdateResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdOffer-cardsUpdateResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdOffer-cardsUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdateOfferContentResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateOfferContentRequest> const & updateOfferContentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление и редактирование товаров в каталоге
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре &#x60;shopSku&#x60; ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре &#x60;shopSku&#x60; ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус &#x60;NEED_CONTENT&#x60; (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус &#x60;NEED_INFO&#x60; (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateOfferMappingEntryRequest> const & updateOfferMappingEntryRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление товаров в каталог и изменение информации о них
/// </summary>
/// <remarks>
/// Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле &#x60;marketSKU&#x60;.  Для **новых товаров** обязательно укажите параметры: &#x60;offerId&#x60;, &#x60;name&#x60;, &#x60;marketCategoryId&#x60; или &#x60;category&#x60;, &#x60;pictures&#x60;, &#x60;vendor&#x60;, &#x60;description&#x60;.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в &#x60;offerId&#x60; соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  Параметр &#x60;offerId&#x60; должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \&quot;Правила использования SKU\&quot; %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdateOfferMappingsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateOfferMappingsRequest> const & updateOfferMappingsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Удаление товара из заказа или уменьшение числа единиц
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Изменяет состав заказа, если позволяет выбранная служба доставки, в случаях:  * покупатель уменьшил количество товара; * магазин не может поставить все товары в заказе.  Для этого заказ должен находится в статусе &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60;. После передачи статуса &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; изменить состав невозможно.  Если одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте &#x60;count&#x60; параметра &#x60;item&#x60;.  Чтобы полностью удалить товар из заказа:  * передайте значение &#x60;0&#x60;; или * не передавайте параметр &#x60;item&#x60;.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.  {% note info \&quot;Увеличить заказ нельзя\&quot; %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  **Возврат денег покупателю**  Если покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:  * при оплате банковской картой — с момента, когда магазин переведет заказ в статус &#x60;SHIPPED&#x60;;  * при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<UpdateOrderItemRequest> const & updateOrderItemRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Изменение статуса одного заказа
/// </summary>
/// <remarks>
/// Изменяет статус заказа. Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этап обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60;. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdateOrderStatusResponse>> handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<UpdateOrderStatusRequest> const & updateOrderStatusRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Изменение статусов нескольких заказов
/// </summary>
/// <remarks>
/// Изменяет статусы нескольких заказов.  Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60;и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этап обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60;. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;.  Максимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOrdersStatus-updateResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOrdersStatus-updateResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOrdersStatus-updateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdateOrderStatusesResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateOrderStatusesRequest> const & updateOrderStatusesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Установка цен на товары в конкретном магазине
/// </summary>
/// <remarks>
/// Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \&quot;Метод только для отдельных магазинов\&quot; %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource: public restbed::Resource
{
public:
    FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource(const std::string& context = "");
    virtual ~FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdatePricesRequest> const & updatePricesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление товаров в акцию или изменение их цен
/// </summary>
/// <remarks>
/// Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  FbsApiBusinessesBusinessIdPromosOffersUpdateResource: public restbed::Resource
{
public:
    FbsApiBusinessesBusinessIdPromosOffersUpdateResource(const std::string& context = "");
    virtual ~FbsApiBusinessesBusinessIdPromosOffersUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdatePromoOffersResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdatePromoOffersRequest> const & updatePromoOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleFbsApiException(const FbsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  FbsApi
{
public:
    explicit FbsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~FbsApi();

    virtual void setFbsApiCampaignsCampaignIdHidden-offersResource(std::shared_ptr<FbsApiCampaignsCampaignIdHidden-offersResource> spFbsApiCampaignsCampaignIdHidden-offersResource);
    virtual void setFbsApiBusinessesBusinessIdOffer-mappingsArchiveResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource> spFbsApiBusinessesBusinessIdOffer-mappingsArchiveResource);
    virtual void setFbsApiTariffsCalculateResource(std::shared_ptr<FbsApiTariffsCalculateResource> spFbsApiTariffsCalculateResource);
    virtual void setFbsApiBusinessesBusinessIdPrice-quarantineConfirmResource(std::shared_ptr<FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource> spFbsApiBusinessesBusinessIdPrice-quarantineConfirmResource);
    virtual void setFbsApiCampaignsCampaignIdPrice-quarantineConfirmResource(std::shared_ptr<FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource> spFbsApiCampaignsCampaignIdPrice-quarantineConfirmResource);
    virtual void setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource);
    virtual void setFbsApiBusinessesBusinessIdChatsNewResource(std::shared_ptr<FbsApiBusinessesBusinessIdChatsNewResource> spFbsApiBusinessesBusinessIdChatsNewResource);
    virtual void setFbsApiCampaignsCampaignIdOffersDeleteResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffersDeleteResource> spFbsApiCampaignsCampaignIdOffersDeleteResource);
    virtual void setFbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource> spFbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource);
    virtual void setFbsApiCampaignsCampaignIdHidden-offersDeleteResource(std::shared_ptr<FbsApiCampaignsCampaignIdHidden-offersDeleteResource> spFbsApiCampaignsCampaignIdHidden-offersDeleteResource);
    virtual void setFbsApiBusinessesBusinessIdOffer-mappingsDeleteResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource> spFbsApiBusinessesBusinessIdOffer-mappingsDeleteResource);
    virtual void setFbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource> spFbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource);
    virtual void setFbsApiBusinessesBusinessIdPromosOffersDeleteResource(std::shared_ptr<FbsApiBusinessesBusinessIdPromosOffersDeleteResource> spFbsApiBusinessesBusinessIdPromosOffersDeleteResource);
    virtual void setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource);
    virtual void setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource);
    virtual void setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource);
    virtual void setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource);
    virtual void setFbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource(std::shared_ptr<FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource> spFbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource);
    virtual void setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource);
    virtual void setFbsApiReportsBoost-consolidatedGenerateResource(std::shared_ptr<FbsApiReportsBoost-consolidatedGenerateResource> spFbsApiReportsBoost-consolidatedGenerateResource);
    virtual void setFbsApiReportsCompetitors-positionGenerateResource(std::shared_ptr<FbsApiReportsCompetitors-positionGenerateResource> spFbsApiReportsCompetitors-positionGenerateResource);
    virtual void setFbsApiReportsGoods-feedbackGenerateResource(std::shared_ptr<FbsApiReportsGoods-feedbackGenerateResource> spFbsApiReportsGoods-feedbackGenerateResource);
    virtual void setFbsApiReportsGoods-realizationGenerateResource(std::shared_ptr<FbsApiReportsGoods-realizationGenerateResource> spFbsApiReportsGoods-realizationGenerateResource);
    virtual void setFbsApiReportsDocumentsLabelsGenerateResource(std::shared_ptr<FbsApiReportsDocumentsLabelsGenerateResource> spFbsApiReportsDocumentsLabelsGenerateResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource);
    virtual void setFbsApiReportsPricesGenerateResource(std::shared_ptr<FbsApiReportsPricesGenerateResource> spFbsApiReportsPricesGenerateResource);
    virtual void setFbsApiReportsShelf-statisticsGenerateResource(std::shared_ptr<FbsApiReportsShelf-statisticsGenerateResource> spFbsApiReportsShelf-statisticsGenerateResource);
    virtual void setFbsApiReportsDocumentsShipment-listGenerateResource(std::shared_ptr<FbsApiReportsDocumentsShipment-listGenerateResource> spFbsApiReportsDocumentsShipment-listGenerateResource);
    virtual void setFbsApiReportsShows-salesGenerateResource(std::shared_ptr<FbsApiReportsShows-salesGenerateResource> spFbsApiReportsShows-salesGenerateResource);
    virtual void setFbsApiReportsStocks-on-warehousesGenerateResource(std::shared_ptr<FbsApiReportsStocks-on-warehousesGenerateResource> spFbsApiReportsStocks-on-warehousesGenerateResource);
    virtual void setFbsApiReportsUnited-marketplace-servicesGenerateResource(std::shared_ptr<FbsApiReportsUnited-marketplace-servicesGenerateResource> spFbsApiReportsUnited-marketplace-servicesGenerateResource);
    virtual void setFbsApiReportsUnited-nettingGenerateResource(std::shared_ptr<FbsApiReportsUnited-nettingGenerateResource> spFbsApiReportsUnited-nettingGenerateResource);
    virtual void setFbsApiReportsUnited-ordersGenerateResource(std::shared_ptr<FbsApiReportsUnited-ordersGenerateResource> spFbsApiReportsUnited-ordersGenerateResource);
    virtual void setFbsApiCampaignsCampaignIdOffersAllResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffersAllResource> spFbsApiCampaignsCampaignIdOffersAllResource);
    virtual void setFbsApiBusinessesBusinessIdBidsInfoResource(std::shared_ptr<FbsApiBusinessesBusinessIdBidsInfoResource> spFbsApiBusinessesBusinessIdBidsInfoResource);
    virtual void setFbsApiBusinessesBusinessIdBidsRecommendationsResource(std::shared_ptr<FbsApiBusinessesBusinessIdBidsRecommendationsResource> spFbsApiBusinessesBusinessIdBidsRecommendationsResource);
    virtual void setFbsApiBusinessesBusinessIdPrice-quarantineResource(std::shared_ptr<FbsApiBusinessesBusinessIdPrice-quarantineResource> spFbsApiBusinessesBusinessIdPrice-quarantineResource);
    virtual void setFbsApiBusinessesBusinessIdSettingsResource(std::shared_ptr<FbsApiBusinessesBusinessIdSettingsResource> spFbsApiBusinessesBusinessIdSettingsResource);
    virtual void setFbsApiCampaignsCampaignIdResource(std::shared_ptr<FbsApiCampaignsCampaignIdResource> spFbsApiCampaignsCampaignIdResource);
    virtual void setFbsApiCampaignsCampaignIdLoginsResource(std::shared_ptr<FbsApiCampaignsCampaignIdLoginsResource> spFbsApiCampaignsCampaignIdLoginsResource);
    virtual void setFbsApiCampaignsCampaignIdOffersResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffersResource> spFbsApiCampaignsCampaignIdOffersResource);
    virtual void setFbsApiCampaignsCampaignIdPrice-quarantineResource(std::shared_ptr<FbsApiCampaignsCampaignIdPrice-quarantineResource> spFbsApiCampaignsCampaignIdPrice-quarantineResource);
    virtual void setFbsApiCampaignsCampaignIdRegionResource(std::shared_ptr<FbsApiCampaignsCampaignIdRegionResource> spFbsApiCampaignsCampaignIdRegionResource);
    virtual void setFbsApiCampaignsCampaignIdSettingsResource(std::shared_ptr<FbsApiCampaignsCampaignIdSettingsResource> spFbsApiCampaignsCampaignIdSettingsResource);
    virtual void setFbsApiCampaignsResource(std::shared_ptr<FbsApiCampaignsResource> spFbsApiCampaignsResource);
    virtual void setFbsApiCampaignsBy_loginLoginResource(std::shared_ptr<FbsApiCampaignsBy_loginLoginResource> spFbsApiCampaignsBy_loginLoginResource);
    virtual void setFbsApiCategoriesMax-sale-quantumResource(std::shared_ptr<FbsApiCategoriesMax-sale-quantumResource> spFbsApiCategoriesMax-sale-quantumResource);
    virtual void setFbsApiCategoriesTreeResource(std::shared_ptr<FbsApiCategoriesTreeResource> spFbsApiCategoriesTreeResource);
    virtual void setFbsApiCategoryCategoryIdParametersResource(std::shared_ptr<FbsApiCategoryCategoryIdParametersResource> spFbsApiCategoryCategoryIdParametersResource);
    virtual void setFbsApiBusinessesBusinessIdChatsHistoryResource(std::shared_ptr<FbsApiBusinessesBusinessIdChatsHistoryResource> spFbsApiBusinessesBusinessIdChatsHistoryResource);
    virtual void setFbsApiBusinessesBusinessIdChatsResource(std::shared_ptr<FbsApiBusinessesBusinessIdChatsResource> spFbsApiBusinessesBusinessIdChatsResource);
    virtual void setFbsApiDeliveryServicesResource(std::shared_ptr<FbsApiDeliveryServicesResource> spFbsApiDeliveryServicesResource);
    virtual void setFbsApiCampaignsCampaignIdFeedsFeedIdResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdResource> spFbsApiCampaignsCampaignIdFeedsFeedIdResource);
    virtual void setFbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource> spFbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource);
    virtual void setFbsApiCampaignsCampaignIdFeedbackUpdatesResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedbackUpdatesResource> spFbsApiCampaignsCampaignIdFeedbackUpdatesResource);
    virtual void setFbsApiCampaignsCampaignIdFeedsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedsResource> spFbsApiCampaignsCampaignIdFeedsResource);
    virtual void setFbsApiBusinessesBusinessIdGoods-feedbackCommentsResource(std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource> spFbsApiBusinessesBusinessIdGoods-feedbackCommentsResource);
    virtual void setFbsApiBusinessesBusinessIdGoods-feedbackResource(std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackResource> spFbsApiBusinessesBusinessIdGoods-feedbackResource);
    virtual void setFbsApiCampaignsCampaignIdStatsSkusResource(std::shared_ptr<FbsApiCampaignsCampaignIdStatsSkusResource> spFbsApiCampaignsCampaignIdStatsSkusResource);
    virtual void setFbsApiBusinessesBusinessIdOffer-cardsResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-cardsResource> spFbsApiBusinessesBusinessIdOffer-cardsResource);
    virtual void setFbsApiCampaignsCampaignIdOffer-mapping-entriesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-mapping-entriesResource> spFbsApiCampaignsCampaignIdOffer-mapping-entriesResource);
    virtual void setFbsApiBusinessesBusinessIdOffer-mappingsResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsResource> spFbsApiBusinessesBusinessIdOffer-mappingsResource);
    virtual void setFbsApiBusinessesBusinessIdOffersRecommendationsResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffersRecommendationsResource> spFbsApiBusinessesBusinessIdOffersRecommendationsResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdResource> spFbsApiCampaignsCampaignIdOrdersOrderIdResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource> spFbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource> spFbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersResource> spFbsApiCampaignsCampaignIdOrdersResource);
    virtual void setFbsApiCampaignsCampaignIdStatsOrdersResource(std::shared_ptr<FbsApiCampaignsCampaignIdStatsOrdersResource> spFbsApiCampaignsCampaignIdStatsOrdersResource);
    virtual void setFbsApiCampaignsCampaignIdOffer-pricesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-pricesResource> spFbsApiCampaignsCampaignIdOffer-pricesResource);
    virtual void setFbsApiBusinessesBusinessIdPromosOffersResource(std::shared_ptr<FbsApiBusinessesBusinessIdPromosOffersResource> spFbsApiBusinessesBusinessIdPromosOffersResource);
    virtual void setFbsApiBusinessesBusinessIdPromosResource(std::shared_ptr<FbsApiBusinessesBusinessIdPromosResource> spFbsApiBusinessesBusinessIdPromosResource);
    virtual void setFbsApiCampaignsCampaignIdRatingsQualityDetailsResource(std::shared_ptr<FbsApiCampaignsCampaignIdRatingsQualityDetailsResource> spFbsApiCampaignsCampaignIdRatingsQualityDetailsResource);
    virtual void setFbsApiBusinessesBusinessIdRatingsQualityResource(std::shared_ptr<FbsApiBusinessesBusinessIdRatingsQualityResource> spFbsApiBusinessesBusinessIdRatingsQualityResource);
    virtual void setFbsApiReportsInfoReportIdResource(std::shared_ptr<FbsApiReportsInfoReportIdResource> spFbsApiReportsInfoReportIdResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource);
    virtual void setFbsApiCampaignsCampaignIdReturnsResource(std::shared_ptr<FbsApiCampaignsCampaignIdReturnsResource> spFbsApiCampaignsCampaignIdReturnsResource);
    virtual void setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource);
    virtual void setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource);
    virtual void setFbsApiCampaignsCampaignIdOffersStocksResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffersStocksResource> spFbsApiCampaignsCampaignIdOffersStocksResource);
    virtual void setFbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource> spFbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource);
    virtual void setFbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource> spFbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource);
    virtual void setFbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource> spFbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource);
    virtual void setFbsApiBusinessesBusinessIdWarehousesResource(std::shared_ptr<FbsApiBusinessesBusinessIdWarehousesResource> spFbsApiBusinessesBusinessIdWarehousesResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource> spFbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource);
    virtual void setFbsApiBusinessesBusinessIdBidsResource(std::shared_ptr<FbsApiBusinessesBusinessIdBidsResource> spFbsApiBusinessesBusinessIdBidsResource);
    virtual void setFbsApiCampaignsCampaignIdBidsResource(std::shared_ptr<FbsApiCampaignsCampaignIdBidsResource> spFbsApiCampaignsCampaignIdBidsResource);
    virtual void setFbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource> spFbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource);
    virtual void setFbsApiRegionsRegionIdChildrenResource(std::shared_ptr<FbsApiRegionsRegionIdChildrenResource> spFbsApiRegionsRegionIdChildrenResource);
    virtual void setFbsApiRegionsRegionIdResource(std::shared_ptr<FbsApiRegionsRegionIdResource> spFbsApiRegionsRegionIdResource);
    virtual void setFbsApiRegionsResource(std::shared_ptr<FbsApiRegionsResource> spFbsApiRegionsResource);
    virtual void setFbsApiCampaignsCampaignIdFirst-mileShipmentsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsResource);
    virtual void setFbsApiBusinessesBusinessIdChatsFileSendResource(std::shared_ptr<FbsApiBusinessesBusinessIdChatsFileSendResource> spFbsApiBusinessesBusinessIdChatsFileSendResource);
    virtual void setFbsApiBusinessesBusinessIdChatsMessageResource(std::shared_ptr<FbsApiBusinessesBusinessIdChatsMessageResource> spFbsApiBusinessesBusinessIdChatsMessageResource);
    virtual void setFbsApiCampaignsCampaignIdFeedsFeedIdParamsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource> spFbsApiCampaignsCampaignIdFeedsFeedIdParamsResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource> spFbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource);
    virtual void setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource);
    virtual void setFbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource> spFbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource);
    virtual void setFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource(std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource> spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource);
    virtual void setFbsApiBusinessesBusinessIdOffer-pricesUpdatesResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource> spFbsApiBusinessesBusinessIdOffer-pricesUpdatesResource);
    virtual void setFbsApiCampaignsCampaignIdOffersUpdateResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffersUpdateResource> spFbsApiCampaignsCampaignIdOffersUpdateResource);
    virtual void setFbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource> spFbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource);
    virtual void setFbsApiBusinessesBusinessIdOffer-cardsUpdateResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-cardsUpdateResource> spFbsApiBusinessesBusinessIdOffer-cardsUpdateResource);
    virtual void setFbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource> spFbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource);
    virtual void setFbsApiBusinessesBusinessIdOffer-mappingsUpdateResource(std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource> spFbsApiBusinessesBusinessIdOffer-mappingsUpdateResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdItemsResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource> spFbsApiCampaignsCampaignIdOrdersOrderIdItemsResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersOrderIdStatusResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource> spFbsApiCampaignsCampaignIdOrdersOrderIdStatusResource);
    virtual void setFbsApiCampaignsCampaignIdOrdersStatus-updateResource(std::shared_ptr<FbsApiCampaignsCampaignIdOrdersStatus-updateResource> spFbsApiCampaignsCampaignIdOrdersStatus-updateResource);
    virtual void setFbsApiCampaignsCampaignIdOffer-pricesUpdatesResource(std::shared_ptr<FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource> spFbsApiCampaignsCampaignIdOffer-pricesUpdatesResource);
    virtual void setFbsApiBusinessesBusinessIdPromosOffersUpdateResource(std::shared_ptr<FbsApiBusinessesBusinessIdPromosOffersUpdateResource> spFbsApiBusinessesBusinessIdPromosOffersUpdateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<FbsApiCampaignsCampaignIdHidden-offersResource> m_spFbsApiCampaignsCampaignIdHidden-offersResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsArchiveResource> m_spFbsApiBusinessesBusinessIdOffer-mappingsArchiveResource;
    std::shared_ptr<FbsApiTariffsCalculateResource> m_spFbsApiTariffsCalculateResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdPrice-quarantineConfirmResource> m_spFbsApiBusinessesBusinessIdPrice-quarantineConfirmResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdPrice-quarantineConfirmResource> m_spFbsApiCampaignsCampaignIdPrice-quarantineConfirmResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource> m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdChatsNewResource> m_spFbsApiBusinessesBusinessIdChatsNewResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOffersDeleteResource> m_spFbsApiCampaignsCampaignIdOffersDeleteResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource> m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdHidden-offersDeleteResource> m_spFbsApiCampaignsCampaignIdHidden-offersDeleteResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsDeleteResource> m_spFbsApiBusinessesBusinessIdOffer-mappingsDeleteResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource> m_spFbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdPromosOffersDeleteResource> m_spFbsApiBusinessesBusinessIdPromosOffersDeleteResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource> m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource> m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource> m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource> m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource> m_spFbsApiCampaignsCampaignIdShipmentsReception-transfer-actResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource> m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource;
    std::shared_ptr<FbsApiReportsBoost-consolidatedGenerateResource> m_spFbsApiReportsBoost-consolidatedGenerateResource;
    std::shared_ptr<FbsApiReportsCompetitors-positionGenerateResource> m_spFbsApiReportsCompetitors-positionGenerateResource;
    std::shared_ptr<FbsApiReportsGoods-feedbackGenerateResource> m_spFbsApiReportsGoods-feedbackGenerateResource;
    std::shared_ptr<FbsApiReportsGoods-realizationGenerateResource> m_spFbsApiReportsGoods-realizationGenerateResource;
    std::shared_ptr<FbsApiReportsDocumentsLabelsGenerateResource> m_spFbsApiReportsDocumentsLabelsGenerateResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource;
    std::shared_ptr<FbsApiReportsPricesGenerateResource> m_spFbsApiReportsPricesGenerateResource;
    std::shared_ptr<FbsApiReportsShelf-statisticsGenerateResource> m_spFbsApiReportsShelf-statisticsGenerateResource;
    std::shared_ptr<FbsApiReportsDocumentsShipment-listGenerateResource> m_spFbsApiReportsDocumentsShipment-listGenerateResource;
    std::shared_ptr<FbsApiReportsShows-salesGenerateResource> m_spFbsApiReportsShows-salesGenerateResource;
    std::shared_ptr<FbsApiReportsStocks-on-warehousesGenerateResource> m_spFbsApiReportsStocks-on-warehousesGenerateResource;
    std::shared_ptr<FbsApiReportsUnited-marketplace-servicesGenerateResource> m_spFbsApiReportsUnited-marketplace-servicesGenerateResource;
    std::shared_ptr<FbsApiReportsUnited-nettingGenerateResource> m_spFbsApiReportsUnited-nettingGenerateResource;
    std::shared_ptr<FbsApiReportsUnited-ordersGenerateResource> m_spFbsApiReportsUnited-ordersGenerateResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOffersAllResource> m_spFbsApiCampaignsCampaignIdOffersAllResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdBidsInfoResource> m_spFbsApiBusinessesBusinessIdBidsInfoResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdBidsRecommendationsResource> m_spFbsApiBusinessesBusinessIdBidsRecommendationsResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdPrice-quarantineResource> m_spFbsApiBusinessesBusinessIdPrice-quarantineResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdSettingsResource> m_spFbsApiBusinessesBusinessIdSettingsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdResource> m_spFbsApiCampaignsCampaignIdResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdLoginsResource> m_spFbsApiCampaignsCampaignIdLoginsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOffersResource> m_spFbsApiCampaignsCampaignIdOffersResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdPrice-quarantineResource> m_spFbsApiCampaignsCampaignIdPrice-quarantineResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdRegionResource> m_spFbsApiCampaignsCampaignIdRegionResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdSettingsResource> m_spFbsApiCampaignsCampaignIdSettingsResource;
    std::shared_ptr<FbsApiCampaignsResource> m_spFbsApiCampaignsResource;
    std::shared_ptr<FbsApiCampaignsBy_loginLoginResource> m_spFbsApiCampaignsBy_loginLoginResource;
    std::shared_ptr<FbsApiCategoriesMax-sale-quantumResource> m_spFbsApiCategoriesMax-sale-quantumResource;
    std::shared_ptr<FbsApiCategoriesTreeResource> m_spFbsApiCategoriesTreeResource;
    std::shared_ptr<FbsApiCategoryCategoryIdParametersResource> m_spFbsApiCategoryCategoryIdParametersResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdChatsHistoryResource> m_spFbsApiBusinessesBusinessIdChatsHistoryResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdChatsResource> m_spFbsApiBusinessesBusinessIdChatsResource;
    std::shared_ptr<FbsApiDeliveryServicesResource> m_spFbsApiDeliveryServicesResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdResource> m_spFbsApiCampaignsCampaignIdFeedsFeedIdResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource> m_spFbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFeedbackUpdatesResource> m_spFbsApiCampaignsCampaignIdFeedbackUpdatesResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFeedsResource> m_spFbsApiCampaignsCampaignIdFeedsResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackCommentsResource> m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackResource> m_spFbsApiBusinessesBusinessIdGoods-feedbackResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdStatsSkusResource> m_spFbsApiCampaignsCampaignIdStatsSkusResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdOffer-cardsResource> m_spFbsApiBusinessesBusinessIdOffer-cardsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOffer-mapping-entriesResource> m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsResource> m_spFbsApiBusinessesBusinessIdOffer-mappingsResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdOffersRecommendationsResource> m_spFbsApiBusinessesBusinessIdOffersRecommendationsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersResource> m_spFbsApiCampaignsCampaignIdOrdersResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdStatsOrdersResource> m_spFbsApiCampaignsCampaignIdStatsOrdersResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOffer-pricesResource> m_spFbsApiCampaignsCampaignIdOffer-pricesResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdPromosOffersResource> m_spFbsApiBusinessesBusinessIdPromosOffersResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdPromosResource> m_spFbsApiBusinessesBusinessIdPromosResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdRatingsQualityDetailsResource> m_spFbsApiCampaignsCampaignIdRatingsQualityDetailsResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdRatingsQualityResource> m_spFbsApiBusinessesBusinessIdRatingsQualityResource;
    std::shared_ptr<FbsApiReportsInfoReportIdResource> m_spFbsApiReportsInfoReportIdResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdReturnsResource> m_spFbsApiCampaignsCampaignIdReturnsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource> m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource> m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOffersStocksResource> m_spFbsApiCampaignsCampaignIdOffersStocksResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource> m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource> m_spFbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource> m_spFbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdWarehousesResource> m_spFbsApiBusinessesBusinessIdWarehousesResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdBidsResource> m_spFbsApiBusinessesBusinessIdBidsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdBidsResource> m_spFbsApiCampaignsCampaignIdBidsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource> m_spFbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource;
    std::shared_ptr<FbsApiRegionsRegionIdChildrenResource> m_spFbsApiRegionsRegionIdChildrenResource;
    std::shared_ptr<FbsApiRegionsRegionIdResource> m_spFbsApiRegionsRegionIdResource;
    std::shared_ptr<FbsApiRegionsResource> m_spFbsApiRegionsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsResource> m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdChatsFileSendResource> m_spFbsApiBusinessesBusinessIdChatsFileSendResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdChatsMessageResource> m_spFbsApiBusinessesBusinessIdChatsMessageResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFeedsFeedIdParamsResource> m_spFbsApiCampaignsCampaignIdFeedsFeedIdParamsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource> m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource> m_spFbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource> m_spFbsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdOffer-pricesUpdatesResource> m_spFbsApiBusinessesBusinessIdOffer-pricesUpdatesResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOffersUpdateResource> m_spFbsApiCampaignsCampaignIdOffersUpdateResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource> m_spFbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdOffer-cardsUpdateResource> m_spFbsApiBusinessesBusinessIdOffer-cardsUpdateResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource> m_spFbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdOffer-mappingsUpdateResource> m_spFbsApiBusinessesBusinessIdOffer-mappingsUpdateResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdItemsResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdItemsResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersOrderIdStatusResource> m_spFbsApiCampaignsCampaignIdOrdersOrderIdStatusResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOrdersStatus-updateResource> m_spFbsApiCampaignsCampaignIdOrdersStatus-updateResource;
    std::shared_ptr<FbsApiCampaignsCampaignIdOffer-pricesUpdatesResource> m_spFbsApiCampaignsCampaignIdOffer-pricesUpdatesResource;
    std::shared_ptr<FbsApiBusinessesBusinessIdPromosOffersUpdateResource> m_spFbsApiBusinessesBusinessIdPromosOffersUpdateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* FbsApi_H_ */

