/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ModelsApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string ModelsApi::base = "";

ModelsApi::ModelsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void ModelsApi::init() {
    setupRoutes();
}

void ModelsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/models/:modelId", Routes::bind(&ModelsApi::get_model_handler, this));
    Routes::Get(*router, base + "/models/:modelId/offers", Routes::bind(&ModelsApi::get_model_offers_handler, this));
    Routes::Post(*router, base + "/models", Routes::bind(&ModelsApi::get_models_handler, this));
    Routes::Post(*router, base + "/models/offers", Routes::bind(&ModelsApi::get_models_offers_handler, this));
    Routes::Get(*router, base + "/models", Routes::bind(&ModelsApi::search_models_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&ModelsApi::models_api_default_handler, this));
}

void ModelsApi::handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleParsingException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> ModelsApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

void ModelsApi::handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleOperationException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> ModelsApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void ModelsApi::get_model_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto modelId = request.param(":modelId").as<int64_t>();
    
    // Getting the query params
    auto regionIdQuery = request.query().get("regionId");
    std::optional<int64_t> regionId;
    if(regionIdQuery.has_value()){
        int64_t valueQuery_instance;
        if(fromStringValue(regionIdQuery.value(), valueQuery_instance)){
            regionId = valueQuery_instance;
        }
    }
    auto currencyQuery = request.query().get("currency");
    std::optional<CurrencyType> currency;
    if(currencyQuery.has_value()){
        CurrencyType valueQuery_instance;
        if(fromStringValue(currencyQuery.value(), valueQuery_instance)){
            currency = valueQuery_instance;
        }
    }
    
    try {
        this->get_model(modelId, regionId, currency, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ModelsApi::get_model_offers_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto modelId = request.param(":modelId").as<int64_t>();
    
    // Getting the query params
    auto regionIdQuery = request.query().get("regionId");
    std::optional<int64_t> regionId;
    if(regionIdQuery.has_value()){
        int64_t valueQuery_instance;
        if(fromStringValue(regionIdQuery.value(), valueQuery_instance)){
            regionId = valueQuery_instance;
        }
    }
    auto currencyQuery = request.query().get("currency");
    std::optional<CurrencyType> currency;
    if(currencyQuery.has_value()){
        CurrencyType valueQuery_instance;
        if(fromStringValue(currencyQuery.value(), valueQuery_instance)){
            currency = valueQuery_instance;
        }
    }
    auto orderByPriceQuery = request.query().get("orderByPrice");
    std::optional<SortOrderType> orderByPrice;
    if(orderByPriceQuery.has_value()){
        SortOrderType valueQuery_instance;
        if(fromStringValue(orderByPriceQuery.value(), valueQuery_instance)){
            orderByPrice = valueQuery_instance;
        }
    }
    auto countQuery = request.query().get("count");
    std::optional<int32_t> count;
    if(countQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(countQuery.value(), valueQuery_instance)){
            count = valueQuery_instance;
        }
    }
    auto pageQuery = request.query().get("page");
    std::optional<int32_t> page;
    if(pageQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(pageQuery.value(), valueQuery_instance)){
            page = valueQuery_instance;
        }
    }
    
    try {
        this->get_model_offers(modelId, regionId, currency, orderByPrice, count, page, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ModelsApi::get_models_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    GetModelsRequest getModelsRequest;
    
    // Getting the query params
    auto regionIdQuery = request.query().get("regionId");
    std::optional<int64_t> regionId;
    if(regionIdQuery.has_value()){
        int64_t valueQuery_instance;
        if(fromStringValue(regionIdQuery.value(), valueQuery_instance)){
            regionId = valueQuery_instance;
        }
    }
    auto currencyQuery = request.query().get("currency");
    std::optional<CurrencyType> currency;
    if(currencyQuery.has_value()){
        CurrencyType valueQuery_instance;
        if(fromStringValue(currencyQuery.value(), valueQuery_instance)){
            currency = valueQuery_instance;
        }
    }
    
    try {
        nlohmann::json::parse(request.body()).get_to(getModelsRequest);
        getModelsRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->get_models(regionId, getModelsRequest, currency, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ModelsApi::get_models_offers_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    GetModelsRequest getModelsRequest;
    
    // Getting the query params
    auto regionIdQuery = request.query().get("regionId");
    std::optional<int64_t> regionId;
    if(regionIdQuery.has_value()){
        int64_t valueQuery_instance;
        if(fromStringValue(regionIdQuery.value(), valueQuery_instance)){
            regionId = valueQuery_instance;
        }
    }
    auto currencyQuery = request.query().get("currency");
    std::optional<CurrencyType> currency;
    if(currencyQuery.has_value()){
        CurrencyType valueQuery_instance;
        if(fromStringValue(currencyQuery.value(), valueQuery_instance)){
            currency = valueQuery_instance;
        }
    }
    auto orderByPriceQuery = request.query().get("orderByPrice");
    std::optional<SortOrderType> orderByPrice;
    if(orderByPriceQuery.has_value()){
        SortOrderType valueQuery_instance;
        if(fromStringValue(orderByPriceQuery.value(), valueQuery_instance)){
            orderByPrice = valueQuery_instance;
        }
    }
    
    try {
        nlohmann::json::parse(request.body()).get_to(getModelsRequest);
        getModelsRequest.validate();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->get_models_offers(regionId, getModelsRequest, currency, orderByPrice, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ModelsApi::search_models_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto queryQuery = request.query().get("query");
    std::optional<std::string> query;
    if(queryQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(queryQuery.value(), valueQuery_instance)){
            query = valueQuery_instance;
        }
    }
    auto regionIdQuery = request.query().get("regionId");
    std::optional<int64_t> regionId;
    if(regionIdQuery.has_value()){
        int64_t valueQuery_instance;
        if(fromStringValue(regionIdQuery.value(), valueQuery_instance)){
            regionId = valueQuery_instance;
        }
    }
    auto currencyQuery = request.query().get("currency");
    std::optional<CurrencyType> currency;
    if(currencyQuery.has_value()){
        CurrencyType valueQuery_instance;
        if(fromStringValue(currencyQuery.value(), valueQuery_instance)){
            currency = valueQuery_instance;
        }
    }
    auto pageQuery = request.query().get("page");
    std::optional<int32_t> page;
    if(pageQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(pageQuery.value(), valueQuery_instance)){
            page = valueQuery_instance;
        }
    }
    auto pageSizeQuery = request.query().get("pageSize");
    std::optional<int32_t> pageSize;
    if(pageSizeQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(pageSizeQuery.value(), valueQuery_instance)){
            pageSize = valueQuery_instance;
        }
    }
    
    try {
        this->search_models(query, regionId, currency, page, pageSize, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void ModelsApi::models_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

