/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RatingsApi.h
 *
 * 
 */

#ifndef RatingsApi_H_
#define RatingsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GetQualityRatingDetailsResponse.h"
#include "GetQualityRatingRequest.h"
#include "GetQualityRatingResponse.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  RatingsApiException: public std::exception
{
public:
    RatingsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Заказы, которые повлияли на индекс качества
/// </summary>
/// <remarks>
/// Возвращает список заказов, которые повлияли на индекс качества магазина. Чтобы узнать значение индекса качества, выполните запрос [POST businesses/{businessId}/ratings/quality](../../reference/ratings/getQualityRatings.md).  |**⚙️ Лимит:** 100000 запросов в час| |-| 
/// </remarks>
class  RatingsApiCampaignsCampaignIdRatingsQualityDetailsResource: public restbed::Resource
{
public:
    RatingsApiCampaignsCampaignIdRatingsQualityDetailsResource(const std::string& context = "");
    virtual ~RatingsApiCampaignsCampaignIdRatingsQualityDetailsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetQualityRatingDetailsResponse>> handler_POST(
        int64_t const & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleRatingsApiException(const RatingsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Индекс качества магазинов
/// </summary>
/// <remarks>
/// Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
/// </remarks>
class  RatingsApiBusinessesBusinessIdRatingsQualityResource: public restbed::Resource
{
public:
    RatingsApiBusinessesBusinessIdRatingsQualityResource(const std::string& context = "");
    virtual ~RatingsApiBusinessesBusinessIdRatingsQualityResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetQualityRatingResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetQualityRatingRequest> const & getQualityRatingRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleRatingsApiException(const RatingsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  RatingsApi
{
public:
    explicit RatingsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~RatingsApi();

    virtual void setRatingsApiCampaignsCampaignIdRatingsQualityDetailsResource(std::shared_ptr<RatingsApiCampaignsCampaignIdRatingsQualityDetailsResource> spRatingsApiCampaignsCampaignIdRatingsQualityDetailsResource);
    virtual void setRatingsApiBusinessesBusinessIdRatingsQualityResource(std::shared_ptr<RatingsApiBusinessesBusinessIdRatingsQualityResource> spRatingsApiBusinessesBusinessIdRatingsQualityResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<RatingsApiCampaignsCampaignIdRatingsQualityDetailsResource> m_spRatingsApiCampaignsCampaignIdRatingsQualityDetailsResource;
    std::shared_ptr<RatingsApiBusinessesBusinessIdRatingsQualityResource> m_spRatingsApiBusinessesBusinessIdRatingsQualityResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* RatingsApi_H_ */

