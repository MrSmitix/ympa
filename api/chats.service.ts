/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { CreateChatRequest } from '../model/createChatRequest';
import { CreateChatResponse } from '../model/createChatResponse';
import { EmptyApiResponse } from '../model/emptyApiResponse';
import { GetChatHistoryRequest } from '../model/getChatHistoryRequest';
import { GetChatHistoryResponse } from '../model/getChatHistoryResponse';
import { GetChatsRequest } from '../model/getChatsRequest';
import { GetChatsResponse } from '../model/getChatsResponse';
import { SendMessageToChatRequest } from '../model/sendMessageToChatRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ChatsService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Создание нового чата с покупателем
     * Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param createChatRequest description
     
     */
    public createChat(businessId: number, createChatRequest: CreateChatRequest, observe?: 'body', headers?: Headers): Observable<CreateChatResponse>;
    public createChat(businessId: number, createChatRequest: CreateChatRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<CreateChatResponse>>;
    public createChat(businessId: number, createChatRequest: CreateChatRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling createChat.');
        }

        if (createChatRequest === null || createChatRequest === undefined){
            throw new Error('Required parameter createChatRequest was null or undefined when calling createChat.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<CreateChatResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/chats/new`, createChatRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CreateChatResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение истории сообщений в чате
     * Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param chatId Идентификатор чата.
     * @param getChatHistoryRequest description
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
     * @param limit Количество значений на одной странице. 
     
     */
    public getChatHistory(businessId: number, chatId: number, getChatHistoryRequest: GetChatHistoryRequest, pageToken?: string, limit?: number, observe?: 'body', headers?: Headers): Observable<GetChatHistoryResponse>;
    public getChatHistory(businessId: number, chatId: number, getChatHistoryRequest: GetChatHistoryRequest, pageToken?: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetChatHistoryResponse>>;
    public getChatHistory(businessId: number, chatId: number, getChatHistoryRequest: GetChatHistoryRequest, pageToken?: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getChatHistory.');
        }

        if (chatId === null || chatId === undefined){
            throw new Error('Required parameter chatId was null or undefined when calling getChatHistory.');
        }

        if (getChatHistoryRequest === null || getChatHistoryRequest === undefined){
            throw new Error('Required parameter getChatHistoryRequest was null or undefined when calling getChatHistory.');
        }

        let queryParameters: string[] = [];
        if (chatId !== undefined) {
            queryParameters.push('chatId='+encodeURIComponent(String(chatId)));
        }
        if (pageToken !== undefined) {
            queryParameters.push('pageToken='+encodeURIComponent(String(pageToken)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetChatHistoryResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/chats/history?${queryParameters.join('&')}`, getChatHistoryRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetChatHistoryResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение доступных чатов
     * Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param getChatsRequest description
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
     * @param limit Количество значений на одной странице. 
     
     */
    public getChats(businessId: number, getChatsRequest: GetChatsRequest, pageToken?: string, limit?: number, observe?: 'body', headers?: Headers): Observable<GetChatsResponse>;
    public getChats(businessId: number, getChatsRequest: GetChatsRequest, pageToken?: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetChatsResponse>>;
    public getChats(businessId: number, getChatsRequest: GetChatsRequest, pageToken?: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getChats.');
        }

        if (getChatsRequest === null || getChatsRequest === undefined){
            throw new Error('Required parameter getChatsRequest was null or undefined when calling getChats.');
        }

        let queryParameters: string[] = [];
        if (pageToken !== undefined) {
            queryParameters.push('pageToken='+encodeURIComponent(String(pageToken)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetChatsResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/chats?${queryParameters.join('&')}`, getChatsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetChatsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отправка файла в чат
     * Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param chatId Идентификатор чата.
     * @param file Содержимое файла. Максимальный размер файла — 5 Мбайт.
     
     */
    public sendFileToChat(businessId: number, chatId: number, file: any, observe?: 'body', headers?: Headers): Observable<EmptyApiResponse>;
    public sendFileToChat(businessId: number, chatId: number, file: any, observe?: 'response', headers?: Headers): Observable<HttpResponse<EmptyApiResponse>>;
    public sendFileToChat(businessId: number, chatId: number, file: any, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling sendFileToChat.');
        }

        if (chatId === null || chatId === undefined){
            throw new Error('Required parameter chatId was null or undefined when calling sendFileToChat.');
        }

        if (file === null || file === undefined){
            throw new Error('Required parameter file was null or undefined when calling sendFileToChat.');
        }

        let queryParameters: string[] = [];
        if (chatId !== undefined) {
            queryParameters.push('chatId='+encodeURIComponent(String(chatId)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'multipart/form-data';
        if (file !== undefined) {
            formData.append('file', <any>file);
        }

        const response: Observable<HttpResponse<EmptyApiResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/chats/file/send?${queryParameters.join('&')}`, formData, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <EmptyApiResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отправка сообщения в чат
     * Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param chatId Идентификатор чата.
     * @param sendMessageToChatRequest description
     
     */
    public sendMessageToChat(businessId: number, chatId: number, sendMessageToChatRequest: SendMessageToChatRequest, observe?: 'body', headers?: Headers): Observable<EmptyApiResponse>;
    public sendMessageToChat(businessId: number, chatId: number, sendMessageToChatRequest: SendMessageToChatRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<EmptyApiResponse>>;
    public sendMessageToChat(businessId: number, chatId: number, sendMessageToChatRequest: SendMessageToChatRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling sendMessageToChat.');
        }

        if (chatId === null || chatId === undefined){
            throw new Error('Required parameter chatId was null or undefined when calling sendMessageToChat.');
        }

        if (sendMessageToChatRequest === null || sendMessageToChatRequest === undefined){
            throw new Error('Required parameter sendMessageToChatRequest was null or undefined when calling sendMessageToChat.');
        }

        let queryParameters: string[] = [];
        if (chatId !== undefined) {
            queryParameters.push('chatId='+encodeURIComponent(String(chatId)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<EmptyApiResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/chats/message?${queryParameters.join('&')}`, sendMessageToChatRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <EmptyApiResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
