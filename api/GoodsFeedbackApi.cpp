/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "GoodsFeedbackApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

GoodsFeedbackApiException::GoodsFeedbackApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int GoodsFeedbackApiException::getStatus() const
{
    return m_status;
}
const char* GoodsFeedbackApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments/delete/");
	this->set_method_handler("POST",
		std::bind(&GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::~GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource()
{
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteGoodsFeedbackCommentRequest = extractJsonModelBodyParam<DeleteGoodsFeedbackCommentRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, deleteGoodsFeedbackCommentRequest);
    }
    catch(const GoodsFeedbackApiException& e) {
        std::tie(status_code, result) = handleGoodsFeedbackApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteGoodsFeedbackCommentRequest> const & deleteGoodsFeedbackCommentRequest)
{
    throw GoodsFeedbackApiException(501, "Not implemented");
}


std::string GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments/");
	this->set_method_handler("POST",
		std::bind(&GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::~GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource()
{
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getGoodsFeedbackCommentsRequest = extractJsonModelBodyParam<GetGoodsFeedbackCommentsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetGoodsFeedbackCommentsResponse> resultObject = std::make_shared<GetGoodsFeedbackCommentsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getGoodsFeedbackCommentsRequest, pageToken, limit);
    }
    catch(const GoodsFeedbackApiException& e) {
        std::tie(status_code, result) = handleGoodsFeedbackApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Дерево комментариев к отзыву." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetGoodsFeedbackCommentsResponse>> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetGoodsFeedbackCommentsRequest> const & getGoodsFeedbackCommentsRequest, std::string const & pageToken, int32_t const & limit)
{
    throw GoodsFeedbackApiException(501, "Not implemented");
}


std::string GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/");
	this->set_method_handler("POST",
		std::bind(&GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::handler_POST_internal, this,
			std::placeholders::_1));
}

GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::~GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource()
{
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getGoodsFeedbackRequest = extractJsonModelBodyParam<GetGoodsFeedbackRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetGoodsFeedbackResponse> resultObject = std::make_shared<GetGoodsFeedbackResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, pageToken, limit, getGoodsFeedbackRequest);
    }
    catch(const GoodsFeedbackApiException& e) {
        std::tie(status_code, result) = handleGoodsFeedbackApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список отзывов." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetGoodsFeedbackResponse>> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetGoodsFeedbackRequest> const & getGoodsFeedbackRequest)
{
    throw GoodsFeedbackApiException(501, "Not implemented");
}


std::string GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/skip-reaction/");
	this->set_method_handler("POST",
		std::bind(&GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handler_POST_internal, this,
			std::placeholders::_1));
}

GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::~GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource()
{
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto skipGoodsFeedbackReactionRequest = extractJsonModelBodyParam<SkipGoodsFeedbackReactionRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, skipGoodsFeedbackReactionRequest);
    }
    catch(const GoodsFeedbackApiException& e) {
        std::tie(status_code, result) = handleGoodsFeedbackApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<SkipGoodsFeedbackReactionRequest> const & skipGoodsFeedbackReactionRequest)
{
    throw GoodsFeedbackApiException(501, "Not implemented");
}


std::string GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments/update/");
	this->set_method_handler("POST",
		std::bind(&GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::~GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource()
{
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateGoodsFeedbackCommentRequest = extractJsonModelBodyParam<UpdateGoodsFeedbackCommentRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<UpdateGoodsFeedbackCommentResponse> resultObject = std::make_shared<UpdateGoodsFeedbackCommentResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updateGoodsFeedbackCommentRequest);
    }
    catch(const GoodsFeedbackApiException& e) {
        std::tie(status_code, result) = handleGoodsFeedbackApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о добавленном или измененном комментарии." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateGoodsFeedbackCommentResponse>> GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateGoodsFeedbackCommentRequest> const & updateGoodsFeedbackCommentRequest)
{
    throw GoodsFeedbackApiException(501, "Not implemented");
}


std::string GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

GoodsFeedbackApi::GoodsFeedbackApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

GoodsFeedbackApi::~GoodsFeedbackApi() {}

void GoodsFeedbackApi::setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource> spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource) {
    m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource = spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource;
    m_service->publish(m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource);
}
void GoodsFeedbackApi::setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource(std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource> spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource) {
    m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource = spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource;
    m_service->publish(m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource);
}
void GoodsFeedbackApi::setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource(std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource> spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource) {
    m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource = spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource;
    m_service->publish(m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource);
}
void GoodsFeedbackApi::setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource> spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource) {
    m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource = spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource;
    m_service->publish(m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource);
}
void GoodsFeedbackApi::setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource> spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource) {
    m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource = spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource;
    m_service->publish(m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource);
}


void GoodsFeedbackApi::publishDefaultResources() {
    if (!m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource) {
        setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(std::make_shared<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource>());
    }
    if (!m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource) {
        setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource(std::make_shared<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource>());
    }
    if (!m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource) {
        setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource(std::make_shared<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource>());
    }
    if (!m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource) {
        setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(std::make_shared<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource>());
    }
    if (!m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource) {
        setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(std::make_shared<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource>());
    }
}

std::shared_ptr<restbed::Service> GoodsFeedbackApi::service() {
    return m_service;
}


}
}
}
}

