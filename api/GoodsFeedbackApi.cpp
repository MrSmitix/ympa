/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "GoodsFeedbackApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

GoodsFeedbackApiException::GoodsFeedbackApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int GoodsFeedbackApiException::getStatus() const
{
    return m_status;
}
const char* GoodsFeedbackApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace GoodsFeedbackApiResources {
BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments/delete");
	this->set_method_handler("POST",
		std::bind(&BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto deleteGoodsFeedbackCommentRequest = extractJsonModelBodyParam<DeleteGoodsFeedbackCommentRequest>(bodyContent);
    // Getting the path params
    int64_t businessId = request->get_path_parameter("businessId", 0L);
    
    int status_code = 500;
    EmptyApiResponse resultObject = EmptyApiResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(businessId, deleteGoodsFeedbackCommentRequest);
    }
    catch(const GoodsFeedbackApiException& e) {
        std::tie(status_code, result) = handleGoodsFeedbackApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, EmptyApiResponse> BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::handler_POST(
        int64_t & businessId, DeleteGoodsFeedbackCommentRequest & deleteGoodsFeedbackCommentRequest)
{
    return handler_POST_func(businessId, deleteGoodsFeedbackCommentRequest);
}


std::string BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusinessIdGoods_feedbackCommentsDeleteResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusinessIdGoods_feedbackCommentsResource::BusinessesBusinessIdGoods_feedbackCommentsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments");
	this->set_method_handler("POST",
		std::bind(&BusinessesBusinessIdGoods_feedbackCommentsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackCommentsResource::handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackCommentsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackCommentsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusinessIdGoods_feedbackCommentsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusinessIdGoods_feedbackCommentsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusinessIdGoods_feedbackCommentsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusinessIdGoods_feedbackCommentsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto getGoodsFeedbackCommentsRequest = extractJsonModelBodyParam<GetGoodsFeedbackCommentsRequest>(bodyContent);
    // Getting the path params
    int64_t businessId = request->get_path_parameter("businessId", 0L);
    // Getting the query params
    std::string pageToken = request->get_query_parameter("pageToken", "");
    int32_t limit = request->get_query_parameter("limit", 0);
    
    int status_code = 500;
    GetGoodsFeedbackCommentsResponse resultObject = GetGoodsFeedbackCommentsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(businessId, getGoodsFeedbackCommentsRequest, pageToken, limit);
    }
    catch(const GoodsFeedbackApiException& e) {
        std::tie(status_code, result) = handleGoodsFeedbackApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, GetGoodsFeedbackCommentsResponse> BusinessesBusinessIdGoods_feedbackCommentsResource::handler_POST(
        int64_t & businessId, GetGoodsFeedbackCommentsRequest & getGoodsFeedbackCommentsRequest, std::string & pageToken, int32_t & limit)
{
    return handler_POST_func(businessId, getGoodsFeedbackCommentsRequest, pageToken, limit);
}


std::string BusinessesBusinessIdGoods_feedbackCommentsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusinessIdGoods_feedbackCommentsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusinessIdGoods_feedbackResource::BusinessesBusinessIdGoods_feedbackResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback");
	this->set_method_handler("POST",
		std::bind(&BusinessesBusinessIdGoods_feedbackResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackResource::handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusinessIdGoods_feedbackResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusinessIdGoods_feedbackResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusinessIdGoods_feedbackResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusinessIdGoods_feedbackResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto getGoodsFeedbackRequest = extractJsonModelBodyParam<GetGoodsFeedbackRequest>(bodyContent);
    // Getting the path params
    int64_t businessId = request->get_path_parameter("businessId", 0L);
    // Getting the query params
    std::string pageToken = request->get_query_parameter("pageToken", "");
    int32_t limit = request->get_query_parameter("limit", 0);
    
    int status_code = 500;
    GetGoodsFeedbackResponse resultObject = GetGoodsFeedbackResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(businessId, pageToken, limit, getGoodsFeedbackRequest);
    }
    catch(const GoodsFeedbackApiException& e) {
        std::tie(status_code, result) = handleGoodsFeedbackApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, GetGoodsFeedbackResponse> BusinessesBusinessIdGoods_feedbackResource::handler_POST(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetGoodsFeedbackRequest & getGoodsFeedbackRequest)
{
    return handler_POST_func(businessId, pageToken, limit, getGoodsFeedbackRequest);
}


std::string BusinessesBusinessIdGoods_feedbackResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusinessIdGoods_feedbackResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusinessIdGoods_feedbackSkip_reactionResource::BusinessesBusinessIdGoods_feedbackSkip_reactionResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/skip-reaction");
	this->set_method_handler("POST",
		std::bind(&BusinessesBusinessIdGoods_feedbackSkip_reactionResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackSkip_reactionResource::handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackSkip_reactionResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackSkip_reactionResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusinessIdGoods_feedbackSkip_reactionResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusinessIdGoods_feedbackSkip_reactionResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusinessIdGoods_feedbackSkip_reactionResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusinessIdGoods_feedbackSkip_reactionResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto skipGoodsFeedbackReactionRequest = extractJsonModelBodyParam<SkipGoodsFeedbackReactionRequest>(bodyContent);
    // Getting the path params
    int64_t businessId = request->get_path_parameter("businessId", 0L);
    
    int status_code = 500;
    EmptyApiResponse resultObject = EmptyApiResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(businessId, skipGoodsFeedbackReactionRequest);
    }
    catch(const GoodsFeedbackApiException& e) {
        std::tie(status_code, result) = handleGoodsFeedbackApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, EmptyApiResponse> BusinessesBusinessIdGoods_feedbackSkip_reactionResource::handler_POST(
        int64_t & businessId, SkipGoodsFeedbackReactionRequest & skipGoodsFeedbackReactionRequest)
{
    return handler_POST_func(businessId, skipGoodsFeedbackReactionRequest);
}


std::string BusinessesBusinessIdGoods_feedbackSkip_reactionResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusinessIdGoods_feedbackSkip_reactionResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments/update");
	this->set_method_handler("POST",
		std::bind(&BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto updateGoodsFeedbackCommentRequest = extractJsonModelBodyParam<UpdateGoodsFeedbackCommentRequest>(bodyContent);
    // Getting the path params
    int64_t businessId = request->get_path_parameter("businessId", 0L);
    
    int status_code = 500;
    UpdateGoodsFeedbackCommentResponse resultObject = UpdateGoodsFeedbackCommentResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(businessId, updateGoodsFeedbackCommentRequest);
    }
    catch(const GoodsFeedbackApiException& e) {
        std::tie(status_code, result) = handleGoodsFeedbackApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрос содержит неправильные данные.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "В запросе не указаны данные для авторизации.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Данные для авторизации неверны или доступ к ресурсу запрещен.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Запрашиваемый ресурс не найден.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 420) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Превышено ограничение на доступ к ресурсу.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 420, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Внутренняя ошибка сервера.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, UpdateGoodsFeedbackCommentResponse> BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::handler_POST(
        int64_t & businessId, UpdateGoodsFeedbackCommentRequest & updateGoodsFeedbackCommentRequest)
{
    return handler_POST_func(businessId, updateGoodsFeedbackCommentRequest);
}


std::string BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusinessIdGoods_feedbackCommentsUpdateResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace GoodsFeedbackApiResources */

GoodsFeedbackApi::GoodsFeedbackApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

GoodsFeedbackApi::~GoodsFeedbackApi() {}

std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource> GoodsFeedbackApi::getBusinessesBusinessIdGoods_feedbackCommentsDeleteResource() {
    if (!m_spBusinessesBusinessIdGoods_feedbackCommentsDeleteResource) {
        setResource(std::make_shared<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource>());
    }
    return m_spBusinessesBusinessIdGoods_feedbackCommentsDeleteResource;
}
std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource> GoodsFeedbackApi::getBusinessesBusinessIdGoods_feedbackCommentsResource() {
    if (!m_spBusinessesBusinessIdGoods_feedbackCommentsResource) {
        setResource(std::make_shared<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource>());
    }
    return m_spBusinessesBusinessIdGoods_feedbackCommentsResource;
}
std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackResource> GoodsFeedbackApi::getBusinessesBusinessIdGoods_feedbackResource() {
    if (!m_spBusinessesBusinessIdGoods_feedbackResource) {
        setResource(std::make_shared<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackResource>());
    }
    return m_spBusinessesBusinessIdGoods_feedbackResource;
}
std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource> GoodsFeedbackApi::getBusinessesBusinessIdGoods_feedbackSkip_reactionResource() {
    if (!m_spBusinessesBusinessIdGoods_feedbackSkip_reactionResource) {
        setResource(std::make_shared<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource>());
    }
    return m_spBusinessesBusinessIdGoods_feedbackSkip_reactionResource;
}
std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource> GoodsFeedbackApi::getBusinessesBusinessIdGoods_feedbackCommentsUpdateResource() {
    if (!m_spBusinessesBusinessIdGoods_feedbackCommentsUpdateResource) {
        setResource(std::make_shared<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource>());
    }
    return m_spBusinessesBusinessIdGoods_feedbackCommentsUpdateResource;
}
void GoodsFeedbackApi::setResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource> resource) {
    m_spBusinessesBusinessIdGoods_feedbackCommentsDeleteResource = resource;
    m_service->publish(m_spBusinessesBusinessIdGoods_feedbackCommentsDeleteResource);
}
void GoodsFeedbackApi::setResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource> resource) {
    m_spBusinessesBusinessIdGoods_feedbackCommentsResource = resource;
    m_service->publish(m_spBusinessesBusinessIdGoods_feedbackCommentsResource);
}
void GoodsFeedbackApi::setResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackResource> resource) {
    m_spBusinessesBusinessIdGoods_feedbackResource = resource;
    m_service->publish(m_spBusinessesBusinessIdGoods_feedbackResource);
}
void GoodsFeedbackApi::setResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource> resource) {
    m_spBusinessesBusinessIdGoods_feedbackSkip_reactionResource = resource;
    m_service->publish(m_spBusinessesBusinessIdGoods_feedbackSkip_reactionResource);
}
void GoodsFeedbackApi::setResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource> resource) {
    m_spBusinessesBusinessIdGoods_feedbackCommentsUpdateResource = resource;
    m_service->publish(m_spBusinessesBusinessIdGoods_feedbackCommentsUpdateResource);
}
void GoodsFeedbackApi::setGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsDeleteResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource> spBusinessesBusinessIdGoods_feedbackCommentsDeleteResource) {
    m_spBusinessesBusinessIdGoods_feedbackCommentsDeleteResource = spBusinessesBusinessIdGoods_feedbackCommentsDeleteResource;
    m_service->publish(m_spBusinessesBusinessIdGoods_feedbackCommentsDeleteResource);
}
void GoodsFeedbackApi::setGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource> spBusinessesBusinessIdGoods_feedbackCommentsResource) {
    m_spBusinessesBusinessIdGoods_feedbackCommentsResource = spBusinessesBusinessIdGoods_feedbackCommentsResource;
    m_service->publish(m_spBusinessesBusinessIdGoods_feedbackCommentsResource);
}
void GoodsFeedbackApi::setGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackResource> spBusinessesBusinessIdGoods_feedbackResource) {
    m_spBusinessesBusinessIdGoods_feedbackResource = spBusinessesBusinessIdGoods_feedbackResource;
    m_service->publish(m_spBusinessesBusinessIdGoods_feedbackResource);
}
void GoodsFeedbackApi::setGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackSkip_reactionResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource> spBusinessesBusinessIdGoods_feedbackSkip_reactionResource) {
    m_spBusinessesBusinessIdGoods_feedbackSkip_reactionResource = spBusinessesBusinessIdGoods_feedbackSkip_reactionResource;
    m_service->publish(m_spBusinessesBusinessIdGoods_feedbackSkip_reactionResource);
}
void GoodsFeedbackApi::setGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsUpdateResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource> spBusinessesBusinessIdGoods_feedbackCommentsUpdateResource) {
    m_spBusinessesBusinessIdGoods_feedbackCommentsUpdateResource = spBusinessesBusinessIdGoods_feedbackCommentsUpdateResource;
    m_service->publish(m_spBusinessesBusinessIdGoods_feedbackCommentsUpdateResource);
}


void GoodsFeedbackApi::publishDefaultResources() {
    if (!m_spBusinessesBusinessIdGoods_feedbackCommentsDeleteResource) {
        setResource(std::make_shared<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource>());
    }
    if (!m_spBusinessesBusinessIdGoods_feedbackCommentsResource) {
        setResource(std::make_shared<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource>());
    }
    if (!m_spBusinessesBusinessIdGoods_feedbackResource) {
        setResource(std::make_shared<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackResource>());
    }
    if (!m_spBusinessesBusinessIdGoods_feedbackSkip_reactionResource) {
        setResource(std::make_shared<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource>());
    }
    if (!m_spBusinessesBusinessIdGoods_feedbackCommentsUpdateResource) {
        setResource(std::make_shared<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource>());
    }
}

std::shared_ptr<restbed::Service> GoodsFeedbackApi::service() {
    return m_service;
}


}
}
}
}

