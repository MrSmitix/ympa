/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OffersApi.h
 *
 * 
 */

#ifndef OffersApi_H_
#define OffersApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "CurrencyType.h"
#include "DeleteCampaignOffersRequest.h"
#include "DeleteCampaignOffersResponse.h"
#include "EmptyApiResponse.h"
#include "GetAllOffersResponse.h"
#include "GetCampaignOffersRequest.h"
#include "GetCampaignOffersResponse.h"
#include "GetOfferRecommendationsRequest.h"
#include "GetOfferRecommendationsResponse.h"
#include "GetOffersResponse.h"
#include "UpdateCampaignOffersRequest.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OffersApiException: public std::exception
{
public:
    OffersApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Удаление товаров из ассортимента магазина
/// </summary>
/// <remarks>
/// Удаляет заданные товары из заданного магазина.  {% note warning \&quot;Запрос удаляет товары именно из конкретного магазина\&quot; %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  OffersApiCampaignsCampaignIdOffersDeleteResource: public restbed::Resource
{
public:
    OffersApiCampaignsCampaignIdOffersDeleteResource(const std::string& context = "");
    virtual ~OffersApiCampaignsCampaignIdOffersDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<DeleteCampaignOffersResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<DeleteCampaignOffersRequest> const & deleteCampaignOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleOffersApiException(const OffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Все предложения магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
/// </remarks>
class  OffersApiCampaignsCampaignIdOffersAllResource: public restbed::Resource
{
public:
    OffersApiCampaignsCampaignIdOffersAllResource(const std::string& context = "");
    virtual ~OffersApiCampaignsCampaignIdOffersAllResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetAllOffersResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & feedId, int32_t const & chunk);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getQueryParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("feedId", 0L);
    }

    virtual int32_t getQueryParam_chunk(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("chunk", 0);
    }



    virtual std::pair<int, std::string> handleOffersApiException(const OffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Информация о товарах, которые размещены в заданном магазине
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  OffersApiCampaignsCampaignIdOffersResource: public restbed::Resource
{
public:
    OffersApiCampaignsCampaignIdOffersResource(const std::string& context = "");
    virtual ~OffersApiCampaignsCampaignIdOffersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetCampaignOffersResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetCampaignOffersRequest> const & getCampaignOffersRequest, std::string const & pageToken, int32_t const & limit);

    virtual std::pair<int, std::shared_ptr<GetOffersResponse>> handler_GET(
        int64_t const & campaignId, std::string const & query, int64_t const & feedId, std::string const & shopCategoryId, std::shared_ptr<CurrencyType> const & currency, bool const & matched, int32_t const & page, int32_t const & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }


    virtual int64_t getPathParam_campaignId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }
    virtual std::string getQueryParam_query_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("query", "");
    }
    virtual int64_t getQueryParam_feedId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("feedId", 0L);
    }
    virtual std::string getQueryParam_shopCategoryId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("shopCategoryId", "");
    }
    virtual bool getQueryParam_matched_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("matched", false);
    }
    virtual int32_t getQueryParam_page_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("page", 1);
    }
    virtual int32_t getQueryParam_pageSize_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }

    virtual std::pair<int, std::string> handleOffersApiException(const OffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Рекомендации Маркета, касающиеся цен
/// </summary>
/// <remarks>
/// Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  OffersApiBusinessesBusinessIdOffersRecommendationsResource: public restbed::Resource
{
public:
    OffersApiBusinessesBusinessIdOffersRecommendationsResource(const std::string& context = "");
    virtual ~OffersApiBusinessesBusinessIdOffersRecommendationsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOfferRecommendationsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetOfferRecommendationsRequest> const & getOfferRecommendationsRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleOffersApiException(const OffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Изменение условий продажи товаров в магазине
/// </summary>
/// <remarks>
/// Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  OffersApiCampaignsCampaignIdOffersUpdateResource: public restbed::Resource
{
public:
    OffersApiCampaignsCampaignIdOffersUpdateResource(const std::string& context = "");
    virtual ~OffersApiCampaignsCampaignIdOffersUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateCampaignOffersRequest> const & updateCampaignOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }



    virtual std::pair<int, std::string> handleOffersApiException(const OffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  OffersApi
{
public:
    explicit OffersApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OffersApi();

    virtual void setOffersApiCampaignsCampaignIdOffersDeleteResource(std::shared_ptr<OffersApiCampaignsCampaignIdOffersDeleteResource> spOffersApiCampaignsCampaignIdOffersDeleteResource);
    virtual void setOffersApiCampaignsCampaignIdOffersAllResource(std::shared_ptr<OffersApiCampaignsCampaignIdOffersAllResource> spOffersApiCampaignsCampaignIdOffersAllResource);
    virtual void setOffersApiCampaignsCampaignIdOffersResource(std::shared_ptr<OffersApiCampaignsCampaignIdOffersResource> spOffersApiCampaignsCampaignIdOffersResource);
    virtual void setOffersApiBusinessesBusinessIdOffersRecommendationsResource(std::shared_ptr<OffersApiBusinessesBusinessIdOffersRecommendationsResource> spOffersApiBusinessesBusinessIdOffersRecommendationsResource);
    virtual void setOffersApiCampaignsCampaignIdOffersUpdateResource(std::shared_ptr<OffersApiCampaignsCampaignIdOffersUpdateResource> spOffersApiCampaignsCampaignIdOffersUpdateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OffersApiCampaignsCampaignIdOffersDeleteResource> m_spOffersApiCampaignsCampaignIdOffersDeleteResource;
    std::shared_ptr<OffersApiCampaignsCampaignIdOffersAllResource> m_spOffersApiCampaignsCampaignIdOffersAllResource;
    std::shared_ptr<OffersApiCampaignsCampaignIdOffersResource> m_spOffersApiCampaignsCampaignIdOffersResource;
    std::shared_ptr<OffersApiBusinessesBusinessIdOffersRecommendationsResource> m_spOffersApiBusinessesBusinessIdOffersRecommendationsResource;
    std::shared_ptr<OffersApiCampaignsCampaignIdOffersUpdateResource> m_spOffersApiCampaignsCampaignIdOffersUpdateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OffersApi_H_ */

