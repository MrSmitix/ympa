/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OffersApi.h
 *
 * 
 */

#ifndef OffersApi_H_
#define OffersApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiLockedErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "CurrencyType.h"
#include "DeleteCampaignOffersRequest.h"
#include "DeleteCampaignOffersResponse.h"
#include "EmptyApiResponse.h"
#include "GetAllOffersResponse.h"
#include "GetCampaignOffersRequest.h"
#include "GetCampaignOffersResponse.h"
#include "GetOfferRecommendationsRequest.h"
#include "GetOfferRecommendationsResponse.h"
#include "GetOffersResponse.h"
#include "UpdateCampaignOffersRequest.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OffersApiException: public std::exception
{
public:
    OffersApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace OffersApiResources {
/// <summary>
/// Удаление товаров из ассортимента магазина
/// </summary>
/// <remarks>
/// Удаляет заданные товары из заданного магазина.  {% note warning \&quot;Запрос удаляет товары именно из конкретного магазина\&quot; %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdOffersDeleteResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffersDeleteResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffersDeleteResource() = default;

    CampaignsCampaignIdOffersDeleteResource(
        const CampaignsCampaignIdOffersDeleteResource& other) = default; // copy constructor
    CampaignsCampaignIdOffersDeleteResource(CampaignsCampaignIdOffersDeleteResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffersDeleteResource& operator=(const CampaignsCampaignIdOffersDeleteResource& other) = default; // copy assignment
    CampaignsCampaignIdOffersDeleteResource& operator=(CampaignsCampaignIdOffersDeleteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteCampaignOffersResponse>(
        int64_t & campaignId, DeleteCampaignOffersRequest & deleteCampaignOffersRequest)> handler_POST_func =
            [](int64_t &, DeleteCampaignOffersRequest &) -> std::pair<int, DeleteCampaignOffersResponse>
                { throw OffersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteCampaignOffersResponse> handler_POST(
        int64_t & campaignId, DeleteCampaignOffersRequest & deleteCampaignOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOffersApiException(const OffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Все предложения магазина
/// </summary>
/// <remarks>
/// {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
/// </remarks>
class  CampaignsCampaignIdOffersAllResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffersAllResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffersAllResource() = default;

    CampaignsCampaignIdOffersAllResource(
        const CampaignsCampaignIdOffersAllResource& other) = default; // copy constructor
    CampaignsCampaignIdOffersAllResource(CampaignsCampaignIdOffersAllResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffersAllResource& operator=(const CampaignsCampaignIdOffersAllResource& other) = default; // copy assignment
    CampaignsCampaignIdOffersAllResource& operator=(CampaignsCampaignIdOffersAllResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetAllOffersResponse>(
        int64_t & campaignId, int64_t & feedId, int32_t & chunk)> handler_GET_func =
            [](int64_t &, int64_t &, int32_t &) -> std::pair<int, GetAllOffersResponse>
                { throw OffersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetAllOffersResponse> handler_GET(
        int64_t & campaignId, int64_t & feedId, int32_t & chunk);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOffersApiException(const OffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о товарах, которые размещены в заданном магазине
/// </summary>
/// <remarks>
/// Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdOffersResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffersResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffersResource() = default;

    CampaignsCampaignIdOffersResource(
        const CampaignsCampaignIdOffersResource& other) = default; // copy constructor
    CampaignsCampaignIdOffersResource(CampaignsCampaignIdOffersResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffersResource& operator=(const CampaignsCampaignIdOffersResource& other) = default; // copy assignment
    CampaignsCampaignIdOffersResource& operator=(CampaignsCampaignIdOffersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCampaignOffersResponse>(
        int64_t & campaignId, GetCampaignOffersRequest & getCampaignOffersRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetCampaignOffersRequest &, std::string &, int32_t &) -> std::pair<int, GetCampaignOffersResponse>
                { throw OffersApiException(501, "Not implemented"); };

    std::function<std::pair<int, GetOffersResponse>(
        int64_t & campaignId, std::string & query, int64_t & feedId, std::string & shopCategoryId, CurrencyType & currency, bool & matched, int32_t & page, int32_t & pageSize)> handler_GET_func =
            [](int64_t &, std::string &, int64_t &, std::string &, CurrencyType &, bool &, int32_t &, int32_t &) -> std::pair<int, GetOffersResponse>
                { throw OffersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCampaignOffersResponse> handler_POST(
        int64_t & campaignId, GetCampaignOffersRequest & getCampaignOffersRequest, std::string & pageToken, int32_t & limit);

    virtual std::pair<int, GetOffersResponse> handler_GET(
        int64_t & campaignId, std::string & query, int64_t & feedId, std::string & shopCategoryId, CurrencyType & currency, bool & matched, int32_t & page, int32_t & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOffersApiException(const OffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Рекомендации Маркета, касающиеся цен
/// </summary>
/// <remarks>
/// Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  BusinessesBusinessIdOffersRecommendationsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdOffersRecommendationsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdOffersRecommendationsResource() = default;

    BusinessesBusinessIdOffersRecommendationsResource(
        const BusinessesBusinessIdOffersRecommendationsResource& other) = default; // copy constructor
    BusinessesBusinessIdOffersRecommendationsResource(BusinessesBusinessIdOffersRecommendationsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdOffersRecommendationsResource& operator=(const BusinessesBusinessIdOffersRecommendationsResource& other) = default; // copy assignment
    BusinessesBusinessIdOffersRecommendationsResource& operator=(BusinessesBusinessIdOffersRecommendationsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOfferRecommendationsResponse>(
        int64_t & businessId, GetOfferRecommendationsRequest & getOfferRecommendationsRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetOfferRecommendationsRequest &, std::string &, int32_t &) -> std::pair<int, GetOfferRecommendationsResponse>
                { throw OffersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOfferRecommendationsResponse> handler_POST(
        int64_t & businessId, GetOfferRecommendationsRequest & getOfferRecommendationsRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOffersApiException(const OffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Изменение условий продажи товаров в магазине
/// </summary>
/// <remarks>
/// Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
/// </remarks>
class  CampaignsCampaignIdOffersUpdateResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffersUpdateResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffersUpdateResource() = default;

    CampaignsCampaignIdOffersUpdateResource(
        const CampaignsCampaignIdOffersUpdateResource& other) = default; // copy constructor
    CampaignsCampaignIdOffersUpdateResource(CampaignsCampaignIdOffersUpdateResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffersUpdateResource& operator=(const CampaignsCampaignIdOffersUpdateResource& other) = default; // copy assignment
    CampaignsCampaignIdOffersUpdateResource& operator=(CampaignsCampaignIdOffersUpdateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, UpdateCampaignOffersRequest & updateCampaignOffersRequest)> handler_POST_func =
            [](int64_t &, UpdateCampaignOffersRequest &) -> std::pair<int, EmptyApiResponse>
                { throw OffersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, UpdateCampaignOffersRequest & updateCampaignOffersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOffersApiException(const OffersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace OffersApiResources */

using OffersApiCampaignsCampaignIdOffersDeleteResource [[deprecated]] = OffersApiResources::CampaignsCampaignIdOffersDeleteResource;
using OffersApiCampaignsCampaignIdOffersAllResource [[deprecated]] = OffersApiResources::CampaignsCampaignIdOffersAllResource;
using OffersApiCampaignsCampaignIdOffersResource [[deprecated]] = OffersApiResources::CampaignsCampaignIdOffersResource;
using OffersApiBusinessesBusinessIdOffersRecommendationsResource [[deprecated]] = OffersApiResources::BusinessesBusinessIdOffersRecommendationsResource;
using OffersApiCampaignsCampaignIdOffersUpdateResource [[deprecated]] = OffersApiResources::CampaignsCampaignIdOffersUpdateResource;

//
// The restbed service to actually implement the REST server
//
class  OffersApi
{
public:
    explicit OffersApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OffersApi();

    std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersDeleteResource> getCampaignsCampaignIdOffersDeleteResource();
    std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersAllResource> getCampaignsCampaignIdOffersAllResource();
    std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersResource> getCampaignsCampaignIdOffersResource();
    std::shared_ptr<OffersApiResources::BusinessesBusinessIdOffersRecommendationsResource> getBusinessesBusinessIdOffersRecommendationsResource();
    std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersUpdateResource> getCampaignsCampaignIdOffersUpdateResource();

    void setResource(std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersDeleteResource> resource);
    void setResource(std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersAllResource> resource);
    void setResource(std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersResource> resource);
    void setResource(std::shared_ptr<OffersApiResources::BusinessesBusinessIdOffersRecommendationsResource> resource);
    void setResource(std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersUpdateResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setOffersApiCampaignsCampaignIdOffersDeleteResource(std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersDeleteResource> spOffersApiCampaignsCampaignIdOffersDeleteResource);
    [[deprecated("use setResource()")]]
    virtual void setOffersApiCampaignsCampaignIdOffersAllResource(std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersAllResource> spOffersApiCampaignsCampaignIdOffersAllResource);
    [[deprecated("use setResource()")]]
    virtual void setOffersApiCampaignsCampaignIdOffersResource(std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersResource> spOffersApiCampaignsCampaignIdOffersResource);
    [[deprecated("use setResource()")]]
    virtual void setOffersApiBusinessesBusinessIdOffersRecommendationsResource(std::shared_ptr<OffersApiResources::BusinessesBusinessIdOffersRecommendationsResource> spOffersApiBusinessesBusinessIdOffersRecommendationsResource);
    [[deprecated("use setResource()")]]
    virtual void setOffersApiCampaignsCampaignIdOffersUpdateResource(std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersUpdateResource> spOffersApiCampaignsCampaignIdOffersUpdateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersDeleteResource> m_spCampaignsCampaignIdOffersDeleteResource;
    std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersAllResource> m_spCampaignsCampaignIdOffersAllResource;
    std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersResource> m_spCampaignsCampaignIdOffersResource;
    std::shared_ptr<OffersApiResources::BusinessesBusinessIdOffersRecommendationsResource> m_spBusinessesBusinessIdOffersRecommendationsResource;
    std::shared_ptr<OffersApiResources::CampaignsCampaignIdOffersUpdateResource> m_spCampaignsCampaignIdOffersUpdateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OffersApi_H_ */

