/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "ReportsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ReportsApiException::ReportsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int ReportsApiException::getStatus() const
{
    return m_status;
}
const char* ReportsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

ReportsApiReportsBoost-consolidatedGenerateResource::ReportsApiReportsBoost-consolidatedGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/boost-consolidated/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsBoost-consolidatedGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsBoost-consolidatedGenerateResource::~ReportsApiReportsBoost-consolidatedGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsBoost-consolidatedGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsBoost-consolidatedGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsBoost-consolidatedGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsBoost-consolidatedGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsBoost-consolidatedGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsBoost-consolidatedGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsBoost-consolidatedGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateBoostConsolidatedRequest = extractJsonModelBodyParam<GenerateBoostConsolidatedRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateBoostConsolidatedRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsBoost-consolidatedGenerateResource::handler_POST(
        std::shared_ptr<GenerateBoostConsolidatedRequest> const & generateBoostConsolidatedRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsBoost-consolidatedGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsCompetitors-positionGenerateResource::ReportsApiReportsCompetitors-positionGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/competitors-position/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsCompetitors-positionGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsCompetitors-positionGenerateResource::~ReportsApiReportsCompetitors-positionGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsCompetitors-positionGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsCompetitors-positionGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsCompetitors-positionGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsCompetitors-positionGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsCompetitors-positionGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsCompetitors-positionGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsCompetitors-positionGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateCompetitorsPositionReportRequest = extractJsonModelBodyParam<GenerateCompetitorsPositionReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateCompetitorsPositionReportRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsCompetitors-positionGenerateResource::handler_POST(
        std::shared_ptr<GenerateCompetitorsPositionReportRequest> const & generateCompetitorsPositionReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsCompetitors-positionGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsGoods-feedbackGenerateResource::ReportsApiReportsGoods-feedbackGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/goods-feedback/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsGoods-feedbackGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsGoods-feedbackGenerateResource::~ReportsApiReportsGoods-feedbackGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsGoods-feedbackGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsGoods-feedbackGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsGoods-feedbackGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsGoods-feedbackGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsGoods-feedbackGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsGoods-feedbackGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsGoods-feedbackGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateGoodsFeedbackRequest = extractJsonModelBodyParam<GenerateGoodsFeedbackRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateGoodsFeedbackRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsGoods-feedbackGenerateResource::handler_POST(
        std::shared_ptr<GenerateGoodsFeedbackRequest> const & generateGoodsFeedbackRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsGoods-feedbackGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsGoods-movementGenerateResource::ReportsApiReportsGoods-movementGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/goods-movement/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsGoods-movementGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsGoods-movementGenerateResource::~ReportsApiReportsGoods-movementGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsGoods-movementGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsGoods-movementGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsGoods-movementGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsGoods-movementGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsGoods-movementGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsGoods-movementGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsGoods-movementGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateGoodsMovementReportRequest = extractJsonModelBodyParam<GenerateGoodsMovementReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateGoodsMovementReportRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsGoods-movementGenerateResource::handler_POST(
        std::shared_ptr<GenerateGoodsMovementReportRequest> const & generateGoodsMovementReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsGoods-movementGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsGoods-realizationGenerateResource::ReportsApiReportsGoods-realizationGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/goods-realization/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsGoods-realizationGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsGoods-realizationGenerateResource::~ReportsApiReportsGoods-realizationGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsGoods-realizationGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsGoods-realizationGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsGoods-realizationGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsGoods-realizationGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsGoods-realizationGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsGoods-realizationGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsGoods-realizationGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateGoodsRealizationReportRequest = extractJsonModelBodyParam<GenerateGoodsRealizationReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateGoodsRealizationReportRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsGoods-realizationGenerateResource::handler_POST(
        std::shared_ptr<GenerateGoodsRealizationReportRequest> const & generateGoodsRealizationReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsGoods-realizationGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsGoods-turnoverGenerateResource::ReportsApiReportsGoods-turnoverGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/goods-turnover/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsGoods-turnoverGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsGoods-turnoverGenerateResource::~ReportsApiReportsGoods-turnoverGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsGoods-turnoverGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsGoods-turnoverGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsGoods-turnoverGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsGoods-turnoverGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsGoods-turnoverGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsGoods-turnoverGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsGoods-turnoverGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateGoodsTurnoverRequest = extractJsonModelBodyParam<GenerateGoodsTurnoverRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateGoodsTurnoverRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsGoods-turnoverGenerateResource::handler_POST(
        std::shared_ptr<GenerateGoodsTurnoverRequest> const & generateGoodsTurnoverRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsGoods-turnoverGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsDocumentsLabelsGenerateResource::ReportsApiReportsDocumentsLabelsGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/documents/labels/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsDocumentsLabelsGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsDocumentsLabelsGenerateResource::~ReportsApiReportsDocumentsLabelsGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsDocumentsLabelsGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsDocumentsLabelsGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsDocumentsLabelsGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsDocumentsLabelsGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsDocumentsLabelsGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsDocumentsLabelsGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsDocumentsLabelsGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateMassOrderLabelsRequest = extractJsonModelBodyParam<GenerateMassOrderLabelsRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateMassOrderLabelsRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.  Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус &#x60;RESOURCE_NOT_FOUND&#x60;. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsDocumentsLabelsGenerateResource::handler_POST(
        std::shared_ptr<GenerateMassOrderLabelsRequest> const & generateMassOrderLabelsRequest, std::shared_ptr<PageFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsDocumentsLabelsGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsPricesGenerateResource::ReportsApiReportsPricesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/prices/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsPricesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsPricesGenerateResource::~ReportsApiReportsPricesGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsPricesGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsPricesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsPricesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsPricesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsPricesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsPricesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsPricesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generatePricesReportRequest = extractJsonModelBodyParam<GeneratePricesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generatePricesReportRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsPricesGenerateResource::handler_POST(
        std::shared_ptr<GeneratePricesReportRequest> const & generatePricesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsPricesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsShelf-statisticsGenerateResource::ReportsApiReportsShelf-statisticsGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/shelf-statistics/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsShelf-statisticsGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsShelf-statisticsGenerateResource::~ReportsApiReportsShelf-statisticsGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsShelf-statisticsGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsShelf-statisticsGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsShelf-statisticsGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsShelf-statisticsGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsShelf-statisticsGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsShelf-statisticsGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsShelf-statisticsGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateShelfsStatisticsRequest = extractJsonModelBodyParam<GenerateShelfsStatisticsRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateShelfsStatisticsRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsShelf-statisticsGenerateResource::handler_POST(
        std::shared_ptr<GenerateShelfsStatisticsRequest> const & generateShelfsStatisticsRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsShelf-statisticsGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsDocumentsShipment-listGenerateResource::ReportsApiReportsDocumentsShipment-listGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/documents/shipment-list/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsDocumentsShipment-listGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsDocumentsShipment-listGenerateResource::~ReportsApiReportsDocumentsShipment-listGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsDocumentsShipment-listGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsDocumentsShipment-listGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsDocumentsShipment-listGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsDocumentsShipment-listGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsDocumentsShipment-listGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsDocumentsShipment-listGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsDocumentsShipment-listGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateShipmentListDocumentReportRequest = extractJsonModelBodyParam<GenerateShipmentListDocumentReportRequest>(bodyContent);




    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateShipmentListDocumentReportRequest);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый документ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsDocumentsShipment-listGenerateResource::handler_POST(
        std::shared_ptr<GenerateShipmentListDocumentReportRequest> const & generateShipmentListDocumentReportRequest)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsDocumentsShipment-listGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsShows-salesGenerateResource::ReportsApiReportsShows-salesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/shows-sales/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsShows-salesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsShows-salesGenerateResource::~ReportsApiReportsShows-salesGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsShows-salesGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsShows-salesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsShows-salesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsShows-salesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsShows-salesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsShows-salesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsShows-salesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateShowsSalesReportRequest = extractJsonModelBodyParam<GenerateShowsSalesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateShowsSalesReportRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsShows-salesGenerateResource::handler_POST(
        std::shared_ptr<GenerateShowsSalesReportRequest> const & generateShowsSalesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsShows-salesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsStocks-on-warehousesGenerateResource::ReportsApiReportsStocks-on-warehousesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/stocks-on-warehouses/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsStocks-on-warehousesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsStocks-on-warehousesGenerateResource::~ReportsApiReportsStocks-on-warehousesGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsStocks-on-warehousesGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsStocks-on-warehousesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsStocks-on-warehousesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsStocks-on-warehousesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsStocks-on-warehousesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsStocks-on-warehousesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsStocks-on-warehousesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateStocksOnWarehousesReportRequest = extractJsonModelBodyParam<GenerateStocksOnWarehousesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateStocksOnWarehousesReportRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsStocks-on-warehousesGenerateResource::handler_POST(
        std::shared_ptr<GenerateStocksOnWarehousesReportRequest> const & generateStocksOnWarehousesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsStocks-on-warehousesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsUnited-marketplace-servicesGenerateResource::ReportsApiReportsUnited-marketplace-servicesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/united-marketplace-services/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsUnited-marketplace-servicesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsUnited-marketplace-servicesGenerateResource::~ReportsApiReportsUnited-marketplace-servicesGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsUnited-marketplace-servicesGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsUnited-marketplace-servicesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsUnited-marketplace-servicesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsUnited-marketplace-servicesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsUnited-marketplace-servicesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsUnited-marketplace-servicesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsUnited-marketplace-servicesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateUnitedMarketplaceServicesReportRequest = extractJsonModelBodyParam<GenerateUnitedMarketplaceServicesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateUnitedMarketplaceServicesReportRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsUnited-marketplace-servicesGenerateResource::handler_POST(
        std::shared_ptr<GenerateUnitedMarketplaceServicesReportRequest> const & generateUnitedMarketplaceServicesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsUnited-marketplace-servicesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsUnited-nettingGenerateResource::ReportsApiReportsUnited-nettingGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/united-netting/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsUnited-nettingGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsUnited-nettingGenerateResource::~ReportsApiReportsUnited-nettingGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsUnited-nettingGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsUnited-nettingGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsUnited-nettingGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsUnited-nettingGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsUnited-nettingGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsUnited-nettingGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsUnited-nettingGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateUnitedNettingReportRequest = extractJsonModelBodyParam<GenerateUnitedNettingReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateUnitedNettingReportRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsUnited-nettingGenerateResource::handler_POST(
        std::shared_ptr<GenerateUnitedNettingReportRequest> const & generateUnitedNettingReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsUnited-nettingGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsUnited-ordersGenerateResource::ReportsApiReportsUnited-ordersGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/united-orders/generate/");
	this->set_method_handler("POST",
		std::bind(&ReportsApiReportsUnited-ordersGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsUnited-ordersGenerateResource::~ReportsApiReportsUnited-ordersGenerateResource()
{
}

std::pair<int, std::string> ReportsApiReportsUnited-ordersGenerateResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsUnited-ordersGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsUnited-ordersGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsUnited-ordersGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsUnited-ordersGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsUnited-ordersGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsUnited-ordersGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateUnitedOrdersRequest = extractJsonModelBodyParam<GenerateUnitedOrdersRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateUnitedOrdersRequest, format);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> ReportsApiReportsUnited-ordersGenerateResource::handler_POST(
        std::shared_ptr<GenerateUnitedOrdersRequest> const & generateUnitedOrdersRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsUnited-ordersGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
ReportsApiReportsInfoReportIdResource::ReportsApiReportsInfoReportIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/info/{reportId: .*}/");
	this->set_method_handler("GET",
		std::bind(&ReportsApiReportsInfoReportIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

ReportsApiReportsInfoReportIdResource::~ReportsApiReportsInfoReportIdResource()
{
}

std::pair<int, std::string> ReportsApiReportsInfoReportIdResource::handleReportsApiException(const ReportsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ReportsApiReportsInfoReportIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ReportsApiReportsInfoReportIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ReportsApiReportsInfoReportIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ReportsApiReportsInfoReportIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void ReportsApiReportsInfoReportIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ReportsApiReportsInfoReportIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string reportId = getPathParam_reportId(request);



    int status_code = 500;
    std::shared_ptr<GetReportInfoResponse> resultObject = std::make_shared<GetReportInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(reportId);
    }
    catch(const ReportsApiException& e) {
        std::tie(status_code, result) = handleReportsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — &#x60;FAILED&#x60; или &#x60;NO_DATA&#x60;, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetReportInfoResponse>> ReportsApiReportsInfoReportIdResource::handler_GET(
        std::string const & reportId)
{
    throw ReportsApiException(501, "Not implemented");
}


std::string ReportsApiReportsInfoReportIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

ReportsApi::ReportsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

ReportsApi::~ReportsApi() {}

void ReportsApi::setReportsApiReportsBoost-consolidatedGenerateResource(std::shared_ptr<ReportsApiReportsBoost-consolidatedGenerateResource> spReportsApiReportsBoost-consolidatedGenerateResource) {
    m_spReportsApiReportsBoost-consolidatedGenerateResource = spReportsApiReportsBoost-consolidatedGenerateResource;
    m_service->publish(m_spReportsApiReportsBoost-consolidatedGenerateResource);
}
void ReportsApi::setReportsApiReportsCompetitors-positionGenerateResource(std::shared_ptr<ReportsApiReportsCompetitors-positionGenerateResource> spReportsApiReportsCompetitors-positionGenerateResource) {
    m_spReportsApiReportsCompetitors-positionGenerateResource = spReportsApiReportsCompetitors-positionGenerateResource;
    m_service->publish(m_spReportsApiReportsCompetitors-positionGenerateResource);
}
void ReportsApi::setReportsApiReportsGoods-feedbackGenerateResource(std::shared_ptr<ReportsApiReportsGoods-feedbackGenerateResource> spReportsApiReportsGoods-feedbackGenerateResource) {
    m_spReportsApiReportsGoods-feedbackGenerateResource = spReportsApiReportsGoods-feedbackGenerateResource;
    m_service->publish(m_spReportsApiReportsGoods-feedbackGenerateResource);
}
void ReportsApi::setReportsApiReportsGoods-movementGenerateResource(std::shared_ptr<ReportsApiReportsGoods-movementGenerateResource> spReportsApiReportsGoods-movementGenerateResource) {
    m_spReportsApiReportsGoods-movementGenerateResource = spReportsApiReportsGoods-movementGenerateResource;
    m_service->publish(m_spReportsApiReportsGoods-movementGenerateResource);
}
void ReportsApi::setReportsApiReportsGoods-realizationGenerateResource(std::shared_ptr<ReportsApiReportsGoods-realizationGenerateResource> spReportsApiReportsGoods-realizationGenerateResource) {
    m_spReportsApiReportsGoods-realizationGenerateResource = spReportsApiReportsGoods-realizationGenerateResource;
    m_service->publish(m_spReportsApiReportsGoods-realizationGenerateResource);
}
void ReportsApi::setReportsApiReportsGoods-turnoverGenerateResource(std::shared_ptr<ReportsApiReportsGoods-turnoverGenerateResource> spReportsApiReportsGoods-turnoverGenerateResource) {
    m_spReportsApiReportsGoods-turnoverGenerateResource = spReportsApiReportsGoods-turnoverGenerateResource;
    m_service->publish(m_spReportsApiReportsGoods-turnoverGenerateResource);
}
void ReportsApi::setReportsApiReportsDocumentsLabelsGenerateResource(std::shared_ptr<ReportsApiReportsDocumentsLabelsGenerateResource> spReportsApiReportsDocumentsLabelsGenerateResource) {
    m_spReportsApiReportsDocumentsLabelsGenerateResource = spReportsApiReportsDocumentsLabelsGenerateResource;
    m_service->publish(m_spReportsApiReportsDocumentsLabelsGenerateResource);
}
void ReportsApi::setReportsApiReportsPricesGenerateResource(std::shared_ptr<ReportsApiReportsPricesGenerateResource> spReportsApiReportsPricesGenerateResource) {
    m_spReportsApiReportsPricesGenerateResource = spReportsApiReportsPricesGenerateResource;
    m_service->publish(m_spReportsApiReportsPricesGenerateResource);
}
void ReportsApi::setReportsApiReportsShelf-statisticsGenerateResource(std::shared_ptr<ReportsApiReportsShelf-statisticsGenerateResource> spReportsApiReportsShelf-statisticsGenerateResource) {
    m_spReportsApiReportsShelf-statisticsGenerateResource = spReportsApiReportsShelf-statisticsGenerateResource;
    m_service->publish(m_spReportsApiReportsShelf-statisticsGenerateResource);
}
void ReportsApi::setReportsApiReportsDocumentsShipment-listGenerateResource(std::shared_ptr<ReportsApiReportsDocumentsShipment-listGenerateResource> spReportsApiReportsDocumentsShipment-listGenerateResource) {
    m_spReportsApiReportsDocumentsShipment-listGenerateResource = spReportsApiReportsDocumentsShipment-listGenerateResource;
    m_service->publish(m_spReportsApiReportsDocumentsShipment-listGenerateResource);
}
void ReportsApi::setReportsApiReportsShows-salesGenerateResource(std::shared_ptr<ReportsApiReportsShows-salesGenerateResource> spReportsApiReportsShows-salesGenerateResource) {
    m_spReportsApiReportsShows-salesGenerateResource = spReportsApiReportsShows-salesGenerateResource;
    m_service->publish(m_spReportsApiReportsShows-salesGenerateResource);
}
void ReportsApi::setReportsApiReportsStocks-on-warehousesGenerateResource(std::shared_ptr<ReportsApiReportsStocks-on-warehousesGenerateResource> spReportsApiReportsStocks-on-warehousesGenerateResource) {
    m_spReportsApiReportsStocks-on-warehousesGenerateResource = spReportsApiReportsStocks-on-warehousesGenerateResource;
    m_service->publish(m_spReportsApiReportsStocks-on-warehousesGenerateResource);
}
void ReportsApi::setReportsApiReportsUnited-marketplace-servicesGenerateResource(std::shared_ptr<ReportsApiReportsUnited-marketplace-servicesGenerateResource> spReportsApiReportsUnited-marketplace-servicesGenerateResource) {
    m_spReportsApiReportsUnited-marketplace-servicesGenerateResource = spReportsApiReportsUnited-marketplace-servicesGenerateResource;
    m_service->publish(m_spReportsApiReportsUnited-marketplace-servicesGenerateResource);
}
void ReportsApi::setReportsApiReportsUnited-nettingGenerateResource(std::shared_ptr<ReportsApiReportsUnited-nettingGenerateResource> spReportsApiReportsUnited-nettingGenerateResource) {
    m_spReportsApiReportsUnited-nettingGenerateResource = spReportsApiReportsUnited-nettingGenerateResource;
    m_service->publish(m_spReportsApiReportsUnited-nettingGenerateResource);
}
void ReportsApi::setReportsApiReportsUnited-ordersGenerateResource(std::shared_ptr<ReportsApiReportsUnited-ordersGenerateResource> spReportsApiReportsUnited-ordersGenerateResource) {
    m_spReportsApiReportsUnited-ordersGenerateResource = spReportsApiReportsUnited-ordersGenerateResource;
    m_service->publish(m_spReportsApiReportsUnited-ordersGenerateResource);
}
void ReportsApi::setReportsApiReportsInfoReportIdResource(std::shared_ptr<ReportsApiReportsInfoReportIdResource> spReportsApiReportsInfoReportIdResource) {
    m_spReportsApiReportsInfoReportIdResource = spReportsApiReportsInfoReportIdResource;
    m_service->publish(m_spReportsApiReportsInfoReportIdResource);
}


void ReportsApi::publishDefaultResources() {
    if (!m_spReportsApiReportsBoost-consolidatedGenerateResource) {
        setReportsApiReportsBoost-consolidatedGenerateResource(std::make_shared<ReportsApiReportsBoost-consolidatedGenerateResource>());
    }
    if (!m_spReportsApiReportsCompetitors-positionGenerateResource) {
        setReportsApiReportsCompetitors-positionGenerateResource(std::make_shared<ReportsApiReportsCompetitors-positionGenerateResource>());
    }
    if (!m_spReportsApiReportsGoods-feedbackGenerateResource) {
        setReportsApiReportsGoods-feedbackGenerateResource(std::make_shared<ReportsApiReportsGoods-feedbackGenerateResource>());
    }
    if (!m_spReportsApiReportsGoods-movementGenerateResource) {
        setReportsApiReportsGoods-movementGenerateResource(std::make_shared<ReportsApiReportsGoods-movementGenerateResource>());
    }
    if (!m_spReportsApiReportsGoods-realizationGenerateResource) {
        setReportsApiReportsGoods-realizationGenerateResource(std::make_shared<ReportsApiReportsGoods-realizationGenerateResource>());
    }
    if (!m_spReportsApiReportsGoods-turnoverGenerateResource) {
        setReportsApiReportsGoods-turnoverGenerateResource(std::make_shared<ReportsApiReportsGoods-turnoverGenerateResource>());
    }
    if (!m_spReportsApiReportsDocumentsLabelsGenerateResource) {
        setReportsApiReportsDocumentsLabelsGenerateResource(std::make_shared<ReportsApiReportsDocumentsLabelsGenerateResource>());
    }
    if (!m_spReportsApiReportsPricesGenerateResource) {
        setReportsApiReportsPricesGenerateResource(std::make_shared<ReportsApiReportsPricesGenerateResource>());
    }
    if (!m_spReportsApiReportsShelf-statisticsGenerateResource) {
        setReportsApiReportsShelf-statisticsGenerateResource(std::make_shared<ReportsApiReportsShelf-statisticsGenerateResource>());
    }
    if (!m_spReportsApiReportsDocumentsShipment-listGenerateResource) {
        setReportsApiReportsDocumentsShipment-listGenerateResource(std::make_shared<ReportsApiReportsDocumentsShipment-listGenerateResource>());
    }
    if (!m_spReportsApiReportsShows-salesGenerateResource) {
        setReportsApiReportsShows-salesGenerateResource(std::make_shared<ReportsApiReportsShows-salesGenerateResource>());
    }
    if (!m_spReportsApiReportsStocks-on-warehousesGenerateResource) {
        setReportsApiReportsStocks-on-warehousesGenerateResource(std::make_shared<ReportsApiReportsStocks-on-warehousesGenerateResource>());
    }
    if (!m_spReportsApiReportsUnited-marketplace-servicesGenerateResource) {
        setReportsApiReportsUnited-marketplace-servicesGenerateResource(std::make_shared<ReportsApiReportsUnited-marketplace-servicesGenerateResource>());
    }
    if (!m_spReportsApiReportsUnited-nettingGenerateResource) {
        setReportsApiReportsUnited-nettingGenerateResource(std::make_shared<ReportsApiReportsUnited-nettingGenerateResource>());
    }
    if (!m_spReportsApiReportsUnited-ordersGenerateResource) {
        setReportsApiReportsUnited-ordersGenerateResource(std::make_shared<ReportsApiReportsUnited-ordersGenerateResource>());
    }
    if (!m_spReportsApiReportsInfoReportIdResource) {
        setReportsApiReportsInfoReportIdResource(std::make_shared<ReportsApiReportsInfoReportIdResource>());
    }
}

std::shared_ptr<restbed::Service> ReportsApi::service() {
    return m_service;
}


}
}
}
}

