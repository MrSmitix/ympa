/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GoodsFeedbackApi.h
 *
 * 
 */

#ifndef GoodsFeedbackApi_H_
#define GoodsFeedbackApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "DeleteGoodsFeedbackCommentRequest.h"
#include "EmptyApiResponse.h"
#include "GetGoodsFeedbackCommentsRequest.h"
#include "GetGoodsFeedbackCommentsResponse.h"
#include "GetGoodsFeedbackRequest.h"
#include "GetGoodsFeedbackResponse.h"
#include "SkipGoodsFeedbackReactionRequest.h"
#include "UpdateGoodsFeedbackCommentRequest.h"
#include "UpdateGoodsFeedbackCommentResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  GoodsFeedbackApiException: public std::exception
{
public:
    GoodsFeedbackApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace GoodsFeedbackApiResources {
/// <summary>
/// Удаление комментария к отзыву
/// </summary>
/// <remarks>
/// Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdGoods_feedbackCommentsDeleteResource: public restbed::Resource
{
public:
    BusinessesBusinessIdGoods_feedbackCommentsDeleteResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdGoods_feedbackCommentsDeleteResource() = default;

    BusinessesBusinessIdGoods_feedbackCommentsDeleteResource(
        const BusinessesBusinessIdGoods_feedbackCommentsDeleteResource& other) = default; // copy constructor
    BusinessesBusinessIdGoods_feedbackCommentsDeleteResource(BusinessesBusinessIdGoods_feedbackCommentsDeleteResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdGoods_feedbackCommentsDeleteResource& operator=(const BusinessesBusinessIdGoods_feedbackCommentsDeleteResource& other) = default; // copy assignment
    BusinessesBusinessIdGoods_feedbackCommentsDeleteResource& operator=(BusinessesBusinessIdGoods_feedbackCommentsDeleteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, DeleteGoodsFeedbackCommentRequest & deleteGoodsFeedbackCommentRequest)> handler_POST_func =
            [](int64_t &, DeleteGoodsFeedbackCommentRequest &) -> std::pair<int, EmptyApiResponse>
                { throw GoodsFeedbackApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, DeleteGoodsFeedbackCommentRequest & deleteGoodsFeedbackCommentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение комментариев к отзыву
/// </summary>
/// <remarks>
/// Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdGoods_feedbackCommentsResource: public restbed::Resource
{
public:
    BusinessesBusinessIdGoods_feedbackCommentsResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdGoods_feedbackCommentsResource() = default;

    BusinessesBusinessIdGoods_feedbackCommentsResource(
        const BusinessesBusinessIdGoods_feedbackCommentsResource& other) = default; // copy constructor
    BusinessesBusinessIdGoods_feedbackCommentsResource(BusinessesBusinessIdGoods_feedbackCommentsResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdGoods_feedbackCommentsResource& operator=(const BusinessesBusinessIdGoods_feedbackCommentsResource& other) = default; // copy assignment
    BusinessesBusinessIdGoods_feedbackCommentsResource& operator=(BusinessesBusinessIdGoods_feedbackCommentsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetGoodsFeedbackCommentsResponse>(
        int64_t & businessId, GetGoodsFeedbackCommentsRequest & getGoodsFeedbackCommentsRequest, std::string & pageToken, int32_t & limit)> handler_POST_func =
            [](int64_t &, GetGoodsFeedbackCommentsRequest &, std::string &, int32_t &) -> std::pair<int, GetGoodsFeedbackCommentsResponse>
                { throw GoodsFeedbackApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetGoodsFeedbackCommentsResponse> handler_POST(
        int64_t & businessId, GetGoodsFeedbackCommentsRequest & getGoodsFeedbackCommentsRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение отзывов о товарах продавца
/// </summary>
/// <remarks>
/// Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdGoods_feedbackResource: public restbed::Resource
{
public:
    BusinessesBusinessIdGoods_feedbackResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdGoods_feedbackResource() = default;

    BusinessesBusinessIdGoods_feedbackResource(
        const BusinessesBusinessIdGoods_feedbackResource& other) = default; // copy constructor
    BusinessesBusinessIdGoods_feedbackResource(BusinessesBusinessIdGoods_feedbackResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdGoods_feedbackResource& operator=(const BusinessesBusinessIdGoods_feedbackResource& other) = default; // copy assignment
    BusinessesBusinessIdGoods_feedbackResource& operator=(BusinessesBusinessIdGoods_feedbackResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetGoodsFeedbackResponse>(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetGoodsFeedbackRequest & getGoodsFeedbackRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetGoodsFeedbackRequest &) -> std::pair<int, GetGoodsFeedbackResponse>
                { throw GoodsFeedbackApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetGoodsFeedbackResponse> handler_POST(
        int64_t & businessId, std::string & pageToken, int32_t & limit, GetGoodsFeedbackRequest & getGoodsFeedbackRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Отказ от ответа на отзывы
/// </summary>
/// <remarks>
/// Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdGoods_feedbackSkip_reactionResource: public restbed::Resource
{
public:
    BusinessesBusinessIdGoods_feedbackSkip_reactionResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdGoods_feedbackSkip_reactionResource() = default;

    BusinessesBusinessIdGoods_feedbackSkip_reactionResource(
        const BusinessesBusinessIdGoods_feedbackSkip_reactionResource& other) = default; // copy constructor
    BusinessesBusinessIdGoods_feedbackSkip_reactionResource(BusinessesBusinessIdGoods_feedbackSkip_reactionResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdGoods_feedbackSkip_reactionResource& operator=(const BusinessesBusinessIdGoods_feedbackSkip_reactionResource& other) = default; // copy assignment
    BusinessesBusinessIdGoods_feedbackSkip_reactionResource& operator=(BusinessesBusinessIdGoods_feedbackSkip_reactionResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & businessId, SkipGoodsFeedbackReactionRequest & skipGoodsFeedbackReactionRequest)> handler_POST_func =
            [](int64_t &, SkipGoodsFeedbackReactionRequest &) -> std::pair<int, EmptyApiResponse>
                { throw GoodsFeedbackApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & businessId, SkipGoodsFeedbackReactionRequest & skipGoodsFeedbackReactionRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Добавление нового или изменение созданного комментария
/// </summary>
/// <remarks>
/// Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  BusinessesBusinessIdGoods_feedbackCommentsUpdateResource: public restbed::Resource
{
public:
    BusinessesBusinessIdGoods_feedbackCommentsUpdateResource(const std::string& context = "");
    virtual ~BusinessesBusinessIdGoods_feedbackCommentsUpdateResource() = default;

    BusinessesBusinessIdGoods_feedbackCommentsUpdateResource(
        const BusinessesBusinessIdGoods_feedbackCommentsUpdateResource& other) = default; // copy constructor
    BusinessesBusinessIdGoods_feedbackCommentsUpdateResource(BusinessesBusinessIdGoods_feedbackCommentsUpdateResource&& other) noexcept = default; // move constructor

    BusinessesBusinessIdGoods_feedbackCommentsUpdateResource& operator=(const BusinessesBusinessIdGoods_feedbackCommentsUpdateResource& other) = default; // copy assignment
    BusinessesBusinessIdGoods_feedbackCommentsUpdateResource& operator=(BusinessesBusinessIdGoods_feedbackCommentsUpdateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdateGoodsFeedbackCommentResponse>(
        int64_t & businessId, UpdateGoodsFeedbackCommentRequest & updateGoodsFeedbackCommentRequest)> handler_POST_func =
            [](int64_t &, UpdateGoodsFeedbackCommentRequest &) -> std::pair<int, UpdateGoodsFeedbackCommentResponse>
                { throw GoodsFeedbackApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdateGoodsFeedbackCommentResponse> handler_POST(
        int64_t & businessId, UpdateGoodsFeedbackCommentRequest & updateGoodsFeedbackCommentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace GoodsFeedbackApiResources */

using GoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsDeleteResource [[deprecated]] = GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource;
using GoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsResource [[deprecated]] = GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource;
using GoodsFeedbackApiBusinessesBusinessIdGoods_feedbackResource [[deprecated]] = GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackResource;
using GoodsFeedbackApiBusinessesBusinessIdGoods_feedbackSkip_reactionResource [[deprecated]] = GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource;
using GoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsUpdateResource [[deprecated]] = GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource;

//
// The restbed service to actually implement the REST server
//
class  GoodsFeedbackApi
{
public:
    explicit GoodsFeedbackApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~GoodsFeedbackApi();

    std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource> getBusinessesBusinessIdGoods_feedbackCommentsDeleteResource();
    std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource> getBusinessesBusinessIdGoods_feedbackCommentsResource();
    std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackResource> getBusinessesBusinessIdGoods_feedbackResource();
    std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource> getBusinessesBusinessIdGoods_feedbackSkip_reactionResource();
    std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource> getBusinessesBusinessIdGoods_feedbackCommentsUpdateResource();

    void setResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource> resource);
    void setResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource> resource);
    void setResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackResource> resource);
    void setResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource> resource);
    void setResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsDeleteResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource> spGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsDeleteResource);
    [[deprecated("use setResource()")]]
    virtual void setGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource> spGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsResource);
    [[deprecated("use setResource()")]]
    virtual void setGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackResource> spGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackResource);
    [[deprecated("use setResource()")]]
    virtual void setGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackSkip_reactionResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource> spGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackSkip_reactionResource);
    [[deprecated("use setResource()")]]
    virtual void setGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsUpdateResource(std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource> spGoodsFeedbackApiBusinessesBusinessIdGoods_feedbackCommentsUpdateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsDeleteResource> m_spBusinessesBusinessIdGoods_feedbackCommentsDeleteResource;
    std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsResource> m_spBusinessesBusinessIdGoods_feedbackCommentsResource;
    std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackResource> m_spBusinessesBusinessIdGoods_feedbackResource;
    std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackSkip_reactionResource> m_spBusinessesBusinessIdGoods_feedbackSkip_reactionResource;
    std::shared_ptr<GoodsFeedbackApiResources::BusinessesBusinessIdGoods_feedbackCommentsUpdateResource> m_spBusinessesBusinessIdGoods_feedbackCommentsUpdateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* GoodsFeedbackApi_H_ */

