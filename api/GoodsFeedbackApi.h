/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GoodsFeedbackApi.h
 *
 * 
 */

#ifndef GoodsFeedbackApi_H_
#define GoodsFeedbackApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "DeleteGoodsFeedbackCommentRequest.h"
#include "EmptyApiResponse.h"
#include "GetGoodsFeedbackCommentsRequest.h"
#include "GetGoodsFeedbackCommentsResponse.h"
#include "GetGoodsFeedbackRequest.h"
#include "GetGoodsFeedbackResponse.h"
#include "SkipGoodsFeedbackReactionRequest.h"
#include "UpdateGoodsFeedbackCommentRequest.h"
#include "UpdateGoodsFeedbackCommentResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  GoodsFeedbackApiException: public std::exception
{
public:
    GoodsFeedbackApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Удаление комментария к отзыву
/// </summary>
/// <remarks>
/// Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource: public restbed::Resource
{
public:
    GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(const std::string& context = "");
    virtual ~GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteGoodsFeedbackCommentRequest> const & deleteGoodsFeedbackCommentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение комментариев к отзыву
/// </summary>
/// <remarks>
/// Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource: public restbed::Resource
{
public:
    GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource(const std::string& context = "");
    virtual ~GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetGoodsFeedbackCommentsResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<GetGoodsFeedbackCommentsRequest> const & getGoodsFeedbackCommentsRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение отзывов о товарах продавца
/// </summary>
/// <remarks>
/// Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource: public restbed::Resource
{
public:
    GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource(const std::string& context = "");
    virtual ~GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetGoodsFeedbackResponse>> handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetGoodsFeedbackRequest> const & getGoodsFeedbackRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Отказ от ответа на отзывы
/// </summary>
/// <remarks>
/// Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource: public restbed::Resource
{
public:
    GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(const std::string& context = "");
    virtual ~GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<SkipGoodsFeedbackReactionRequest> const & skipGoodsFeedbackReactionRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Добавление нового или изменение созданного комментария
/// </summary>
/// <remarks>
/// Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource: public restbed::Resource
{
public:
    GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(const std::string& context = "");
    virtual ~GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<UpdateGoodsFeedbackCommentResponse>> handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateGoodsFeedbackCommentRequest> const & updateGoodsFeedbackCommentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleGoodsFeedbackApiException(const GoodsFeedbackApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  GoodsFeedbackApi
{
public:
    explicit GoodsFeedbackApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~GoodsFeedbackApi();

    virtual void setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource> spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource);
    virtual void setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource(std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource> spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource);
    virtual void setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource(std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource> spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource);
    virtual void setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource> spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource);
    virtual void setGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource> spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource> m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource;
    std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource> m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsResource;
    std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource> m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackResource;
    std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource> m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource;
    std::shared_ptr<GoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource> m_spGoodsFeedbackApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* GoodsFeedbackApi_H_ */

