/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiLockedErrorResponse } from '../model/apiLockedErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { GetCategoryContentParametersResponse } from '../model/getCategoryContentParametersResponse';
import { GetOfferCardsContentStatusRequest } from '../model/getOfferCardsContentStatusRequest';
import { GetOfferCardsContentStatusResponse } from '../model/getOfferCardsContentStatusResponse';
import { UpdateOfferContentRequest } from '../model/updateOfferContentRequest';
import { UpdateOfferContentResponse } from '../model/updateOfferContentResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ContentService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Списки характеристик товаров по категориям
     * Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
     * @param categoryId Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
     
     */
    public getCategoryContentParameters(categoryId: number, observe?: 'body', headers?: Headers): Observable<GetCategoryContentParametersResponse>;
    public getCategoryContentParameters(categoryId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetCategoryContentParametersResponse>>;
    public getCategoryContentParameters(categoryId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (categoryId === null || categoryId === undefined){
            throw new Error('Required parameter categoryId was null or undefined when calling getCategoryContentParameters.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetCategoryContentParametersResponse>> = this.httpClient.post(`${this.basePath}/category/${encodeURIComponent(String(categoryId))}/parameters`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetCategoryContentParametersResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение информации о заполненности карточек магазина
     * Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
     * @param limit Количество значений на одной странице. 
     * @param getOfferCardsContentStatusRequest 
     
     */
    public getOfferCardsContentStatus(businessId: number, pageToken?: string, limit?: number, getOfferCardsContentStatusRequest?: GetOfferCardsContentStatusRequest, observe?: 'body', headers?: Headers): Observable<GetOfferCardsContentStatusResponse>;
    public getOfferCardsContentStatus(businessId: number, pageToken?: string, limit?: number, getOfferCardsContentStatusRequest?: GetOfferCardsContentStatusRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetOfferCardsContentStatusResponse>>;
    public getOfferCardsContentStatus(businessId: number, pageToken?: string, limit?: number, getOfferCardsContentStatusRequest?: GetOfferCardsContentStatusRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getOfferCardsContentStatus.');
        }

        let queryParameters: string[] = [];
        if (pageToken !== undefined) {
            queryParameters.push('pageToken='+encodeURIComponent(String(pageToken)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetOfferCardsContentStatusResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/offer-cards?${queryParameters.join('&')}`, getOfferCardsContentStatusRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetOfferCardsContentStatusResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Редактирование категорийных характеристик товара
     * Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \&quot;Здесь только то, что относится к конкретной категории\&quot; %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param updateOfferContentRequest 
     
     */
    public updateOfferContent(businessId: number, updateOfferContentRequest: UpdateOfferContentRequest, observe?: 'body', headers?: Headers): Observable<UpdateOfferContentResponse>;
    public updateOfferContent(businessId: number, updateOfferContentRequest: UpdateOfferContentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<UpdateOfferContentResponse>>;
    public updateOfferContent(businessId: number, updateOfferContentRequest: UpdateOfferContentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling updateOfferContent.');
        }

        if (updateOfferContentRequest === null || updateOfferContentRequest === undefined){
            throw new Error('Required parameter updateOfferContentRequest was null or undefined when calling updateOfferContent.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UpdateOfferContentResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/offer-cards/update`, updateOfferContentRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <UpdateOfferContentResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
