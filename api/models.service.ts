/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { CurrencyType } from '../model/currencyType';
import { GetModelsOffersResponse } from '../model/getModelsOffersResponse';
import { GetModelsRequest } from '../model/getModelsRequest';
import { GetModelsResponse } from '../model/getModelsResponse';
import { SearchModelsResponse } from '../model/searchModelsResponse';
import { SortOrderType } from '../model/sortOrderType';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ModelsService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Информация об одной модели
     * Возвращает информацию о модели товара.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
     * @param modelId Идентификатор модели товара.
     * @param regionId Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
     * @param currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
     
     */
    public getModel(modelId: number, regionId: number, currency?: CurrencyType, observe?: 'body', headers?: Headers): Observable<GetModelsResponse>;
    public getModel(modelId: number, regionId: number, currency?: CurrencyType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetModelsResponse>>;
    public getModel(modelId: number, regionId: number, currency?: CurrencyType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (modelId === null || modelId === undefined){
            throw new Error('Required parameter modelId was null or undefined when calling getModel.');
        }

        if (regionId === null || regionId === undefined){
            throw new Error('Required parameter regionId was null or undefined when calling getModel.');
        }

        let queryParameters: string[] = [];
        if (regionId !== undefined) {
            queryParameters.push('regionId='+encodeURIComponent(String(regionId)));
        }
        if (currency !== undefined) {
            queryParameters.push('currency='+encodeURIComponent(String(currency)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetModelsResponse>> = this.httpClient.get(`${this.basePath}/models/${encodeURIComponent(String(modelId))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetModelsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Список предложений для одной модели
     * Возвращает информацию о первых десяти предложениях, расположенных на карточке модели.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей метод не поддерживается. Идентификатор групповой модели игнорируется.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
     * @param modelId Идентификатор модели товара.
     * @param regionId Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
     * @param currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
     * @param orderByPrice Направление сортировки по цене.  Возможные значения: * &#x60;ASC&#x60; — сортировка по возрастанию. * &#x60;DESC&#x60; — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке. 
     * @param count Количество предложений на странице ответа.
     * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. 
     
     */
    public getModelOffers(modelId: number, regionId: number, currency?: CurrencyType, orderByPrice?: SortOrderType, count?: number, page?: number, observe?: 'body', headers?: Headers): Observable<GetModelsOffersResponse>;
    public getModelOffers(modelId: number, regionId: number, currency?: CurrencyType, orderByPrice?: SortOrderType, count?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetModelsOffersResponse>>;
    public getModelOffers(modelId: number, regionId: number, currency?: CurrencyType, orderByPrice?: SortOrderType, count?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (modelId === null || modelId === undefined){
            throw new Error('Required parameter modelId was null or undefined when calling getModelOffers.');
        }

        if (regionId === null || regionId === undefined){
            throw new Error('Required parameter regionId was null or undefined when calling getModelOffers.');
        }

        let queryParameters: string[] = [];
        if (regionId !== undefined) {
            queryParameters.push('regionId='+encodeURIComponent(String(regionId)));
        }
        if (currency !== undefined) {
            queryParameters.push('currency='+encodeURIComponent(String(currency)));
        }
        if (orderByPrice !== undefined) {
            queryParameters.push('orderByPrice='+encodeURIComponent(String(orderByPrice)));
        }
        if (count !== undefined) {
            queryParameters.push('count='+encodeURIComponent(String(count)));
        }
        if (page !== undefined) {
            queryParameters.push('page='+encodeURIComponent(String(page)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetModelsOffersResponse>> = this.httpClient.get(`${this.basePath}/models/${encodeURIComponent(String(modelId))}/offers?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetModelsOffersResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Информация о нескольких моделях
     * Возвращает информацию о моделях товаров.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
     * @param regionId Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
     * @param getModelsRequest 
     * @param currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
     
     */
    public getModels(regionId: number, getModelsRequest: GetModelsRequest, currency?: CurrencyType, observe?: 'body', headers?: Headers): Observable<GetModelsResponse>;
    public getModels(regionId: number, getModelsRequest: GetModelsRequest, currency?: CurrencyType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetModelsResponse>>;
    public getModels(regionId: number, getModelsRequest: GetModelsRequest, currency?: CurrencyType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (regionId === null || regionId === undefined){
            throw new Error('Required parameter regionId was null or undefined when calling getModels.');
        }

        if (getModelsRequest === null || getModelsRequest === undefined){
            throw new Error('Required parameter getModelsRequest was null or undefined when calling getModels.');
        }

        let queryParameters: string[] = [];
        if (regionId !== undefined) {
            queryParameters.push('regionId='+encodeURIComponent(String(regionId)));
        }
        if (currency !== undefined) {
            queryParameters.push('currency='+encodeURIComponent(String(currency)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetModelsResponse>> = this.httpClient.post(`${this.basePath}/models?${queryParameters.join('&')}`, getModelsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetModelsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Список предложений для нескольких моделей
     * Возвращает информацию о первых десяти предложениях, расположенных на карточках моделей, идентификаторы которых указаны в запросе.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей выдача предложений не поддерживается. Идентификаторы групповых моделей игнорируются.  В одном запросе можно получить информацию о предложениях не более чем для 100 моделей.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
     * @param regionId Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
     * @param getModelsRequest 
     * @param currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
     * @param orderByPrice Направление сортировки по цене.  Возможные значения: * &#x60;ASC&#x60; — сортировка по возрастанию. * &#x60;DESC&#x60; — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке. 
     
     */
    public getModelsOffers(regionId: number, getModelsRequest: GetModelsRequest, currency?: CurrencyType, orderByPrice?: SortOrderType, observe?: 'body', headers?: Headers): Observable<GetModelsOffersResponse>;
    public getModelsOffers(regionId: number, getModelsRequest: GetModelsRequest, currency?: CurrencyType, orderByPrice?: SortOrderType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetModelsOffersResponse>>;
    public getModelsOffers(regionId: number, getModelsRequest: GetModelsRequest, currency?: CurrencyType, orderByPrice?: SortOrderType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (regionId === null || regionId === undefined){
            throw new Error('Required parameter regionId was null or undefined when calling getModelsOffers.');
        }

        if (getModelsRequest === null || getModelsRequest === undefined){
            throw new Error('Required parameter getModelsRequest was null or undefined when calling getModelsOffers.');
        }

        let queryParameters: string[] = [];
        if (regionId !== undefined) {
            queryParameters.push('regionId='+encodeURIComponent(String(regionId)));
        }
        if (currency !== undefined) {
            queryParameters.push('currency='+encodeURIComponent(String(currency)));
        }
        if (orderByPrice !== undefined) {
            queryParameters.push('orderByPrice='+encodeURIComponent(String(orderByPrice)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetModelsOffersResponse>> = this.httpClient.post(`${this.basePath}/models/offers?${queryParameters.join('&')}`, getModelsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetModelsOffersResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Поиск модели товара
     * Возвращает информацию о моделях, удовлетворяющих заданным в запросе условиям поиска.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
     * @param query Поисковый запрос по названию модели товара.
     * @param regionId Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
     * @param currency Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
     * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. 
     * @param pageSize Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. 
     
     */
    public searchModels(query: string, regionId: number, currency?: CurrencyType, page?: number, pageSize?: number, observe?: 'body', headers?: Headers): Observable<SearchModelsResponse>;
    public searchModels(query: string, regionId: number, currency?: CurrencyType, page?: number, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<SearchModelsResponse>>;
    public searchModels(query: string, regionId: number, currency?: CurrencyType, page?: number, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (query === null || query === undefined){
            throw new Error('Required parameter query was null or undefined when calling searchModels.');
        }

        if (regionId === null || regionId === undefined){
            throw new Error('Required parameter regionId was null or undefined when calling searchModels.');
        }

        let queryParameters: string[] = [];
        if (query !== undefined) {
            queryParameters.push('query='+encodeURIComponent(String(query)));
        }
        if (regionId !== undefined) {
            queryParameters.push('regionId='+encodeURIComponent(String(regionId)));
        }
        if (currency !== undefined) {
            queryParameters.push('currency='+encodeURIComponent(String(currency)));
        }
        if (page !== undefined) {
            queryParameters.push('page='+encodeURIComponent(String(page)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<SearchModelsResponse>> = this.httpClient.get(`${this.basePath}/models?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SearchModelsResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
