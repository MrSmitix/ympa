/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * StocksApi.h
 *
 * 
 */

#ifndef StocksApi_H_
#define StocksApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetWarehouseStocksRequest.h"
#include "GetWarehouseStocksResponse.h"
#include "UpdateStocksRequest.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  StocksApiException: public std::exception
{
public:
    StocksApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace StocksApiResources {
/// <summary>
/// Информация об остатках и оборачиваемости
/// </summary>
/// <remarks>
/// Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \&quot;По умолчанию данные по оборачивамости не возращаются\&quot; %}  Чтобы они были в ответе, передавайте &#x60;true&#x60; в поле &#x60;withTurnover&#x60;.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: &lt;&gt; (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
/// </remarks>
class  CampaignsCampaignIdOffersStocksResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOffersStocksResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOffersStocksResource() = default;

    CampaignsCampaignIdOffersStocksResource(
        const CampaignsCampaignIdOffersStocksResource& other) = default; // copy constructor
    CampaignsCampaignIdOffersStocksResource(CampaignsCampaignIdOffersStocksResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOffersStocksResource& operator=(const CampaignsCampaignIdOffersStocksResource& other) = default; // copy assignment
    CampaignsCampaignIdOffersStocksResource& operator=(CampaignsCampaignIdOffersStocksResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetWarehouseStocksResponse>(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, GetWarehouseStocksRequest & getWarehouseStocksRequest)> handler_POST_func =
            [](int64_t &, std::string &, int32_t &, GetWarehouseStocksRequest &) -> std::pair<int, GetWarehouseStocksResponse>
                { throw StocksApiException(501, "Not implemented"); };

    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, UpdateStocksRequest & updateStocksRequest)> handler_PUT_func =
            [](int64_t &, UpdateStocksRequest &) -> std::pair<int, EmptyApiResponse>
                { throw StocksApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetWarehouseStocksResponse> handler_POST(
        int64_t & campaignId, std::string & pageToken, int32_t & limit, GetWarehouseStocksRequest & getWarehouseStocksRequest);

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, UpdateStocksRequest & updateStocksRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleStocksApiException(const StocksApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace StocksApiResources */

using StocksApiCampaignsCampaignIdOffersStocksResource [[deprecated]] = StocksApiResources::CampaignsCampaignIdOffersStocksResource;

//
// The restbed service to actually implement the REST server
//
class  StocksApi
{
public:
    explicit StocksApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~StocksApi();

    std::shared_ptr<StocksApiResources::CampaignsCampaignIdOffersStocksResource> getCampaignsCampaignIdOffersStocksResource();

    void setResource(std::shared_ptr<StocksApiResources::CampaignsCampaignIdOffersStocksResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setStocksApiCampaignsCampaignIdOffersStocksResource(std::shared_ptr<StocksApiResources::CampaignsCampaignIdOffersStocksResource> spStocksApiCampaignsCampaignIdOffersStocksResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<StocksApiResources::CampaignsCampaignIdOffersStocksResource> m_spCampaignsCampaignIdOffersStocksResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* StocksApi_H_ */

