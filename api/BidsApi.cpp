/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "BidsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

BidsApiException::BidsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int BidsApiException::getStatus() const
{
    return m_status;
}
const char* BidsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

BidsApiBusinessesBusinessIdBidsInfoResource::BidsApiBusinessesBusinessIdBidsInfoResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/bids/info/");
	this->set_method_handler("POST",
		std::bind(&BidsApiBusinessesBusinessIdBidsInfoResource::handler_POST_internal, this,
			std::placeholders::_1));
}

BidsApiBusinessesBusinessIdBidsInfoResource::~BidsApiBusinessesBusinessIdBidsInfoResource()
{
}

std::pair<int, std::string> BidsApiBusinessesBusinessIdBidsInfoResource::handleBidsApiException(const BidsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BidsApiBusinessesBusinessIdBidsInfoResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BidsApiBusinessesBusinessIdBidsInfoResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BidsApiBusinessesBusinessIdBidsInfoResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BidsApiBusinessesBusinessIdBidsInfoResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BidsApiBusinessesBusinessIdBidsInfoResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BidsApiBusinessesBusinessIdBidsInfoResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getBidsInfoRequest = extractJsonModelBodyParam<GetBidsInfoRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetBidsInfoResponse> resultObject = std::make_shared<GetBidsInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, pageToken, limit, getBidsInfoRequest);
    }
    catch(const BidsApiException& e) {
        std::tie(status_code, result) = handleBidsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBidsInfoResponse>> BidsApiBusinessesBusinessIdBidsInfoResource::handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetBidsInfoRequest> const & getBidsInfoRequest)
{
    throw BidsApiException(501, "Not implemented");
}


std::string BidsApiBusinessesBusinessIdBidsInfoResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BidsApiBusinessesBusinessIdBidsRecommendationsResource::BidsApiBusinessesBusinessIdBidsRecommendationsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/bids/recommendations/");
	this->set_method_handler("POST",
		std::bind(&BidsApiBusinessesBusinessIdBidsRecommendationsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

BidsApiBusinessesBusinessIdBidsRecommendationsResource::~BidsApiBusinessesBusinessIdBidsRecommendationsResource()
{
}

std::pair<int, std::string> BidsApiBusinessesBusinessIdBidsRecommendationsResource::handleBidsApiException(const BidsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BidsApiBusinessesBusinessIdBidsRecommendationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BidsApiBusinessesBusinessIdBidsRecommendationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BidsApiBusinessesBusinessIdBidsRecommendationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BidsApiBusinessesBusinessIdBidsRecommendationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BidsApiBusinessesBusinessIdBidsRecommendationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BidsApiBusinessesBusinessIdBidsRecommendationsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getBidsRecommendationsRequest = extractJsonModelBodyParam<GetBidsRecommendationsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetBidsRecommendationsResponse> resultObject = std::make_shared<GetBidsRecommendationsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getBidsRecommendationsRequest);
    }
    catch(const BidsApiException& e) {
        std::tie(status_code, result) = handleBidsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Рекомендованные ставки для заданных товаров." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBidsRecommendationsResponse>> BidsApiBusinessesBusinessIdBidsRecommendationsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetBidsRecommendationsRequest> const & getBidsRecommendationsRequest)
{
    throw BidsApiException(501, "Not implemented");
}


std::string BidsApiBusinessesBusinessIdBidsRecommendationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BidsApiBusinessesBusinessIdBidsResource::BidsApiBusinessesBusinessIdBidsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/bids/");
	this->set_method_handler("PUT",
		std::bind(&BidsApiBusinessesBusinessIdBidsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

BidsApiBusinessesBusinessIdBidsResource::~BidsApiBusinessesBusinessIdBidsResource()
{
}

std::pair<int, std::string> BidsApiBusinessesBusinessIdBidsResource::handleBidsApiException(const BidsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BidsApiBusinessesBusinessIdBidsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BidsApiBusinessesBusinessIdBidsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BidsApiBusinessesBusinessIdBidsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BidsApiBusinessesBusinessIdBidsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BidsApiBusinessesBusinessIdBidsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BidsApiBusinessesBusinessIdBidsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto putSkuBidsRequest = extractJsonModelBodyParam<PutSkuBidsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(businessId, putSkuBidsRequest);
    }
    catch(const BidsApiException& e) {
        std::tie(status_code, result) = handleBidsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> BidsApiBusinessesBusinessIdBidsResource::handler_PUT(
        int64_t const & businessId, std::shared_ptr<PutSkuBidsRequest> const & putSkuBidsRequest)
{
    throw BidsApiException(501, "Not implemented");
}


std::string BidsApiBusinessesBusinessIdBidsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BidsApiCampaignsCampaignIdBidsResource::BidsApiCampaignsCampaignIdBidsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/bids/");
	this->set_method_handler("PUT",
		std::bind(&BidsApiCampaignsCampaignIdBidsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

BidsApiCampaignsCampaignIdBidsResource::~BidsApiCampaignsCampaignIdBidsResource()
{
}

std::pair<int, std::string> BidsApiCampaignsCampaignIdBidsResource::handleBidsApiException(const BidsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BidsApiCampaignsCampaignIdBidsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BidsApiCampaignsCampaignIdBidsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BidsApiCampaignsCampaignIdBidsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BidsApiCampaignsCampaignIdBidsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BidsApiCampaignsCampaignIdBidsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BidsApiCampaignsCampaignIdBidsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto putSkuBidsRequest = extractJsonModelBodyParam<PutSkuBidsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, putSkuBidsRequest);
    }
    catch(const BidsApiException& e) {
        std::tie(status_code, result) = handleBidsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> BidsApiCampaignsCampaignIdBidsResource::handler_PUT(
        int64_t const & campaignId, std::shared_ptr<PutSkuBidsRequest> const & putSkuBidsRequest)
{
    throw BidsApiException(501, "Not implemented");
}


std::string BidsApiCampaignsCampaignIdBidsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

BidsApi::BidsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

BidsApi::~BidsApi() {}

void BidsApi::setBidsApiBusinessesBusinessIdBidsInfoResource(std::shared_ptr<BidsApiBusinessesBusinessIdBidsInfoResource> spBidsApiBusinessesBusinessIdBidsInfoResource) {
    m_spBidsApiBusinessesBusinessIdBidsInfoResource = spBidsApiBusinessesBusinessIdBidsInfoResource;
    m_service->publish(m_spBidsApiBusinessesBusinessIdBidsInfoResource);
}
void BidsApi::setBidsApiBusinessesBusinessIdBidsRecommendationsResource(std::shared_ptr<BidsApiBusinessesBusinessIdBidsRecommendationsResource> spBidsApiBusinessesBusinessIdBidsRecommendationsResource) {
    m_spBidsApiBusinessesBusinessIdBidsRecommendationsResource = spBidsApiBusinessesBusinessIdBidsRecommendationsResource;
    m_service->publish(m_spBidsApiBusinessesBusinessIdBidsRecommendationsResource);
}
void BidsApi::setBidsApiBusinessesBusinessIdBidsResource(std::shared_ptr<BidsApiBusinessesBusinessIdBidsResource> spBidsApiBusinessesBusinessIdBidsResource) {
    m_spBidsApiBusinessesBusinessIdBidsResource = spBidsApiBusinessesBusinessIdBidsResource;
    m_service->publish(m_spBidsApiBusinessesBusinessIdBidsResource);
}
void BidsApi::setBidsApiCampaignsCampaignIdBidsResource(std::shared_ptr<BidsApiCampaignsCampaignIdBidsResource> spBidsApiCampaignsCampaignIdBidsResource) {
    m_spBidsApiCampaignsCampaignIdBidsResource = spBidsApiCampaignsCampaignIdBidsResource;
    m_service->publish(m_spBidsApiCampaignsCampaignIdBidsResource);
}


void BidsApi::publishDefaultResources() {
    if (!m_spBidsApiBusinessesBusinessIdBidsInfoResource) {
        setBidsApiBusinessesBusinessIdBidsInfoResource(std::make_shared<BidsApiBusinessesBusinessIdBidsInfoResource>());
    }
    if (!m_spBidsApiBusinessesBusinessIdBidsRecommendationsResource) {
        setBidsApiBusinessesBusinessIdBidsRecommendationsResource(std::make_shared<BidsApiBusinessesBusinessIdBidsRecommendationsResource>());
    }
    if (!m_spBidsApiBusinessesBusinessIdBidsResource) {
        setBidsApiBusinessesBusinessIdBidsResource(std::make_shared<BidsApiBusinessesBusinessIdBidsResource>());
    }
    if (!m_spBidsApiCampaignsCampaignIdBidsResource) {
        setBidsApiCampaignsCampaignIdBidsResource(std::make_shared<BidsApiCampaignsCampaignIdBidsResource>());
    }
}

std::shared_ptr<restbed::Service> BidsApi::service() {
    return m_service;
}


}
}
}
}

