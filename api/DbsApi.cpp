/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "DbsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

DbsApiException::DbsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int DbsApiException::getStatus() const
{
    return m_status;
}
const char* DbsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/cancellation/accept/");
	this->set_method_handler("PUT",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::~DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto acceptOrderCancellationRequest = extractJsonModelBodyParam<AcceptOrderCancellationRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, acceptOrderCancellationRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Ответ на отмену заказа был успешно передан." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<AcceptOrderCancellationRequest> const & acceptOrderCancellationRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdHidden-offersResource::DbsApiCampaignsCampaignIdHidden-offersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/hidden-offers/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdHidden-offersResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdHidden-offersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdHidden-offersResource::~DbsApiCampaignsCampaignIdHidden-offersResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdHidden-offersResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdHidden-offersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdHidden-offersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdHidden-offersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdHidden-offersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdHidden-offersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdHidden-offersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto addHiddenOffersRequest = extractJsonModelBodyParam<AddHiddenOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, addHiddenOffersRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Настройки скрытия получены и скоро вступят в силу." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void DbsApiCampaignsCampaignIdHidden-offersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken_x_extension(request);

    const int32_t limit = getQueryParam_limit_x_extension(request);

    const int32_t offset = getQueryParam_offset_x_extension(request);

    const int32_t page = getQueryParam_page_x_extension(request);

    const int32_t pageSize = getQueryParam_pageSize_x_extension(request);


    int status_code = 500;
    std::shared_ptr<GetHiddenOffersResponse> resultObject = std::make_shared<GetHiddenOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, offerId, pageToken, limit, offset, page, pageSize);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о скрытых вами товарах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdHidden-offersResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<AddHiddenOffersRequest> const & addHiddenOffersRequest)
{
    throw DbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<GetHiddenOffersResponse>> DbsApiCampaignsCampaignIdHidden-offersResource::handler_GET(
    int64_t const & campaignId, std::vector<std::shared_ptr<std::string>> const & offerId, std::string const & pageToken, int32_t const & limit, int32_t const & offset, int32_t const & page, int32_t const & pageSize)
{
    throw DbsApiException(501, "Not implemented");
}

std::string DbsApiCampaignsCampaignIdHidden-offersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/archive/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::~DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto addOffersToArchiveRequest = extractJsonModelBodyParam<AddOffersToArchiveRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<AddOffersToArchiveResponse> resultObject = std::make_shared<AddOffersToArchiveResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, addOffersToArchiveRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<AddOffersToArchiveResponse>> DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<AddOffersToArchiveRequest> const & addOffersToArchiveRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiTariffsCalculateResource::DbsApiTariffsCalculateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/tariffs/calculate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiTariffsCalculateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiTariffsCalculateResource::~DbsApiTariffsCalculateResource()
{
}

std::pair<int, std::string> DbsApiTariffsCalculateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiTariffsCalculateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiTariffsCalculateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiTariffsCalculateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiTariffsCalculateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiTariffsCalculateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiTariffsCalculateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto calculateTariffsRequest = extractJsonModelBodyParam<CalculateTariffsRequest>(bodyContent);




    int status_code = 500;
    std::shared_ptr<CalculateTariffsResponse> resultObject = std::make_shared<CalculateTariffsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(calculateTariffsRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Стоимость услуг." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<CalculateTariffsResponse>> DbsApiTariffsCalculateResource::handler_POST(
        std::shared_ptr<CalculateTariffsRequest> const & calculateTariffsRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiTariffsCalculateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/price-quarantine/confirm/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::~DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto confirmPricesRequest = extractJsonModelBodyParam<ConfirmPricesRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, confirmPricesRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Ответ 200 обозначает, что цены подтверждены." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<ConfirmPricesRequest> const & confirmPricesRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/price-quarantine/confirm/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::~DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto confirmPricesRequest = extractJsonModelBodyParam<ConfirmPricesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, confirmPricesRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Ответ 200 обозначает, что цены подтверждены." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<ConfirmPricesRequest> const & confirmPricesRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdChatsNewResource::DbsApiBusinessesBusinessIdChatsNewResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/chats/new/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdChatsNewResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdChatsNewResource::~DbsApiBusinessesBusinessIdChatsNewResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsNewResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsNewResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsNewResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdChatsNewResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdChatsNewResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdChatsNewResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdChatsNewResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto createChatRequest = extractJsonModelBodyParam<CreateChatRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<CreateChatResponse> resultObject = std::make_shared<CreateChatResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, createChatRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Все получилось: чат создан. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<CreateChatResponse>> DbsApiBusinessesBusinessIdChatsNewResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<CreateChatRequest> const & createChatRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdChatsNewResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOutletsResource::DbsApiCampaignsCampaignIdOutletsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/outlets/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOutletsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOutletsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOutletsResource::~DbsApiCampaignsCampaignIdOutletsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOutletsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOutletsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOutletsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOutletsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOutletsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOutletsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOutletsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto changeOutletRequest = extractJsonModelBodyParam<ChangeOutletRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<CreateOutletResponse> resultObject = std::make_shared<CreateOutletResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, changeOutletRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о созданной точке продаж." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void DbsApiCampaignsCampaignIdOutletsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken_x_extension(request);

    const int64_t regionId = getQueryParam_regionId_x_extension(request);

    const std::string shopOutletCode = getQueryParam_shopOutletCode_x_extension(request);

    const int64_t regionId2 = getQueryParam_regionId2_x_extension(request);


    int status_code = 500;
    std::shared_ptr<GetOutletsResponse> resultObject = std::make_shared<GetOutletsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, pageToken, regionId, shopOutletCode, regionId2);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о точках продаж." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<CreateOutletResponse>> DbsApiCampaignsCampaignIdOutletsResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<ChangeOutletRequest> const & changeOutletRequest)
{
    throw DbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<GetOutletsResponse>> DbsApiCampaignsCampaignIdOutletsResource::handler_GET(
    int64_t const & campaignId, std::string const & pageToken, int64_t const & regionId, std::string const & shopOutletCode, int64_t const & regionId2)
{
    throw DbsApiException(501, "Not implemented");
}

std::string DbsApiCampaignsCampaignIdOutletsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOffersDeleteResource::DbsApiCampaignsCampaignIdOffersDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offers/delete/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOffersDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOffersDeleteResource::~DbsApiCampaignsCampaignIdOffersDeleteResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersDeleteResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOffersDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOffersDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOffersDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOffersDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteCampaignOffersRequest = extractJsonModelBodyParam<DeleteCampaignOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<DeleteCampaignOffersResponse> resultObject = std::make_shared<DeleteCampaignOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, deleteCampaignOffersRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<DeleteCampaignOffersResponse>> DbsApiCampaignsCampaignIdOffersDeleteResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<DeleteCampaignOffersRequest> const & deleteCampaignOffersRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOffersDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments/delete/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::~DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteGoodsFeedbackCommentRequest = extractJsonModelBodyParam<DeleteGoodsFeedbackCommentRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, deleteGoodsFeedbackCommentRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteGoodsFeedbackCommentRequest> const & deleteGoodsFeedbackCommentRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdHidden-offersDeleteResource::DbsApiCampaignsCampaignIdHidden-offersDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/hidden-offers/delete/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdHidden-offersDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdHidden-offersDeleteResource::~DbsApiCampaignsCampaignIdHidden-offersDeleteResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdHidden-offersDeleteResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdHidden-offersDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdHidden-offersDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdHidden-offersDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdHidden-offersDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdHidden-offersDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdHidden-offersDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteHiddenOffersRequest = extractJsonModelBodyParam<DeleteHiddenOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, deleteHiddenOffersRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Показ товаров возобновлен." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdHidden-offersDeleteResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<DeleteHiddenOffersRequest> const & deleteHiddenOffersRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdHidden-offersDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/delete/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::~DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteOffersRequest = extractJsonModelBodyParam<DeleteOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<DeleteOffersResponse> resultObject = std::make_shared<DeleteOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, deleteOffersRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<DeleteOffersResponse>> DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteOffersRequest> const & deleteOffersRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/unarchive/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::~DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deleteOffersFromArchiveRequest = extractJsonModelBodyParam<DeleteOffersFromArchiveRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<DeleteOffersFromArchiveResponse> resultObject = std::make_shared<DeleteOffersFromArchiveResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, deleteOffersFromArchiveRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<DeleteOffersFromArchiveResponse>> DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<DeleteOffersFromArchiveRequest> const & deleteOffersFromArchiveRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOutletsOutletIdResource::DbsApiCampaignsCampaignIdOutletsOutletIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/outlets/{outletId: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&DbsApiCampaignsCampaignIdOutletsOutletIdResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOutletsOutletIdResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PUT",
		std::bind(&DbsApiCampaignsCampaignIdOutletsOutletIdResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOutletsOutletIdResource::~DbsApiCampaignsCampaignIdOutletsOutletIdResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOutletsOutletIdResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOutletsOutletIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOutletsOutletIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOutletsOutletIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOutletsOutletIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOutletsOutletIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOutletsOutletIdResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t outletId = getPathParam_outletId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_DELETE(campaignId, outletId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void DbsApiCampaignsCampaignIdOutletsOutletIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);

    const int64_t outletId = getPathParam_outletId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<GetOutletResponse> resultObject = std::make_shared<GetOutletResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, outletId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о точке продаж." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}
// x-extension
void DbsApiCampaignsCampaignIdOutletsOutletIdResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto campaignId = std::make_shared<>(bodyContent);
    auto outletId = std::make_shared<>(bodyContent);
    auto changeOutletRequest = extractJsonModelBodyParam<ChangeOutletRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);

    const int64_t outletId = getPathParam_outletId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_PUT(campaignId, outletId, changeOutletRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOutletsOutletIdResource::handler_DELETE(
        int64_t const & campaignId, int64_t const & outletId)
{
    throw DbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<GetOutletResponse>> DbsApiCampaignsCampaignIdOutletsOutletIdResource::handler_GET(
    int64_t const & campaignId, int64_t const & outletId)
{
    throw DbsApiException(501, "Not implemented");
}
std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOutletsOutletIdResource::handler_PUT(
    int64_t const & campaignId, int64_t const & outletId, std::shared_ptr<ChangeOutletRequest> const & changeOutletRequest)
{
    throw DbsApiException(501, "Not implemented");
}

std::string DbsApiCampaignsCampaignIdOutletsOutletIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOutletsLicensesResource::DbsApiCampaignsCampaignIdOutletsLicensesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/outlets/licenses/");
	this->set_method_handler("DELETE",
		std::bind(&DbsApiCampaignsCampaignIdOutletsLicensesResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOutletsLicensesResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOutletsLicensesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOutletsLicensesResource::~DbsApiCampaignsCampaignIdOutletsLicensesResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOutletsLicensesResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOutletsLicensesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOutletsLicensesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOutletsLicensesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOutletsLicensesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOutletsLicensesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOutletsLicensesResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params


    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_DELETE(campaignId, ids);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void DbsApiCampaignsCampaignIdOutletsLicensesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);

    // Getting the query params

    int status_code = 500;
    std::shared_ptr<GetOutletLicensesResponse> resultObject = std::make_shared<GetOutletLicensesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, outletIds, ids);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Найденные лицензии собственных точек продаж." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}
// x-extension
void DbsApiCampaignsCampaignIdOutletsLicensesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto campaignId = std::make_shared<>(bodyContent);
    auto updateOutletLicenseRequest = extractJsonModelBodyParam<UpdateOutletLicenseRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_POST(campaignId, updateOutletLicenseRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOutletsLicensesResource::handler_DELETE(
        int64_t const & campaignId, Set<int64_t> const & ids)
{
    throw DbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<GetOutletLicensesResponse>> DbsApiCampaignsCampaignIdOutletsLicensesResource::handler_GET(
    int64_t const & campaignId, Set<int64_t> const & outletIds, Set<int64_t> const & ids)
{
    throw DbsApiException(501, "Not implemented");
}
std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOutletsLicensesResource::handler_POST(
    int64_t const & campaignId, std::shared_ptr<UpdateOutletLicenseRequest> const & updateOutletLicenseRequest)
{
    throw DbsApiException(501, "Not implemented");
}

std::string DbsApiCampaignsCampaignIdOutletsLicensesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdPromosOffersDeleteResource::DbsApiBusinessesBusinessIdPromosOffersDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/promos/offers/delete/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdPromosOffersDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdPromosOffersDeleteResource::~DbsApiBusinessesBusinessIdPromosOffersDeleteResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosOffersDeleteResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosOffersDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosOffersDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdPromosOffersDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdPromosOffersDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdPromosOffersDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdPromosOffersDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto deletePromoOffersRequest = extractJsonModelBodyParam<DeletePromoOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<DeletePromoOffersResponse> resultObject = std::make_shared<DeletePromoOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, deletePromoOffersRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Результат удаления товаров из акции." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<DeletePromoOffersResponse>> DbsApiBusinessesBusinessIdPromosOffersDeleteResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<DeletePromoOffersRequest> const & deletePromoOffersRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdPromosOffersDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsBoost-consolidatedGenerateResource::DbsApiReportsBoost-consolidatedGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/boost-consolidated/generate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiReportsBoost-consolidatedGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiReportsBoost-consolidatedGenerateResource::~DbsApiReportsBoost-consolidatedGenerateResource()
{
}

std::pair<int, std::string> DbsApiReportsBoost-consolidatedGenerateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsBoost-consolidatedGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsBoost-consolidatedGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsBoost-consolidatedGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsBoost-consolidatedGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsBoost-consolidatedGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsBoost-consolidatedGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateBoostConsolidatedRequest = extractJsonModelBodyParam<GenerateBoostConsolidatedRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateBoostConsolidatedRequest, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> DbsApiReportsBoost-consolidatedGenerateResource::handler_POST(
        std::shared_ptr<GenerateBoostConsolidatedRequest> const & generateBoostConsolidatedRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsBoost-consolidatedGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsCompetitors-positionGenerateResource::DbsApiReportsCompetitors-positionGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/competitors-position/generate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiReportsCompetitors-positionGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiReportsCompetitors-positionGenerateResource::~DbsApiReportsCompetitors-positionGenerateResource()
{
}

std::pair<int, std::string> DbsApiReportsCompetitors-positionGenerateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsCompetitors-positionGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsCompetitors-positionGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsCompetitors-positionGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsCompetitors-positionGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsCompetitors-positionGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsCompetitors-positionGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateCompetitorsPositionReportRequest = extractJsonModelBodyParam<GenerateCompetitorsPositionReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateCompetitorsPositionReportRequest, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> DbsApiReportsCompetitors-positionGenerateResource::handler_POST(
        std::shared_ptr<GenerateCompetitorsPositionReportRequest> const & generateCompetitorsPositionReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsCompetitors-positionGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsGoods-feedbackGenerateResource::DbsApiReportsGoods-feedbackGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/goods-feedback/generate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiReportsGoods-feedbackGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiReportsGoods-feedbackGenerateResource::~DbsApiReportsGoods-feedbackGenerateResource()
{
}

std::pair<int, std::string> DbsApiReportsGoods-feedbackGenerateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsGoods-feedbackGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsGoods-feedbackGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsGoods-feedbackGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsGoods-feedbackGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsGoods-feedbackGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsGoods-feedbackGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateGoodsFeedbackRequest = extractJsonModelBodyParam<GenerateGoodsFeedbackRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateGoodsFeedbackRequest, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> DbsApiReportsGoods-feedbackGenerateResource::handler_POST(
        std::shared_ptr<GenerateGoodsFeedbackRequest> const & generateGoodsFeedbackRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsGoods-feedbackGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsDocumentsLabelsGenerateResource::DbsApiReportsDocumentsLabelsGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/documents/labels/generate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiReportsDocumentsLabelsGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiReportsDocumentsLabelsGenerateResource::~DbsApiReportsDocumentsLabelsGenerateResource()
{
}

std::pair<int, std::string> DbsApiReportsDocumentsLabelsGenerateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsDocumentsLabelsGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsDocumentsLabelsGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsDocumentsLabelsGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsDocumentsLabelsGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsDocumentsLabelsGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsDocumentsLabelsGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateMassOrderLabelsRequest = extractJsonModelBodyParam<GenerateMassOrderLabelsRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateMassOrderLabelsRequest, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.  Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус &#x60;RESOURCE_NOT_FOUND&#x60;. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> DbsApiReportsDocumentsLabelsGenerateResource::handler_POST(
        std::shared_ptr<GenerateMassOrderLabelsRequest> const & generateMassOrderLabelsRequest, std::shared_ptr<PageFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsDocumentsLabelsGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/shipments/{shipmentId: .*}/boxes/{boxId: .*}/label/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::~DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);
    const int64_t boxId = getPathParam_boxId(request);

    // Getting the query params


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId, shipmentId, boxId, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "PDF‑файл с ярлыками для коробки. Файл содержит одну страницу с ярлыком." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & shipmentId, int64_t const & boxId, std::shared_ptr<PageFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/labels/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::~DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);

    // Getting the query params


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "PDF‑файл с ярлыками на все коробки." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<PageFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsPricesGenerateResource::DbsApiReportsPricesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/prices/generate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiReportsPricesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiReportsPricesGenerateResource::~DbsApiReportsPricesGenerateResource()
{
}

std::pair<int, std::string> DbsApiReportsPricesGenerateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsPricesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsPricesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsPricesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsPricesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsPricesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsPricesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generatePricesReportRequest = extractJsonModelBodyParam<GeneratePricesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generatePricesReportRequest, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> DbsApiReportsPricesGenerateResource::handler_POST(
        std::shared_ptr<GeneratePricesReportRequest> const & generatePricesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsPricesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsShelf-statisticsGenerateResource::DbsApiReportsShelf-statisticsGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/shelf-statistics/generate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiReportsShelf-statisticsGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiReportsShelf-statisticsGenerateResource::~DbsApiReportsShelf-statisticsGenerateResource()
{
}

std::pair<int, std::string> DbsApiReportsShelf-statisticsGenerateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsShelf-statisticsGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsShelf-statisticsGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsShelf-statisticsGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsShelf-statisticsGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsShelf-statisticsGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsShelf-statisticsGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateShelfsStatisticsRequest = extractJsonModelBodyParam<GenerateShelfsStatisticsRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateShelfsStatisticsRequest, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> DbsApiReportsShelf-statisticsGenerateResource::handler_POST(
        std::shared_ptr<GenerateShelfsStatisticsRequest> const & generateShelfsStatisticsRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsShelf-statisticsGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsShows-salesGenerateResource::DbsApiReportsShows-salesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/shows-sales/generate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiReportsShows-salesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiReportsShows-salesGenerateResource::~DbsApiReportsShows-salesGenerateResource()
{
}

std::pair<int, std::string> DbsApiReportsShows-salesGenerateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsShows-salesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsShows-salesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsShows-salesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsShows-salesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsShows-salesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsShows-salesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateShowsSalesReportRequest = extractJsonModelBodyParam<GenerateShowsSalesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateShowsSalesReportRequest, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> DbsApiReportsShows-salesGenerateResource::handler_POST(
        std::shared_ptr<GenerateShowsSalesReportRequest> const & generateShowsSalesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsShows-salesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsStocks-on-warehousesGenerateResource::DbsApiReportsStocks-on-warehousesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/stocks-on-warehouses/generate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiReportsStocks-on-warehousesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiReportsStocks-on-warehousesGenerateResource::~DbsApiReportsStocks-on-warehousesGenerateResource()
{
}

std::pair<int, std::string> DbsApiReportsStocks-on-warehousesGenerateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsStocks-on-warehousesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsStocks-on-warehousesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsStocks-on-warehousesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsStocks-on-warehousesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsStocks-on-warehousesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsStocks-on-warehousesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateStocksOnWarehousesReportRequest = extractJsonModelBodyParam<GenerateStocksOnWarehousesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateStocksOnWarehousesReportRequest, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> DbsApiReportsStocks-on-warehousesGenerateResource::handler_POST(
        std::shared_ptr<GenerateStocksOnWarehousesReportRequest> const & generateStocksOnWarehousesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsStocks-on-warehousesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsUnited-marketplace-servicesGenerateResource::DbsApiReportsUnited-marketplace-servicesGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/united-marketplace-services/generate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiReportsUnited-marketplace-servicesGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiReportsUnited-marketplace-servicesGenerateResource::~DbsApiReportsUnited-marketplace-servicesGenerateResource()
{
}

std::pair<int, std::string> DbsApiReportsUnited-marketplace-servicesGenerateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsUnited-marketplace-servicesGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsUnited-marketplace-servicesGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsUnited-marketplace-servicesGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsUnited-marketplace-servicesGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsUnited-marketplace-servicesGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsUnited-marketplace-servicesGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateUnitedMarketplaceServicesReportRequest = extractJsonModelBodyParam<GenerateUnitedMarketplaceServicesReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateUnitedMarketplaceServicesReportRequest, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> DbsApiReportsUnited-marketplace-servicesGenerateResource::handler_POST(
        std::shared_ptr<GenerateUnitedMarketplaceServicesReportRequest> const & generateUnitedMarketplaceServicesReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsUnited-marketplace-servicesGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsUnited-nettingGenerateResource::DbsApiReportsUnited-nettingGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/united-netting/generate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiReportsUnited-nettingGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiReportsUnited-nettingGenerateResource::~DbsApiReportsUnited-nettingGenerateResource()
{
}

std::pair<int, std::string> DbsApiReportsUnited-nettingGenerateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsUnited-nettingGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsUnited-nettingGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsUnited-nettingGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsUnited-nettingGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsUnited-nettingGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsUnited-nettingGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateUnitedNettingReportRequest = extractJsonModelBodyParam<GenerateUnitedNettingReportRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateUnitedNettingReportRequest, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> DbsApiReportsUnited-nettingGenerateResource::handler_POST(
        std::shared_ptr<GenerateUnitedNettingReportRequest> const & generateUnitedNettingReportRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsUnited-nettingGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsUnited-ordersGenerateResource::DbsApiReportsUnited-ordersGenerateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/united-orders/generate/");
	this->set_method_handler("POST",
		std::bind(&DbsApiReportsUnited-ordersGenerateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiReportsUnited-ordersGenerateResource::~DbsApiReportsUnited-ordersGenerateResource()
{
}

std::pair<int, std::string> DbsApiReportsUnited-ordersGenerateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsUnited-ordersGenerateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsUnited-ordersGenerateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsUnited-ordersGenerateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsUnited-ordersGenerateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsUnited-ordersGenerateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsUnited-ordersGenerateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto generateUnitedOrdersRequest = extractJsonModelBodyParam<GenerateUnitedOrdersRequest>(bodyContent);


    // Getting the query params


    int status_code = 500;
    std::shared_ptr<GenerateReportResponse> resultObject = std::make_shared<GenerateReportResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(generateUnitedOrdersRequest, format);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GenerateReportResponse>> DbsApiReportsUnited-ordersGenerateResource::handler_POST(
        std::shared_ptr<GenerateUnitedOrdersRequest> const & generateUnitedOrdersRequest, std::shared_ptr<ReportFormatType> const & format)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsUnited-ordersGenerateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOffersAllResource::DbsApiCampaignsCampaignIdOffersAllResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offers/all/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOffersAllResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOffersAllResource::~DbsApiCampaignsCampaignIdOffersAllResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersAllResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersAllResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersAllResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOffersAllResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOffersAllResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOffersAllResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOffersAllResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const int64_t feedId = getQueryParam_feedId(request);
    const int32_t chunk = getQueryParam_chunk(request);


    int status_code = 500;
    std::shared_ptr<GetAllOffersResponse> resultObject = std::make_shared<GetAllOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, feedId, chunk);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Предложения магазина." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetAllOffersResponse>> DbsApiCampaignsCampaignIdOffersAllResource::handler_GET(
        int64_t const & campaignId, int64_t const & feedId, int32_t const & chunk)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOffersAllResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdBidsInfoResource::DbsApiBusinessesBusinessIdBidsInfoResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/bids/info/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdBidsInfoResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdBidsInfoResource::~DbsApiBusinessesBusinessIdBidsInfoResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdBidsInfoResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdBidsInfoResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdBidsInfoResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdBidsInfoResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdBidsInfoResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdBidsInfoResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdBidsInfoResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getBidsInfoRequest = extractJsonModelBodyParam<GetBidsInfoRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetBidsInfoResponse> resultObject = std::make_shared<GetBidsInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, pageToken, limit, getBidsInfoRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBidsInfoResponse>> DbsApiBusinessesBusinessIdBidsInfoResource::handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetBidsInfoRequest> const & getBidsInfoRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdBidsInfoResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdBidsRecommendationsResource::DbsApiBusinessesBusinessIdBidsRecommendationsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/bids/recommendations/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdBidsRecommendationsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdBidsRecommendationsResource::~DbsApiBusinessesBusinessIdBidsRecommendationsResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdBidsRecommendationsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdBidsRecommendationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdBidsRecommendationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdBidsRecommendationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdBidsRecommendationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdBidsRecommendationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdBidsRecommendationsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getBidsRecommendationsRequest = extractJsonModelBodyParam<GetBidsRecommendationsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetBidsRecommendationsResponse> resultObject = std::make_shared<GetBidsRecommendationsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getBidsRecommendationsRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Рекомендованные ставки для заданных товаров." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBidsRecommendationsResponse>> DbsApiBusinessesBusinessIdBidsRecommendationsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetBidsRecommendationsRequest> const & getBidsRecommendationsRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdBidsRecommendationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdPrice-quarantineResource::DbsApiBusinessesBusinessIdPrice-quarantineResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/price-quarantine/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdPrice-quarantineResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdPrice-quarantineResource::~DbsApiBusinessesBusinessIdPrice-quarantineResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPrice-quarantineResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPrice-quarantineResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPrice-quarantineResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdPrice-quarantineResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdPrice-quarantineResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdPrice-quarantineResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdPrice-quarantineResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getQuarantineOffersRequest = extractJsonModelBodyParam<GetQuarantineOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetQuarantineOffersResponse> resultObject = std::make_shared<GetQuarantineOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getQuarantineOffersRequest, pageToken, limit);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров в карантине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetQuarantineOffersResponse>> DbsApiBusinessesBusinessIdPrice-quarantineResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetQuarantineOffersRequest> const & getQuarantineOffersRequest, std::string const & pageToken, int32_t const & limit)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdPrice-quarantineResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdSettingsResource::DbsApiBusinessesBusinessIdSettingsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/settings/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdSettingsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdSettingsResource::~DbsApiBusinessesBusinessIdSettingsResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdSettingsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdSettingsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdSettingsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdSettingsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdSettingsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdSettingsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdSettingsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetBusinessSettingsResponse> resultObject = std::make_shared<GetBusinessSettingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Настройки кабинета." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBusinessSettingsResponse>> DbsApiBusinessesBusinessIdSettingsResource::handler_POST(
        int64_t const & businessId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdSettingsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdResource::DbsApiCampaignsCampaignIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdResource::~DbsApiCampaignsCampaignIdResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetCampaignResponse> resultObject = std::make_shared<GetCampaignResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о магазине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignResponse>> DbsApiCampaignsCampaignIdResource::handler_GET(
        int64_t const & campaignId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdLoginsResource::DbsApiCampaignsCampaignIdLoginsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/logins/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdLoginsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdLoginsResource::~DbsApiCampaignsCampaignIdLoginsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdLoginsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdLoginsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdLoginsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdLoginsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdLoginsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdLoginsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdLoginsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetCampaignLoginsResponse> resultObject = std::make_shared<GetCampaignLoginsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список логинов, связанных с магазином." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignLoginsResponse>> DbsApiCampaignsCampaignIdLoginsResource::handler_GET(
        int64_t const & campaignId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdLoginsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOffersResource::DbsApiCampaignsCampaignIdOffersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offers/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOffersResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOffersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOffersResource::~DbsApiCampaignsCampaignIdOffersResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOffersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOffersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOffersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOffersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getCampaignOffersRequest = extractJsonModelBodyParam<GetCampaignOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetCampaignOffersResponse> resultObject = std::make_shared<GetCampaignOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, getCampaignOffersRequest, pageToken, limit);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров, размещенных в заданном магазине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void DbsApiCampaignsCampaignIdOffersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);

    // Getting the query params
    const std::string query = getQueryParam_query_x_extension(request);

    const int64_t feedId = getQueryParam_feedId_x_extension(request);

    const std::string shopCategoryId = getQueryParam_shopCategoryId_x_extension(request);

    const bool matched = getQueryParam_matched_x_extension(request);

    const int32_t page = getQueryParam_page_x_extension(request);

    const int32_t pageSize = getQueryParam_pageSize_x_extension(request);


    int status_code = 500;
    std::shared_ptr<GetOffersResponse> resultObject = std::make_shared<GetOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(campaignId, query, feedId, shopCategoryId, currency, matched, page, pageSize);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Предложения магазина." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<GetCampaignOffersResponse>> DbsApiCampaignsCampaignIdOffersResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetCampaignOffersRequest> const & getCampaignOffersRequest, std::string const & pageToken, int32_t const & limit)
{
    throw DbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<GetOffersResponse>> DbsApiCampaignsCampaignIdOffersResource::handler_GET(
    int64_t const & campaignId, std::string const & query, int64_t const & feedId, std::string const & shopCategoryId, std::shared_ptr<CurrencyType> const & currency, bool const & matched, int32_t const & page, int32_t const & pageSize)
{
    throw DbsApiException(501, "Not implemented");
}

std::string DbsApiCampaignsCampaignIdOffersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdPrice-quarantineResource::DbsApiCampaignsCampaignIdPrice-quarantineResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/price-quarantine/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdPrice-quarantineResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdPrice-quarantineResource::~DbsApiCampaignsCampaignIdPrice-quarantineResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdPrice-quarantineResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdPrice-quarantineResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdPrice-quarantineResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdPrice-quarantineResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdPrice-quarantineResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdPrice-quarantineResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdPrice-quarantineResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getQuarantineOffersRequest = extractJsonModelBodyParam<GetQuarantineOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetQuarantineOffersResponse> resultObject = std::make_shared<GetQuarantineOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, getQuarantineOffersRequest, pageToken, limit);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров в карантине." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetQuarantineOffersResponse>> DbsApiCampaignsCampaignIdPrice-quarantineResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetQuarantineOffersRequest> const & getQuarantineOffersRequest, std::string const & pageToken, int32_t const & limit)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdPrice-quarantineResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdRegionResource::DbsApiCampaignsCampaignIdRegionResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/region/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdRegionResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdRegionResource::~DbsApiCampaignsCampaignIdRegionResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdRegionResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdRegionResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdRegionResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdRegionResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdRegionResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdRegionResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdRegionResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetCampaignRegionResponse> resultObject = std::make_shared<GetCampaignRegionResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-| " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignRegionResponse>> DbsApiCampaignsCampaignIdRegionResource::handler_GET(
        int64_t const & campaignId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdRegionResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdSettingsResource::DbsApiCampaignsCampaignIdSettingsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/settings/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdSettingsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdSettingsResource::~DbsApiCampaignsCampaignIdSettingsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdSettingsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdSettingsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdSettingsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdSettingsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdSettingsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdSettingsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdSettingsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetCampaignSettingsResponse> resultObject = std::make_shared<GetCampaignSettingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Настройки магазина." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignSettingsResponse>> DbsApiCampaignsCampaignIdSettingsResource::handler_GET(
        int64_t const & campaignId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdSettingsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsResource::DbsApiCampaignsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsResource::~DbsApiCampaignsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();


    // Getting the query params
    const int32_t page = getQueryParam_page(request);
    const int32_t pageSize = getQueryParam_pageSize(request);


    int status_code = 500;
    std::shared_ptr<GetCampaignsResponse> resultObject = std::make_shared<GetCampaignsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(page, pageSize);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Магазины пользователя." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignsResponse>> DbsApiCampaignsResource::handler_GET(
        int32_t const & page, int32_t const & pageSize)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsBy_loginLoginResource::DbsApiCampaignsBy_loginLoginResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/by_login/{login: .*}/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsBy_loginLoginResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsBy_loginLoginResource::~DbsApiCampaignsBy_loginLoginResource()
{
}

std::pair<int, std::string> DbsApiCampaignsBy_loginLoginResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsBy_loginLoginResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsBy_loginLoginResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsBy_loginLoginResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsBy_loginLoginResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsBy_loginLoginResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsBy_loginLoginResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string login = getPathParam_login(request);

    // Getting the query params
    const int32_t page = getQueryParam_page(request);
    const int32_t pageSize = getQueryParam_pageSize(request);


    int status_code = 500;
    std::shared_ptr<GetCampaignsResponse> resultObject = std::make_shared<GetCampaignsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(login, page, pageSize);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о магазинах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCampaignsResponse>> DbsApiCampaignsBy_loginLoginResource::handler_GET(
        std::string const & login, int32_t const & page, int32_t const & pageSize)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsBy_loginLoginResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCategoriesMax-sale-quantumResource::DbsApiCategoriesMax-sale-quantumResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/categories/max-sale-quantum/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCategoriesMax-sale-quantumResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCategoriesMax-sale-quantumResource::~DbsApiCategoriesMax-sale-quantumResource()
{
}

std::pair<int, std::string> DbsApiCategoriesMax-sale-quantumResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCategoriesMax-sale-quantumResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCategoriesMax-sale-quantumResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCategoriesMax-sale-quantumResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCategoriesMax-sale-quantumResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCategoriesMax-sale-quantumResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCategoriesMax-sale-quantumResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getCategoriesMaxSaleQuantumRequest = extractJsonModelBodyParam<GetCategoriesMaxSaleQuantumRequest>(bodyContent);




    int status_code = 500;
    std::shared_ptr<GetCategoriesMaxSaleQuantumResponse> resultObject = std::make_shared<GetCategoriesMaxSaleQuantumResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(getCategoriesMaxSaleQuantumRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Лимит на установку кванта и минимального количества товаров." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCategoriesMaxSaleQuantumResponse>> DbsApiCategoriesMax-sale-quantumResource::handler_POST(
        std::shared_ptr<GetCategoriesMaxSaleQuantumRequest> const & getCategoriesMaxSaleQuantumRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCategoriesMax-sale-quantumResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCategoriesTreeResource::DbsApiCategoriesTreeResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/categories/tree/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCategoriesTreeResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCategoriesTreeResource::~DbsApiCategoriesTreeResource()
{
}

std::pair<int, std::string> DbsApiCategoriesTreeResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCategoriesTreeResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCategoriesTreeResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCategoriesTreeResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCategoriesTreeResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCategoriesTreeResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCategoriesTreeResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getCategoriesRequest = extractJsonModelBodyParam<GetCategoriesRequest>(bodyContent);




    int status_code = 500;
    std::shared_ptr<GetCategoriesResponse> resultObject = std::make_shared<GetCategoriesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(getCategoriesRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Категории Маркета." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCategoriesResponse>> DbsApiCategoriesTreeResource::handler_POST(
        std::shared_ptr<GetCategoriesRequest> const & getCategoriesRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCategoriesTreeResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCategoryCategoryIdParametersResource::DbsApiCategoryCategoryIdParametersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/category/{categoryId: .*}/parameters/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCategoryCategoryIdParametersResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCategoryCategoryIdParametersResource::~DbsApiCategoryCategoryIdParametersResource()
{
}

std::pair<int, std::string> DbsApiCategoryCategoryIdParametersResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCategoryCategoryIdParametersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCategoryCategoryIdParametersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCategoryCategoryIdParametersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCategoryCategoryIdParametersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCategoryCategoryIdParametersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCategoryCategoryIdParametersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t categoryId = getPathParam_categoryId(request);



    int status_code = 500;
    std::shared_ptr<GetCategoryContentParametersResponse> resultObject = std::make_shared<GetCategoryContentParametersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(categoryId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список характеристик товаров из заданной категории." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetCategoryContentParametersResponse>> DbsApiCategoryCategoryIdParametersResource::handler_POST(
        int64_t const & categoryId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCategoryCategoryIdParametersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdChatsHistoryResource::DbsApiBusinessesBusinessIdChatsHistoryResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/chats/history/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdChatsHistoryResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdChatsHistoryResource::~DbsApiBusinessesBusinessIdChatsHistoryResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsHistoryResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsHistoryResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsHistoryResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdChatsHistoryResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdChatsHistoryResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdChatsHistoryResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdChatsHistoryResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getChatHistoryRequest = extractJsonModelBodyParam<GetChatHistoryRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const int64_t chatId = getQueryParam_chatId(request);
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetChatHistoryResponse> resultObject = std::make_shared<GetChatHistoryResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, chatId, getChatHistoryRequest, pageToken, limit);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "История сообщений успешно получена. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetChatHistoryResponse>> DbsApiBusinessesBusinessIdChatsHistoryResource::handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::shared_ptr<GetChatHistoryRequest> const & getChatHistoryRequest, std::string const & pageToken, int32_t const & limit)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdChatsHistoryResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdChatsResource::DbsApiBusinessesBusinessIdChatsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/chats/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdChatsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdChatsResource::~DbsApiBusinessesBusinessIdChatsResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdChatsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdChatsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdChatsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdChatsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getChatsRequest = extractJsonModelBodyParam<GetChatsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetChatsResponse> resultObject = std::make_shared<GetChatsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getChatsRequest, pageToken, limit);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список чатов. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetChatsResponse>> DbsApiBusinessesBusinessIdChatsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetChatsRequest> const & getChatsRequest, std::string const & pageToken, int32_t const & limit)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdChatsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiDeliveryServicesResource::DbsApiDeliveryServicesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/delivery/services/");
	this->set_method_handler("GET",
		std::bind(&DbsApiDeliveryServicesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiDeliveryServicesResource::~DbsApiDeliveryServicesResource()
{
}

std::pair<int, std::string> DbsApiDeliveryServicesResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiDeliveryServicesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiDeliveryServicesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiDeliveryServicesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiDeliveryServicesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiDeliveryServicesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiDeliveryServicesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();




    int status_code = 500;
    std::shared_ptr<GetDeliveryServicesResponse> resultObject = std::make_shared<GetDeliveryServicesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET();
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о службах доставки." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetDeliveryServicesResponse>> DbsApiDeliveryServicesResource::handler_GET(
        )
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiDeliveryServicesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdFeedsFeedIdResource::DbsApiCampaignsCampaignIdFeedsFeedIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feeds/{feedId: .*}/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdFeedsFeedIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdFeedsFeedIdResource::~DbsApiCampaignsCampaignIdFeedsFeedIdResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdFeedsFeedIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdFeedsFeedIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdFeedsFeedIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdFeedsFeedIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t feedId = getPathParam_feedId(request);



    int status_code = 500;
    std::shared_ptr<GetFeedResponse> resultObject = std::make_shared<GetFeedResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, feedId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о прайс-листе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetFeedResponse>> DbsApiCampaignsCampaignIdFeedsFeedIdResource::handler_GET(
        int64_t const & campaignId, int64_t const & feedId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdFeedsFeedIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feeds/{feedId: .*}/index-logs/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::~DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t feedId = getPathParam_feedId(request);

    // Getting the query params
    const int32_t limit = getQueryParam_limit(request);
    const std::string publishedTimeFrom = getQueryParam_publishedTimeFrom(request);
    const std::string publishedTimeTo = getQueryParam_publishedTimeTo(request);


    int status_code = 500;
    std::shared_ptr<GetFeedIndexLogsResponse> resultObject = std::make_shared<GetFeedIndexLogsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, feedId, limit, publishedTimeFrom, publishedTimeTo, status);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Отчет по индексации прайс-листа." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetFeedIndexLogsResponse>> DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::handler_GET(
        int64_t const & campaignId, int64_t const & feedId, int32_t const & limit, std::string const & publishedTimeFrom, std::string const & publishedTimeTo, std::shared_ptr<FeedIndexLogsStatusType> const & status)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdFeedbackUpdatesResource::DbsApiCampaignsCampaignIdFeedbackUpdatesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feedback/updates/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdFeedbackUpdatesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdFeedbackUpdatesResource::~DbsApiCampaignsCampaignIdFeedbackUpdatesResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedbackUpdatesResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedbackUpdatesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedbackUpdatesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdFeedbackUpdatesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdFeedbackUpdatesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdFeedbackUpdatesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdFeedbackUpdatesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);
    const std::string fromDate = getQueryParam_fromDate(request);


    int status_code = 500;
    std::shared_ptr<GetFeedbackListResponse> resultObject = std::make_shared<GetFeedbackListResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, pageToken, limit, fromDate);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список отзывов для магазина." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetFeedbackListResponse>> DbsApiCampaignsCampaignIdFeedbackUpdatesResource::handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::string const & fromDate)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdFeedbackUpdatesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdFeedsResource::DbsApiCampaignsCampaignIdFeedsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feeds/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdFeedsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdFeedsResource::~DbsApiCampaignsCampaignIdFeedsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdFeedsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdFeedsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdFeedsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdFeedsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetFeedsResponse> resultObject = std::make_shared<GetFeedsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список прайс-листов." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetFeedsResponse>> DbsApiCampaignsCampaignIdFeedsResource::handler_GET(
        int64_t const & campaignId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdFeedsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::~DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getGoodsFeedbackCommentsRequest = extractJsonModelBodyParam<GetGoodsFeedbackCommentsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetGoodsFeedbackCommentsResponse> resultObject = std::make_shared<GetGoodsFeedbackCommentsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getGoodsFeedbackCommentsRequest, pageToken, limit);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Дерево комментариев к отзыву." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetGoodsFeedbackCommentsResponse>> DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetGoodsFeedbackCommentsRequest> const & getGoodsFeedbackCommentsRequest, std::string const & pageToken, int32_t const & limit)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdGoods-feedbackResource::DbsApiBusinessesBusinessIdGoods-feedbackResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdGoods-feedbackResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdGoods-feedbackResource::~DbsApiBusinessesBusinessIdGoods-feedbackResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdGoods-feedbackResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdGoods-feedbackResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdGoods-feedbackResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdGoods-feedbackResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getGoodsFeedbackRequest = extractJsonModelBodyParam<GetGoodsFeedbackRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetGoodsFeedbackResponse> resultObject = std::make_shared<GetGoodsFeedbackResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, pageToken, limit, getGoodsFeedbackRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список отзывов." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetGoodsFeedbackResponse>> DbsApiBusinessesBusinessIdGoods-feedbackResource::handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetGoodsFeedbackRequest> const & getGoodsFeedbackRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdGoods-feedbackResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdStatsSkusResource::DbsApiCampaignsCampaignIdStatsSkusResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/stats/skus/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdStatsSkusResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdStatsSkusResource::~DbsApiCampaignsCampaignIdStatsSkusResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdStatsSkusResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdStatsSkusResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdStatsSkusResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdStatsSkusResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdStatsSkusResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdStatsSkusResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdStatsSkusResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getGoodsStatsRequest = extractJsonModelBodyParam<GetGoodsStatsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetGoodsStatsResponse> resultObject = std::make_shared<GetGoodsStatsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, getGoodsStatsRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Отчет по товарам." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetGoodsStatsResponse>> DbsApiCampaignsCampaignIdStatsSkusResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetGoodsStatsRequest> const & getGoodsStatsRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdStatsSkusResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiModelsModelIdResource::DbsApiModelsModelIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/models/{modelId: .*}/");
	this->set_method_handler("GET",
		std::bind(&DbsApiModelsModelIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiModelsModelIdResource::~DbsApiModelsModelIdResource()
{
}

std::pair<int, std::string> DbsApiModelsModelIdResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiModelsModelIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiModelsModelIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiModelsModelIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiModelsModelIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiModelsModelIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiModelsModelIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t modelId = getPathParam_modelId(request);

    // Getting the query params
    const int64_t regionId = getQueryParam_regionId(request);


    int status_code = 500;
    std::shared_ptr<GetModelsResponse> resultObject = std::make_shared<GetModelsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(modelId, regionId, currency);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о модели." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetModelsResponse>> DbsApiModelsModelIdResource::handler_GET(
        int64_t const & modelId, int64_t const & regionId, std::shared_ptr<CurrencyType> const & currency)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiModelsModelIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiModelsModelIdOffersResource::DbsApiModelsModelIdOffersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/models/{modelId: .*}/offers/");
	this->set_method_handler("GET",
		std::bind(&DbsApiModelsModelIdOffersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiModelsModelIdOffersResource::~DbsApiModelsModelIdOffersResource()
{
}

std::pair<int, std::string> DbsApiModelsModelIdOffersResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiModelsModelIdOffersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiModelsModelIdOffersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiModelsModelIdOffersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiModelsModelIdOffersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiModelsModelIdOffersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiModelsModelIdOffersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t modelId = getPathParam_modelId(request);

    // Getting the query params
    const int64_t regionId = getQueryParam_regionId(request);
    const int32_t count = getQueryParam_count(request);
    const int32_t page = getQueryParam_page(request);


    int status_code = 500;
    std::shared_ptr<GetModelsOffersResponse> resultObject = std::make_shared<GetModelsOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(modelId, regionId, currency, orderByPrice, count, page);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список предложений для модели." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetModelsOffersResponse>> DbsApiModelsModelIdOffersResource::handler_GET(
        int64_t const & modelId, int64_t const & regionId, std::shared_ptr<CurrencyType> const & currency, std::shared_ptr<SortOrderType> const & orderByPrice, int32_t const & count, int32_t const & page)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiModelsModelIdOffersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiModelsResource::DbsApiModelsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/models/");
	this->set_method_handler("POST",
		std::bind(&DbsApiModelsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&DbsApiModelsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiModelsResource::~DbsApiModelsResource()
{
}

std::pair<int, std::string> DbsApiModelsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiModelsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiModelsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiModelsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiModelsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiModelsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiModelsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getModelsRequest = extractJsonModelBodyParam<GetModelsRequest>(bodyContent);


    // Getting the query params
    const int64_t regionId = getQueryParam_regionId(request);


    int status_code = 500;
    std::shared_ptr<GetModelsResponse> resultObject = std::make_shared<GetModelsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(regionId, getModelsRequest, currency);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о моделях." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void DbsApiModelsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the query params
    const std::string query = getQueryParam_query_x_extension(request);

    const int64_t regionId = getQueryParam_regionId_x_extension(request);

    const int32_t page = getQueryParam_page_x_extension(request);

    const int32_t pageSize = getQueryParam_pageSize_x_extension(request);


    int status_code = 500;
    std::shared_ptr<SearchModelsResponse> resultObject = std::make_shared<SearchModelsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(query, regionId, currency, page, pageSize);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о моделях." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<GetModelsResponse>> DbsApiModelsResource::handler_POST(
        int64_t const & regionId, std::shared_ptr<GetModelsRequest> const & getModelsRequest, std::shared_ptr<CurrencyType> const & currency)
{
    throw DbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<SearchModelsResponse>> DbsApiModelsResource::handler_GET(
    std::string const & query, int64_t const & regionId, std::shared_ptr<CurrencyType> const & currency, int32_t const & page, int32_t const & pageSize)
{
    throw DbsApiException(501, "Not implemented");
}

std::string DbsApiModelsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiModelsOffersResource::DbsApiModelsOffersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/models/offers/");
	this->set_method_handler("POST",
		std::bind(&DbsApiModelsOffersResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiModelsOffersResource::~DbsApiModelsOffersResource()
{
}

std::pair<int, std::string> DbsApiModelsOffersResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiModelsOffersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiModelsOffersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiModelsOffersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiModelsOffersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiModelsOffersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiModelsOffersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getModelsRequest = extractJsonModelBodyParam<GetModelsRequest>(bodyContent);


    // Getting the query params
    const int64_t regionId = getQueryParam_regionId(request);


    int status_code = 500;
    std::shared_ptr<GetModelsOffersResponse> resultObject = std::make_shared<GetModelsOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(regionId, getModelsRequest, currency, orderByPrice);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список предложений для моделей." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetModelsOffersResponse>> DbsApiModelsOffersResource::handler_POST(
        int64_t const & regionId, std::shared_ptr<GetModelsRequest> const & getModelsRequest, std::shared_ptr<CurrencyType> const & currency, std::shared_ptr<SortOrderType> const & orderByPrice)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiModelsOffersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdOffer-cardsResource::DbsApiBusinessesBusinessIdOffer-cardsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-cards/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdOffer-cardsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdOffer-cardsResource::~DbsApiBusinessesBusinessIdOffer-cardsResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-cardsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-cardsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-cardsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdOffer-cardsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdOffer-cardsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdOffer-cardsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdOffer-cardsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getOfferCardsContentStatusRequest = extractJsonModelBodyParam<GetOfferCardsContentStatusRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOfferCardsContentStatusResponse> resultObject = std::make_shared<GetOfferCardsContentStatusResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, pageToken, limit, getOfferCardsContentStatusRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о карточках указанных товаров." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOfferCardsContentStatusResponse>> DbsApiBusinessesBusinessIdOffer-cardsResource::handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOfferCardsContentStatusRequest> const & getOfferCardsContentStatusRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdOffer-cardsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::DbsApiCampaignsCampaignIdOffer-mapping-entriesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-mapping-entries/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::~DbsApiCampaignsCampaignIdOffer-mapping-entriesResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOfferMappingEntriesResponse> resultObject = std::make_shared<GetOfferMappingEntriesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, offerId, shopSku, mappingKind, status, availability, categoryId, vendor, pageToken, limit);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о товарах в каталоге." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOfferMappingEntriesResponse>> DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::handler_GET(
        int64_t const & campaignId, std::vector<std::string> const & offerId, std::vector<std::shared_ptr<std::string>> const & shopSku, std::shared_ptr<OfferMappingKindType> const & mappingKind, std::vector<std::shared_ptr<OfferProcessingStatusType>> const & status, std::vector<std::shared_ptr<OfferAvailabilityStatusType>> const & availability, std::vector<int32_t> const & categoryId, std::vector<std::string> const & vendor, std::string const & pageToken, int32_t const & limit)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOffer-mapping-entriesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdOffer-mappingsResource::DbsApiBusinessesBusinessIdOffer-mappingsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdOffer-mappingsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdOffer-mappingsResource::~DbsApiBusinessesBusinessIdOffer-mappingsResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdOffer-mappingsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdOffer-mappingsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getOfferMappingsRequest = extractJsonModelBodyParam<GetOfferMappingsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOfferMappingsResponse> resultObject = std::make_shared<GetOfferMappingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, pageToken, limit, getOfferMappingsRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о товарах в каталоге." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOfferMappingsResponse>> DbsApiBusinessesBusinessIdOffer-mappingsResource::handler_POST(
        int64_t const & businessId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOfferMappingsRequest> const & getOfferMappingsRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdOffer-mappingsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdOffersRecommendationsResource::DbsApiBusinessesBusinessIdOffersRecommendationsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offers/recommendations/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdOffersRecommendationsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdOffersRecommendationsResource::~DbsApiBusinessesBusinessIdOffersRecommendationsResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffersRecommendationsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffersRecommendationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffersRecommendationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdOffersRecommendationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdOffersRecommendationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdOffersRecommendationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdOffersRecommendationsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getOfferRecommendationsRequest = extractJsonModelBodyParam<GetOfferRecommendationsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOfferRecommendationsResponse> resultObject = std::make_shared<GetOfferRecommendationsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getOfferRecommendationsRequest, pageToken, limit);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров с рекомендациями." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOfferRecommendationsResponse>> DbsApiBusinessesBusinessIdOffersRecommendationsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetOfferRecommendationsRequest> const & getOfferRecommendationsRequest, std::string const & pageToken, int32_t const & limit)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdOffersRecommendationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdResource::DbsApiCampaignsCampaignIdOrdersOrderIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdResource::~DbsApiCampaignsCampaignIdOrdersOrderIdResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<GetOrderResponse> resultObject = std::make_shared<GetOrderResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о заказе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrderResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/business-buyer/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::~DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<GetBusinessBuyerInfoResponse> resultObject = std::make_shared<GetBusinessBuyerInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, orderId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о покупателе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBusinessBuyerInfoResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::handler_POST(
        int64_t const & campaignId, int64_t const & orderId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/documents/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::~DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<GetBusinessDocumentsInfoResponse> resultObject = std::make_shared<GetBusinessDocumentsInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, orderId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о документах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetBusinessDocumentsInfoResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::handler_POST(
        int64_t const & campaignId, int64_t const & orderId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/buyer/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::~DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<GetOrderBuyerInfoResponse> resultObject = std::make_shared<GetOrderBuyerInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о покупателе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrderBuyerInfoResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/labels/data/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::~DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<GetOrderLabelsDataResponse> resultObject = std::make_shared<GetOrderLabelsDataResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация для печати ярлыков." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrderLabelsDataResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersResource::DbsApiCampaignsCampaignIdOrdersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOrdersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersResource::~DbsApiCampaignsCampaignIdOrdersResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string fromDate = getQueryParam_fromDate(request);
    const std::string toDate = getQueryParam_toDate(request);
    const std::string supplierShipmentDateFrom = getQueryParam_supplierShipmentDateFrom(request);
    const std::string supplierShipmentDateTo = getQueryParam_supplierShipmentDateTo(request);
    const std::string updatedAtFrom = getQueryParam_updatedAtFrom(request);
    const std::string updatedAtTo = getQueryParam_updatedAtTo(request);
    const bool fake = getQueryParam_fake(request);
    const bool hasCis = getQueryParam_hasCis(request);
    const bool onlyWaitingForCancellationApprove = getQueryParam_onlyWaitingForCancellationApprove(request);
    const bool onlyEstimatedDelivery = getQueryParam_onlyEstimatedDelivery(request);
    const int32_t page = getQueryParam_page(request);
    const int32_t pageSize = getQueryParam_pageSize(request);
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOrdersResponse> resultObject = std::make_shared<GetOrdersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderIds, status, substatus, fromDate, toDate, supplierShipmentDateFrom, supplierShipmentDateTo, updatedAtFrom, updatedAtTo, dispatchType, fake, hasCis, onlyWaitingForCancellationApprove, onlyEstimatedDelivery, buyerType, page, pageSize, pageToken, limit);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о заказах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrdersResponse>> DbsApiCampaignsCampaignIdOrdersResource::handler_GET(
        int64_t const & campaignId, std::vector<int64_t> const & orderIds, Set<std::shared_ptr<OrderStatusType>> const & status, Set<std::shared_ptr<OrderSubstatusType>> const & substatus, std::string const & fromDate, std::string const & toDate, std::string const & supplierShipmentDateFrom, std::string const & supplierShipmentDateTo, std::string const & updatedAtFrom, std::string const & updatedAtTo, std::shared_ptr<OrderDeliveryDispatchType> const & dispatchType, bool const & fake, bool const & hasCis, bool const & onlyWaitingForCancellationApprove, bool const & onlyEstimatedDelivery, std::shared_ptr<OrderBuyerType> const & buyerType, int32_t const & page, int32_t const & pageSize, std::string const & pageToken, int32_t const & limit)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdStatsOrdersResource::DbsApiCampaignsCampaignIdStatsOrdersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/stats/orders/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdStatsOrdersResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdStatsOrdersResource::~DbsApiCampaignsCampaignIdStatsOrdersResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdStatsOrdersResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdStatsOrdersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdStatsOrdersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdStatsOrdersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdStatsOrdersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdStatsOrdersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdStatsOrdersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getOrdersStatsRequest = extractJsonModelBodyParam<GetOrdersStatsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetOrdersStatsResponse> resultObject = std::make_shared<GetOrdersStatsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, pageToken, limit, getOrdersStatsRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация по заказам." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrdersStatsResponse>> DbsApiCampaignsCampaignIdStatsOrdersResource::handler_POST(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetOrdersStatsRequest> const & getOrdersStatsRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdStatsOrdersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOffer-pricesResource::DbsApiCampaignsCampaignIdOffer-pricesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-prices/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOffer-pricesResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOffer-pricesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOffer-pricesResource::~DbsApiCampaignsCampaignIdOffer-pricesResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-pricesResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-pricesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-pricesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOffer-pricesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOffer-pricesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOffer-pricesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOffer-pricesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);
    const bool archived = getQueryParam_archived(request);


    int status_code = 500;
    std::shared_ptr<GetPricesResponse> resultObject = std::make_shared<GetPricesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, pageToken, limit, archived);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список всех товаров с установленными ценами." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void DbsApiCampaignsCampaignIdOffer-pricesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto campaignId = std::make_shared<>(bodyContent);
    auto pageToken = std::make_shared<>(bodyContent);
    auto limit = std::make_shared<>(bodyContent);
    auto getPricesByOfferIdsRequest = extractJsonModelBodyParam<GetPricesByOfferIdsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken_x_extension(request);

    const int32_t limit = getQueryParam_limit_x_extension(request);


    int status_code = 500;
    std::shared_ptr<GetPricesByOfferIdsResponse> resultObject = std::make_shared<GetPricesByOfferIdsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_POST(campaignId, pageToken, limit, getPricesByOfferIdsRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров с установленными для заданного магазина ценами." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<GetPricesResponse>> DbsApiCampaignsCampaignIdOffer-pricesResource::handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, bool const & archived)
{
    throw DbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<GetPricesByOfferIdsResponse>> DbsApiCampaignsCampaignIdOffer-pricesResource::handler_POST(
    int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetPricesByOfferIdsRequest> const & getPricesByOfferIdsRequest)
{
    throw DbsApiException(501, "Not implemented");
}

std::string DbsApiCampaignsCampaignIdOffer-pricesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdPromosOffersResource::DbsApiBusinessesBusinessIdPromosOffersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/promos/offers/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdPromosOffersResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdPromosOffersResource::~DbsApiBusinessesBusinessIdPromosOffersResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosOffersResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosOffersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosOffersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdPromosOffersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdPromosOffersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdPromosOffersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdPromosOffersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getPromoOffersRequest = extractJsonModelBodyParam<GetPromoOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetPromoOffersResponse> resultObject = std::make_shared<GetPromoOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getPromoOffersRequest, pageToken, limit);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список товаров, которые участвуют или могут участвовать в акции." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetPromoOffersResponse>> DbsApiBusinessesBusinessIdPromosOffersResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetPromoOffersRequest> const & getPromoOffersRequest, std::string const & pageToken, int32_t const & limit)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdPromosOffersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdPromosResource::DbsApiBusinessesBusinessIdPromosResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/promos/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdPromosResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdPromosResource::~DbsApiBusinessesBusinessIdPromosResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdPromosResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdPromosResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdPromosResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdPromosResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getPromosRequest = extractJsonModelBodyParam<GetPromosRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetPromosResponse> resultObject = std::make_shared<GetPromosResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getPromosRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список акций Маркета." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetPromosResponse>> DbsApiBusinessesBusinessIdPromosResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetPromosRequest> const & getPromosRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdPromosResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::DbsApiCampaignsCampaignIdRatingsQualityDetailsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/ratings/quality/details/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::~DbsApiCampaignsCampaignIdRatingsQualityDetailsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetQualityRatingDetailsResponse> resultObject = std::make_shared<GetQualityRatingDetailsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о заказах, которые повлияли на индекс качества." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetQualityRatingDetailsResponse>> DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::handler_POST(
        int64_t const & campaignId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdRatingsQualityDetailsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdRatingsQualityResource::DbsApiBusinessesBusinessIdRatingsQualityResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/ratings/quality/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdRatingsQualityResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdRatingsQualityResource::~DbsApiBusinessesBusinessIdRatingsQualityResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdRatingsQualityResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdRatingsQualityResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdRatingsQualityResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdRatingsQualityResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdRatingsQualityResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdRatingsQualityResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdRatingsQualityResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getQualityRatingRequest = extractJsonModelBodyParam<GetQualityRatingRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetQualityRatingResponse> resultObject = std::make_shared<GetQualityRatingResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getQualityRatingRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Значение индекса качества магазинов и его составляющие." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetQualityRatingResponse>> DbsApiBusinessesBusinessIdRatingsQualityResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetQualityRatingRequest> const & getQualityRatingRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdRatingsQualityResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiReportsInfoReportIdResource::DbsApiReportsInfoReportIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/reports/info/{reportId: .*}/");
	this->set_method_handler("GET",
		std::bind(&DbsApiReportsInfoReportIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiReportsInfoReportIdResource::~DbsApiReportsInfoReportIdResource()
{
}

std::pair<int, std::string> DbsApiReportsInfoReportIdResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiReportsInfoReportIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiReportsInfoReportIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiReportsInfoReportIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiReportsInfoReportIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiReportsInfoReportIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiReportsInfoReportIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string reportId = getPathParam_reportId(request);



    int status_code = 500;
    std::shared_ptr<GetReportInfoResponse> resultObject = std::make_shared<GetReportInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(reportId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — &#x60;FAILED&#x60; или &#x60;NO_DATA&#x60;, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetReportInfoResponse>> DbsApiReportsInfoReportIdResource::handler_GET(
        std::string const & reportId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiReportsInfoReportIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/returns/{returnId: .*}/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::~DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t returnId = getPathParam_returnId(request);



    int status_code = 500;
    std::shared_ptr<GetReturnResponse> resultObject = std::make_shared<GetReturnResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId, returnId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Детали возврата." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetReturnResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/returns/{returnId: .*}/application/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::~DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t returnId = getPathParam_returnId(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId, returnId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Заявление на возврат." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/returns/{returnId: .*}/decision/{itemId: .*}/image/{imageHash: .*}/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::~DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t returnId = getPathParam_returnId(request);
    const int64_t itemId = getPathParam_itemId(request);
    const std::string imageHash = getPathParam_imageHash(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId, returnId, itemId, imageHash);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Фотография возврата." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId, int64_t const & itemId, std::string const & imageHash)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdReturnsResource::DbsApiCampaignsCampaignIdReturnsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/returns/");
	this->set_method_handler("GET",
		std::bind(&DbsApiCampaignsCampaignIdReturnsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdReturnsResource::~DbsApiCampaignsCampaignIdReturnsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdReturnsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdReturnsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdReturnsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdReturnsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdReturnsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdReturnsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdReturnsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);
    const std::string fromDate = getQueryParam_fromDate(request);
    const std::string toDate = getQueryParam_toDate(request);
    const std::string fromDate2 = getQueryParam_fromDate2(request);
    const std::string toDate2 = getQueryParam_toDate2(request);


    int status_code = 500;
    std::shared_ptr<GetReturnsResponse> resultObject = std::make_shared<GetReturnsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, pageToken, limit, orderIds, statuses, type, fromDate, toDate, fromDate2, toDate2);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Постраничные возвраты партнера." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetReturnsResponse>> DbsApiCampaignsCampaignIdReturnsResource::handler_GET(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::vector<int64_t> const & orderIds, std::vector<std::shared_ptr<RefundStatusType>> const & statuses, std::shared_ptr<ReturnType> const & type, std::string const & fromDate, std::string const & toDate, std::string const & fromDate2, std::string const & toDate2)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdReturnsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOffersStocksResource::DbsApiCampaignsCampaignIdOffersStocksResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offers/stocks/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOffersStocksResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PUT",
		std::bind(&DbsApiCampaignsCampaignIdOffersStocksResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOffersStocksResource::~DbsApiCampaignsCampaignIdOffersStocksResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersStocksResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersStocksResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersStocksResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOffersStocksResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOffersStocksResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOffersStocksResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOffersStocksResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getWarehouseStocksRequest = extractJsonModelBodyParam<GetWarehouseStocksRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);

    // Getting the query params
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetWarehouseStocksResponse> resultObject = std::make_shared<GetWarehouseStocksResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, pageToken, limit, getWarehouseStocksRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Остатки товаров на складах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void DbsApiCampaignsCampaignIdOffersStocksResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto campaignId = std::make_shared<>(bodyContent);
    auto updateStocksRequest = extractJsonModelBodyParam<UpdateStocksRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_PUT(campaignId, updateStocksRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<GetWarehouseStocksResponse>> DbsApiCampaignsCampaignIdOffersStocksResource::handler_POST(
        int64_t const & campaignId, std::string const & pageToken, int32_t const & limit, std::shared_ptr<GetWarehouseStocksRequest> const & getWarehouseStocksRequest)
{
    throw DbsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOffersStocksResource::handler_PUT(
    int64_t const & campaignId, std::shared_ptr<UpdateStocksRequest> const & updateStocksRequest)
{
    throw DbsApiException(501, "Not implemented");
}

std::string DbsApiCampaignsCampaignIdOffersStocksResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-mapping-entries/suggestions/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::~DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getSuggestedOfferMappingEntriesRequest = extractJsonModelBodyParam<GetSuggestedOfferMappingEntriesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<GetSuggestedOfferMappingEntriesResponse> resultObject = std::make_shared<GetSuggestedOfferMappingEntriesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, getSuggestedOfferMappingEntriesRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о товарах в каталоге." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetSuggestedOfferMappingEntriesResponse>> DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<GetSuggestedOfferMappingEntriesRequest> const & getSuggestedOfferMappingEntriesRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/suggestions/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::~DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto getSuggestedOfferMappingsRequest = extractJsonModelBodyParam<GetSuggestedOfferMappingsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetSuggestedOfferMappingsResponse> resultObject = std::make_shared<GetSuggestedOfferMappingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, getSuggestedOfferMappingsRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetSuggestedOfferMappingsResponse>> DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<GetSuggestedOfferMappingsRequest> const & getSuggestedOfferMappingsRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-prices/suggestions/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::~DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto suggestPricesRequest = extractJsonModelBodyParam<SuggestPricesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<SuggestPricesResponse> resultObject = std::make_shared<SuggestPricesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, suggestPricesRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список цен для продвижения на Маркете." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<SuggestPricesResponse>> DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<SuggestPricesRequest> const & suggestPricesRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdWarehousesResource::DbsApiBusinessesBusinessIdWarehousesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/warehouses/");
	this->set_method_handler("GET",
		std::bind(&DbsApiBusinessesBusinessIdWarehousesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdWarehousesResource::~DbsApiBusinessesBusinessIdWarehousesResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdWarehousesResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdWarehousesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdWarehousesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdWarehousesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdWarehousesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdWarehousesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdWarehousesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<GetWarehousesResponse> resultObject = std::make_shared<GetWarehousesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(businessId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список складов и групп складов." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetWarehousesResponse>> DbsApiBusinessesBusinessIdWarehousesResource::handler_GET(
        int64_t const & businessId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdWarehousesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/deliverDigitalGoods/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::~DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto provideOrderDigitalCodesRequest = extractJsonModelBodyParam<ProvideOrderDigitalCodesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, orderId, provideOrderDigitalCodesRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::handler_POST(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<ProvideOrderDigitalCodesRequest> const & provideOrderDigitalCodesRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/identifiers/");
	this->set_method_handler("PUT",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::~DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto provideOrderItemIdentifiersRequest = extractJsonModelBodyParam<ProvideOrderItemIdentifiersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<ProvideOrderItemIdentifiersResponse> resultObject = std::make_shared<ProvideOrderItemIdentifiersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, provideOrderItemIdentifiersRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<ProvideOrderItemIdentifiersResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<ProvideOrderItemIdentifiersRequest> const & provideOrderItemIdentifiersRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdBidsResource::DbsApiBusinessesBusinessIdBidsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/bids/");
	this->set_method_handler("PUT",
		std::bind(&DbsApiBusinessesBusinessIdBidsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdBidsResource::~DbsApiBusinessesBusinessIdBidsResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdBidsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdBidsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdBidsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdBidsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdBidsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdBidsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdBidsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto putSkuBidsRequest = extractJsonModelBodyParam<PutSkuBidsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(businessId, putSkuBidsRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiBusinessesBusinessIdBidsResource::handler_PUT(
        int64_t const & businessId, std::shared_ptr<PutSkuBidsRequest> const & putSkuBidsRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdBidsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdBidsResource::DbsApiCampaignsCampaignIdBidsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/bids/");
	this->set_method_handler("PUT",
		std::bind(&DbsApiCampaignsCampaignIdBidsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdBidsResource::~DbsApiCampaignsCampaignIdBidsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdBidsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdBidsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdBidsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdBidsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdBidsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdBidsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdBidsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto putSkuBidsRequest = extractJsonModelBodyParam<PutSkuBidsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, putSkuBidsRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdBidsResource::handler_PUT(
        int64_t const & campaignId, std::shared_ptr<PutSkuBidsRequest> const & putSkuBidsRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdBidsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feeds/{feedId: .*}/refresh/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::~DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t feedId = getPathParam_feedId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, feedId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::handler_POST(
        int64_t const & campaignId, int64_t const & feedId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiRegionsRegionIdChildrenResource::DbsApiRegionsRegionIdChildrenResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/regions/{regionId: .*}/children/");
	this->set_method_handler("GET",
		std::bind(&DbsApiRegionsRegionIdChildrenResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiRegionsRegionIdChildrenResource::~DbsApiRegionsRegionIdChildrenResource()
{
}

std::pair<int, std::string> DbsApiRegionsRegionIdChildrenResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiRegionsRegionIdChildrenResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiRegionsRegionIdChildrenResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiRegionsRegionIdChildrenResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiRegionsRegionIdChildrenResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiRegionsRegionIdChildrenResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiRegionsRegionIdChildrenResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t regionId = getPathParam_regionId(request);

    // Getting the query params
    const int32_t page = getQueryParam_page(request);
    const int32_t pageSize = getQueryParam_pageSize(request);


    int status_code = 500;
    std::shared_ptr<GetRegionWithChildrenResponse> resultObject = std::make_shared<GetRegionWithChildrenResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(regionId, page, pageSize);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Регионы, являющиеся дочерними к указанному в запросе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetRegionWithChildrenResponse>> DbsApiRegionsRegionIdChildrenResource::handler_GET(
        int64_t const & regionId, int32_t const & page, int32_t const & pageSize)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiRegionsRegionIdChildrenResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiRegionsRegionIdResource::DbsApiRegionsRegionIdResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/regions/{regionId: .*}/");
	this->set_method_handler("GET",
		std::bind(&DbsApiRegionsRegionIdResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiRegionsRegionIdResource::~DbsApiRegionsRegionIdResource()
{
}

std::pair<int, std::string> DbsApiRegionsRegionIdResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiRegionsRegionIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiRegionsRegionIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiRegionsRegionIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiRegionsRegionIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiRegionsRegionIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiRegionsRegionIdResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t regionId = getPathParam_regionId(request);



    int status_code = 500;
    std::shared_ptr<GetRegionsResponse> resultObject = std::make_shared<GetRegionsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(regionId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Найденный регион." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetRegionsResponse>> DbsApiRegionsRegionIdResource::handler_GET(
        int64_t const & regionId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiRegionsRegionIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiRegionsResource::DbsApiRegionsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/regions/");
	this->set_method_handler("GET",
		std::bind(&DbsApiRegionsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DbsApiRegionsResource::~DbsApiRegionsResource()
{
}

std::pair<int, std::string> DbsApiRegionsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiRegionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiRegionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiRegionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiRegionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiRegionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiRegionsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();


    // Getting the query params
    const std::string name = getQueryParam_name(request);
    const std::string pageToken = getQueryParam_pageToken(request);
    const int32_t limit = getQueryParam_limit(request);


    int status_code = 500;
    std::shared_ptr<GetRegionsResponse> resultObject = std::make_shared<GetRegionsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(name, pageToken, limit);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Список найденных регионов." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetRegionsResponse>> DbsApiRegionsResource::handler_GET(
        std::string const & name, std::string const & pageToken, int32_t const & limit)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiRegionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdChatsFileSendResource::DbsApiBusinessesBusinessIdChatsFileSendResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/chats/file/send/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdChatsFileSendResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdChatsFileSendResource::~DbsApiBusinessesBusinessIdChatsFileSendResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsFileSendResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsFileSendResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsFileSendResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdChatsFileSendResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdChatsFileSendResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdChatsFileSendResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdChatsFileSendResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const int64_t chatId = getQueryParam_chatId(request);


    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, chatId, file);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ. Означает, что файл отправлен." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiBusinessesBusinessIdChatsFileSendResource::handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::string const & file)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdChatsFileSendResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdChatsMessageResource::DbsApiBusinessesBusinessIdChatsMessageResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/chats/message/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdChatsMessageResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdChatsMessageResource::~DbsApiBusinessesBusinessIdChatsMessageResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsMessageResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsMessageResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdChatsMessageResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdChatsMessageResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdChatsMessageResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdChatsMessageResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdChatsMessageResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto sendMessageToChatRequest = extractJsonModelBodyParam<SendMessageToChatRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);

    // Getting the query params
    const int64_t chatId = getQueryParam_chatId(request);


    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, chatId, sendMessageToChatRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ. Означает, что сообщение отправлено." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiBusinessesBusinessIdChatsMessageResource::handler_POST(
        int64_t const & businessId, int64_t const & chatId, std::shared_ptr<SendMessageToChatRequest> const & sendMessageToChatRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdChatsMessageResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/feeds/{feedId: .*}/params/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::~DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setFeedParamsRequest = extractJsonModelBodyParam<SetFeedParamsRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t feedId = getPathParam_feedId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, feedId, setFeedParamsRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Статус выполнения операции." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::handler_POST(
        int64_t const & campaignId, int64_t const & feedId, std::shared_ptr<SetFeedParamsRequest> const & setFeedParamsRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/boxes/");
	this->set_method_handler("PUT",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::~DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setOrderBoxLayoutRequest = extractJsonModelBodyParam<SetOrderBoxLayoutRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<SetOrderBoxLayoutResponse> resultObject = std::make_shared<SetOrderBoxLayoutResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, setOrderBoxLayoutRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<SetOrderBoxLayoutResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<SetOrderBoxLayoutRequest> const & setOrderBoxLayoutRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/date/");
	this->set_method_handler("PUT",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::~DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setOrderDeliveryDateRequest = extractJsonModelBodyParam<SetOrderDeliveryDateRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, setOrderDeliveryDateRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Успешное изменение даты доставки." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<SetOrderDeliveryDateRequest> const & setOrderDeliveryDateRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/track/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::~DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setOrderDeliveryTrackCodeRequest = extractJsonModelBodyParam<SetOrderDeliveryTrackCodeRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, orderId, setOrderDeliveryTrackCodeRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Трек‑номер посылки и идентификатор службы доставки были успешно переданы." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handler_POST(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<SetOrderDeliveryTrackCodeRequest> const & setOrderDeliveryTrackCodeRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/shipments/{shipmentId: .*}/boxes/");
	this->set_method_handler("PUT",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::~DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setOrderShipmentBoxesRequest = extractJsonModelBodyParam<SetOrderShipmentBoxesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t shipmentId = getPathParam_shipmentId(request);



    int status_code = 500;
    std::shared_ptr<SetOrderShipmentBoxesResponse> resultObject = std::make_shared<SetOrderShipmentBoxesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, shipmentId, setOrderShipmentBoxesRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество грузомест записано." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<SetOrderShipmentBoxesResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & shipmentId, std::shared_ptr<SetOrderShipmentBoxesRequest> const & setOrderShipmentBoxesRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/returns/{returnId: .*}/decision/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::~DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setReturnDecisionRequest = extractJsonModelBodyParam<SetReturnDecisionRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t returnId = getPathParam_returnId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, orderId, returnId, setReturnDecisionRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Детали возврата." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::handler_POST(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId, std::shared_ptr<SetReturnDecisionRequest> const & setReturnDecisionRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/skip-reaction/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::~DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto skipGoodsFeedbackReactionRequest = extractJsonModelBodyParam<SkipGoodsFeedbackReactionRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, skipGoodsFeedbackReactionRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<SkipGoodsFeedbackReactionRequest> const & skipGoodsFeedbackReactionRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/returns/{returnId: .*}/decision/submit/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::~DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);
    const int64_t returnId = getPathParam_returnId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, orderId, returnId);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Статус выполнения операции." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::handler_POST(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & returnId)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-prices/updates/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::~DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateBusinessPricesRequest = extractJsonModelBodyParam<UpdateBusinessPricesRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updateBusinessPricesRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Маркет принял информацию о новых ценах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateBusinessPricesRequest> const & updateBusinessPricesRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOffersUpdateResource::DbsApiCampaignsCampaignIdOffersUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offers/update/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOffersUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOffersUpdateResource::~DbsApiCampaignsCampaignIdOffersUpdateResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersUpdateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffersUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOffersUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOffersUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOffersUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOffersUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateCampaignOffersRequest = extractJsonModelBodyParam<UpdateCampaignOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, updateCampaignOffersRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Ответ 200 обозначает, что новые параметры получены Маркетом и скоро вступят в силу." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOffersUpdateResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateCampaignOffersRequest> const & updateCampaignOffersRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOffersUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/goods-feedback/comments/update/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::~DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateGoodsFeedbackCommentRequest = extractJsonModelBodyParam<UpdateGoodsFeedbackCommentRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<UpdateGoodsFeedbackCommentResponse> resultObject = std::make_shared<UpdateGoodsFeedbackCommentResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updateGoodsFeedbackCommentRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о добавленном или измененном комментарии." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateGoodsFeedbackCommentResponse>> DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateGoodsFeedbackCommentRequest> const & updateGoodsFeedbackCommentRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::DbsApiBusinessesBusinessIdOffer-cardsUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-cards/update/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::~DbsApiBusinessesBusinessIdOffer-cardsUpdateResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOfferContentRequest = extractJsonModelBodyParam<UpdateOfferContentRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<UpdateOfferContentResponse> resultObject = std::make_shared<UpdateOfferContentResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updateOfferContentRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Запрос выполнен корректно, данные обработаны.  {% note warning \&quot;Ответ 200 сам по себе не значит, что переданные значения корректны\&quot; %}  Обязательно посмотрите детали ответа: &#x60;status&#x60; и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в &#x60;status&#x60; вернулось &#x60;ERROR&#x60;, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля &#x60;errors&#x60; и &#x60;warnings&#x60;. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateOfferContentResponse>> DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateOfferContentRequest> const & updateOfferContentRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdOffer-cardsUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-mapping-entries/updates/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::~DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOfferMappingEntryRequest = extractJsonModelBodyParam<UpdateOfferMappingEntryRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, updateOfferMappingEntryRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Статус выполнения операции." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateOfferMappingEntryRequest> const & updateOfferMappingEntryRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/offer-mappings/update/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::~DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOfferMappingsRequest = extractJsonModelBodyParam<UpdateOfferMappingsRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<UpdateOfferMappingsResponse> resultObject = std::make_shared<UpdateOfferMappingsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updateOfferMappingsRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. " : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateOfferMappingsResponse>> DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdateOfferMappingsRequest> const & updateOfferMappingsRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/items/");
	this->set_method_handler("PUT",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::~DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOrderItemRequest = extractJsonModelBodyParam<UpdateOrderItemRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_PUT(campaignId, orderId, updateOrderItemRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Маркет успешно обработал ваш запрос. Выходные данные не ожидаются." : result, contentType);
        return;
    }
    if (status_code == 400) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<UpdateOrderItemRequest> const & updateOrderItemRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/status/");
	this->set_method_handler("PUT",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::~DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOrderStatusRequest = extractJsonModelBodyParam<UpdateOrderStatusRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<UpdateOrderStatusResponse> resultObject = std::make_shared<UpdateOrderStatusResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, updateOrderStatusRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "В случае успешного изменения статуса заказа возвращается обновленная информация о заказе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateOrderStatusResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<UpdateOrderStatusRequest> const & updateOrderStatusRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersStatus-updateResource::DbsApiCampaignsCampaignIdOrdersStatus-updateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/status-update/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOrdersStatus-updateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersStatus-updateResource::~DbsApiCampaignsCampaignIdOrdersStatus-updateResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersStatus-updateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersStatus-updateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersStatus-updateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersStatus-updateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersStatus-updateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersStatus-updateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersStatus-updateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOrderStatusesRequest = extractJsonModelBodyParam<UpdateOrderStatusesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<UpdateOrderStatusesResponse> resultObject = std::make_shared<UpdateOrderStatusesResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, updateOrderStatusesRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Возвращается информация об обновленных статусах заказов." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdateOrderStatusesResponse>> DbsApiCampaignsCampaignIdOrdersStatus-updateResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdateOrderStatusesRequest> const & updateOrderStatusesRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersStatus-updateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/storage-limit/");
	this->set_method_handler("PUT",
		std::bind(&DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::~DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOrderStorageLimitRequest = extractJsonModelBodyParam<UpdateOrderStorageLimitRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, updateOrderStorageLimitRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<UpdateOrderStorageLimitRequest> const & updateOrderStorageLimitRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/offer-prices/updates/");
	this->set_method_handler("POST",
		std::bind(&DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::~DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource()
{
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updatePricesRequest = extractJsonModelBodyParam<UpdatePricesRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, updatePricesRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Маркет принял информацию о новых ценах." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 423) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 423, result.empty() ? "К ресурсу нельзя применить указанный метод." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::handler_POST(
        int64_t const & campaignId, std::shared_ptr<UpdatePricesRequest> const & updatePricesRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DbsApiBusinessesBusinessIdPromosOffersUpdateResource::DbsApiBusinessesBusinessIdPromosOffersUpdateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/businesses/{businessId: .*}/promos/offers/update/");
	this->set_method_handler("POST",
		std::bind(&DbsApiBusinessesBusinessIdPromosOffersUpdateResource::handler_POST_internal, this,
			std::placeholders::_1));
}

DbsApiBusinessesBusinessIdPromosOffersUpdateResource::~DbsApiBusinessesBusinessIdPromosOffersUpdateResource()
{
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosOffersUpdateResource::handleDbsApiException(const DbsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosOffersUpdateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DbsApiBusinessesBusinessIdPromosOffersUpdateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DbsApiBusinessesBusinessIdPromosOffersUpdateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DbsApiBusinessesBusinessIdPromosOffersUpdateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DbsApiBusinessesBusinessIdPromosOffersUpdateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DbsApiBusinessesBusinessIdPromosOffersUpdateResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updatePromoOffersRequest = extractJsonModelBodyParam<UpdatePromoOffersRequest>(bodyContent);

    // Getting the path params
    const int64_t businessId = getPathParam_businessId(request);



    int status_code = 500;
    std::shared_ptr<UpdatePromoOffersResponse> resultObject = std::make_shared<UpdatePromoOffersResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(businessId, updatePromoOffersRequest);
    }
    catch(const DbsApiException& e) {
        std::tie(status_code, result) = handleDbsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Результат добавления товаров в акцию или обновления их цен." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<UpdatePromoOffersResponse>> DbsApiBusinessesBusinessIdPromosOffersUpdateResource::handler_POST(
        int64_t const & businessId, std::shared_ptr<UpdatePromoOffersRequest> const & updatePromoOffersRequest)
{
    throw DbsApiException(501, "Not implemented");
}


std::string DbsApiBusinessesBusinessIdPromosOffersUpdateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

DbsApi::DbsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

DbsApi::~DbsApi() {}

void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> spDbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource = spDbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdHidden-offersResource(std::shared_ptr<DbsApiCampaignsCampaignIdHidden-offersResource> spDbsApiCampaignsCampaignIdHidden-offersResource) {
    m_spDbsApiCampaignsCampaignIdHidden-offersResource = spDbsApiCampaignsCampaignIdHidden-offersResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdHidden-offersResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdOffer-mappingsArchiveResource(std::shared_ptr<DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource> spDbsApiBusinessesBusinessIdOffer-mappingsArchiveResource) {
    m_spDbsApiBusinessesBusinessIdOffer-mappingsArchiveResource = spDbsApiBusinessesBusinessIdOffer-mappingsArchiveResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdOffer-mappingsArchiveResource);
}
void DbsApi::setDbsApiTariffsCalculateResource(std::shared_ptr<DbsApiTariffsCalculateResource> spDbsApiTariffsCalculateResource) {
    m_spDbsApiTariffsCalculateResource = spDbsApiTariffsCalculateResource;
    m_service->publish(m_spDbsApiTariffsCalculateResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdPrice-quarantineConfirmResource(std::shared_ptr<DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource> spDbsApiBusinessesBusinessIdPrice-quarantineConfirmResource) {
    m_spDbsApiBusinessesBusinessIdPrice-quarantineConfirmResource = spDbsApiBusinessesBusinessIdPrice-quarantineConfirmResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdPrice-quarantineConfirmResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdPrice-quarantineConfirmResource(std::shared_ptr<DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource> spDbsApiCampaignsCampaignIdPrice-quarantineConfirmResource) {
    m_spDbsApiCampaignsCampaignIdPrice-quarantineConfirmResource = spDbsApiCampaignsCampaignIdPrice-quarantineConfirmResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdPrice-quarantineConfirmResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdChatsNewResource(std::shared_ptr<DbsApiBusinessesBusinessIdChatsNewResource> spDbsApiBusinessesBusinessIdChatsNewResource) {
    m_spDbsApiBusinessesBusinessIdChatsNewResource = spDbsApiBusinessesBusinessIdChatsNewResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdChatsNewResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOutletsResource(std::shared_ptr<DbsApiCampaignsCampaignIdOutletsResource> spDbsApiCampaignsCampaignIdOutletsResource) {
    m_spDbsApiCampaignsCampaignIdOutletsResource = spDbsApiCampaignsCampaignIdOutletsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOutletsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOffersDeleteResource(std::shared_ptr<DbsApiCampaignsCampaignIdOffersDeleteResource> spDbsApiCampaignsCampaignIdOffersDeleteResource) {
    m_spDbsApiCampaignsCampaignIdOffersDeleteResource = spDbsApiCampaignsCampaignIdOffersDeleteResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOffersDeleteResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(std::shared_ptr<DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource> spDbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource) {
    m_spDbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource = spDbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdHidden-offersDeleteResource(std::shared_ptr<DbsApiCampaignsCampaignIdHidden-offersDeleteResource> spDbsApiCampaignsCampaignIdHidden-offersDeleteResource) {
    m_spDbsApiCampaignsCampaignIdHidden-offersDeleteResource = spDbsApiCampaignsCampaignIdHidden-offersDeleteResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdHidden-offersDeleteResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdOffer-mappingsDeleteResource(std::shared_ptr<DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource> spDbsApiBusinessesBusinessIdOffer-mappingsDeleteResource) {
    m_spDbsApiBusinessesBusinessIdOffer-mappingsDeleteResource = spDbsApiBusinessesBusinessIdOffer-mappingsDeleteResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdOffer-mappingsDeleteResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(std::shared_ptr<DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource> spDbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource) {
    m_spDbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource = spDbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOutletsOutletIdResource(std::shared_ptr<DbsApiCampaignsCampaignIdOutletsOutletIdResource> spDbsApiCampaignsCampaignIdOutletsOutletIdResource) {
    m_spDbsApiCampaignsCampaignIdOutletsOutletIdResource = spDbsApiCampaignsCampaignIdOutletsOutletIdResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOutletsOutletIdResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOutletsLicensesResource(std::shared_ptr<DbsApiCampaignsCampaignIdOutletsLicensesResource> spDbsApiCampaignsCampaignIdOutletsLicensesResource) {
    m_spDbsApiCampaignsCampaignIdOutletsLicensesResource = spDbsApiCampaignsCampaignIdOutletsLicensesResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOutletsLicensesResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdPromosOffersDeleteResource(std::shared_ptr<DbsApiBusinessesBusinessIdPromosOffersDeleteResource> spDbsApiBusinessesBusinessIdPromosOffersDeleteResource) {
    m_spDbsApiBusinessesBusinessIdPromosOffersDeleteResource = spDbsApiBusinessesBusinessIdPromosOffersDeleteResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdPromosOffersDeleteResource);
}
void DbsApi::setDbsApiReportsBoost-consolidatedGenerateResource(std::shared_ptr<DbsApiReportsBoost-consolidatedGenerateResource> spDbsApiReportsBoost-consolidatedGenerateResource) {
    m_spDbsApiReportsBoost-consolidatedGenerateResource = spDbsApiReportsBoost-consolidatedGenerateResource;
    m_service->publish(m_spDbsApiReportsBoost-consolidatedGenerateResource);
}
void DbsApi::setDbsApiReportsCompetitors-positionGenerateResource(std::shared_ptr<DbsApiReportsCompetitors-positionGenerateResource> spDbsApiReportsCompetitors-positionGenerateResource) {
    m_spDbsApiReportsCompetitors-positionGenerateResource = spDbsApiReportsCompetitors-positionGenerateResource;
    m_service->publish(m_spDbsApiReportsCompetitors-positionGenerateResource);
}
void DbsApi::setDbsApiReportsGoods-feedbackGenerateResource(std::shared_ptr<DbsApiReportsGoods-feedbackGenerateResource> spDbsApiReportsGoods-feedbackGenerateResource) {
    m_spDbsApiReportsGoods-feedbackGenerateResource = spDbsApiReportsGoods-feedbackGenerateResource;
    m_service->publish(m_spDbsApiReportsGoods-feedbackGenerateResource);
}
void DbsApi::setDbsApiReportsDocumentsLabelsGenerateResource(std::shared_ptr<DbsApiReportsDocumentsLabelsGenerateResource> spDbsApiReportsDocumentsLabelsGenerateResource) {
    m_spDbsApiReportsDocumentsLabelsGenerateResource = spDbsApiReportsDocumentsLabelsGenerateResource;
    m_service->publish(m_spDbsApiReportsDocumentsLabelsGenerateResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource = spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource = spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource);
}
void DbsApi::setDbsApiReportsPricesGenerateResource(std::shared_ptr<DbsApiReportsPricesGenerateResource> spDbsApiReportsPricesGenerateResource) {
    m_spDbsApiReportsPricesGenerateResource = spDbsApiReportsPricesGenerateResource;
    m_service->publish(m_spDbsApiReportsPricesGenerateResource);
}
void DbsApi::setDbsApiReportsShelf-statisticsGenerateResource(std::shared_ptr<DbsApiReportsShelf-statisticsGenerateResource> spDbsApiReportsShelf-statisticsGenerateResource) {
    m_spDbsApiReportsShelf-statisticsGenerateResource = spDbsApiReportsShelf-statisticsGenerateResource;
    m_service->publish(m_spDbsApiReportsShelf-statisticsGenerateResource);
}
void DbsApi::setDbsApiReportsShows-salesGenerateResource(std::shared_ptr<DbsApiReportsShows-salesGenerateResource> spDbsApiReportsShows-salesGenerateResource) {
    m_spDbsApiReportsShows-salesGenerateResource = spDbsApiReportsShows-salesGenerateResource;
    m_service->publish(m_spDbsApiReportsShows-salesGenerateResource);
}
void DbsApi::setDbsApiReportsStocks-on-warehousesGenerateResource(std::shared_ptr<DbsApiReportsStocks-on-warehousesGenerateResource> spDbsApiReportsStocks-on-warehousesGenerateResource) {
    m_spDbsApiReportsStocks-on-warehousesGenerateResource = spDbsApiReportsStocks-on-warehousesGenerateResource;
    m_service->publish(m_spDbsApiReportsStocks-on-warehousesGenerateResource);
}
void DbsApi::setDbsApiReportsUnited-marketplace-servicesGenerateResource(std::shared_ptr<DbsApiReportsUnited-marketplace-servicesGenerateResource> spDbsApiReportsUnited-marketplace-servicesGenerateResource) {
    m_spDbsApiReportsUnited-marketplace-servicesGenerateResource = spDbsApiReportsUnited-marketplace-servicesGenerateResource;
    m_service->publish(m_spDbsApiReportsUnited-marketplace-servicesGenerateResource);
}
void DbsApi::setDbsApiReportsUnited-nettingGenerateResource(std::shared_ptr<DbsApiReportsUnited-nettingGenerateResource> spDbsApiReportsUnited-nettingGenerateResource) {
    m_spDbsApiReportsUnited-nettingGenerateResource = spDbsApiReportsUnited-nettingGenerateResource;
    m_service->publish(m_spDbsApiReportsUnited-nettingGenerateResource);
}
void DbsApi::setDbsApiReportsUnited-ordersGenerateResource(std::shared_ptr<DbsApiReportsUnited-ordersGenerateResource> spDbsApiReportsUnited-ordersGenerateResource) {
    m_spDbsApiReportsUnited-ordersGenerateResource = spDbsApiReportsUnited-ordersGenerateResource;
    m_service->publish(m_spDbsApiReportsUnited-ordersGenerateResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOffersAllResource(std::shared_ptr<DbsApiCampaignsCampaignIdOffersAllResource> spDbsApiCampaignsCampaignIdOffersAllResource) {
    m_spDbsApiCampaignsCampaignIdOffersAllResource = spDbsApiCampaignsCampaignIdOffersAllResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOffersAllResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdBidsInfoResource(std::shared_ptr<DbsApiBusinessesBusinessIdBidsInfoResource> spDbsApiBusinessesBusinessIdBidsInfoResource) {
    m_spDbsApiBusinessesBusinessIdBidsInfoResource = spDbsApiBusinessesBusinessIdBidsInfoResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdBidsInfoResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdBidsRecommendationsResource(std::shared_ptr<DbsApiBusinessesBusinessIdBidsRecommendationsResource> spDbsApiBusinessesBusinessIdBidsRecommendationsResource) {
    m_spDbsApiBusinessesBusinessIdBidsRecommendationsResource = spDbsApiBusinessesBusinessIdBidsRecommendationsResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdBidsRecommendationsResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdPrice-quarantineResource(std::shared_ptr<DbsApiBusinessesBusinessIdPrice-quarantineResource> spDbsApiBusinessesBusinessIdPrice-quarantineResource) {
    m_spDbsApiBusinessesBusinessIdPrice-quarantineResource = spDbsApiBusinessesBusinessIdPrice-quarantineResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdPrice-quarantineResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdSettingsResource(std::shared_ptr<DbsApiBusinessesBusinessIdSettingsResource> spDbsApiBusinessesBusinessIdSettingsResource) {
    m_spDbsApiBusinessesBusinessIdSettingsResource = spDbsApiBusinessesBusinessIdSettingsResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdSettingsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdResource(std::shared_ptr<DbsApiCampaignsCampaignIdResource> spDbsApiCampaignsCampaignIdResource) {
    m_spDbsApiCampaignsCampaignIdResource = spDbsApiCampaignsCampaignIdResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdLoginsResource(std::shared_ptr<DbsApiCampaignsCampaignIdLoginsResource> spDbsApiCampaignsCampaignIdLoginsResource) {
    m_spDbsApiCampaignsCampaignIdLoginsResource = spDbsApiCampaignsCampaignIdLoginsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdLoginsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOffersResource(std::shared_ptr<DbsApiCampaignsCampaignIdOffersResource> spDbsApiCampaignsCampaignIdOffersResource) {
    m_spDbsApiCampaignsCampaignIdOffersResource = spDbsApiCampaignsCampaignIdOffersResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOffersResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdPrice-quarantineResource(std::shared_ptr<DbsApiCampaignsCampaignIdPrice-quarantineResource> spDbsApiCampaignsCampaignIdPrice-quarantineResource) {
    m_spDbsApiCampaignsCampaignIdPrice-quarantineResource = spDbsApiCampaignsCampaignIdPrice-quarantineResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdPrice-quarantineResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdRegionResource(std::shared_ptr<DbsApiCampaignsCampaignIdRegionResource> spDbsApiCampaignsCampaignIdRegionResource) {
    m_spDbsApiCampaignsCampaignIdRegionResource = spDbsApiCampaignsCampaignIdRegionResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdRegionResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdSettingsResource(std::shared_ptr<DbsApiCampaignsCampaignIdSettingsResource> spDbsApiCampaignsCampaignIdSettingsResource) {
    m_spDbsApiCampaignsCampaignIdSettingsResource = spDbsApiCampaignsCampaignIdSettingsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdSettingsResource);
}
void DbsApi::setDbsApiCampaignsResource(std::shared_ptr<DbsApiCampaignsResource> spDbsApiCampaignsResource) {
    m_spDbsApiCampaignsResource = spDbsApiCampaignsResource;
    m_service->publish(m_spDbsApiCampaignsResource);
}
void DbsApi::setDbsApiCampaignsBy_loginLoginResource(std::shared_ptr<DbsApiCampaignsBy_loginLoginResource> spDbsApiCampaignsBy_loginLoginResource) {
    m_spDbsApiCampaignsBy_loginLoginResource = spDbsApiCampaignsBy_loginLoginResource;
    m_service->publish(m_spDbsApiCampaignsBy_loginLoginResource);
}
void DbsApi::setDbsApiCategoriesMax-sale-quantumResource(std::shared_ptr<DbsApiCategoriesMax-sale-quantumResource> spDbsApiCategoriesMax-sale-quantumResource) {
    m_spDbsApiCategoriesMax-sale-quantumResource = spDbsApiCategoriesMax-sale-quantumResource;
    m_service->publish(m_spDbsApiCategoriesMax-sale-quantumResource);
}
void DbsApi::setDbsApiCategoriesTreeResource(std::shared_ptr<DbsApiCategoriesTreeResource> spDbsApiCategoriesTreeResource) {
    m_spDbsApiCategoriesTreeResource = spDbsApiCategoriesTreeResource;
    m_service->publish(m_spDbsApiCategoriesTreeResource);
}
void DbsApi::setDbsApiCategoryCategoryIdParametersResource(std::shared_ptr<DbsApiCategoryCategoryIdParametersResource> spDbsApiCategoryCategoryIdParametersResource) {
    m_spDbsApiCategoryCategoryIdParametersResource = spDbsApiCategoryCategoryIdParametersResource;
    m_service->publish(m_spDbsApiCategoryCategoryIdParametersResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdChatsHistoryResource(std::shared_ptr<DbsApiBusinessesBusinessIdChatsHistoryResource> spDbsApiBusinessesBusinessIdChatsHistoryResource) {
    m_spDbsApiBusinessesBusinessIdChatsHistoryResource = spDbsApiBusinessesBusinessIdChatsHistoryResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdChatsHistoryResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdChatsResource(std::shared_ptr<DbsApiBusinessesBusinessIdChatsResource> spDbsApiBusinessesBusinessIdChatsResource) {
    m_spDbsApiBusinessesBusinessIdChatsResource = spDbsApiBusinessesBusinessIdChatsResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdChatsResource);
}
void DbsApi::setDbsApiDeliveryServicesResource(std::shared_ptr<DbsApiDeliveryServicesResource> spDbsApiDeliveryServicesResource) {
    m_spDbsApiDeliveryServicesResource = spDbsApiDeliveryServicesResource;
    m_service->publish(m_spDbsApiDeliveryServicesResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdFeedsFeedIdResource(std::shared_ptr<DbsApiCampaignsCampaignIdFeedsFeedIdResource> spDbsApiCampaignsCampaignIdFeedsFeedIdResource) {
    m_spDbsApiCampaignsCampaignIdFeedsFeedIdResource = spDbsApiCampaignsCampaignIdFeedsFeedIdResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdFeedsFeedIdResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource(std::shared_ptr<DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource> spDbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource) {
    m_spDbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource = spDbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdFeedbackUpdatesResource(std::shared_ptr<DbsApiCampaignsCampaignIdFeedbackUpdatesResource> spDbsApiCampaignsCampaignIdFeedbackUpdatesResource) {
    m_spDbsApiCampaignsCampaignIdFeedbackUpdatesResource = spDbsApiCampaignsCampaignIdFeedbackUpdatesResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdFeedbackUpdatesResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdFeedsResource(std::shared_ptr<DbsApiCampaignsCampaignIdFeedsResource> spDbsApiCampaignsCampaignIdFeedsResource) {
    m_spDbsApiCampaignsCampaignIdFeedsResource = spDbsApiCampaignsCampaignIdFeedsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdFeedsResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdGoods-feedbackCommentsResource(std::shared_ptr<DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource> spDbsApiBusinessesBusinessIdGoods-feedbackCommentsResource) {
    m_spDbsApiBusinessesBusinessIdGoods-feedbackCommentsResource = spDbsApiBusinessesBusinessIdGoods-feedbackCommentsResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdGoods-feedbackCommentsResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdGoods-feedbackResource(std::shared_ptr<DbsApiBusinessesBusinessIdGoods-feedbackResource> spDbsApiBusinessesBusinessIdGoods-feedbackResource) {
    m_spDbsApiBusinessesBusinessIdGoods-feedbackResource = spDbsApiBusinessesBusinessIdGoods-feedbackResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdGoods-feedbackResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdStatsSkusResource(std::shared_ptr<DbsApiCampaignsCampaignIdStatsSkusResource> spDbsApiCampaignsCampaignIdStatsSkusResource) {
    m_spDbsApiCampaignsCampaignIdStatsSkusResource = spDbsApiCampaignsCampaignIdStatsSkusResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdStatsSkusResource);
}
void DbsApi::setDbsApiModelsModelIdResource(std::shared_ptr<DbsApiModelsModelIdResource> spDbsApiModelsModelIdResource) {
    m_spDbsApiModelsModelIdResource = spDbsApiModelsModelIdResource;
    m_service->publish(m_spDbsApiModelsModelIdResource);
}
void DbsApi::setDbsApiModelsModelIdOffersResource(std::shared_ptr<DbsApiModelsModelIdOffersResource> spDbsApiModelsModelIdOffersResource) {
    m_spDbsApiModelsModelIdOffersResource = spDbsApiModelsModelIdOffersResource;
    m_service->publish(m_spDbsApiModelsModelIdOffersResource);
}
void DbsApi::setDbsApiModelsResource(std::shared_ptr<DbsApiModelsResource> spDbsApiModelsResource) {
    m_spDbsApiModelsResource = spDbsApiModelsResource;
    m_service->publish(m_spDbsApiModelsResource);
}
void DbsApi::setDbsApiModelsOffersResource(std::shared_ptr<DbsApiModelsOffersResource> spDbsApiModelsOffersResource) {
    m_spDbsApiModelsOffersResource = spDbsApiModelsOffersResource;
    m_service->publish(m_spDbsApiModelsOffersResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdOffer-cardsResource(std::shared_ptr<DbsApiBusinessesBusinessIdOffer-cardsResource> spDbsApiBusinessesBusinessIdOffer-cardsResource) {
    m_spDbsApiBusinessesBusinessIdOffer-cardsResource = spDbsApiBusinessesBusinessIdOffer-cardsResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdOffer-cardsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOffer-mapping-entriesResource(std::shared_ptr<DbsApiCampaignsCampaignIdOffer-mapping-entriesResource> spDbsApiCampaignsCampaignIdOffer-mapping-entriesResource) {
    m_spDbsApiCampaignsCampaignIdOffer-mapping-entriesResource = spDbsApiCampaignsCampaignIdOffer-mapping-entriesResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOffer-mapping-entriesResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdOffer-mappingsResource(std::shared_ptr<DbsApiBusinessesBusinessIdOffer-mappingsResource> spDbsApiBusinessesBusinessIdOffer-mappingsResource) {
    m_spDbsApiBusinessesBusinessIdOffer-mappingsResource = spDbsApiBusinessesBusinessIdOffer-mappingsResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdOffer-mappingsResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdOffersRecommendationsResource(std::shared_ptr<DbsApiBusinessesBusinessIdOffersRecommendationsResource> spDbsApiBusinessesBusinessIdOffersRecommendationsResource) {
    m_spDbsApiBusinessesBusinessIdOffersRecommendationsResource = spDbsApiBusinessesBusinessIdOffersRecommendationsResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdOffersRecommendationsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdResource> spDbsApiCampaignsCampaignIdOrdersOrderIdResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdResource = spDbsApiCampaignsCampaignIdOrdersOrderIdResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource> spDbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource = spDbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource = spDbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource> spDbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource = spDbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource = spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersResource> spDbsApiCampaignsCampaignIdOrdersResource) {
    m_spDbsApiCampaignsCampaignIdOrdersResource = spDbsApiCampaignsCampaignIdOrdersResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdStatsOrdersResource(std::shared_ptr<DbsApiCampaignsCampaignIdStatsOrdersResource> spDbsApiCampaignsCampaignIdStatsOrdersResource) {
    m_spDbsApiCampaignsCampaignIdStatsOrdersResource = spDbsApiCampaignsCampaignIdStatsOrdersResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdStatsOrdersResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOffer-pricesResource(std::shared_ptr<DbsApiCampaignsCampaignIdOffer-pricesResource> spDbsApiCampaignsCampaignIdOffer-pricesResource) {
    m_spDbsApiCampaignsCampaignIdOffer-pricesResource = spDbsApiCampaignsCampaignIdOffer-pricesResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOffer-pricesResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdPromosOffersResource(std::shared_ptr<DbsApiBusinessesBusinessIdPromosOffersResource> spDbsApiBusinessesBusinessIdPromosOffersResource) {
    m_spDbsApiBusinessesBusinessIdPromosOffersResource = spDbsApiBusinessesBusinessIdPromosOffersResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdPromosOffersResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdPromosResource(std::shared_ptr<DbsApiBusinessesBusinessIdPromosResource> spDbsApiBusinessesBusinessIdPromosResource) {
    m_spDbsApiBusinessesBusinessIdPromosResource = spDbsApiBusinessesBusinessIdPromosResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdPromosResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdRatingsQualityDetailsResource(std::shared_ptr<DbsApiCampaignsCampaignIdRatingsQualityDetailsResource> spDbsApiCampaignsCampaignIdRatingsQualityDetailsResource) {
    m_spDbsApiCampaignsCampaignIdRatingsQualityDetailsResource = spDbsApiCampaignsCampaignIdRatingsQualityDetailsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdRatingsQualityDetailsResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdRatingsQualityResource(std::shared_ptr<DbsApiBusinessesBusinessIdRatingsQualityResource> spDbsApiBusinessesBusinessIdRatingsQualityResource) {
    m_spDbsApiBusinessesBusinessIdRatingsQualityResource = spDbsApiBusinessesBusinessIdRatingsQualityResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdRatingsQualityResource);
}
void DbsApi::setDbsApiReportsInfoReportIdResource(std::shared_ptr<DbsApiReportsInfoReportIdResource> spDbsApiReportsInfoReportIdResource) {
    m_spDbsApiReportsInfoReportIdResource = spDbsApiReportsInfoReportIdResource;
    m_service->publish(m_spDbsApiReportsInfoReportIdResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource> spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource = spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource> spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource = spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource> spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource = spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdReturnsResource(std::shared_ptr<DbsApiCampaignsCampaignIdReturnsResource> spDbsApiCampaignsCampaignIdReturnsResource) {
    m_spDbsApiCampaignsCampaignIdReturnsResource = spDbsApiCampaignsCampaignIdReturnsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdReturnsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOffersStocksResource(std::shared_ptr<DbsApiCampaignsCampaignIdOffersStocksResource> spDbsApiCampaignsCampaignIdOffersStocksResource) {
    m_spDbsApiCampaignsCampaignIdOffersStocksResource = spDbsApiCampaignsCampaignIdOffersStocksResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOffersStocksResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(std::shared_ptr<DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource> spDbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource) {
    m_spDbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource = spDbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(std::shared_ptr<DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource> spDbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource) {
    m_spDbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource = spDbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource(std::shared_ptr<DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource> spDbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource) {
    m_spDbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource = spDbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdWarehousesResource(std::shared_ptr<DbsApiBusinessesBusinessIdWarehousesResource> spDbsApiBusinessesBusinessIdWarehousesResource) {
    m_spDbsApiBusinessesBusinessIdWarehousesResource = spDbsApiBusinessesBusinessIdWarehousesResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdWarehousesResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource = spDbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource> spDbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource = spDbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdBidsResource(std::shared_ptr<DbsApiBusinessesBusinessIdBidsResource> spDbsApiBusinessesBusinessIdBidsResource) {
    m_spDbsApiBusinessesBusinessIdBidsResource = spDbsApiBusinessesBusinessIdBidsResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdBidsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdBidsResource(std::shared_ptr<DbsApiCampaignsCampaignIdBidsResource> spDbsApiCampaignsCampaignIdBidsResource) {
    m_spDbsApiCampaignsCampaignIdBidsResource = spDbsApiCampaignsCampaignIdBidsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdBidsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource(std::shared_ptr<DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource> spDbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource) {
    m_spDbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource = spDbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource);
}
void DbsApi::setDbsApiRegionsRegionIdChildrenResource(std::shared_ptr<DbsApiRegionsRegionIdChildrenResource> spDbsApiRegionsRegionIdChildrenResource) {
    m_spDbsApiRegionsRegionIdChildrenResource = spDbsApiRegionsRegionIdChildrenResource;
    m_service->publish(m_spDbsApiRegionsRegionIdChildrenResource);
}
void DbsApi::setDbsApiRegionsRegionIdResource(std::shared_ptr<DbsApiRegionsRegionIdResource> spDbsApiRegionsRegionIdResource) {
    m_spDbsApiRegionsRegionIdResource = spDbsApiRegionsRegionIdResource;
    m_service->publish(m_spDbsApiRegionsRegionIdResource);
}
void DbsApi::setDbsApiRegionsResource(std::shared_ptr<DbsApiRegionsResource> spDbsApiRegionsResource) {
    m_spDbsApiRegionsResource = spDbsApiRegionsResource;
    m_service->publish(m_spDbsApiRegionsResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdChatsFileSendResource(std::shared_ptr<DbsApiBusinessesBusinessIdChatsFileSendResource> spDbsApiBusinessesBusinessIdChatsFileSendResource) {
    m_spDbsApiBusinessesBusinessIdChatsFileSendResource = spDbsApiBusinessesBusinessIdChatsFileSendResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdChatsFileSendResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdChatsMessageResource(std::shared_ptr<DbsApiBusinessesBusinessIdChatsMessageResource> spDbsApiBusinessesBusinessIdChatsMessageResource) {
    m_spDbsApiBusinessesBusinessIdChatsMessageResource = spDbsApiBusinessesBusinessIdChatsMessageResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdChatsMessageResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdFeedsFeedIdParamsResource(std::shared_ptr<DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource> spDbsApiCampaignsCampaignIdFeedsFeedIdParamsResource) {
    m_spDbsApiCampaignsCampaignIdFeedsFeedIdParamsResource = spDbsApiCampaignsCampaignIdFeedsFeedIdParamsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdFeedsFeedIdParamsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource> spDbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource = spDbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource = spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource = spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource = spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource> spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource = spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(std::shared_ptr<DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource> spDbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource) {
    m_spDbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource = spDbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource> spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource = spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdOffer-pricesUpdatesResource(std::shared_ptr<DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource> spDbsApiBusinessesBusinessIdOffer-pricesUpdatesResource) {
    m_spDbsApiBusinessesBusinessIdOffer-pricesUpdatesResource = spDbsApiBusinessesBusinessIdOffer-pricesUpdatesResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdOffer-pricesUpdatesResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOffersUpdateResource(std::shared_ptr<DbsApiCampaignsCampaignIdOffersUpdateResource> spDbsApiCampaignsCampaignIdOffersUpdateResource) {
    m_spDbsApiCampaignsCampaignIdOffersUpdateResource = spDbsApiCampaignsCampaignIdOffersUpdateResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOffersUpdateResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(std::shared_ptr<DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource> spDbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource) {
    m_spDbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource = spDbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdOffer-cardsUpdateResource(std::shared_ptr<DbsApiBusinessesBusinessIdOffer-cardsUpdateResource> spDbsApiBusinessesBusinessIdOffer-cardsUpdateResource) {
    m_spDbsApiBusinessesBusinessIdOffer-cardsUpdateResource = spDbsApiBusinessesBusinessIdOffer-cardsUpdateResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdOffer-cardsUpdateResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(std::shared_ptr<DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource> spDbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource) {
    m_spDbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource = spDbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdOffer-mappingsUpdateResource(std::shared_ptr<DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource> spDbsApiBusinessesBusinessIdOffer-mappingsUpdateResource) {
    m_spDbsApiBusinessesBusinessIdOffer-mappingsUpdateResource = spDbsApiBusinessesBusinessIdOffer-mappingsUpdateResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdOffer-mappingsUpdateResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdItemsResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource> spDbsApiCampaignsCampaignIdOrdersOrderIdItemsResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdItemsResource = spDbsApiCampaignsCampaignIdOrdersOrderIdItemsResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdItemsResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdStatusResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource> spDbsApiCampaignsCampaignIdOrdersOrderIdStatusResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdStatusResource = spDbsApiCampaignsCampaignIdOrdersOrderIdStatusResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdStatusResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersStatus-updateResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersStatus-updateResource> spDbsApiCampaignsCampaignIdOrdersStatus-updateResource) {
    m_spDbsApiCampaignsCampaignIdOrdersStatus-updateResource = spDbsApiCampaignsCampaignIdOrdersStatus-updateResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersStatus-updateResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource(std::shared_ptr<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource> spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource) {
    m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource = spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource);
}
void DbsApi::setDbsApiCampaignsCampaignIdOffer-pricesUpdatesResource(std::shared_ptr<DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource> spDbsApiCampaignsCampaignIdOffer-pricesUpdatesResource) {
    m_spDbsApiCampaignsCampaignIdOffer-pricesUpdatesResource = spDbsApiCampaignsCampaignIdOffer-pricesUpdatesResource;
    m_service->publish(m_spDbsApiCampaignsCampaignIdOffer-pricesUpdatesResource);
}
void DbsApi::setDbsApiBusinessesBusinessIdPromosOffersUpdateResource(std::shared_ptr<DbsApiBusinessesBusinessIdPromosOffersUpdateResource> spDbsApiBusinessesBusinessIdPromosOffersUpdateResource) {
    m_spDbsApiBusinessesBusinessIdPromosOffersUpdateResource = spDbsApiBusinessesBusinessIdPromosOffersUpdateResource;
    m_service->publish(m_spDbsApiBusinessesBusinessIdPromosOffersUpdateResource);
}


void DbsApi::publishDefaultResources() {
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdHidden-offersResource) {
        setDbsApiCampaignsCampaignIdHidden-offersResource(std::make_shared<DbsApiCampaignsCampaignIdHidden-offersResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdOffer-mappingsArchiveResource) {
        setDbsApiBusinessesBusinessIdOffer-mappingsArchiveResource(std::make_shared<DbsApiBusinessesBusinessIdOffer-mappingsArchiveResource>());
    }
    if (!m_spDbsApiTariffsCalculateResource) {
        setDbsApiTariffsCalculateResource(std::make_shared<DbsApiTariffsCalculateResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdPrice-quarantineConfirmResource) {
        setDbsApiBusinessesBusinessIdPrice-quarantineConfirmResource(std::make_shared<DbsApiBusinessesBusinessIdPrice-quarantineConfirmResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdPrice-quarantineConfirmResource) {
        setDbsApiCampaignsCampaignIdPrice-quarantineConfirmResource(std::make_shared<DbsApiCampaignsCampaignIdPrice-quarantineConfirmResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdChatsNewResource) {
        setDbsApiBusinessesBusinessIdChatsNewResource(std::make_shared<DbsApiBusinessesBusinessIdChatsNewResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOutletsResource) {
        setDbsApiCampaignsCampaignIdOutletsResource(std::make_shared<DbsApiCampaignsCampaignIdOutletsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOffersDeleteResource) {
        setDbsApiCampaignsCampaignIdOffersDeleteResource(std::make_shared<DbsApiCampaignsCampaignIdOffersDeleteResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource) {
        setDbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource(std::make_shared<DbsApiBusinessesBusinessIdGoods-feedbackCommentsDeleteResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdHidden-offersDeleteResource) {
        setDbsApiCampaignsCampaignIdHidden-offersDeleteResource(std::make_shared<DbsApiCampaignsCampaignIdHidden-offersDeleteResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdOffer-mappingsDeleteResource) {
        setDbsApiBusinessesBusinessIdOffer-mappingsDeleteResource(std::make_shared<DbsApiBusinessesBusinessIdOffer-mappingsDeleteResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource) {
        setDbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource(std::make_shared<DbsApiBusinessesBusinessIdOffer-mappingsUnarchiveResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOutletsOutletIdResource) {
        setDbsApiCampaignsCampaignIdOutletsOutletIdResource(std::make_shared<DbsApiCampaignsCampaignIdOutletsOutletIdResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOutletsLicensesResource) {
        setDbsApiCampaignsCampaignIdOutletsLicensesResource(std::make_shared<DbsApiCampaignsCampaignIdOutletsLicensesResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdPromosOffersDeleteResource) {
        setDbsApiBusinessesBusinessIdPromosOffersDeleteResource(std::make_shared<DbsApiBusinessesBusinessIdPromosOffersDeleteResource>());
    }
    if (!m_spDbsApiReportsBoost-consolidatedGenerateResource) {
        setDbsApiReportsBoost-consolidatedGenerateResource(std::make_shared<DbsApiReportsBoost-consolidatedGenerateResource>());
    }
    if (!m_spDbsApiReportsCompetitors-positionGenerateResource) {
        setDbsApiReportsCompetitors-positionGenerateResource(std::make_shared<DbsApiReportsCompetitors-positionGenerateResource>());
    }
    if (!m_spDbsApiReportsGoods-feedbackGenerateResource) {
        setDbsApiReportsGoods-feedbackGenerateResource(std::make_shared<DbsApiReportsGoods-feedbackGenerateResource>());
    }
    if (!m_spDbsApiReportsDocumentsLabelsGenerateResource) {
        setDbsApiReportsDocumentsLabelsGenerateResource(std::make_shared<DbsApiReportsDocumentsLabelsGenerateResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource>());
    }
    if (!m_spDbsApiReportsPricesGenerateResource) {
        setDbsApiReportsPricesGenerateResource(std::make_shared<DbsApiReportsPricesGenerateResource>());
    }
    if (!m_spDbsApiReportsShelf-statisticsGenerateResource) {
        setDbsApiReportsShelf-statisticsGenerateResource(std::make_shared<DbsApiReportsShelf-statisticsGenerateResource>());
    }
    if (!m_spDbsApiReportsShows-salesGenerateResource) {
        setDbsApiReportsShows-salesGenerateResource(std::make_shared<DbsApiReportsShows-salesGenerateResource>());
    }
    if (!m_spDbsApiReportsStocks-on-warehousesGenerateResource) {
        setDbsApiReportsStocks-on-warehousesGenerateResource(std::make_shared<DbsApiReportsStocks-on-warehousesGenerateResource>());
    }
    if (!m_spDbsApiReportsUnited-marketplace-servicesGenerateResource) {
        setDbsApiReportsUnited-marketplace-servicesGenerateResource(std::make_shared<DbsApiReportsUnited-marketplace-servicesGenerateResource>());
    }
    if (!m_spDbsApiReportsUnited-nettingGenerateResource) {
        setDbsApiReportsUnited-nettingGenerateResource(std::make_shared<DbsApiReportsUnited-nettingGenerateResource>());
    }
    if (!m_spDbsApiReportsUnited-ordersGenerateResource) {
        setDbsApiReportsUnited-ordersGenerateResource(std::make_shared<DbsApiReportsUnited-ordersGenerateResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOffersAllResource) {
        setDbsApiCampaignsCampaignIdOffersAllResource(std::make_shared<DbsApiCampaignsCampaignIdOffersAllResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdBidsInfoResource) {
        setDbsApiBusinessesBusinessIdBidsInfoResource(std::make_shared<DbsApiBusinessesBusinessIdBidsInfoResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdBidsRecommendationsResource) {
        setDbsApiBusinessesBusinessIdBidsRecommendationsResource(std::make_shared<DbsApiBusinessesBusinessIdBidsRecommendationsResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdPrice-quarantineResource) {
        setDbsApiBusinessesBusinessIdPrice-quarantineResource(std::make_shared<DbsApiBusinessesBusinessIdPrice-quarantineResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdSettingsResource) {
        setDbsApiBusinessesBusinessIdSettingsResource(std::make_shared<DbsApiBusinessesBusinessIdSettingsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdResource) {
        setDbsApiCampaignsCampaignIdResource(std::make_shared<DbsApiCampaignsCampaignIdResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdLoginsResource) {
        setDbsApiCampaignsCampaignIdLoginsResource(std::make_shared<DbsApiCampaignsCampaignIdLoginsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOffersResource) {
        setDbsApiCampaignsCampaignIdOffersResource(std::make_shared<DbsApiCampaignsCampaignIdOffersResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdPrice-quarantineResource) {
        setDbsApiCampaignsCampaignIdPrice-quarantineResource(std::make_shared<DbsApiCampaignsCampaignIdPrice-quarantineResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdRegionResource) {
        setDbsApiCampaignsCampaignIdRegionResource(std::make_shared<DbsApiCampaignsCampaignIdRegionResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdSettingsResource) {
        setDbsApiCampaignsCampaignIdSettingsResource(std::make_shared<DbsApiCampaignsCampaignIdSettingsResource>());
    }
    if (!m_spDbsApiCampaignsResource) {
        setDbsApiCampaignsResource(std::make_shared<DbsApiCampaignsResource>());
    }
    if (!m_spDbsApiCampaignsBy_loginLoginResource) {
        setDbsApiCampaignsBy_loginLoginResource(std::make_shared<DbsApiCampaignsBy_loginLoginResource>());
    }
    if (!m_spDbsApiCategoriesMax-sale-quantumResource) {
        setDbsApiCategoriesMax-sale-quantumResource(std::make_shared<DbsApiCategoriesMax-sale-quantumResource>());
    }
    if (!m_spDbsApiCategoriesTreeResource) {
        setDbsApiCategoriesTreeResource(std::make_shared<DbsApiCategoriesTreeResource>());
    }
    if (!m_spDbsApiCategoryCategoryIdParametersResource) {
        setDbsApiCategoryCategoryIdParametersResource(std::make_shared<DbsApiCategoryCategoryIdParametersResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdChatsHistoryResource) {
        setDbsApiBusinessesBusinessIdChatsHistoryResource(std::make_shared<DbsApiBusinessesBusinessIdChatsHistoryResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdChatsResource) {
        setDbsApiBusinessesBusinessIdChatsResource(std::make_shared<DbsApiBusinessesBusinessIdChatsResource>());
    }
    if (!m_spDbsApiDeliveryServicesResource) {
        setDbsApiDeliveryServicesResource(std::make_shared<DbsApiDeliveryServicesResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdFeedsFeedIdResource) {
        setDbsApiCampaignsCampaignIdFeedsFeedIdResource(std::make_shared<DbsApiCampaignsCampaignIdFeedsFeedIdResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource) {
        setDbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource(std::make_shared<DbsApiCampaignsCampaignIdFeedsFeedIdIndex-logsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdFeedbackUpdatesResource) {
        setDbsApiCampaignsCampaignIdFeedbackUpdatesResource(std::make_shared<DbsApiCampaignsCampaignIdFeedbackUpdatesResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdFeedsResource) {
        setDbsApiCampaignsCampaignIdFeedsResource(std::make_shared<DbsApiCampaignsCampaignIdFeedsResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdGoods-feedbackCommentsResource) {
        setDbsApiBusinessesBusinessIdGoods-feedbackCommentsResource(std::make_shared<DbsApiBusinessesBusinessIdGoods-feedbackCommentsResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdGoods-feedbackResource) {
        setDbsApiBusinessesBusinessIdGoods-feedbackResource(std::make_shared<DbsApiBusinessesBusinessIdGoods-feedbackResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdStatsSkusResource) {
        setDbsApiCampaignsCampaignIdStatsSkusResource(std::make_shared<DbsApiCampaignsCampaignIdStatsSkusResource>());
    }
    if (!m_spDbsApiModelsModelIdResource) {
        setDbsApiModelsModelIdResource(std::make_shared<DbsApiModelsModelIdResource>());
    }
    if (!m_spDbsApiModelsModelIdOffersResource) {
        setDbsApiModelsModelIdOffersResource(std::make_shared<DbsApiModelsModelIdOffersResource>());
    }
    if (!m_spDbsApiModelsResource) {
        setDbsApiModelsResource(std::make_shared<DbsApiModelsResource>());
    }
    if (!m_spDbsApiModelsOffersResource) {
        setDbsApiModelsOffersResource(std::make_shared<DbsApiModelsOffersResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdOffer-cardsResource) {
        setDbsApiBusinessesBusinessIdOffer-cardsResource(std::make_shared<DbsApiBusinessesBusinessIdOffer-cardsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOffer-mapping-entriesResource) {
        setDbsApiCampaignsCampaignIdOffer-mapping-entriesResource(std::make_shared<DbsApiCampaignsCampaignIdOffer-mapping-entriesResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdOffer-mappingsResource) {
        setDbsApiBusinessesBusinessIdOffer-mappingsResource(std::make_shared<DbsApiBusinessesBusinessIdOffer-mappingsResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdOffersRecommendationsResource) {
        setDbsApiBusinessesBusinessIdOffersRecommendationsResource(std::make_shared<DbsApiBusinessesBusinessIdOffersRecommendationsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdBusiness-buyerResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdDocumentsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdBuyerResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersResource) {
        setDbsApiCampaignsCampaignIdOrdersResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdStatsOrdersResource) {
        setDbsApiCampaignsCampaignIdStatsOrdersResource(std::make_shared<DbsApiCampaignsCampaignIdStatsOrdersResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOffer-pricesResource) {
        setDbsApiCampaignsCampaignIdOffer-pricesResource(std::make_shared<DbsApiCampaignsCampaignIdOffer-pricesResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdPromosOffersResource) {
        setDbsApiBusinessesBusinessIdPromosOffersResource(std::make_shared<DbsApiBusinessesBusinessIdPromosOffersResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdPromosResource) {
        setDbsApiBusinessesBusinessIdPromosResource(std::make_shared<DbsApiBusinessesBusinessIdPromosResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdRatingsQualityDetailsResource) {
        setDbsApiCampaignsCampaignIdRatingsQualityDetailsResource(std::make_shared<DbsApiCampaignsCampaignIdRatingsQualityDetailsResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdRatingsQualityResource) {
        setDbsApiBusinessesBusinessIdRatingsQualityResource(std::make_shared<DbsApiBusinessesBusinessIdRatingsQualityResource>());
    }
    if (!m_spDbsApiReportsInfoReportIdResource) {
        setDbsApiReportsInfoReportIdResource(std::make_shared<DbsApiReportsInfoReportIdResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdApplicationResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionItemIdImageImageHashResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdReturnsResource) {
        setDbsApiCampaignsCampaignIdReturnsResource(std::make_shared<DbsApiCampaignsCampaignIdReturnsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOffersStocksResource) {
        setDbsApiCampaignsCampaignIdOffersStocksResource(std::make_shared<DbsApiCampaignsCampaignIdOffersStocksResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource) {
        setDbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource(std::make_shared<DbsApiCampaignsCampaignIdOffer-mapping-entriesSuggestionsResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource) {
        setDbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource(std::make_shared<DbsApiBusinessesBusinessIdOffer-mappingsSuggestionsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource) {
        setDbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource(std::make_shared<DbsApiCampaignsCampaignIdOffer-pricesSuggestionsResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdWarehousesResource) {
        setDbsApiBusinessesBusinessIdWarehousesResource(std::make_shared<DbsApiBusinessesBusinessIdWarehousesResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdBidsResource) {
        setDbsApiBusinessesBusinessIdBidsResource(std::make_shared<DbsApiBusinessesBusinessIdBidsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdBidsResource) {
        setDbsApiCampaignsCampaignIdBidsResource(std::make_shared<DbsApiCampaignsCampaignIdBidsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource) {
        setDbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource(std::make_shared<DbsApiCampaignsCampaignIdFeedsFeedIdRefreshResource>());
    }
    if (!m_spDbsApiRegionsRegionIdChildrenResource) {
        setDbsApiRegionsRegionIdChildrenResource(std::make_shared<DbsApiRegionsRegionIdChildrenResource>());
    }
    if (!m_spDbsApiRegionsRegionIdResource) {
        setDbsApiRegionsRegionIdResource(std::make_shared<DbsApiRegionsRegionIdResource>());
    }
    if (!m_spDbsApiRegionsResource) {
        setDbsApiRegionsResource(std::make_shared<DbsApiRegionsResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdChatsFileSendResource) {
        setDbsApiBusinessesBusinessIdChatsFileSendResource(std::make_shared<DbsApiBusinessesBusinessIdChatsFileSendResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdChatsMessageResource) {
        setDbsApiBusinessesBusinessIdChatsMessageResource(std::make_shared<DbsApiBusinessesBusinessIdChatsMessageResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdFeedsFeedIdParamsResource) {
        setDbsApiCampaignsCampaignIdFeedsFeedIdParamsResource(std::make_shared<DbsApiCampaignsCampaignIdFeedsFeedIdParamsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdBoxesResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource) {
        setDbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource(std::make_shared<DbsApiBusinessesBusinessIdGoods-feedbackSkip-reactionResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdReturnsReturnIdDecisionSubmitResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdOffer-pricesUpdatesResource) {
        setDbsApiBusinessesBusinessIdOffer-pricesUpdatesResource(std::make_shared<DbsApiBusinessesBusinessIdOffer-pricesUpdatesResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOffersUpdateResource) {
        setDbsApiCampaignsCampaignIdOffersUpdateResource(std::make_shared<DbsApiCampaignsCampaignIdOffersUpdateResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource) {
        setDbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource(std::make_shared<DbsApiBusinessesBusinessIdGoods-feedbackCommentsUpdateResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdOffer-cardsUpdateResource) {
        setDbsApiBusinessesBusinessIdOffer-cardsUpdateResource(std::make_shared<DbsApiBusinessesBusinessIdOffer-cardsUpdateResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource) {
        setDbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource(std::make_shared<DbsApiCampaignsCampaignIdOffer-mapping-entriesUpdatesResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdOffer-mappingsUpdateResource) {
        setDbsApiBusinessesBusinessIdOffer-mappingsUpdateResource(std::make_shared<DbsApiBusinessesBusinessIdOffer-mappingsUpdateResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdItemsResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdItemsResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdItemsResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdStatusResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdStatusResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdStatusResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersStatus-updateResource) {
        setDbsApiCampaignsCampaignIdOrdersStatus-updateResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersStatus-updateResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource) {
        setDbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource(std::make_shared<DbsApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource>());
    }
    if (!m_spDbsApiCampaignsCampaignIdOffer-pricesUpdatesResource) {
        setDbsApiCampaignsCampaignIdOffer-pricesUpdatesResource(std::make_shared<DbsApiCampaignsCampaignIdOffer-pricesUpdatesResource>());
    }
    if (!m_spDbsApiBusinessesBusinessIdPromosOffersUpdateResource) {
        setDbsApiBusinessesBusinessIdPromosOffersUpdateResource(std::make_shared<DbsApiBusinessesBusinessIdPromosOffersUpdateResource>());
    }
}

std::shared_ptr<restbed::Service> DbsApi::service() {
    return m_service;
}


}
}
}
}

