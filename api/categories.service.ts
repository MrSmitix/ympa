/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { GetCategoriesMaxSaleQuantumRequest } from '../model/getCategoriesMaxSaleQuantumRequest';
import { GetCategoriesMaxSaleQuantumResponse } from '../model/getCategoriesMaxSaleQuantumResponse';
import { GetCategoriesRequest } from '../model/getCategoriesRequest';
import { GetCategoriesResponse } from '../model/getCategoriesResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class CategoriesService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     * Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param getCategoriesMaxSaleQuantumRequest 
     
     */
    public getCategoriesMaxSaleQuantum(getCategoriesMaxSaleQuantumRequest: GetCategoriesMaxSaleQuantumRequest, observe?: 'body', headers?: Headers): Observable<GetCategoriesMaxSaleQuantumResponse>;
    public getCategoriesMaxSaleQuantum(getCategoriesMaxSaleQuantumRequest: GetCategoriesMaxSaleQuantumRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetCategoriesMaxSaleQuantumResponse>>;
    public getCategoriesMaxSaleQuantum(getCategoriesMaxSaleQuantumRequest: GetCategoriesMaxSaleQuantumRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (getCategoriesMaxSaleQuantumRequest === null || getCategoriesMaxSaleQuantumRequest === undefined){
            throw new Error('Required parameter getCategoriesMaxSaleQuantumRequest was null or undefined when calling getCategoriesMaxSaleQuantum.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetCategoriesMaxSaleQuantumResponse>> = this.httpClient.post(`${this.basePath}/categories/max-sale-quantum`, getCategoriesMaxSaleQuantumRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetCategoriesMaxSaleQuantumResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Дерево категорий
     * Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param getCategoriesRequest 
     
     */
    public getCategoriesTree(getCategoriesRequest?: GetCategoriesRequest, observe?: 'body', headers?: Headers): Observable<GetCategoriesResponse>;
    public getCategoriesTree(getCategoriesRequest?: GetCategoriesRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetCategoriesResponse>>;
    public getCategoriesTree(getCategoriesRequest?: GetCategoriesRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetCategoriesResponse>> = this.httpClient.post(`${this.basePath}/categories/tree`, getCategoriesRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetCategoriesResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
