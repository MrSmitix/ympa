/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { DeleteGoodsFeedbackCommentRequest } from '../model/deleteGoodsFeedbackCommentRequest';
import { EmptyApiResponse } from '../model/emptyApiResponse';
import { GetGoodsFeedbackCommentsRequest } from '../model/getGoodsFeedbackCommentsRequest';
import { GetGoodsFeedbackCommentsResponse } from '../model/getGoodsFeedbackCommentsResponse';
import { GetGoodsFeedbackRequest } from '../model/getGoodsFeedbackRequest';
import { GetGoodsFeedbackResponse } from '../model/getGoodsFeedbackResponse';
import { SkipGoodsFeedbackReactionRequest } from '../model/skipGoodsFeedbackReactionRequest';
import { UpdateGoodsFeedbackCommentRequest } from '../model/updateGoodsFeedbackCommentRequest';
import { UpdateGoodsFeedbackCommentResponse } from '../model/updateGoodsFeedbackCommentResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class GoodsFeedbackService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Удаление комментария к отзыву
     * Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param deleteGoodsFeedbackCommentRequest 
     
     */
    public deleteGoodsFeedbackComment(businessId: number, deleteGoodsFeedbackCommentRequest: DeleteGoodsFeedbackCommentRequest, observe?: 'body', headers?: Headers): Observable<EmptyApiResponse>;
    public deleteGoodsFeedbackComment(businessId: number, deleteGoodsFeedbackCommentRequest: DeleteGoodsFeedbackCommentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<EmptyApiResponse>>;
    public deleteGoodsFeedbackComment(businessId: number, deleteGoodsFeedbackCommentRequest: DeleteGoodsFeedbackCommentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling deleteGoodsFeedbackComment.');
        }

        if (deleteGoodsFeedbackCommentRequest === null || deleteGoodsFeedbackCommentRequest === undefined){
            throw new Error('Required parameter deleteGoodsFeedbackCommentRequest was null or undefined when calling deleteGoodsFeedbackComment.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<EmptyApiResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/goods-feedback/comments/delete`, deleteGoodsFeedbackCommentRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <EmptyApiResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение комментариев к отзыву
     * Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param getGoodsFeedbackCommentsRequest 
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
     * @param limit Количество значений на одной странице. 
     
     */
    public getGoodsFeedbackComments(businessId: number, getGoodsFeedbackCommentsRequest: GetGoodsFeedbackCommentsRequest, pageToken?: string, limit?: number, observe?: 'body', headers?: Headers): Observable<GetGoodsFeedbackCommentsResponse>;
    public getGoodsFeedbackComments(businessId: number, getGoodsFeedbackCommentsRequest: GetGoodsFeedbackCommentsRequest, pageToken?: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetGoodsFeedbackCommentsResponse>>;
    public getGoodsFeedbackComments(businessId: number, getGoodsFeedbackCommentsRequest: GetGoodsFeedbackCommentsRequest, pageToken?: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getGoodsFeedbackComments.');
        }

        if (getGoodsFeedbackCommentsRequest === null || getGoodsFeedbackCommentsRequest === undefined){
            throw new Error('Required parameter getGoodsFeedbackCommentsRequest was null or undefined when calling getGoodsFeedbackComments.');
        }

        let queryParameters: string[] = [];
        if (pageToken !== undefined) {
            queryParameters.push('pageToken='+encodeURIComponent(String(pageToken)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetGoodsFeedbackCommentsResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/goods-feedback/comments?${queryParameters.join('&')}`, getGoodsFeedbackCommentsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetGoodsFeedbackCommentsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение отзывов о товарах продавца
     * Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
     * @param limit Количество значений на одной странице. 
     * @param getGoodsFeedbackRequest 
     
     */
    public getGoodsFeedbacks(businessId: number, pageToken?: string, limit?: number, getGoodsFeedbackRequest?: GetGoodsFeedbackRequest, observe?: 'body', headers?: Headers): Observable<GetGoodsFeedbackResponse>;
    public getGoodsFeedbacks(businessId: number, pageToken?: string, limit?: number, getGoodsFeedbackRequest?: GetGoodsFeedbackRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetGoodsFeedbackResponse>>;
    public getGoodsFeedbacks(businessId: number, pageToken?: string, limit?: number, getGoodsFeedbackRequest?: GetGoodsFeedbackRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getGoodsFeedbacks.');
        }

        let queryParameters: string[] = [];
        if (pageToken !== undefined) {
            queryParameters.push('pageToken='+encodeURIComponent(String(pageToken)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetGoodsFeedbackResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/goods-feedback?${queryParameters.join('&')}`, getGoodsFeedbackRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetGoodsFeedbackResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Отказ от ответа на отзывы
     * Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param skipGoodsFeedbackReactionRequest 
     
     */
    public skipGoodsFeedbacksReaction(businessId: number, skipGoodsFeedbackReactionRequest: SkipGoodsFeedbackReactionRequest, observe?: 'body', headers?: Headers): Observable<EmptyApiResponse>;
    public skipGoodsFeedbacksReaction(businessId: number, skipGoodsFeedbackReactionRequest: SkipGoodsFeedbackReactionRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<EmptyApiResponse>>;
    public skipGoodsFeedbacksReaction(businessId: number, skipGoodsFeedbackReactionRequest: SkipGoodsFeedbackReactionRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling skipGoodsFeedbacksReaction.');
        }

        if (skipGoodsFeedbackReactionRequest === null || skipGoodsFeedbackReactionRequest === undefined){
            throw new Error('Required parameter skipGoodsFeedbackReactionRequest was null or undefined when calling skipGoodsFeedbacksReaction.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<EmptyApiResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/goods-feedback/skip-reaction`, skipGoodsFeedbackReactionRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <EmptyApiResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Добавление нового или изменение созданного комментария
     * Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param updateGoodsFeedbackCommentRequest 
     
     */
    public updateGoodsFeedbackComment(businessId: number, updateGoodsFeedbackCommentRequest: UpdateGoodsFeedbackCommentRequest, observe?: 'body', headers?: Headers): Observable<UpdateGoodsFeedbackCommentResponse>;
    public updateGoodsFeedbackComment(businessId: number, updateGoodsFeedbackCommentRequest: UpdateGoodsFeedbackCommentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<UpdateGoodsFeedbackCommentResponse>>;
    public updateGoodsFeedbackComment(businessId: number, updateGoodsFeedbackCommentRequest: UpdateGoodsFeedbackCommentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling updateGoodsFeedbackComment.');
        }

        if (updateGoodsFeedbackCommentRequest === null || updateGoodsFeedbackCommentRequest === undefined){
            throw new Error('Required parameter updateGoodsFeedbackCommentRequest was null or undefined when calling updateGoodsFeedbackComment.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UpdateGoodsFeedbackCommentResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/goods-feedback/comments/update`, updateGoodsFeedbackCommentRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <UpdateGoodsFeedbackCommentResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
