/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "OrderLabelsApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string OrderLabelsApi::base = "";

OrderLabelsApi::OrderLabelsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void OrderLabelsApi::init() {
    setupRoutes();
}

void OrderLabelsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/campaigns/:campaignId/orders/:orderId/delivery/shipments/:shipmentId/boxes/:boxId/label", Routes::bind(&OrderLabelsApi::generate_order_label_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/orders/:orderId/delivery/labels", Routes::bind(&OrderLabelsApi::generate_order_labels_handler, this));
    Routes::Get(*router, base + "/campaigns/:campaignId/orders/:orderId/delivery/labels/data", Routes::bind(&OrderLabelsApi::get_order_labels_data_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&OrderLabelsApi::order_labels_api_default_handler, this));
}

void OrderLabelsApi::handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleParsingException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> OrderLabelsApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

void OrderLabelsApi::handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleOperationException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> OrderLabelsApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void OrderLabelsApi::generate_order_label_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto orderId = request.param(":orderId").as<int64_t>();
    auto shipmentId = request.param(":shipmentId").as<int64_t>();
    auto boxId = request.param(":boxId").as<int64_t>();
    
    // Getting the query params
    auto formatQuery = request.query().get("format");
    std::optional<PageFormatType> format;
    if(formatQuery.has_value()){
        PageFormatType valueQuery_instance;
        if(fromStringValue(formatQuery.value(), valueQuery_instance)){
            format = valueQuery_instance;
        }
    }
    
    try {
        this->generate_order_label(campaignId, orderId, shipmentId, boxId, format, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void OrderLabelsApi::generate_order_labels_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto orderId = request.param(":orderId").as<int64_t>();
    
    // Getting the query params
    auto formatQuery = request.query().get("format");
    std::optional<PageFormatType> format;
    if(formatQuery.has_value()){
        PageFormatType valueQuery_instance;
        if(fromStringValue(formatQuery.value(), valueQuery_instance)){
            format = valueQuery_instance;
        }
    }
    
    try {
        this->generate_order_labels(campaignId, orderId, format, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void OrderLabelsApi::get_order_labels_data_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto campaignId = request.param(":campaignId").as<int64_t>();
    auto orderId = request.param(":orderId").as<int64_t>();
    
    try {
        this->get_order_labels_data(campaignId, orderId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void OrderLabelsApi::order_labels_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

