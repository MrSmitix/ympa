/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { AddOffersToArchiveRequest } from '../model/addOffersToArchiveRequest';
import { AddOffersToArchiveResponse } from '../model/addOffersToArchiveResponse';
import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiLockedErrorResponse } from '../model/apiLockedErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { DeleteOffersFromArchiveRequest } from '../model/deleteOffersFromArchiveRequest';
import { DeleteOffersFromArchiveResponse } from '../model/deleteOffersFromArchiveResponse';
import { DeleteOffersRequest } from '../model/deleteOffersRequest';
import { DeleteOffersResponse } from '../model/deleteOffersResponse';
import { GetOfferMappingsRequest } from '../model/getOfferMappingsRequest';
import { GetOfferMappingsResponse } from '../model/getOfferMappingsResponse';
import { GetSuggestedOfferMappingsRequest } from '../model/getSuggestedOfferMappingsRequest';
import { GetSuggestedOfferMappingsResponse } from '../model/getSuggestedOfferMappingsResponse';
import { UpdateOfferMappingsRequest } from '../model/updateOfferMappingsRequest';
import { UpdateOfferMappingsResponse } from '../model/updateOfferMappingsResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BusinessOfferMappingsService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Добавление товаров в архив
     * Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \&quot;В архив нельзя отправить товар, который хранится на складе Маркета\&quot; %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param addOffersToArchiveRequest 
     
     */
    public addOffersToArchive(businessId: number, addOffersToArchiveRequest: AddOffersToArchiveRequest, observe?: 'body', headers?: Headers): Observable<AddOffersToArchiveResponse>;
    public addOffersToArchive(businessId: number, addOffersToArchiveRequest: AddOffersToArchiveRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<AddOffersToArchiveResponse>>;
    public addOffersToArchive(businessId: number, addOffersToArchiveRequest: AddOffersToArchiveRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling addOffersToArchive.');
        }

        if (addOffersToArchiveRequest === null || addOffersToArchiveRequest === undefined){
            throw new Error('Required parameter addOffersToArchiveRequest was null or undefined when calling addOffersToArchive.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<AddOffersToArchiveResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/offer-mappings/archive`, addOffersToArchiveRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AddOffersToArchiveResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Удаление товаров из каталога
     * Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param deleteOffersRequest 
     
     */
    public deleteOffers(businessId: number, deleteOffersRequest: DeleteOffersRequest, observe?: 'body', headers?: Headers): Observable<DeleteOffersResponse>;
    public deleteOffers(businessId: number, deleteOffersRequest: DeleteOffersRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<DeleteOffersResponse>>;
    public deleteOffers(businessId: number, deleteOffersRequest: DeleteOffersRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling deleteOffers.');
        }

        if (deleteOffersRequest === null || deleteOffersRequest === undefined){
            throw new Error('Required parameter deleteOffersRequest was null or undefined when calling deleteOffers.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<DeleteOffersResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/offer-mappings/delete`, deleteOffersRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DeleteOffersResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Удаление товаров из архива
     * Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param deleteOffersFromArchiveRequest 
     
     */
    public deleteOffersFromArchive(businessId: number, deleteOffersFromArchiveRequest: DeleteOffersFromArchiveRequest, observe?: 'body', headers?: Headers): Observable<DeleteOffersFromArchiveResponse>;
    public deleteOffersFromArchive(businessId: number, deleteOffersFromArchiveRequest: DeleteOffersFromArchiveRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<DeleteOffersFromArchiveResponse>>;
    public deleteOffersFromArchive(businessId: number, deleteOffersFromArchiveRequest: DeleteOffersFromArchiveRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling deleteOffersFromArchive.');
        }

        if (deleteOffersFromArchiveRequest === null || deleteOffersFromArchiveRequest === undefined){
            throw new Error('Required parameter deleteOffersFromArchiveRequest was null or undefined when calling deleteOffersFromArchive.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<DeleteOffersFromArchiveResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/offer-mappings/unarchive`, deleteOffersFromArchiveRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DeleteOffersFromArchiveResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Информация о товарах в каталоге
     * Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
     * @param limit Количество значений на одной странице. 
     * @param getOfferMappingsRequest 
     
     */
    public getOfferMappings(businessId: number, pageToken?: string, limit?: number, getOfferMappingsRequest?: GetOfferMappingsRequest, observe?: 'body', headers?: Headers): Observable<GetOfferMappingsResponse>;
    public getOfferMappings(businessId: number, pageToken?: string, limit?: number, getOfferMappingsRequest?: GetOfferMappingsRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetOfferMappingsResponse>>;
    public getOfferMappings(businessId: number, pageToken?: string, limit?: number, getOfferMappingsRequest?: GetOfferMappingsRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getOfferMappings.');
        }

        let queryParameters: string[] = [];
        if (pageToken !== undefined) {
            queryParameters.push('pageToken='+encodeURIComponent(String(pageToken)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetOfferMappingsResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/offer-mappings?${queryParameters.join('&')}`, getOfferMappingsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetOfferMappingsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида &#x60;https://market.yandex.ru/product/&lt;marketModelId&gt;?sku&#x3D;&lt;marketSku&gt;&#x60;. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать &#x60;marketSKU&#x60;, который ему подходит по вашему мнению.  {% note info \&quot;𝓠 Как определить &#x60;marketSku&#x60; товара, найденного на Маркете?\&quot; %}  𝓐 Он есть в адресе страницы товара — расположен после &#x60;sku&#x3D;&#x60;.  Например, &#x60;https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016&#x60;  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param getSuggestedOfferMappingsRequest 
     
     */
    public getSuggestedOfferMappings(businessId: number, getSuggestedOfferMappingsRequest?: GetSuggestedOfferMappingsRequest, observe?: 'body', headers?: Headers): Observable<GetSuggestedOfferMappingsResponse>;
    public getSuggestedOfferMappings(businessId: number, getSuggestedOfferMappingsRequest?: GetSuggestedOfferMappingsRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetSuggestedOfferMappingsResponse>>;
    public getSuggestedOfferMappings(businessId: number, getSuggestedOfferMappingsRequest?: GetSuggestedOfferMappingsRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getSuggestedOfferMappings.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetSuggestedOfferMappingsResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/offer-mappings/suggestions`, getSuggestedOfferMappingsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetSuggestedOfferMappingsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Добавление товаров в каталог и изменение информации о них
     * Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле &#x60;marketSKU&#x60;.  Для **новых товаров** обязательно укажите параметры: &#x60;offerId&#x60;, &#x60;name&#x60;, &#x60;marketCategoryId&#x60; или &#x60;category&#x60;, &#x60;pictures&#x60;, &#x60;vendor&#x60;, &#x60;description&#x60;.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в &#x60;offerId&#x60; соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  Параметр &#x60;offerId&#x60; должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \&quot;Правила использования SKU\&quot; %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param updateOfferMappingsRequest 
     
     */
    public updateOfferMappings(businessId: number, updateOfferMappingsRequest: UpdateOfferMappingsRequest, observe?: 'body', headers?: Headers): Observable<UpdateOfferMappingsResponse>;
    public updateOfferMappings(businessId: number, updateOfferMappingsRequest: UpdateOfferMappingsRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<UpdateOfferMappingsResponse>>;
    public updateOfferMappings(businessId: number, updateOfferMappingsRequest: UpdateOfferMappingsRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling updateOfferMappings.');
        }

        if (updateOfferMappingsRequest === null || updateOfferMappingsRequest === undefined){
            throw new Error('Required parameter updateOfferMappingsRequest was null or undefined when calling updateOfferMappings.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UpdateOfferMappingsResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/offer-mappings/update`, updateOfferMappingsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <UpdateOfferMappingsResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
