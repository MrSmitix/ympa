/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersApi.h
 *
 * 
 */

#ifndef OrdersApi_H_
#define OrdersApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AcceptOrderCancellationRequest.h"
#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetOrderResponse.h"
#include "GetOrdersResponse.h"
#include "OrderBuyerType.h"
#include "OrderDeliveryDispatchType.h"
#include "OrderStatusType.h"
#include "OrderSubstatusType.h"
#include "ProvideOrderDigitalCodesRequest.h"
#include "ProvideOrderItemIdentifiersRequest.h"
#include "ProvideOrderItemIdentifiersResponse.h"
#include "SetOrderBoxLayoutRequest.h"
#include "SetOrderBoxLayoutResponse.h"
#include "SetOrderShipmentBoxesRequest.h"
#include "SetOrderShipmentBoxesResponse.h"
#include "UpdateOrderItemRequest.h"
#include "UpdateOrderStatusRequest.h"
#include "UpdateOrderStatusResponse.h"
#include "UpdateOrderStatusesRequest.h"
#include "UpdateOrderStatusesResponse.h"
#include <set>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OrdersApiException: public std::exception
{
public:
    OrdersApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace OrdersApiResources {
/// <summary>
/// Отмена заказа покупателем
/// </summary>
/// <remarks>
/// Подтверждает или отклоняет запрос покупателя на отмену заказа, который передан службе доставки.  Покупатель может отменить заказ в течение его обработки или доставки. Если заказ еще обрабатывается (имеет статус PROCESSING), вам не нужно подтверждать отмену заказа — он будет отменен автоматически.  Если заказ уже передан службе доставки (принимает статус &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;) и пользователь отменил его, вы можете предупредить службу об отмене в течение 48 часов. Если служба доставки узнала об отмене до передачи заказа покупателю, подтвердите отмену с помощью запроса [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation.md). Если заказ уже доставлен, отклоните отмену с помощью этого же запроса. Тогда у покупателя останется заказ, и деньги за него возвращаться не будут.  Чтобы узнать, какие заказы были отменены в статусе &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;, отправьте запрос [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md). В его URL добавьте входной параметр &#x60;onlyWaitingForCancellationApprove&#x3D;true&#x60;. Вы также можете узнать об отмененных заказах в кабинете или через почту — на нее придет уведомление об отмене.  Если в течение 48 часов вы не подтвердите или отклоните отмену, заказ будет отменен автоматически.  |**⚙️ Лимит:** 500 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource() = default;

    CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(
        const CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource& operator=(const CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource& operator=(CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, AcceptOrderCancellationRequest & acceptOrderCancellationRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, AcceptOrderCancellationRequest &) -> std::pair<int, EmptyApiResponse>
                { throw OrdersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, AcceptOrderCancellationRequest & acceptOrderCancellationRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrdersApiException(const OrdersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация об одном заказе
/// </summary>
/// <remarks>
/// Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdResource() = default;

    CampaignsCampaignIdOrdersOrderIdResource(
        const CampaignsCampaignIdOrdersOrderIdResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdResource(CampaignsCampaignIdOrdersOrderIdResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdResource& operator=(const CampaignsCampaignIdOrdersOrderIdResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdResource& operator=(CampaignsCampaignIdOrdersOrderIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOrderResponse>(
        int64_t & campaignId, int64_t & orderId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetOrderResponse>
                { throw OrdersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOrderResponse> handler_GET(
        int64_t & campaignId, int64_t & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrdersApiException(const OrdersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Информация о нескольких заказах
/// </summary>
/// <remarks>
/// Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры &#x60;page_token&#x60; и &#x60;limit&#x60;.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersResource() = default;

    CampaignsCampaignIdOrdersResource(
        const CampaignsCampaignIdOrdersResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersResource(CampaignsCampaignIdOrdersResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersResource& operator=(const CampaignsCampaignIdOrdersResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersResource& operator=(CampaignsCampaignIdOrdersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOrdersResponse>(
        int64_t & campaignId, std::vector<int64_t> & orderIds, std::set<OrderStatusType> & status, std::set<OrderSubstatusType> & substatus, std::string & fromDate, std::string & toDate, std::string & supplierShipmentDateFrom, std::string & supplierShipmentDateTo, std::string & updatedAtFrom, std::string & updatedAtTo, OrderDeliveryDispatchType & dispatchType, bool & fake, bool & hasCis, bool & onlyWaitingForCancellationApprove, bool & onlyEstimatedDelivery, OrderBuyerType & buyerType, int32_t & page, int32_t & pageSize, std::string & pageToken, int32_t & limit)> handler_GET_func =
            [](int64_t &, std::vector<int64_t> &, std::set<OrderStatusType> &, std::set<OrderSubstatusType> &, std::string &, std::string &, std::string &, std::string &, std::string &, std::string &, OrderDeliveryDispatchType &, bool &, bool &, bool &, bool &, OrderBuyerType &, int32_t &, int32_t &, std::string &, int32_t &) -> std::pair<int, GetOrdersResponse>
                { throw OrdersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOrdersResponse> handler_GET(
        int64_t & campaignId, std::vector<int64_t> & orderIds, std::set<OrderStatusType> & status, std::set<OrderSubstatusType> & substatus, std::string & fromDate, std::string & toDate, std::string & supplierShipmentDateFrom, std::string & supplierShipmentDateTo, std::string & updatedAtFrom, std::string & updatedAtTo, OrderDeliveryDispatchType & dispatchType, bool & fake, bool & hasCis, bool & onlyWaitingForCancellationApprove, bool & onlyEstimatedDelivery, OrderBuyerType & buyerType, int32_t & page, int32_t & pageSize, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrdersApiException(const OrdersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Передача ключей цифровых товаров
/// </summary>
/// <remarks>
/// Передает ключи цифровых товаров, которые покупатель заказал и оплатил. После выполнения запроса Маркет отправит ему письмо с ключами и инструкциями по активации, а также переведет заказ в финальный статус &#x60;DELIVERED&#x60;.  Ключ нужно передать в течение 30 минут после перехода заказа в статус &#x60;PROCESSING&#x60;.  Если в один заказ входят несколько ключей, передавайте их все в одном запросе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(
        const CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & orderId, ProvideOrderDigitalCodesRequest & provideOrderDigitalCodesRequest)> handler_POST_func =
            [](int64_t &, int64_t &, ProvideOrderDigitalCodesRequest &) -> std::pair<int, EmptyApiResponse>
                { throw OrdersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & orderId, ProvideOrderDigitalCodesRequest & provideOrderDigitalCodesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrdersApiException(const OrdersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Передача кодов маркировки единиц товара
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Передает Маркету коды маркировки для единиц товара в указанном заказе.  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  {% note warning %}  Прежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).  {% endnote %}  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdIdentifiersResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdIdentifiersResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdIdentifiersResource() = default;

    CampaignsCampaignIdOrdersOrderIdIdentifiersResource(
        const CampaignsCampaignIdOrdersOrderIdIdentifiersResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdIdentifiersResource(CampaignsCampaignIdOrdersOrderIdIdentifiersResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdIdentifiersResource& operator=(const CampaignsCampaignIdOrdersOrderIdIdentifiersResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdIdentifiersResource& operator=(CampaignsCampaignIdOrdersOrderIdIdentifiersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ProvideOrderItemIdentifiersResponse>(
        int64_t & campaignId, int64_t & orderId, ProvideOrderItemIdentifiersRequest & provideOrderItemIdentifiersRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, ProvideOrderItemIdentifiersRequest &) -> std::pair<int, ProvideOrderItemIdentifiersResponse>
                { throw OrdersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ProvideOrderItemIdentifiersResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, ProvideOrderItemIdentifiersRequest & provideOrderItemIdentifiersRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrdersApiException(const OrdersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Подготовка заказа
/// </summary>
/// <remarks>
/// {% note tip \&quot;Подходит и для DBS\&quot; %}  Запрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.  {% endnote %}  Позволяет выполнить три операции:  * передать Маркету информацию о распределении товаров по коробкам; * передать Маркету коды маркировки для товаров; * удалить товар из заказа, если его не оказалось на складе.  Если нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.  ## Как передать информацию о распределении товаров  В этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:  * **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.  * **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.  ⚠️ Одна коробка не может содержать и товары целиком, и части товаров.  ## Как передавать коды маркировки  Если в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  Если товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.  ## Как удалить товар из заказа  Чтобы удалить товар из заказа:  1. Добавьте в запрос &#x60;allowRemove: true&#x60;. 2. Передайте распределение по коробкам без товара, который нужно удалить.  {% note warning \&quot;Удаление нельзя отменить\&quot; %}  Эта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.  {% endnote %}  Чтобы удалить позицию целиком, не передавайте соответствующий &#x60;OrderBoxLayoutItemDTO&#x60;. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле &#x60;fullCount&#x60;.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.  {% note info \&quot;Увеличить заказ нельзя\&quot; %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  ## Примеры  {% cut \&quot;Товар умещается в коробку\&quot; %}  Вот как будет выглядеть запрос, если в одной коробке едут:    * три единицы одного товара, требующего маркировки;   * одна единица другого товара, не требущего маркировки.    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;fullCount\&quot;: 3,                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           },                           {                               \&quot;cis\&quot;: \&quot;010304109478gftJ14545762!\\u001dhGt264\&quot;                           },                           {                               \&quot;cis\&quot;: \&quot;010304109478fRs28323ks23!\\u001dhet201\&quot;                           }                       ]                   },                   {                       \&quot;id\&quot;: 654321,                       \&quot;fullCount\&quot;: 1                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  {% cut \&quot;Товар едет в разных коробках\&quot; %}  Вот как будет выглядеть запрос, если товар едет в двух коробках:    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  {% cut \&quot;Одинаковые товары, где каждый едет в нескольких коробках\&quot; %}  Вот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdBoxesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdBoxesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdBoxesResource() = default;

    CampaignsCampaignIdOrdersOrderIdBoxesResource(
        const CampaignsCampaignIdOrdersOrderIdBoxesResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdBoxesResource(CampaignsCampaignIdOrdersOrderIdBoxesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdBoxesResource& operator=(const CampaignsCampaignIdOrdersOrderIdBoxesResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdBoxesResource& operator=(CampaignsCampaignIdOrdersOrderIdBoxesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, SetOrderBoxLayoutResponse>(
        int64_t & campaignId, int64_t & orderId, SetOrderBoxLayoutRequest & setOrderBoxLayoutRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, SetOrderBoxLayoutRequest &) -> std::pair<int, SetOrderBoxLayoutResponse>
                { throw OrdersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, SetOrderBoxLayoutResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, SetOrderBoxLayoutRequest & setOrderBoxLayoutRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrdersApiException(const OrdersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Передача количества грузовых мест в заказе
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Отгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.  Количество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).  Метод устроен немного нестандартно: количество задается длиной массива пустых объектов.  Раньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.  {% cut \&quot;Как было раньше\&quot; %}  Структура тела PUT-запроса:  &#x60;&#x60;&#x60; {   \&quot;boxes\&quot;:   [     {       \&quot;fulfilmentId\&quot;: \&quot;{string}\&quot;,       \&quot;weight\&quot;: {int64},       \&quot;width\&quot;: {int64},       \&quot;height\&quot;: {int64},       \&quot;depth\&quot;: {int64},       \&quot;items\&quot;:       [         {           \&quot;id\&quot;: {int64},           \&quot;count\&quot;: {int32}         },         ...       ]     },     ...   ] } &#x60;&#x60;&#x60; | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | &#x60;boxes&#x60;       |           | Список грузовых мест.       |  **Параметры, вложенные в &#x60;boxes&#x60;** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | &#x60;fulfilmentId&#x60;       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: &#x60;номер заказа на Маркете-номер грузового места&#x60;. Например, &#x60;7206821‑1, 7206821‑2&#x60; и т. д. | | &#x60;weight&#x60;       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. | | &#x60;width&#x60;       | Int64   | Ширина грузового места в сантиметрах.       | | &#x60;height&#x60;       | Int64   | Высота грузового места в сантиметрах.       | | &#x60;depth&#x60;       | Int64   | Глубина грузового места в сантиметрах.        | | &#x60;items&#x60;       | Int64   | Список товаров в грузовом месте.       |  **Параметры, вложенные в &#x60;items&#x60;** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | &#x60;id&#x60;       | Int64     | Идентификатор товара в рамках заказа.   | | &#x60;count&#x60;    | Int32     | Количество единиц товара в грузовом месте.       |  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, SetOrderShipmentBoxesResponse>(
        int64_t & campaignId, int64_t & orderId, int64_t & shipmentId, SetOrderShipmentBoxesRequest & setOrderShipmentBoxesRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, int64_t &, SetOrderShipmentBoxesRequest &) -> std::pair<int, SetOrderShipmentBoxesResponse>
                { throw OrdersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, SetOrderShipmentBoxesResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, int64_t & shipmentId, SetOrderShipmentBoxesRequest & setOrderShipmentBoxesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrdersApiException(const OrdersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Удаление товара из заказа или уменьшение числа единиц
/// </summary>
/// <remarks>
/// {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Изменяет состав заказа, если позволяет выбранная служба доставки, в случаях:  * покупатель уменьшил количество товара; * магазин не может поставить все товары в заказе.  Для этого заказ должен находится в статусе &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60;. После передачи статуса &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; изменить состав невозможно.  Если одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте &#x60;count&#x60; параметра &#x60;item&#x60;.  Чтобы полностью удалить товар из заказа:  * передайте значение &#x60;0&#x60;; или * не передавайте параметр &#x60;item&#x60;.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.  {% note info \&quot;Увеличить заказ нельзя\&quot; %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  **Возврат денег покупателю**  Если покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:  * при оплате банковской картой — с момента, когда магазин переведет заказ в статус &#x60;SHIPPED&#x60;;  * при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdItemsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdItemsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdItemsResource() = default;

    CampaignsCampaignIdOrdersOrderIdItemsResource(
        const CampaignsCampaignIdOrdersOrderIdItemsResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdItemsResource(CampaignsCampaignIdOrdersOrderIdItemsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdItemsResource& operator=(const CampaignsCampaignIdOrdersOrderIdItemsResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdItemsResource& operator=(CampaignsCampaignIdOrdersOrderIdItemsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        int64_t & campaignId, int64_t & orderId, UpdateOrderItemRequest & updateOrderItemRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, UpdateOrderItemRequest &) -> int
                { throw OrdersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_PUT(
        int64_t & campaignId, int64_t & orderId, UpdateOrderItemRequest & updateOrderItemRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrdersApiException(const OrdersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Изменение статуса одного заказа
/// </summary>
/// <remarks>
/// Изменяет статус заказа. Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этап обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60;. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdStatusResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdStatusResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdStatusResource() = default;

    CampaignsCampaignIdOrdersOrderIdStatusResource(
        const CampaignsCampaignIdOrdersOrderIdStatusResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdStatusResource(CampaignsCampaignIdOrdersOrderIdStatusResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdStatusResource& operator=(const CampaignsCampaignIdOrdersOrderIdStatusResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdStatusResource& operator=(CampaignsCampaignIdOrdersOrderIdStatusResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdateOrderStatusResponse>(
        int64_t & campaignId, int64_t & orderId, UpdateOrderStatusRequest & updateOrderStatusRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, UpdateOrderStatusRequest &) -> std::pair<int, UpdateOrderStatusResponse>
                { throw OrdersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdateOrderStatusResponse> handler_PUT(
        int64_t & campaignId, int64_t & orderId, UpdateOrderStatusRequest & updateOrderStatusRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrdersApiException(const OrdersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Изменение статусов нескольких заказов
/// </summary>
/// <remarks>
/// Изменяет статусы нескольких заказов.  Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60;и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этап обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60;. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;.  Максимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersStatus_updateResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersStatus_updateResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersStatus_updateResource() = default;

    CampaignsCampaignIdOrdersStatus_updateResource(
        const CampaignsCampaignIdOrdersStatus_updateResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersStatus_updateResource(CampaignsCampaignIdOrdersStatus_updateResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersStatus_updateResource& operator=(const CampaignsCampaignIdOrdersStatus_updateResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersStatus_updateResource& operator=(CampaignsCampaignIdOrdersStatus_updateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdateOrderStatusesResponse>(
        int64_t & campaignId, UpdateOrderStatusesRequest & updateOrderStatusesRequest)> handler_POST_func =
            [](int64_t &, UpdateOrderStatusesRequest &) -> std::pair<int, UpdateOrderStatusesResponse>
                { throw OrdersApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdateOrderStatusesResponse> handler_POST(
        int64_t & campaignId, UpdateOrderStatusesRequest & updateOrderStatusesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrdersApiException(const OrdersApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace OrdersApiResources */

using OrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource [[deprecated]] = OrdersApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource;
using OrdersApiCampaignsCampaignIdOrdersOrderIdResource [[deprecated]] = OrdersApiResources::CampaignsCampaignIdOrdersOrderIdResource;
using OrdersApiCampaignsCampaignIdOrdersResource [[deprecated]] = OrdersApiResources::CampaignsCampaignIdOrdersResource;
using OrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource [[deprecated]] = OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource;
using OrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource [[deprecated]] = OrdersApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource;
using OrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource [[deprecated]] = OrdersApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource;
using OrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource [[deprecated]] = OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource;
using OrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource [[deprecated]] = OrdersApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource;
using OrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource [[deprecated]] = OrdersApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource;
using OrdersApiCampaignsCampaignIdOrdersStatus_updateResource [[deprecated]] = OrdersApiResources::CampaignsCampaignIdOrdersStatus_updateResource;

//
// The restbed service to actually implement the REST server
//
class  OrdersApi
{
public:
    explicit OrdersApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OrdersApi();

    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> getCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource();
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdResource> getCampaignsCampaignIdOrdersOrderIdResource();
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersResource> getCampaignsCampaignIdOrdersResource();
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> getCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource();
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource> getCampaignsCampaignIdOrdersOrderIdIdentifiersResource();
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource> getCampaignsCampaignIdOrdersOrderIdBoxesResource();
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> getCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource();
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource> getCampaignsCampaignIdOrdersOrderIdItemsResource();
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource> getCampaignsCampaignIdOrdersOrderIdStatusResource();
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersStatus_updateResource> getCampaignsCampaignIdOrdersStatus_updateResource();

    void setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> resource);
    void setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdResource> resource);
    void setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersResource> resource);
    void setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> resource);
    void setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource> resource);
    void setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource> resource);
    void setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> resource);
    void setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource> resource);
    void setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource> resource);
    void setResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersStatus_updateResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setOrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource);
    [[deprecated("use setResource()")]]
    virtual void setOrdersApiCampaignsCampaignIdOrdersOrderIdResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdResource);
    [[deprecated("use setResource()")]]
    virtual void setOrdersApiCampaignsCampaignIdOrdersResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersResource> spOrdersApiCampaignsCampaignIdOrdersResource);
    [[deprecated("use setResource()")]]
    virtual void setOrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource);
    [[deprecated("use setResource()")]]
    virtual void setOrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdIdentifiersResource);
    [[deprecated("use setResource()")]]
    virtual void setOrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdBoxesResource);
    [[deprecated("use setResource()")]]
    virtual void setOrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource);
    [[deprecated("use setResource()")]]
    virtual void setOrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdItemsResource);
    [[deprecated("use setResource()")]]
    virtual void setOrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource> spOrdersApiCampaignsCampaignIdOrdersOrderIdStatusResource);
    [[deprecated("use setResource()")]]
    virtual void setOrdersApiCampaignsCampaignIdOrdersStatus_updateResource(std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersStatus_updateResource> spOrdersApiCampaignsCampaignIdOrdersStatus_updateResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdCancellationAcceptResource> m_spCampaignsCampaignIdOrdersOrderIdCancellationAcceptResource;
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdResource> m_spCampaignsCampaignIdOrdersOrderIdResource;
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersResource> m_spCampaignsCampaignIdOrdersResource;
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource> m_spCampaignsCampaignIdOrdersOrderIdDeliverDigitalGoodsResource;
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdIdentifiersResource> m_spCampaignsCampaignIdOrdersOrderIdIdentifiersResource;
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdBoxesResource> m_spCampaignsCampaignIdOrdersOrderIdBoxesResource;
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesResource;
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdItemsResource> m_spCampaignsCampaignIdOrdersOrderIdItemsResource;
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersOrderIdStatusResource> m_spCampaignsCampaignIdOrdersOrderIdStatusResource;
    std::shared_ptr<OrdersApiResources::CampaignsCampaignIdOrdersStatus_updateResource> m_spCampaignsCampaignIdOrdersStatus_updateResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OrdersApi_H_ */

