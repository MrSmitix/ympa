/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { GetOrderLabelsDataResponse } from '../model/getOrderLabelsDataResponse';
import { PageFormatType } from '../model/pageFormatType';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class OrderLabelsService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Готовый ярлык‑наклейка для коробки в заказе
     * Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param orderId Идентификатор заказа.
     * @param shipmentId Идентификатор грузоместа.
     * @param boxId Идентификатор коробки.
     * @param format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.
     
     */
    public generateOrderLabel(campaignId: number, orderId: number, shipmentId: number, boxId: number, format?: PageFormatType, observe?: 'body', headers?: Headers): Observable<File>;
    public generateOrderLabel(campaignId: number, orderId: number, shipmentId: number, boxId: number, format?: PageFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<File>>;
    public generateOrderLabel(campaignId: number, orderId: number, shipmentId: number, boxId: number, format?: PageFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling generateOrderLabel.');
        }

        if (orderId === null || orderId === undefined){
            throw new Error('Required parameter orderId was null or undefined when calling generateOrderLabel.');
        }

        if (shipmentId === null || shipmentId === undefined){
            throw new Error('Required parameter shipmentId was null or undefined when calling generateOrderLabel.');
        }

        if (boxId === null || boxId === undefined){
            throw new Error('Required parameter boxId was null or undefined when calling generateOrderLabel.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/pdf, application/json';

        const response: Observable<HttpResponse<File>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/orders/${encodeURIComponent(String(orderId))}/delivery/shipments/${encodeURIComponent(String(shipmentId))}/boxes/${encodeURIComponent(String(boxId))}/label?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <File>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Готовые ярлыки‑наклейки на все коробки в одном заказе
     * Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param orderId Идентификатор заказа.
     * @param format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.
     
     */
    public generateOrderLabels(campaignId: number, orderId: number, format?: PageFormatType, observe?: 'body', headers?: Headers): Observable<File>;
    public generateOrderLabels(campaignId: number, orderId: number, format?: PageFormatType, observe?: 'response', headers?: Headers): Observable<HttpResponse<File>>;
    public generateOrderLabels(campaignId: number, orderId: number, format?: PageFormatType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling generateOrderLabels.');
        }

        if (orderId === null || orderId === undefined){
            throw new Error('Required parameter orderId was null or undefined when calling generateOrderLabels.');
        }

        let queryParameters: string[] = [];
        if (format !== undefined) {
            queryParameters.push('format='+encodeURIComponent(String(format)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/pdf, application/json';

        const response: Observable<HttpResponse<File>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/orders/${encodeURIComponent(String(orderId))}/delivery/labels?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <File>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Данные для самостоятельного изготовления ярлыков
     * Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param orderId Идентификатор заказа.
     
     */
    public getOrderLabelsData(campaignId: number, orderId: number, observe?: 'body', headers?: Headers): Observable<GetOrderLabelsDataResponse>;
    public getOrderLabelsData(campaignId: number, orderId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetOrderLabelsDataResponse>>;
    public getOrderLabelsData(campaignId: number, orderId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling getOrderLabelsData.');
        }

        if (orderId === null || orderId === undefined){
            throw new Error('Required parameter orderId was null or undefined when calling getOrderLabelsData.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetOrderLabelsDataResponse>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/orders/${encodeURIComponent(String(orderId))}/delivery/labels/data`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetOrderLabelsDataResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
