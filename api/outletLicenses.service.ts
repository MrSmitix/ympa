/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { EmptyApiResponse } from '../model/emptyApiResponse';
import { GetOutletLicensesResponse } from '../model/getOutletLicensesResponse';
import { UpdateOutletLicenseRequest } from '../model/updateOutletLicenseRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class OutletLicensesService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Удаление лицензий для точек продаж
     * Удаляет информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param ids Список идентификаторов лицензий.
     
     */
    public deleteOutletLicenses(campaignId: number, ids?: Set<number>, observe?: 'body', headers?: Headers): Observable<EmptyApiResponse>;
    public deleteOutletLicenses(campaignId: number, ids?: Set<number>, observe?: 'response', headers?: Headers): Observable<HttpResponse<EmptyApiResponse>>;
    public deleteOutletLicenses(campaignId: number, ids?: Set<number>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling deleteOutletLicenses.');
        }

        let queryParameters: string[] = [];
        if (ids) {
            queryParameters.push('ids='+encodeURIComponent(ids.join(COLLECTION_FORMATS['csv'])));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<EmptyApiResponse>> = this.httpClient.delete(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/outlets/licenses?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <EmptyApiResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Информация о лицензиях для точек продаж
     * Возвращает информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param outletIds Список идентификаторов точек продаж, для которых нужно получить информацию о лицензиях. Идентификаторы указываются через запятую.  В запросе должен быть либо параметр &#x60;outletIds&#x60;, либо параметр &#x60;ids&#x60;. Запрос с обоими параметрами или без них приведет к ошибке. 
     * @param ids Список идентификаторов лицензий.
     
     */
    public getOutletLicenses(campaignId: number, outletIds?: Set<number>, ids?: Set<number>, observe?: 'body', headers?: Headers): Observable<GetOutletLicensesResponse>;
    public getOutletLicenses(campaignId: number, outletIds?: Set<number>, ids?: Set<number>, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetOutletLicensesResponse>>;
    public getOutletLicenses(campaignId: number, outletIds?: Set<number>, ids?: Set<number>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling getOutletLicenses.');
        }

        let queryParameters: string[] = [];
        if (outletIds) {
            queryParameters.push('outletIds='+encodeURIComponent(outletIds.join(COLLECTION_FORMATS['csv'])));
        }
        if (ids) {
            queryParameters.push('ids='+encodeURIComponent(ids.join(COLLECTION_FORMATS['csv'])));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetOutletLicensesResponse>> = this.httpClient.get(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/outlets/licenses?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetOutletLicensesResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Создание и изменение лицензий для точек продаж
     * Передает информацию о новых и существующих лицензиях для точек продаж. Поддерживаются только лицензии на розничную продажу алкоголя.  Чтобы размещать алкогольную продукцию на Маркете, надо также прислать гарантийное письмо (если вы еще не делали этого раньше) и правильно оформить предложения в прайс-листе. Далее информация о лицензиях проходит проверку.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param updateOutletLicenseRequest 
     
     */
    public updateOutletLicenses(campaignId: number, updateOutletLicenseRequest: UpdateOutletLicenseRequest, observe?: 'body', headers?: Headers): Observable<EmptyApiResponse>;
    public updateOutletLicenses(campaignId: number, updateOutletLicenseRequest: UpdateOutletLicenseRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<EmptyApiResponse>>;
    public updateOutletLicenses(campaignId: number, updateOutletLicenseRequest: UpdateOutletLicenseRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (campaignId === null || campaignId === undefined){
            throw new Error('Required parameter campaignId was null or undefined when calling updateOutletLicenses.');
        }

        if (updateOutletLicenseRequest === null || updateOutletLicenseRequest === undefined){
            throw new Error('Required parameter updateOutletLicenseRequest was null or undefined when calling updateOutletLicenses.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<EmptyApiResponse>> = this.httpClient.post(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/outlets/licenses`, updateOutletLicenseRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <EmptyApiResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
