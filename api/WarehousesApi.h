/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WarehousesApi.h
 *
 * 
 */

#ifndef WarehousesApi_H_
#define WarehousesApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GetFulfillmentWarehousesResponse.h"
#include "GetWarehousesResponse.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  WarehousesApiException: public std::exception
{
public:
    WarehousesApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Идентификаторы складов Маркета (FBY)
/// </summary>
/// <remarks>
/// Возвращает список складов Маркета с их идентификаторами.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  WarehousesApiWarehousesResource: public restbed::Resource
{
public:
    WarehousesApiWarehousesResource(const std::string& context = "");
    virtual ~WarehousesApiWarehousesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetFulfillmentWarehousesResponse>> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleWarehousesApiException(const WarehousesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Список складов и групп складов
/// </summary>
/// <remarks>
/// Возвращает список складов и, если склады объединены, список групп складов. [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)  Среди прочего запрос позволяет определить идентификатор, который нужно использовать при передаче остатков для группы складов.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
/// </remarks>
class  WarehousesApiBusinessesBusinessIdWarehousesResource: public restbed::Resource
{
public:
    WarehousesApiBusinessesBusinessIdWarehousesResource(const std::string& context = "");
    virtual ~WarehousesApiBusinessesBusinessIdWarehousesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetWarehousesResponse>> handler_GET(
        int64_t const & businessId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_businessId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("businessId", 0L);
    }



    virtual std::pair<int, std::string> handleWarehousesApiException(const WarehousesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  WarehousesApi
{
public:
    explicit WarehousesApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~WarehousesApi();

    virtual void setWarehousesApiWarehousesResource(std::shared_ptr<WarehousesApiWarehousesResource> spWarehousesApiWarehousesResource);
    virtual void setWarehousesApiBusinessesBusinessIdWarehousesResource(std::shared_ptr<WarehousesApiBusinessesBusinessIdWarehousesResource> spWarehousesApiBusinessesBusinessIdWarehousesResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<WarehousesApiWarehousesResource> m_spWarehousesApiWarehousesResource;
    std::shared_ptr<WarehousesApiBusinessesBusinessIdWarehousesResource> m_spWarehousesApiBusinessesBusinessIdWarehousesResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* WarehousesApi_H_ */

