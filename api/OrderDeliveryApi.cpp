/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "OrderDeliveryApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

OrderDeliveryApiException::OrderDeliveryApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int OrderDeliveryApiException::getStatus() const
{
    return m_status;
}
const char* OrderDeliveryApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/buyer/");
	this->set_method_handler("GET",
		std::bind(&OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handler_GET_internal, this,
			std::placeholders::_1));
}

OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::~OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource()
{
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handleOrderDeliveryApiException(const OrderDeliveryApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<GetOrderBuyerInfoResponse> resultObject = std::make_shared<GetOrderBuyerInfoResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(campaignId, orderId);
    }
    catch(const OrderDeliveryApiException& e) {
        std::tie(status_code, result) = handleOrderDeliveryApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Информация о покупателе." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GetOrderBuyerInfoResponse>> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::handler_GET(
        int64_t const & campaignId, int64_t const & orderId)
{
    throw OrderDeliveryApiException(501, "Not implemented");
}


std::string OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/date/");
	this->set_method_handler("PUT",
		std::bind(&OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::~OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource()
{
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handleOrderDeliveryApiException(const OrderDeliveryApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setOrderDeliveryDateRequest = extractJsonModelBodyParam<SetOrderDeliveryDateRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, setOrderDeliveryDateRequest);
    }
    catch(const OrderDeliveryApiException& e) {
        std::tie(status_code, result) = handleOrderDeliveryApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Успешное изменение даты доставки." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<SetOrderDeliveryDateRequest> const & setOrderDeliveryDateRequest)
{
    throw OrderDeliveryApiException(501, "Not implemented");
}


std::string OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/track/");
	this->set_method_handler("POST",
		std::bind(&OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handler_POST_internal, this,
			std::placeholders::_1));
}

OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::~OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource()
{
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handleOrderDeliveryApiException(const OrderDeliveryApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto setOrderDeliveryTrackCodeRequest = extractJsonModelBodyParam<SetOrderDeliveryTrackCodeRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(campaignId, orderId, setOrderDeliveryTrackCodeRequest);
    }
    catch(const OrderDeliveryApiException& e) {
        std::tie(status_code, result) = handleOrderDeliveryApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Трек‑номер посылки и идентификатор службы доставки были успешно переданы." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::handler_POST(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<SetOrderDeliveryTrackCodeRequest> const & setOrderDeliveryTrackCodeRequest)
{
    throw OrderDeliveryApiException(501, "Not implemented");
}


std::string OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/delivery/storage-limit/");
	this->set_method_handler("PUT",
		std::bind(&OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::~OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource()
{
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handleOrderDeliveryApiException(const OrderDeliveryApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto updateOrderStorageLimitRequest = extractJsonModelBodyParam<UpdateOrderStorageLimitRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<EmptyApiResponse> resultObject = std::make_shared<EmptyApiResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, updateOrderStorageLimitRequest);
    }
    catch(const OrderDeliveryApiException& e) {
        std::tie(status_code, result) = handleOrderDeliveryApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Пустой ответ." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<EmptyApiResponse>> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<UpdateOrderStorageLimitRequest> const & updateOrderStorageLimitRequest)
{
    throw OrderDeliveryApiException(501, "Not implemented");
}


std::string OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/campaigns/{campaignId: .*}/orders/{orderId: .*}/verifyEac/");
	this->set_method_handler("PUT",
		std::bind(&OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::~OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource()
{
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::handleOrderDeliveryApiException(const OrderDeliveryApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto verifyOrderEacRequest = extractJsonModelBodyParam<VerifyOrderEacRequest>(bodyContent);

    // Getting the path params
    const int64_t campaignId = getPathParam_campaignId(request);
    const int64_t orderId = getPathParam_orderId(request);



    int status_code = 500;
    std::shared_ptr<VerifyOrderEacResponse> resultObject = std::make_shared<VerifyOrderEacResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(campaignId, orderId, verifyOrderEacRequest);
    }
    catch(const OrderDeliveryApiException& e) {
        std::tie(status_code, result) = handleOrderDeliveryApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Проверка кода выполнена успешно." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Запрос содержит неправильные данные." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "В запросе не указаны данные для авторизации." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Данные для авторизации неверны или доступ к ресурсу запрещен." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Запрашиваемый ресурс не найден." : result, contentType);
        return;
    }
    if (status_code == 420) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 420, result.empty() ? "Превышено ограничение на доступ к ресурсу." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Внутренняя ошибка сервера." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<VerifyOrderEacResponse>> OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::handler_PUT(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<VerifyOrderEacRequest> const & verifyOrderEacRequest)
{
    throw OrderDeliveryApiException(501, "Not implemented");
}


std::string OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

OrderDeliveryApi::OrderDeliveryApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

OrderDeliveryApi::~OrderDeliveryApi() {}

void OrderDeliveryApi::setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource(std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource) {
    m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource = spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource;
    m_service->publish(m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource);
}
void OrderDeliveryApi::setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource(std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource) {
    m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource = spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource;
    m_service->publish(m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource);
}
void OrderDeliveryApi::setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource) {
    m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource = spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource;
    m_service->publish(m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource);
}
void OrderDeliveryApi::setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource(std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource) {
    m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource = spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource;
    m_service->publish(m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource);
}
void OrderDeliveryApi::setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource(std::shared_ptr<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource> spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource) {
    m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource = spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource;
    m_service->publish(m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource);
}


void OrderDeliveryApi::publishDefaultResources() {
    if (!m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource) {
        setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource(std::make_shared<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdBuyerResource>());
    }
    if (!m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource) {
        setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource(std::make_shared<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryDateResource>());
    }
    if (!m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource) {
        setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource(std::make_shared<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryTrackResource>());
    }
    if (!m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource) {
        setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource(std::make_shared<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdDeliveryStorage-limitResource>());
    }
    if (!m_spOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource) {
        setOrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource(std::make_shared<OrderDeliveryApiCampaignsCampaignIdOrdersOrderIdVerifyEacResource>());
    }
}

std::shared_ptr<restbed::Service> OrderDeliveryApi::service() {
    return m_service;
}


}
}
}
}

