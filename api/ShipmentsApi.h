/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ShipmentsApi.h
 *
 * 
 */

#ifndef ShipmentsApi_H_
#define ShipmentsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "ConfirmShipmentRequest.h"
#include "EmptyApiResponse.h"
#include "GetShipmentOrdersInfoResponse.h"
#include "GetShipmentResponse.h"
#include "SearchShipmentsRequest.h"
#include "SearchShipmentsResponse.h"
#include "SetShipmentPalletsCountRequest.h"
#include "ShipmentPalletLabelPageFormatType.h"
#include "TransferOrdersFromShipmentRequest.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ShipmentsApiException: public std::exception
{
public:
    ShipmentsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Подтверждение отгрузки
/// </summary>
/// <remarks>
/// Подтверждает отгрузку товаров в сортировочный центр или пункт приема заказов. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<ConfirmShipmentRequest> const & confirmShipmentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение акта приема-передачи
/// </summary>
/// <remarks>
/// {% note warning \&quot;Экспресс‑доставка\&quot; %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам Яндекс Go, подготавливать акт приема‑передачи не нужно.  {% endnote %}  Запрос формирует акт приема-передачи заказов, входящих в отгрузку, и возвращает акт в формате PDF. В акте содержатся собранные и готовые к отправке заказы.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \&quot;Данные, из которых Маркет формирует акт\&quot; %}  | **Данные в акте**                                         | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Дата                                                      | Дата запроса.                                                                                                                                                                                                                                                        | | Отправитель                                               | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                               | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                         | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика)       | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                      | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Вес                                                       | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                           | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение акта расхождений
/// </summary>
/// <remarks>
/// Возвращает акт расхождений для заданной отгрузки. |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение фактического акта приема-передачи
/// </summary>
/// <remarks>
/// Возвращает фактический акт приема-передачи для заданной отгрузки.  Такой акт становится доступен спустя несколько часов после завершения отгрузки. Он может понадобиться, если после отгрузки обнаружатся расхождения.  |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Ярлыки для доверительной приемки (FBS)
/// </summary>
/// <remarks>
/// PDF-файл с ярлыками на каждый короб или палету в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Распечатайте по несколько копий каждого ярлыка: на одну тару нужно наклеить минимум 2 ярлыка с разных сторон.  Количество упаковок в отгрузке задается в запросе [PUT campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets](../../reference/shipments/setShipmentPalletsCount.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<ShipmentPalletLabelPageFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
/// </summary>
/// <remarks>
/// Запрос подтверждает ближайшую отгрузку и возвращает акт приема-передачи в формате PDF.  {% note warning \&quot;Экспресс‑доставка\&quot; %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам [Яндекс Go](https://go.yandex/), подготавливать акт приема‑передачи не нужно.  {% endnote %}  В акт входят собранные и готовые к отправке заказы, которые отгружаются в сортировочный центр или пункт приема или курьерам Маркета.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \&quot;Данные, из которых Маркет формирует акт\&quot; %}  | **Данные в акте**                                   | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Отправитель                                         | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                         | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                   | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика) | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Стоимость всех товаров в заказе                     | Стоимость всех заказанных товаров.                                                                                                                                                                                                                                   | | Вес                                                 | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                     | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int32_t const & warehouseId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int32_t getQueryParam_warehouseId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("warehouseId", 0);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение транспортной накладной
/// </summary>
/// <remarks>
/// Возвращает транспортную накладную для заданной отгрузки.  Транспортная накладная понадобится, если вы отгружаете товары непосредственно со своего склада. [Подробно об этом способе отгрузки](https://yandex.ru/support/marketplace/orders/fbs/settings/shipment.html#at-your-warehouse)  |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение информации об одной отгрузке
/// </summary>
/// <remarks>
/// Возвращает информацию об отгрузке по ее идентификатору. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetShipmentResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId, bool const & cancelledOrders);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }

    virtual bool getQueryParam_cancelledOrders(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("cancelledOrders", true);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение информации о возможности печати ярлыков (FBS)
/// </summary>
/// <remarks>
/// Возвращает информацию о возможности печати ярлыков-наклеек для заказов в отгрузке. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetShipmentOrdersInfoResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Получение информации о нескольких отгрузках
/// </summary>
/// <remarks>
/// Возвращает информацию об отгрузках по заданным параметрам:  * дате; * статусу; * идентификаторам заказов.  Результаты возвращаются постранично. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<SearchShipmentsResponse>> handler_PUT(
        int64_t const & campaignId, std::shared_ptr<SearchShipmentsRequest> const & searchShipmentsRequest, std::string const & pageToken, int32_t const & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual std::string getQueryParam_pageToken(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageToken", "");
    }

    virtual int32_t getQueryParam_limit(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("limit", 0);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Передача количества упаковок в отгрузке
/// </summary>
/// <remarks>
/// Передает Маркету количество коробов или палет в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Получить PDF-файл с ярлыками для упаковок можно с помощью запроса [GET campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels](../../reference/shipments/downloadShipmentPalletLabels.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_PUT(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<SetShipmentPalletsCountRequest> const & setShipmentPalletsCountRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Перенос заказов в следующую отгрузку
/// </summary>
/// <remarks>
/// Переносит указанные заказы из указанной отгрузки в следующую отгрузку. [Что такое отгрузка?](https://yandex.ru/support/marketplace/orders/fbs/process.html#ship)  Используйте этот запрос, если не успеваете собрать и упаковать заказы вовремя.  {% note warning \&quot;Такие переносы снижают индекс качества магазина\&quot; %}  Этот запрос предназначен для исключительных случаев. Если вы будете переносить заказы слишком часто, магазин столкнется с ограничениями. [Что за ограничения?](https://yandex.ru/support/marketplace/quality/score/fbs.html)  {% endnote %}  Переносить заказы можно, если до формирования отгрузки осталось больше получаса.  Перенос происходит не мгновенно, а занимает несколько минут.  |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource: public restbed::Resource
{
public:
    ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource(const std::string& context = "");
    virtual ~ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<EmptyApiResponse>> handler_POST(
        int64_t const & campaignId, int64_t const & shipmentId, std::shared_ptr<TransferOrdersFromShipmentRequest> const & transferOrdersFromShipmentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }



    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  ShipmentsApi
{
public:
    explicit ShipmentsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ShipmentsApi();

    virtual void setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource);
    virtual void setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource);
    virtual void setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource);
    virtual void setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource);
    virtual void setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource);
    virtual void setShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource> spShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource);
    virtual void setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource);
    virtual void setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource);
    virtual void setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource);
    virtual void setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource);
    virtual void setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource);
    virtual void setShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource(std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource> spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource> m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdConfirmResource;
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource> m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdActResource;
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource> m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdDiscrepancy-actResource;
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource> m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdInbound-actResource;
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource> m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletLabelsResource;
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource> m_spShipmentsApiCampaignsCampaignIdShipmentsReception-transfer-actResource;
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource> m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdTransportation-waybillResource;
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource> m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdResource;
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource> m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersInfoResource;
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource> m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsResource;
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource> m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdPalletsResource;
    std::shared_ptr<ShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource> m_spShipmentsApiCampaignsCampaignIdFirst-mileShipmentsShipmentIdOrdersTransferResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ShipmentsApi_H_ */

