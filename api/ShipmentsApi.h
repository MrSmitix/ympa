/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ShipmentsApi.h
 *
 * 
 */

#ifndef ShipmentsApi_H_
#define ShipmentsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "ConfirmShipmentRequest.h"
#include "EmptyApiResponse.h"
#include "GetShipmentOrdersInfoResponse.h"
#include "GetShipmentResponse.h"
#include "SearchShipmentsRequest.h"
#include "SearchShipmentsResponse.h"
#include "SetShipmentPalletsCountRequest.h"
#include "ShipmentPalletLabelPageFormatType.h"
#include "TransferOrdersFromShipmentRequest.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ShipmentsApiException: public std::exception
{
public:
    ShipmentsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace ShipmentsApiResources {
/// <summary>
/// Подтверждение отгрузки
/// </summary>
/// <remarks>
/// Подтверждает отгрузку товаров в сортировочный центр или пункт приема заказов. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource() = default;

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource(
        const CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource& other) = default; // copy constructor
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource(CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource& operator=(const CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource& other) = default; // copy assignment
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource& operator=(CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & shipmentId, ConfirmShipmentRequest & confirmShipmentRequest)> handler_POST_func =
            [](int64_t &, int64_t &, ConfirmShipmentRequest &) -> std::pair<int, EmptyApiResponse>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & shipmentId, ConfirmShipmentRequest & confirmShipmentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение акта приема-передачи
/// </summary>
/// <remarks>
/// {% note warning \&quot;Экспресс‑доставка\&quot; %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам Яндекс Go, подготавливать акт приема‑передачи не нужно.  {% endnote %}  Запрос формирует акт приема-передачи заказов, входящих в отгрузку, и возвращает акт в формате PDF. В акте содержатся собранные и готовые к отправке заказы.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \&quot;Данные, из которых Маркет формирует акт\&quot; %}  | **Данные в акте**                                         | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Дата                                                      | Дата запроса.                                                                                                                                                                                                                                                        | | Отправитель                                               | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                               | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                         | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика)       | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                      | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Вес                                                       | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                           | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource() = default;

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource(
        const CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource& other) = default; // copy constructor
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource(CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource& operator=(const CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource& other) = default; // copy assignment
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource& operator=(CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & shipmentId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, std::string>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение акта расхождений
/// </summary>
/// <remarks>
/// Возвращает акт расхождений для заданной отгрузки. |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource() = default;

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource(
        const CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource& other) = default; // copy constructor
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource(CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource& operator=(const CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource& other) = default; // copy assignment
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource& operator=(CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & shipmentId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, std::string>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение фактического акта приема-передачи
/// </summary>
/// <remarks>
/// Возвращает фактический акт приема-передачи для заданной отгрузки.  Такой акт становится доступен спустя несколько часов после завершения отгрузки. Он может понадобиться, если после отгрузки обнаружатся расхождения.  |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource() = default;

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource(
        const CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource& other) = default; // copy constructor
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource(CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource& operator=(const CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource& other) = default; // copy assignment
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource& operator=(CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & shipmentId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, std::string>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Ярлыки для доверительной приемки (FBS)
/// </summary>
/// <remarks>
/// PDF-файл с ярлыками на каждый короб или палету в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Распечатайте по несколько копий каждого ярлыка: на одну тару нужно наклеить минимум 2 ярлыка с разных сторон.  Количество упаковок в отгрузке задается в запросе [PUT campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets](../../reference/shipments/setShipmentPalletsCount.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource() = default;

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource(
        const CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource& other) = default; // copy constructor
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource(CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource& operator=(const CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource& other) = default; // copy assignment
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource& operator=(CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & shipmentId, ShipmentPalletLabelPageFormatType & format)> handler_GET_func =
            [](int64_t &, int64_t &, ShipmentPalletLabelPageFormatType &) -> std::pair<int, std::string>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & shipmentId, ShipmentPalletLabelPageFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
/// </summary>
/// <remarks>
/// Запрос подтверждает ближайшую отгрузку и возвращает акт приема-передачи в формате PDF.  {% note warning \&quot;Экспресс‑доставка\&quot; %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам [Яндекс Go](https://go.yandex/), подготавливать акт приема‑передачи не нужно.  {% endnote %}  В акт входят собранные и готовые к отправке заказы, которые отгружаются в сортировочный центр или пункт приема или курьерам Маркета.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \&quot;Данные, из которых Маркет формирует акт\&quot; %}  | **Данные в акте**                                   | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Отправитель                                         | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                         | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                   | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика) | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Стоимость всех товаров в заказе                     | Стоимость всех заказанных товаров.                                                                                                                                                                                                                                   | | Вес                                                 | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                     | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdShipmentsReception_transfer_actResource: public restbed::Resource
{
public:
    CampaignsCampaignIdShipmentsReception_transfer_actResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdShipmentsReception_transfer_actResource() = default;

    CampaignsCampaignIdShipmentsReception_transfer_actResource(
        const CampaignsCampaignIdShipmentsReception_transfer_actResource& other) = default; // copy constructor
    CampaignsCampaignIdShipmentsReception_transfer_actResource(CampaignsCampaignIdShipmentsReception_transfer_actResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdShipmentsReception_transfer_actResource& operator=(const CampaignsCampaignIdShipmentsReception_transfer_actResource& other) = default; // copy assignment
    CampaignsCampaignIdShipmentsReception_transfer_actResource& operator=(CampaignsCampaignIdShipmentsReception_transfer_actResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int32_t & warehouseId)> handler_GET_func =
            [](int64_t &, int32_t &) -> std::pair<int, std::string>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int32_t & warehouseId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение транспортной накладной
/// </summary>
/// <remarks>
/// Возвращает транспортную накладную для заданной отгрузки.  Транспортная накладная понадобится, если вы отгружаете товары непосредственно со своего склада. [Подробно об этом способе отгрузки](https://yandex.ru/support/marketplace/orders/fbs/settings/shipment.html#at-your-warehouse)  |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource() = default;

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource(
        const CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource& other) = default; // copy constructor
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource(CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource& operator=(const CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource& other) = default; // copy assignment
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource& operator=(CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & shipmentId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, std::string>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение информации об одной отгрузке
/// </summary>
/// <remarks>
/// Возвращает информацию об отгрузке по ее идентификатору. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource() = default;

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource(
        const CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource& other) = default; // copy constructor
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource(CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource& operator=(const CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource& other) = default; // copy assignment
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource& operator=(CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetShipmentResponse>(
        int64_t & campaignId, int64_t & shipmentId, bool & cancelledOrders)> handler_GET_func =
            [](int64_t &, int64_t &, bool &) -> std::pair<int, GetShipmentResponse>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetShipmentResponse> handler_GET(
        int64_t & campaignId, int64_t & shipmentId, bool & cancelledOrders);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение информации о возможности печати ярлыков (FBS)
/// </summary>
/// <remarks>
/// Возвращает информацию о возможности печати ярлыков-наклеек для заказов в отгрузке. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource() = default;

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource(
        const CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource& other) = default; // copy constructor
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource(CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource& operator=(const CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource& other) = default; // copy assignment
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource& operator=(CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetShipmentOrdersInfoResponse>(
        int64_t & campaignId, int64_t & shipmentId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetShipmentOrdersInfoResponse>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetShipmentOrdersInfoResponse> handler_GET(
        int64_t & campaignId, int64_t & shipmentId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Получение информации о нескольких отгрузках
/// </summary>
/// <remarks>
/// Возвращает информацию об отгрузках по заданным параметрам:  * дате; * статусу; * идентификаторам заказов.  Результаты возвращаются постранично. |**⚙️ Лимит:** 100 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFirst_mileShipmentsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFirst_mileShipmentsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFirst_mileShipmentsResource() = default;

    CampaignsCampaignIdFirst_mileShipmentsResource(
        const CampaignsCampaignIdFirst_mileShipmentsResource& other) = default; // copy constructor
    CampaignsCampaignIdFirst_mileShipmentsResource(CampaignsCampaignIdFirst_mileShipmentsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFirst_mileShipmentsResource& operator=(const CampaignsCampaignIdFirst_mileShipmentsResource& other) = default; // copy assignment
    CampaignsCampaignIdFirst_mileShipmentsResource& operator=(CampaignsCampaignIdFirst_mileShipmentsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, SearchShipmentsResponse>(
        int64_t & campaignId, SearchShipmentsRequest & searchShipmentsRequest, std::string & pageToken, int32_t & limit)> handler_PUT_func =
            [](int64_t &, SearchShipmentsRequest &, std::string &, int32_t &) -> std::pair<int, SearchShipmentsResponse>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, SearchShipmentsResponse> handler_PUT(
        int64_t & campaignId, SearchShipmentsRequest & searchShipmentsRequest, std::string & pageToken, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Передача количества упаковок в отгрузке
/// </summary>
/// <remarks>
/// Передает Маркету количество коробов или палет в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Получить PDF-файл с ярлыками для упаковок можно с помощью запроса [GET campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels](../../reference/shipments/downloadShipmentPalletLabels.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource() = default;

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource(
        const CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource& other) = default; // copy constructor
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource(CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource& operator=(const CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource& other) = default; // copy assignment
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource& operator=(CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & shipmentId, SetShipmentPalletsCountRequest & setShipmentPalletsCountRequest)> handler_PUT_func =
            [](int64_t &, int64_t &, SetShipmentPalletsCountRequest &) -> std::pair<int, EmptyApiResponse>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_PUT(
        int64_t & campaignId, int64_t & shipmentId, SetShipmentPalletsCountRequest & setShipmentPalletsCountRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Перенос заказов в следующую отгрузку
/// </summary>
/// <remarks>
/// Переносит указанные заказы из указанной отгрузки в следующую отгрузку. [Что такое отгрузка?](https://yandex.ru/support/marketplace/orders/fbs/process.html#ship)  Используйте этот запрос, если не успеваете собрать и упаковать заказы вовремя.  {% note warning \&quot;Такие переносы снижают индекс качества магазина\&quot; %}  Этот запрос предназначен для исключительных случаев. Если вы будете переносить заказы слишком часто, магазин столкнется с ограничениями. [Что за ограничения?](https://yandex.ru/support/marketplace/quality/score/fbs.html)  {% endnote %}  Переносить заказы можно, если до формирования отгрузки осталось больше получаса.  Перенос происходит не мгновенно, а занимает несколько минут.  |**⚙️ Лимит:** 200 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource: public restbed::Resource
{
public:
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource() = default;

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource(
        const CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource& other) = default; // copy constructor
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource(CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource& operator=(const CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource& other) = default; // copy assignment
    CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource& operator=(CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, EmptyApiResponse>(
        int64_t & campaignId, int64_t & shipmentId, TransferOrdersFromShipmentRequest & transferOrdersFromShipmentRequest)> handler_POST_func =
            [](int64_t &, int64_t &, TransferOrdersFromShipmentRequest &) -> std::pair<int, EmptyApiResponse>
                { throw ShipmentsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, EmptyApiResponse> handler_POST(
        int64_t & campaignId, int64_t & shipmentId, TransferOrdersFromShipmentRequest & transferOrdersFromShipmentRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleShipmentsApiException(const ShipmentsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace ShipmentsApiResources */

using ShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource;
using ShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource;
using ShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource;
using ShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource;
using ShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource;
using ShipmentsApiCampaignsCampaignIdShipmentsReception_transfer_actResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdShipmentsReception_transfer_actResource;
using ShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource;
using ShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource;
using ShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource;
using ShipmentsApiCampaignsCampaignIdFirst_mileShipmentsResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsResource;
using ShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource;
using ShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource [[deprecated]] = ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource;

//
// The restbed service to actually implement the REST server
//
class  ShipmentsApi
{
public:
    explicit ShipmentsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ShipmentsApi();

    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource> getCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource();
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource> getCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource();
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource> getCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource();
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource> getCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource();
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource> getCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource();
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdShipmentsReception_transfer_actResource> getCampaignsCampaignIdShipmentsReception_transfer_actResource();
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource> getCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource();
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource> getCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource();
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource> getCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource();
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsResource> getCampaignsCampaignIdFirst_mileShipmentsResource();
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource> getCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource();
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource> getCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource();

    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource> resource);
    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource> resource);
    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource> resource);
    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource> resource);
    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource> resource);
    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdShipmentsReception_transfer_actResource> resource);
    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource> resource);
    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource> resource);
    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource> resource);
    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsResource> resource);
    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource> resource);
    void setResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource> spShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource> spShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource> spShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource> spShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource> spShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdShipmentsReception_transfer_actResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdShipmentsReception_transfer_actResource> spShipmentsApiCampaignsCampaignIdShipmentsReception_transfer_actResource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource> spShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource> spShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource> spShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsResource> spShipmentsApiCampaignsCampaignIdFirst_mileShipmentsResource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource> spShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource);
    [[deprecated("use setResource()")]]
    virtual void setShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource(std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource> spShipmentsApiCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource> m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdConfirmResource;
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource> m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdActResource;
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource> m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdDiscrepancy_actResource;
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource> m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdInbound_actResource;
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource> m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletLabelsResource;
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdShipmentsReception_transfer_actResource> m_spCampaignsCampaignIdShipmentsReception_transfer_actResource;
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource> m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdTransportation_waybillResource;
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdResource> m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdResource;
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource> m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersInfoResource;
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsResource> m_spCampaignsCampaignIdFirst_mileShipmentsResource;
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource> m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdPalletsResource;
    std::shared_ptr<ShipmentsApiResources::CampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource> m_spCampaignsCampaignIdFirst_mileShipmentsShipmentIdOrdersTransferResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ShipmentsApi_H_ */

