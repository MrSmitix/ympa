/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CategoriesApi.h
 *
 * 
 */

#ifndef CategoriesApi_H_
#define CategoriesApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GetCategoriesMaxSaleQuantumRequest.h"
#include "GetCategoriesMaxSaleQuantumResponse.h"
#include "GetCategoriesRequest.h"
#include "GetCategoriesResponse.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  CategoriesApiException: public std::exception
{
public:
    CategoriesApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace CategoriesApiResources {
/// <summary>
/// Лимит на установку кванта продажи и минимального количества товаров в заказе
/// </summary>
/// <remarks>
/// Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  CategoriesMax_sale_quantumResource: public restbed::Resource
{
public:
    CategoriesMax_sale_quantumResource(const std::string& context = "");
    virtual ~CategoriesMax_sale_quantumResource() = default;

    CategoriesMax_sale_quantumResource(
        const CategoriesMax_sale_quantumResource& other) = default; // copy constructor
    CategoriesMax_sale_quantumResource(CategoriesMax_sale_quantumResource&& other) noexcept = default; // move constructor

    CategoriesMax_sale_quantumResource& operator=(const CategoriesMax_sale_quantumResource& other) = default; // copy assignment
    CategoriesMax_sale_quantumResource& operator=(CategoriesMax_sale_quantumResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCategoriesMaxSaleQuantumResponse>(
        GetCategoriesMaxSaleQuantumRequest & getCategoriesMaxSaleQuantumRequest)> handler_POST_func =
            [](GetCategoriesMaxSaleQuantumRequest &) -> std::pair<int, GetCategoriesMaxSaleQuantumResponse>
                { throw CategoriesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCategoriesMaxSaleQuantumResponse> handler_POST(
        GetCategoriesMaxSaleQuantumRequest & getCategoriesMaxSaleQuantumRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCategoriesApiException(const CategoriesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Дерево категорий
/// </summary>
/// <remarks>
/// Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
/// </remarks>
class  CategoriesTreeResource: public restbed::Resource
{
public:
    CategoriesTreeResource(const std::string& context = "");
    virtual ~CategoriesTreeResource() = default;

    CategoriesTreeResource(
        const CategoriesTreeResource& other) = default; // copy constructor
    CategoriesTreeResource(CategoriesTreeResource&& other) noexcept = default; // move constructor

    CategoriesTreeResource& operator=(const CategoriesTreeResource& other) = default; // copy assignment
    CategoriesTreeResource& operator=(CategoriesTreeResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetCategoriesResponse>(
        GetCategoriesRequest & getCategoriesRequest)> handler_POST_func =
            [](GetCategoriesRequest &) -> std::pair<int, GetCategoriesResponse>
                { throw CategoriesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetCategoriesResponse> handler_POST(
        GetCategoriesRequest & getCategoriesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCategoriesApiException(const CategoriesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace CategoriesApiResources */

using CategoriesApiCategoriesMax_sale_quantumResource [[deprecated]] = CategoriesApiResources::CategoriesMax_sale_quantumResource;
using CategoriesApiCategoriesTreeResource [[deprecated]] = CategoriesApiResources::CategoriesTreeResource;

//
// The restbed service to actually implement the REST server
//
class  CategoriesApi
{
public:
    explicit CategoriesApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~CategoriesApi();

    std::shared_ptr<CategoriesApiResources::CategoriesMax_sale_quantumResource> getCategoriesMax_sale_quantumResource();
    std::shared_ptr<CategoriesApiResources::CategoriesTreeResource> getCategoriesTreeResource();

    void setResource(std::shared_ptr<CategoriesApiResources::CategoriesMax_sale_quantumResource> resource);
    void setResource(std::shared_ptr<CategoriesApiResources::CategoriesTreeResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setCategoriesApiCategoriesMax_sale_quantumResource(std::shared_ptr<CategoriesApiResources::CategoriesMax_sale_quantumResource> spCategoriesApiCategoriesMax_sale_quantumResource);
    [[deprecated("use setResource()")]]
    virtual void setCategoriesApiCategoriesTreeResource(std::shared_ptr<CategoriesApiResources::CategoriesTreeResource> spCategoriesApiCategoriesTreeResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<CategoriesApiResources::CategoriesMax_sale_quantumResource> m_spCategoriesMax_sale_quantumResource;
    std::shared_ptr<CategoriesApiResources::CategoriesTreeResource> m_spCategoriesTreeResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* CategoriesApi_H_ */

