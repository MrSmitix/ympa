/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiClientDataErrorResponse } from '../model/apiClientDataErrorResponse';
import { ApiForbiddenErrorResponse } from '../model/apiForbiddenErrorResponse';
import { ApiLimitErrorResponse } from '../model/apiLimitErrorResponse';
import { ApiNotFoundErrorResponse } from '../model/apiNotFoundErrorResponse';
import { ApiServerErrorResponse } from '../model/apiServerErrorResponse';
import { ApiUnauthorizedErrorResponse } from '../model/apiUnauthorizedErrorResponse';
import { DeletePromoOffersRequest } from '../model/deletePromoOffersRequest';
import { DeletePromoOffersResponse } from '../model/deletePromoOffersResponse';
import { GetPromoOffersRequest } from '../model/getPromoOffersRequest';
import { GetPromoOffersResponse } from '../model/getPromoOffersResponse';
import { GetPromosRequest } from '../model/getPromosRequest';
import { GetPromosResponse } from '../model/getPromosResponse';
import { UpdatePromoOffersRequest } from '../model/updatePromoOffersRequest';
import { UpdatePromoOffersResponse } from '../model/updatePromoOffersResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class PromosService {
    private basePath: string = 'https://api.partner.market.yandex.ru';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Удаление товаров из акции
     * Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param deletePromoOffersRequest 
     
     */
    public deletePromoOffers(businessId: number, deletePromoOffersRequest: DeletePromoOffersRequest, observe?: 'body', headers?: Headers): Observable<DeletePromoOffersResponse>;
    public deletePromoOffers(businessId: number, deletePromoOffersRequest: DeletePromoOffersRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<DeletePromoOffersResponse>>;
    public deletePromoOffers(businessId: number, deletePromoOffersRequest: DeletePromoOffersRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling deletePromoOffers.');
        }

        if (deletePromoOffersRequest === null || deletePromoOffersRequest === undefined){
            throw new Error('Required parameter deletePromoOffersRequest was null or undefined when calling deletePromoOffers.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<DeletePromoOffersResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/promos/offers/delete`, deletePromoOffersRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DeletePromoOffersResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     * Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре &#x60;limit&#x60; не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param getPromoOffersRequest 
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
     * @param limit Количество значений на одной странице. 
     
     */
    public getPromoOffers(businessId: number, getPromoOffersRequest: GetPromoOffersRequest, pageToken?: string, limit?: number, observe?: 'body', headers?: Headers): Observable<GetPromoOffersResponse>;
    public getPromoOffers(businessId: number, getPromoOffersRequest: GetPromoOffersRequest, pageToken?: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetPromoOffersResponse>>;
    public getPromoOffers(businessId: number, getPromoOffersRequest: GetPromoOffersRequest, pageToken?: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getPromoOffers.');
        }

        if (getPromoOffersRequest === null || getPromoOffersRequest === undefined){
            throw new Error('Required parameter getPromoOffersRequest was null or undefined when calling getPromoOffers.');
        }

        let queryParameters: string[] = [];
        if (pageToken !== undefined) {
            queryParameters.push('pageToken='+encodeURIComponent(String(pageToken)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetPromoOffersResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/promos/offers?${queryParameters.join('&')}`, getPromoOffersRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetPromoOffersResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Получение списка акций
     * Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр &#x60;participation&#x60;.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param getPromosRequest 
     
     */
    public getPromos(businessId: number, getPromosRequest?: GetPromosRequest, observe?: 'body', headers?: Headers): Observable<GetPromosResponse>;
    public getPromos(businessId: number, getPromosRequest?: GetPromosRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetPromosResponse>>;
    public getPromos(businessId: number, getPromosRequest?: GetPromosRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getPromos.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GetPromosResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/promos`, getPromosRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetPromosResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Добавление товаров в акцию или изменение их цен
     * Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param updatePromoOffersRequest 
     
     */
    public updatePromoOffers(businessId: number, updatePromoOffersRequest: UpdatePromoOffersRequest, observe?: 'body', headers?: Headers): Observable<UpdatePromoOffersResponse>;
    public updatePromoOffers(businessId: number, updatePromoOffersRequest: UpdatePromoOffersRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<UpdatePromoOffersResponse>>;
    public updatePromoOffers(businessId: number, updatePromoOffersRequest: UpdatePromoOffersRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling updatePromoOffers.');
        }

        if (updatePromoOffersRequest === null || updatePromoOffersRequest === undefined){
            throw new Error('Required parameter updatePromoOffersRequest was null or undefined when calling updatePromoOffers.');
        }

        // authentication (OAuth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UpdatePromoOffersResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/promos/offers/update`, updatePromoOffersRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <UpdatePromoOffersResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
