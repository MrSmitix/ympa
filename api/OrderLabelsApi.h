/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderLabelsApi.h
 *
 * 
 */

#ifndef OrderLabelsApi_H_
#define OrderLabelsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GetOrderLabelsDataResponse.h"
#include "PageFormatType.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OrderLabelsApiException: public std::exception
{
public:
    OrderLabelsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace OrderLabelsApiResources {
/// <summary>
/// Готовый ярлык‑наклейка для коробки в заказе
/// </summary>
/// <remarks>
/// Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & orderId, int64_t & shipmentId, int64_t & boxId, PageFormatType & format)> handler_GET_func =
            [](int64_t &, int64_t &, int64_t &, int64_t &, PageFormatType &) -> std::pair<int, std::string>
                { throw OrderLabelsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & orderId, int64_t & shipmentId, int64_t & boxId, PageFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrderLabelsApiException(const OrderLabelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Готовые ярлыки‑наклейки на все коробки в одном заказе
/// </summary>
/// <remarks>
/// Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int64_t & campaignId, int64_t & orderId, PageFormatType & format)> handler_GET_func =
            [](int64_t &, int64_t &, PageFormatType &) -> std::pair<int, std::string>
                { throw OrderLabelsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t & campaignId, int64_t & orderId, PageFormatType & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrderLabelsApiException(const OrderLabelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Данные для самостоятельного изготовления ярлыков
/// </summary>
/// <remarks>
/// Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource: public restbed::Resource
{
public:
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(const std::string& context = "");
    virtual ~CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource() = default;

    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(
        const CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource& other) = default; // copy constructor
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource&& other) noexcept = default; // move constructor

    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource& operator=(const CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource& other) = default; // copy assignment
    CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource& operator=(CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GetOrderLabelsDataResponse>(
        int64_t & campaignId, int64_t & orderId)> handler_GET_func =
            [](int64_t &, int64_t &) -> std::pair<int, GetOrderLabelsDataResponse>
                { throw OrderLabelsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GetOrderLabelsDataResponse> handler_GET(
        int64_t & campaignId, int64_t & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrderLabelsApiException(const OrderLabelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace OrderLabelsApiResources */

using OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource [[deprecated]] = OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource;
using OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource [[deprecated]] = OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource;
using OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource [[deprecated]] = OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource;

//
// The restbed service to actually implement the REST server
//
class  OrderLabelsApi
{
public:
    explicit OrderLabelsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OrderLabelsApi();

    std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> getCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource();
    std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> getCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource();
    std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> getCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource();

    void setResource(std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> resource);
    void setResource(std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> resource);
    void setResource(std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> spOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource);
    [[deprecated("use setResource()")]]
    virtual void setOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> spOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource);
    [[deprecated("use setResource()")]]
    virtual void setOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> spOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource;
    std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource;
    std::shared_ptr<OrderLabelsApiResources::CampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> m_spCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OrderLabelsApi_H_ */

