/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderLabelsApi.h
 *
 * 
 */

#ifndef OrderLabelsApi_H_
#define OrderLabelsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "GetOrderLabelsDataResponse.h"
#include "PageFormatType.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OrderLabelsApiException: public std::exception
{
public:
    OrderLabelsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Готовый ярлык‑наклейка для коробки в заказе
/// </summary>
/// <remarks>
/// Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource: public restbed::Resource
{
public:
    OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(const std::string& context = "");
    virtual ~OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, int64_t const & shipmentId, int64_t const & boxId, std::shared_ptr<PageFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }

    virtual int64_t getPathParam_shipmentId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("shipmentId", 0L);
    }

    virtual int64_t getPathParam_boxId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("boxId", 0L);
    }



    virtual std::pair<int, std::string> handleOrderLabelsApiException(const OrderLabelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Готовые ярлыки‑наклейки на все коробки в одном заказе
/// </summary>
/// <remarks>
/// Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource: public restbed::Resource
{
public:
    OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(const std::string& context = "");
    virtual ~OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int64_t const & campaignId, int64_t const & orderId, std::shared_ptr<PageFormatType> const & format);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleOrderLabelsApiException(const OrderLabelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Данные для самостоятельного изготовления ярлыков
/// </summary>
/// <remarks>
/// Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
/// </remarks>
class  OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource: public restbed::Resource
{
public:
    OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(const std::string& context = "");
    virtual ~OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GetOrderLabelsDataResponse>> handler_GET(
        int64_t const & campaignId, int64_t const & orderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int64_t getPathParam_campaignId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("campaignId", 0L);
    }

    virtual int64_t getPathParam_orderId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("orderId", 0L);
    }



    virtual std::pair<int, std::string> handleOrderLabelsApiException(const OrderLabelsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  OrderLabelsApi
{
public:
    explicit OrderLabelsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OrderLabelsApi();

    virtual void setOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource(std::shared_ptr<OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> spOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource);
    virtual void setOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource(std::shared_ptr<OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> spOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource);
    virtual void setOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource(std::shared_ptr<OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> spOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource> m_spOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryShipmentsShipmentIdBoxesBoxIdLabelResource;
    std::shared_ptr<OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource> m_spOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsResource;
    std::shared_ptr<OrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource> m_spOrderLabelsApiCampaignsCampaignIdOrdersOrderIdDeliveryLabelsDataResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OrderLabelsApi_H_ */

